
MESC_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae84  0800ae84  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae84  0800ae84  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae84  0800ae84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae84  0800ae84  0001ae84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae88  0800ae88  0001ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ae8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000010  0800ae9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000de4  0800ae9c  00020de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226f9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004134  00000000  00000000  00042739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba0  00000000  00000000  00046870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c8  00000000  00000000  00048410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f969  00000000  00000000  00049dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000189b5  00000000  00000000  00069741  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9dfb  00000000  00000000  000820f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000741c  00000000  00000000  0013bf6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae34 	.word	0x0800ae34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800ae34 	.word	0x0800ae34

080001d0 <BLDCInit>:
#include "MESChw_setup.h"

extern TIM_HandleTypeDef htim1;


void BLDCInit(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	BLDCVars.ReqCurrent=0;					//Start the motor at 0 current
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <BLDCInit+0x58>)
 80001d6:	f04f 0200 	mov.w	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
	BLDCVars.BLDCduty=0;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <BLDCInit+0x58>)
 80001de:	2200      	movs	r2, #0
 80001e0:	605a      	str	r2, [r3, #4]
	BLDCVars.CurrentChannel=0;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <BLDCInit+0x58>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
	BLDCVars.pGain=1023*motor.Rphase/48; 	//wtf should I set the gain as by default... V/Amp error...Perhaps base it on Rphase and the bus voltage (nominally 48V)? But we don;t know the exact bus voltage yet...
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <BLDCInit+0x5c>)
 80001ea:	edd3 7a00 	vldr	s15, [r3]
 80001ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000230 <BLDCInit+0x60>
 80001f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80001f6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000234 <BLDCInit+0x64>
 80001fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80001fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000202:	ee17 2a90 	vmov	r2, s15
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <BLDCInit+0x58>)
 8000208:	611a      	str	r2, [r3, #16]
	BLDCVars.iGain=BLDCVars.pGain;			//Initially, let's just make the iGain the same as the pGain, so after 1 second their contributions will be equal.
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <BLDCInit+0x58>)
 800020c:	691b      	ldr	r3, [r3, #16]
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <BLDCInit+0x58>)
 8000210:	6153      	str	r3, [r2, #20]
	BLDCVars.BLDCEstate=GetHallState();
 8000212:	f000 f941 	bl	8000498 <GetHallState>
 8000216:	4602      	mov	r2, r0
 8000218:	4b03      	ldr	r3, [pc, #12]	; (8000228 <BLDCInit+0x58>)
 800021a:	609a      	str	r2, [r3, #8]
	BLDCState=BLDC_FORWARDS;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <BLDCInit+0x68>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	2000051c 	.word	0x2000051c
 800022c:	20000538 	.word	0x20000538
 8000230:	447fc000 	.word	0x447fc000
 8000234:	42400000 	.word	0x42400000
 8000238:	20000535 	.word	0x20000535

0800023c <BLDCCommuteHall>:


void BLDCCommuteHall(){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
int CurrentHallState=GetHallState(); //Borrow the hall state detection from the FOC system
 8000242:	f000 f929 	bl	8000498 <GetHallState>
 8000246:	6078      	str	r0, [r7, #4]

static int LastHallState=7;	//Initialise the LastHallState at a value that means it will call the commutation and correctly set the current measurement channel, avoiding a runaway on the PI loop

if(BLDCState==BLDC_FORWARDS){
 8000248:	4b48      	ldr	r3, [pc, #288]	; (800036c <BLDCCommuteHall+0x130>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d119      	bne.n	8000284 <BLDCCommuteHall+0x48>
	if(!(LastHallState==CurrentHallState)){
 8000250:	4b47      	ldr	r3, [pc, #284]	; (8000370 <BLDCCommuteHall+0x134>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	429a      	cmp	r2, r3
 8000258:	f000 8084 	beq.w	8000364 <BLDCCommuteHall+0x128>
		BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	1c59      	adds	r1, r3, #1
 8000260:	4b44      	ldr	r3, [pc, #272]	; (8000374 <BLDCCommuteHall+0x138>)
 8000262:	fb83 3201 	smull	r3, r2, r3, r1
 8000266:	17cb      	asrs	r3, r1, #31
 8000268:	1ad2      	subs	r2, r2, r3
 800026a:	4613      	mov	r3, r2
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	4413      	add	r3, r2
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	1aca      	subs	r2, r1, r3
 8000274:	4b40      	ldr	r3, [pc, #256]	; (8000378 <BLDCCommuteHall+0x13c>)
 8000276:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the next state to generate forward torque
 8000278:	f000 f880 	bl	800037c <writeBLDC>
		LastHallState=CurrentHallState;		//Avoid repeatedly writing the registers
 800027c:	4a3c      	ldr	r2, [pc, #240]	; (8000370 <BLDCCommuteHall+0x134>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]
//Disable the drivers, freewheel
phU_Break();
phV_Break();
phW_Break();
}
}
 8000282:	e06f      	b.n	8000364 <BLDCCommuteHall+0x128>
else if(BLDCState==BLDC_BACKWARDS){
 8000284:	4b39      	ldr	r3, [pc, #228]	; (800036c <BLDCCommuteHall+0x130>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b02      	cmp	r3, #2
 800028a:	d118      	bne.n	80002be <BLDCCommuteHall+0x82>
	if(!(LastHallState==CurrentHallState)){
 800028c:	4b38      	ldr	r3, [pc, #224]	; (8000370 <BLDCCommuteHall+0x134>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	429a      	cmp	r2, r3
 8000294:	d066      	beq.n	8000364 <BLDCCommuteHall+0x128>
		BLDCVars.BLDCEstate=(CurrentHallState+5)%6;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	1d59      	adds	r1, r3, #5
 800029a:	4b36      	ldr	r3, [pc, #216]	; (8000374 <BLDCCommuteHall+0x138>)
 800029c:	fb83 3201 	smull	r3, r2, r3, r1
 80002a0:	17cb      	asrs	r3, r1, #31
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	4613      	mov	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	4413      	add	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	1aca      	subs	r2, r1, r3
 80002ae:	4b32      	ldr	r3, [pc, #200]	; (8000378 <BLDCCommuteHall+0x13c>)
 80002b0:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the previous state to generate reverse torque
 80002b2:	f000 f863 	bl	800037c <writeBLDC>
		LastHallState=CurrentHallState;
 80002b6:	4a2e      	ldr	r2, [pc, #184]	; (8000370 <BLDCCommuteHall+0x134>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	e052      	b.n	8000364 <BLDCCommuteHall+0x128>
else if(BLDCState==BLDC_BRAKE){
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <BLDCCommuteHall+0x130>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d148      	bne.n	8000358 <BLDCCommuteHall+0x11c>
		if(((CurrentHallState-LastHallState)%6)>1){
 80002c6:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <BLDCCommuteHall+0x134>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	1ad1      	subs	r1, r2, r3
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <BLDCCommuteHall+0x138>)
 80002d0:	fb83 3201 	smull	r3, r2, r3, r1
 80002d4:	17cb      	asrs	r3, r1, #31
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	1aca      	subs	r2, r1, r3
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	dd13      	ble.n	800030e <BLDCCommuteHall+0xd2>
			BLDCVars.BLDCEstate=(CurrentHallState-1)%6;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	1e59      	subs	r1, r3, #1
 80002ea:	4b22      	ldr	r3, [pc, #136]	; (8000374 <BLDCCommuteHall+0x138>)
 80002ec:	fb83 3201 	smull	r3, r2, r3, r1
 80002f0:	17cb      	asrs	r3, r1, #31
 80002f2:	1ad2      	subs	r2, r2, r3
 80002f4:	4613      	mov	r3, r2
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	4413      	add	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	1aca      	subs	r2, r1, r3
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <BLDCCommuteHall+0x13c>)
 8000300:	609a      	str	r2, [r3, #8]
			writeBLDC();
 8000302:	f000 f83b 	bl	800037c <writeBLDC>
			LastHallState=CurrentHallState;
 8000306:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <BLDCCommuteHall+0x134>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	e02a      	b.n	8000364 <BLDCCommuteHall+0x128>
		else if(((CurrentHallState-LastHallState)%6)<-1){
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <BLDCCommuteHall+0x134>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	1ad1      	subs	r1, r2, r3
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <BLDCCommuteHall+0x138>)
 8000318:	fb83 3201 	smull	r3, r2, r3, r1
 800031c:	17cb      	asrs	r3, r1, #31
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	1aca      	subs	r2, r1, r3
 800032a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800032e:	da19      	bge.n	8000364 <BLDCCommuteHall+0x128>
			BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	1c59      	adds	r1, r3, #1
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <BLDCCommuteHall+0x138>)
 8000336:	fb83 3201 	smull	r3, r2, r3, r1
 800033a:	17cb      	asrs	r3, r1, #31
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4613      	mov	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4413      	add	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1aca      	subs	r2, r1, r3
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <BLDCCommuteHall+0x13c>)
 800034a:	609a      	str	r2, [r3, #8]
			writeBLDC();
 800034c:	f000 f816 	bl	800037c <writeBLDC>
			LastHallState=CurrentHallState;
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <BLDCCommuteHall+0x134>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
}
 8000356:	e005      	b.n	8000364 <BLDCCommuteHall+0x128>
phU_Break();
 8000358:	f000 f8e8 	bl	800052c <phU_Break>
phV_Break();
 800035c:	f000 f95a 	bl	8000614 <phV_Break>
phW_Break();
 8000360:	f000 f9cc 	bl	80006fc <phW_Break>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000535 	.word	0x20000535
 8000370:	20000000 	.word	0x20000000
 8000374:	2aaaaaab 	.word	0x2aaaaaab
 8000378:	2000051c 	.word	0x2000051c

0800037c <writeBLDC>:

	BLDCVars.BLDCduty=Duty;

}

void writeBLDC(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	switch(BLDCVars.BLDCEstate){
 8000380:	4b43      	ldr	r3, [pc, #268]	; (8000490 <writeBLDC+0x114>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	2b05      	cmp	r3, #5
 8000386:	f200 8081 	bhi.w	800048c <writeBLDC+0x110>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <writeBLDC+0x14>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a9 	.word	0x080003a9
 8000394:	080003cf 	.word	0x080003cf
 8000398:	080003f5 	.word	0x080003f5
 800039c:	0800041b 	.word	0x0800041b
 80003a0:	08000441 	.word	0x08000441
 80003a4:	08000467 	.word	0x08000467
	case 0:
		//disable phase first
		phW_Break();
 80003a8:	f000 f9a8 	bl	80006fc <phW_Break>
		//WritePWM values
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 80003ac:	4b38      	ldr	r3, [pc, #224]	; (8000490 <writeBLDC+0x114>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	4b38      	ldr	r3, [pc, #224]	; (8000494 <writeBLDC+0x118>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=0;
 80003b6:	4b37      	ldr	r3, [pc, #220]	; (8000494 <writeBLDC+0x118>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2200      	movs	r2, #0
 80003bc:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 80003be:	f000 f8ef 	bl	80005a0 <phU_Enable>
		phV_Enable();
 80003c2:	f000 f961 	bl	8000688 <phV_Enable>
		BLDCVars.CurrentChannel=1; //Write the field into which the lowside current will flow, to be retrieved from the FOC_measurement_vars
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <writeBLDC+0x114>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	60da      	str	r2, [r3, #12]
		break;
 80003cc:	e05e      	b.n	800048c <writeBLDC+0x110>

	case 1:
		phV_Break();
 80003ce:	f000 f921 	bl	8000614 <phV_Break>
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <writeBLDC+0x114>)
 80003d4:	685a      	ldr	r2, [r3, #4]
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <writeBLDC+0x118>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=0;
 80003dc:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <writeBLDC+0x118>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2200      	movs	r2, #0
 80003e2:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 80003e4:	f000 f8dc 	bl	80005a0 <phU_Enable>
		phW_Enable();
 80003e8:	f000 f9c2 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=2;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <writeBLDC+0x114>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	60da      	str	r2, [r3, #12]
		break;
 80003f2:	e04b      	b.n	800048c <writeBLDC+0x110>

	case 2:
		phU_Break();
 80003f4:	f000 f89a 	bl	800052c <phU_Break>
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <writeBLDC+0x114>)
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <writeBLDC+0x118>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=0;
 8000402:	4b24      	ldr	r3, [pc, #144]	; (8000494 <writeBLDC+0x118>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2200      	movs	r2, #0
 8000408:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 800040a:	f000 f93d 	bl	8000688 <phV_Enable>
		phW_Enable();
 800040e:	f000 f9af 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=2;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <writeBLDC+0x114>)
 8000414:	2202      	movs	r2, #2
 8000416:	60da      	str	r2, [r3, #12]
		break;
 8000418:	e038      	b.n	800048c <writeBLDC+0x110>

	case 3:
		phW_Break();
 800041a:	f000 f96f 	bl	80006fc <phW_Break>
		htim1.Instance->CCR1=0;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <writeBLDC+0x118>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2200      	movs	r2, #0
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <writeBLDC+0x114>)
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <writeBLDC+0x118>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 8000430:	f000 f8b6 	bl	80005a0 <phU_Enable>
		phV_Enable();
 8000434:	f000 f928 	bl	8000688 <phV_Enable>
		BLDCVars.CurrentChannel=0;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <writeBLDC+0x114>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
		break;
 800043e:	e025      	b.n	800048c <writeBLDC+0x110>

	case 4:
		phV_Break();
 8000440:	f000 f8e8 	bl	8000614 <phV_Break>
		htim1.Instance->CCR1=0;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <writeBLDC+0x118>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <writeBLDC+0x114>)
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <writeBLDC+0x118>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 8000456:	f000 f8a3 	bl	80005a0 <phU_Enable>
		phW_Enable();
 800045a:	f000 f989 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=0;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <writeBLDC+0x114>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
		break;
 8000464:	e012      	b.n	800048c <writeBLDC+0x110>

	case 5:
		phU_Break();
 8000466:	f000 f861 	bl	800052c <phU_Break>
		htim1.Instance->CCR2=0;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <writeBLDC+0x118>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <writeBLDC+0x114>)
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <writeBLDC+0x118>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 800047c:	f000 f904 	bl	8000688 <phV_Enable>
		phW_Enable();
 8000480:	f000 f976 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=1;
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <writeBLDC+0x114>)
 8000486:	2201      	movs	r2, #1
 8000488:	60da      	str	r2, [r3, #12]
		break;
 800048a:	bf00      	nop

	}
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000051c 	.word	0x2000051c
 8000494:	20000a38 	.word	0x20000a38

08000498 <GetHallState>:
	phU_Break();
	phV_Break();
	phW_Break();
}

int GetHallState(){
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0


	int hallState=0;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
	hallState=((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))<<1)|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))<<2));
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	4820      	ldr	r0, [pc, #128]	; (8000528 <GetHallState+0x90>)
 80004a6:	f003 fff7 	bl	8004498 <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461c      	mov	r4, r3
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <GetHallState+0x90>)
 80004b2:	f003 fff1 	bl	8004498 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	431c      	orrs	r4, r3
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <GetHallState+0x90>)
 80004c2:	f003 ffe9 	bl	8004498 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4323      	orrs	r3, r4
 80004cc:	607b      	str	r3, [r7, #4]
	//ToDo Using these HAL_GPIO_ReadPin functions is very computationally expensive, should replace with a register read->byte mask->rightshift
	switch(hallState)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b07      	cmp	r3, #7
 80004d2:	d823      	bhi.n	800051c <GetHallState+0x84>
 80004d4:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <GetHallState+0x44>)
 80004d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004da:	bf00      	nop
 80004dc:	080004fd 	.word	0x080004fd
 80004e0:	08000505 	.word	0x08000505
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	08000509 	.word	0x08000509
 80004ec:	08000515 	.word	0x08000515
 80004f0:	08000519 	.word	0x08000519
 80004f4:	08000511 	.word	0x08000511
 80004f8:	08000501 	.word	0x08000501
		{
			case 0:
				return 7; //7 is the no hall sensor detected state (all low)
 80004fc:	2307      	movs	r3, #7
 80004fe:	e00e      	b.n	800051e <GetHallState+0x86>
				break;
			case 7:
				return 6; //6 is the no hall sensor detected state (all high)
 8000500:	2306      	movs	r3, #6
 8000502:	e00c      	b.n	800051e <GetHallState+0x86>
				break;
//Implement the hall table order here, depending how the hall sensors are configured
			case 1:
				return 0;
 8000504:	2300      	movs	r3, #0
 8000506:	e00a      	b.n	800051e <GetHallState+0x86>
				break;
			case 3:
				return 1;
 8000508:	2301      	movs	r3, #1
 800050a:	e008      	b.n	800051e <GetHallState+0x86>
				break;
			case 2:
				return 2;
 800050c:	2302      	movs	r3, #2
 800050e:	e006      	b.n	800051e <GetHallState+0x86>
				break;
			case 6:
				return 3;
 8000510:	2303      	movs	r3, #3
 8000512:	e004      	b.n	800051e <GetHallState+0x86>
				break;
			case 4:
				return 4;
 8000514:	2304      	movs	r3, #4
 8000516:	e002      	b.n	800051e <GetHallState+0x86>
				break;
			case 5:
				return 5;
 8000518:	2305      	movs	r3, #5
 800051a:	e000      	b.n	800051e <GetHallState+0x86>
				break;
			default:
				return 8;
 800051c:	2308      	movs	r3, #8
				break;
		}
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	bf00      	nop
 8000528:	48000400 	.word	0x48000400

0800052c <phU_Break>:


uint32_t tmpccmrx;	//Temporary buffer which is used to turn on/off phase PWMs
//Turn all phase U FETs off, Tristate the HBridge output - For BLDC mode mainly, but also used for measuring, software fault detection and recovery
//ToDo TEST THOROUGHLY The register manipulations for the break functions were used previously on an STM32F042K6 for my first BLDC drive, on TIM1, which should be identical, but definitely needs checking
void phU_Break(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <phU_Break+0x6c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <phU_Break+0x70>)
 8000538:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <phU_Break+0x70>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <phU_Break+0x70>)
 8000548:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <phU_Break+0x70>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f023 0303 	bic.w	r3, r3, #3
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <phU_Break+0x70>)
 8000554:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <phU_Break+0x70>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800055e:	4a0f      	ldr	r2, [pc, #60]	; (800059c <phU_Break+0x70>)
 8000560:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <phU_Break+0x6c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <phU_Break+0x70>)
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <phU_Break+0x6c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6a1a      	ldr	r2, [r3, #32]
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <phU_Break+0x6c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f022 0201 	bic.w	r2, r2, #1
 800057a:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <phU_Break+0x6c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <phU_Break+0x6c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 0204 	bic.w	r2, r2, #4
 800058a:	621a      	str	r2, [r3, #32]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000a38 	.word	0x20000a38
 800059c:	2000056c 	.word	0x2000056c

080005a0 <phU_Enable>:
//Basically un-break phase U, opposite of above...
void phU_Enable(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <phU_Enable+0x6c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a19      	ldr	r2, [pc, #100]	; (8000610 <phU_Enable+0x70>)
 80005ac:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <phU_Enable+0x70>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005ba:	4a15      	ldr	r2, [pc, #84]	; (8000610 <phU_Enable+0x70>)
 80005bc:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <phU_Enable+0x70>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f023 0303 	bic.w	r3, r3, #3
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <phU_Enable+0x70>)
 80005c8:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <phU_Enable+0x70>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <phU_Enable+0x70>)
 80005d4:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <phU_Enable+0x6c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <phU_Enable+0x70>)
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER |= TIM_CCER_CC1E;   //enable
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <phU_Enable+0x6c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a1a      	ldr	r2, [r3, #32]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <phU_Enable+0x6c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC1NE;   //enable
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <phU_Enable+0x6c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a1a      	ldr	r2, [r3, #32]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <phU_Enable+0x6c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f042 0204 	orr.w	r2, r2, #4
 80005fe:	621a      	str	r2, [r3, #32]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000a38 	.word	0x20000a38
 8000610:	2000056c 	.word	0x2000056c

08000614 <phV_Break>:

void phV_Break(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <phV_Break+0x6c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <phV_Break+0x70>)
 8000620:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <phV_Break+0x70>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800062a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <phV_Break+0x70>)
 8000630:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <phV_Break+0x70>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <phV_Break+0x70>)
 800063c:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE<<8;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <phV_Break+0x70>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <phV_Break+0x70>)
 8000648:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <phV_Break+0x6c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <phV_Break+0x70>)
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <phV_Break+0x6c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <phV_Break+0x6c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f022 0210 	bic.w	r2, r2, #16
 8000662:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <phV_Break+0x6c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <phV_Break+0x6c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000672:	621a      	str	r2, [r3, #32]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000a38 	.word	0x20000a38
 8000684:	2000056c 	.word	0x2000056c

08000688 <phV_Enable>:

void phV_Enable(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <phV_Enable+0x6c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <phV_Enable+0x70>)
 8000694:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <phV_Enable+0x70>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800069e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <phV_Enable+0x70>)
 80006a4:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <phV_Enable+0x70>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <phV_Enable+0x70>)
 80006b0:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1<<8;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <phV_Enable+0x70>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <phV_Enable+0x70>)
 80006bc:	6013      	str	r3, [r2, #0]
htim1.Instance->CCMR1 = tmpccmrx;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <phV_Enable+0x6c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <phV_Enable+0x70>)
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	619a      	str	r2, [r3, #24]
htim1.Instance->CCER |= TIM_CCER_CC2E;   //enable
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <phV_Enable+0x6c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6a1a      	ldr	r2, [r3, #32]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <phV_Enable+0x6c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0210 	orr.w	r2, r2, #16
 80006d6:	621a      	str	r2, [r3, #32]
htim1.Instance->CCER |= TIM_CCER_CC2NE;   //enable
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <phV_Enable+0x6c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a1a      	ldr	r2, [r3, #32]
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <phV_Enable+0x6c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e6:	621a      	str	r2, [r3, #32]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000a38 	.word	0x20000a38
 80006f8:	2000056c 	.word	0x2000056c

080006fc <phW_Break>:

void phW_Break(){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	   tmpccmrx = htim1.Instance->CCMR2;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <phW_Break+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <phW_Break+0x70>)
 8000708:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_OC3M;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <phW_Break+0x70>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <phW_Break+0x70>)
 8000718:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_CC3S;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <phW_Break+0x70>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 0303 	bic.w	r3, r3, #3
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <phW_Break+0x70>)
 8000724:	6013      	str	r3, [r2, #0]
	   tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <phW_Break+0x70>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <phW_Break+0x70>)
 8000730:	6013      	str	r3, [r2, #0]
	   htim1.Instance->CCMR2 = tmpccmrx;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <phW_Break+0x6c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <phW_Break+0x70>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	61da      	str	r2, [r3, #28]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <phW_Break+0x6c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a1a      	ldr	r2, [r3, #32]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <phW_Break+0x6c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800074a:	621a      	str	r2, [r3, #32]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <phW_Break+0x6c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a1a      	ldr	r2, [r3, #32]
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <phW_Break+0x6c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800075a:	621a      	str	r2, [r3, #32]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000a38 	.word	0x20000a38
 800076c:	2000056c 	.word	0x2000056c

08000770 <phW_Enable>:

void phW_Enable(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  	tmpccmrx = htim1.Instance->CCMR2;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <phW_Enable+0x6c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <phW_Enable+0x70>)
 800077c:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <phW_Enable+0x70>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <phW_Enable+0x70>)
 800078c:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <phW_Enable+0x70>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <phW_Enable+0x70>)
 8000798:	6013      	str	r3, [r2, #0]
    tmpccmrx |= TIM_OCMODE_PWM1;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <phW_Enable+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <phW_Enable+0x70>)
 80007a4:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCMR2 = tmpccmrx;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <phW_Enable+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <phW_Enable+0x70>)
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	61da      	str	r2, [r3, #28]
    htim1.Instance->CCER |= TIM_CCER_CC3E;   //enable
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <phW_Enable+0x6c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <phW_Enable+0x6c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007be:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER |= TIM_CCER_CC3NE;   //enable
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <phW_Enable+0x6c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6a1a      	ldr	r2, [r3, #32]
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <phW_Enable+0x6c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007ce:	621a      	str	r2, [r3, #32]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000a38 	.word	0x20000a38
 80007e0:	2000056c 	.word	0x2000056c

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f001 fcba 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f8ae 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 fe66 	bl	80014c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f4:	f000 fe0a 	bl	800140c <MX_DMA_Init>
  MX_ADC1_Init();
 80007f8:	f000 f912 	bl	8000a20 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007fc:	f000 f9a0 	bl	8000b40 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000800:	f000 fa1c 	bl	8000c3c <MX_ADC3_Init>
  MX_COMP1_Init();
 8000804:	f000 fa8c 	bl	8000d20 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000808:	f000 faba 	bl	8000d80 <MX_COMP2_Init>
  MX_COMP4_Init();
 800080c:	f000 fae8 	bl	8000de0 <MX_COMP4_Init>
  MX_COMP7_Init();
 8000810:	f000 fb16 	bl	8000e40 <MX_COMP7_Init>
  MX_I2C1_Init();
 8000814:	f000 fb44 	bl	8000ea0 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8000818:	f000 fb80 	bl	8000f1c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800081c:	f000 fba4 	bl	8000f68 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000820:	f000 fbc8 	bl	8000fb4 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000824:	f000 fbec 	bl	8001000 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000828:	f000 fca4 	bl	8001174 <MX_TIM3_Init>
  MX_TIM4_Init();
 800082c:	f000 fd28 	bl	8001280 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000830:	f000 fdbc 	bl	80013ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000834:	2100      	movs	r1, #0
 8000836:	4836      	ldr	r0, [pc, #216]	; (8000910 <main+0x12c>)
 8000838:	f002 fb1a 	bl	8002e70 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800083c:	2100      	movs	r1, #0
 800083e:	4835      	ldr	r0, [pc, #212]	; (8000914 <main+0x130>)
 8000840:	f002 fb16 	bl	8002e70 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000844:	2100      	movs	r1, #0
 8000846:	4834      	ldr	r0, [pc, #208]	; (8000918 <main+0x134>)
 8000848:	f002 fb12 	bl	8002e70 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(50);
 800084c:	2032      	movs	r0, #50	; 0x32
 800084e:	f001 fcbd 	bl	80021cc <HAL_Delay>
  HAL_OPAMP_SelfCalibrate(&hopamp1);
  HAL_Delay(50);
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
  HAL_OPAMP_Init(&hopamp1);
*/
  HAL_Delay(50);
 8000852:	2032      	movs	r0, #50	; 0x32
 8000854:	f001 fcba 	bl	80021cc <HAL_Delay>
HAL_OPAMP_Start(&hopamp1);
 8000858:	4830      	ldr	r0, [pc, #192]	; (800091c <main+0x138>)
 800085a:	f004 f801 	bl	8004860 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp2);
 800085e:	4830      	ldr	r0, [pc, #192]	; (8000920 <main+0x13c>)
 8000860:	f003 fffe 	bl	8004860 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8000864:	482f      	ldr	r0, [pc, #188]	; (8000924 <main+0x140>)
 8000866:	f003 fffb 	bl	8004860 <HAL_OPAMP_Start>

BLDCInit();
 800086a:	f7ff fcb1 	bl	80001d0 <BLDCInit>

HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800086e:	2100      	movs	r1, #0
 8000870:	482d      	ldr	r0, [pc, #180]	; (8000928 <main+0x144>)
 8000872:	f006 f909 	bl	8006a88 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000876:	2100      	movs	r1, #0
 8000878:	482b      	ldr	r0, [pc, #172]	; (8000928 <main+0x144>)
 800087a:	f007 fa9b 	bl	8007db4 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800087e:	2104      	movs	r1, #4
 8000880:	4829      	ldr	r0, [pc, #164]	; (8000928 <main+0x144>)
 8000882:	f006 f901 	bl	8006a88 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000886:	2104      	movs	r1, #4
 8000888:	4827      	ldr	r0, [pc, #156]	; (8000928 <main+0x144>)
 800088a:	f007 fa93 	bl	8007db4 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800088e:	2108      	movs	r1, #8
 8000890:	4825      	ldr	r0, [pc, #148]	; (8000928 <main+0x144>)
 8000892:	f006 f8f9 	bl	8006a88 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000896:	2108      	movs	r1, #8
 8000898:	4823      	ldr	r0, [pc, #140]	; (8000928 <main+0x144>)
 800089a:	f007 fa8b 	bl	8007db4 <HAL_TIMEx_PWMN_Start>

HAL_COMP_Start(&hcomp1);
 800089e:	4823      	ldr	r0, [pc, #140]	; (800092c <main+0x148>)
 80008a0:	f003 f8fa 	bl	8003a98 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp2);
 80008a4:	4822      	ldr	r0, [pc, #136]	; (8000930 <main+0x14c>)
 80008a6:	f003 f8f7 	bl	8003a98 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp4);
 80008aa:	4822      	ldr	r0, [pc, #136]	; (8000934 <main+0x150>)
 80008ac:	f003 f8f4 	bl	8003a98 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp7);
 80008b0:	4821      	ldr	r0, [pc, #132]	; (8000938 <main+0x154>)
 80008b2:	f003 f8f1 	bl	8003a98 <HAL_COMP_Start>
HAL_Delay(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ba:	f001 fc87 	bl	80021cc <HAL_Delay>
__HAL_TIM_MOE_ENABLE(&htim1); // initialising the comparators triggers the break state
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <main+0x144>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <main+0x144>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008cc:	645a      	str	r2, [r3, #68]	; 0x44

BLDCVars.BLDCduty=70;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <main+0x158>)
 80008d0:	2246      	movs	r2, #70	; 0x46
 80008d2:	605a      	str	r2, [r3, #4]

HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&measurement_buffers.RawADC[0][0], 3);
 80008d4:	2203      	movs	r2, #3
 80008d6:	491a      	ldr	r1, [pc, #104]	; (8000940 <main+0x15c>)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <main+0x12c>)
 80008da:	f001 fea1 	bl	8002620 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&measurement_buffers.RawADC[1][0], 3);
 80008de:	2203      	movs	r2, #3
 80008e0:	4918      	ldr	r1, [pc, #96]	; (8000944 <main+0x160>)
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <main+0x130>)
 80008e4:	f001 fe9c 	bl	8002620 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&measurement_buffers.RawADC[2][0], 1);
 80008e8:	2201      	movs	r2, #1
 80008ea:	4917      	ldr	r1, [pc, #92]	; (8000948 <main+0x164>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <main+0x134>)
 80008ee:	f001 fe97 	bl	8002620 <HAL_ADC_Start_DMA>

	//Add a little area in which I can mess about without the RTOS
while(1){
	//BLDCCommuteHall(); //This has been moved to the DMA1 channel one IRQ, which triggers after every ADC measurement, on every PWM pulse.
if(	BLDCVars.BLDCduty<700){
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <main+0x158>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80008fa:	dafa      	bge.n	80008f2 <main+0x10e>
	BLDCVars.BLDCduty= 	BLDCVars.BLDCduty+10;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <main+0x158>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	330a      	adds	r3, #10
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <main+0x158>)
 8000904:	6053      	str	r3, [r2, #4]
	HAL_Delay(100);
 8000906:	2064      	movs	r0, #100	; 0x64
 8000908:	f001 fc60 	bl	80021cc <HAL_Delay>
if(	BLDCVars.BLDCduty<700){
 800090c:	e7f1      	b.n	80008f2 <main+0x10e>
 800090e:	bf00      	nop
 8000910:	2000091c 	.word	0x2000091c
 8000914:	200006ac 	.word	0x200006ac
 8000918:	2000096c 	.word	0x2000096c
 800091c:	200008b8 	.word	0x200008b8
 8000920:	20000574 	.word	0x20000574
 8000924:	20000814 	.word	0x20000814
 8000928:	20000a38 	.word	0x20000a38
 800092c:	20000848 	.word	0x20000848
 8000930:	20000ac0 	.word	0x20000ac0
 8000934:	200008ec 	.word	0x200008ec
 8000938:	200009bc 	.word	0x200009bc
 800093c:	2000051c 	.word	0x2000051c
 8000940:	200004c8 	.word	0x200004c8
 8000944:	200004d4 	.word	0x200004d4
 8000948:	200004e0 	.word	0x200004e0

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09e      	sub	sp, #120	; 0x78
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f00a fa62 	bl	800ae24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	223c      	movs	r2, #60	; 0x3c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00a fa54 	bl	800ae24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800097c:	2303      	movs	r3, #3
 800097e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000980:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	2301      	movs	r3, #1
 800098c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098e:	2310      	movs	r3, #16
 8000990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800099c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009a0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 fccc 	bl	8005344 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009b2:	f000 fdc7 	bl	8001544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2302      	movs	r3, #2
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d0:	2102      	movs	r1, #2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 fbbe 	bl	8006154 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009de:	f000 fdb1 	bl	8001544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <SystemClock_Config+0xd0>)
 80009e4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80009ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4618      	mov	r0, r3
 8000a06:	f005 fe0d 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a10:	f000 fd98 	bl	8001544 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3778      	adds	r7, #120	; 0x78
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	000211a4 	.word	0x000211a4

08000a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a50:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a74:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a82:	2203      	movs	r2, #3
 8000a84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa0:	4826      	ldr	r0, [pc, #152]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000aa2:	f001 fbdd 	bl	8002260 <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aac:	f000 fd4a 	bl	8001544 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4820      	ldr	r0, [pc, #128]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000abc:	f002 fd56 	bl	800356c <HAL_ADCEx_MultiModeConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000ac6:	f000 fd3d 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000ae8:	f002 fa54 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000af2:	f000 fd27 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000b04:	f002 fa46 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000b0e:	f000 fd19 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b12:	2304      	movs	r3, #4
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b16:	2303      	movs	r3, #3
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_ADC1_Init+0x11c>)
 8000b24:	f002 fa36 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000b2e:	f000 fd09 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000091c 	.word	0x2000091c

08000b40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b58:	4a37      	ldr	r2, [pc, #220]	; (8000c38 <MX_ADC2_Init+0xf8>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b86:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bb2:	4820      	ldr	r0, [pc, #128]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000bb4:	f001 fb54 	bl	8002260 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000bbe:	f000 fcc1 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4815      	ldr	r0, [pc, #84]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000be0:	f002 f9d8 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000bea:	f000 fcab 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000c00:	f002 f9c8 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000c0a:	f000 fc9b 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c12:	2303      	movs	r3, #3
 8000c14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_ADC2_Init+0xf4>)
 8000c1c:	f002 f9ba 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8000c26:	f000 fc8d 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200006ac 	.word	0x200006ac
 8000c38:	50000100 	.word	0x50000100

08000c3c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c60:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <MX_ADC3_Init+0xe0>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c8e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000caa:	2208      	movs	r2, #8
 8000cac:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cba:	4817      	ldr	r0, [pc, #92]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000cbc:	f001 fad0 	bl	8002260 <HAL_ADC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 fc3d 	bl	8001544 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4810      	ldr	r0, [pc, #64]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000cd6:	f002 fc49 	bl	800356c <HAL_ADCEx_MultiModeConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000ce0:	f000 fc30 	bl	8001544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_ADC3_Init+0xdc>)
 8000d02:	f002 f947 	bl	8002f94 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000d0c:	f000 fc1a 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000096c 	.word	0x2000096c
 8000d1c:	50000400 	.word	0x50000400

08000d20 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <MX_COMP1_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d38:	f640 027f 	movw	r2, #2175	; 0x87f
 8000d3c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_COMP1_Init+0x58>)
 8000d64:	f002 fe18 	bl	8003998 <HAL_COMP_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 fbe9 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000848 	.word	0x20000848
 8000d7c:	4001001c 	.word	0x4001001c

08000d80 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_COMP2_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000d98:	f640 027f 	movw	r2, #2175	; 0x87f
 8000d9c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_COMP2_Init+0x58>)
 8000dc4:	f002 fde8 	bl	8003998 <HAL_COMP_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 fbb9 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000ac0 	.word	0x20000ac0
 8000ddc:	40010020 	.word	0x40010020

08000de0 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <MX_COMP4_Init+0x5c>)
 8000de8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000df8:	f640 027f 	movw	r2, #2175	; 0x87f
 8000dfc:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_COMP4_Init+0x58>)
 8000e24:	f002 fdb8 	bl	8003998 <HAL_COMP_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f000 fb89 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200008ec 	.word	0x200008ec
 8000e3c:	40010028 	.word	0x40010028

08000e40 <MX_COMP7_Init>:
  * @brief COMP7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP7_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END COMP7_Init 0 */

  /* USER CODE BEGIN COMP7_Init 1 */

  /* USER CODE END COMP7_Init 1 */
  hcomp7.Instance = COMP7;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MX_COMP7_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  hcomp7.Init.InvertingInput = COMP_INVERTINGINPUT_3_4VREFINT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	605a      	str	r2, [r3, #4]
  hcomp7.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hcomp7.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e58:	f640 027f 	movw	r2, #2175	; 0x87f
 8000e5c:	60da      	str	r2, [r3, #12]
  hcomp7.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hcomp7.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hcomp7.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hcomp7.Init.Mode = COMP_MODE_HIGHSPEED;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hcomp7.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  hcomp7.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp7) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_COMP7_Init+0x58>)
 8000e84:	f002 fd88 	bl	8003998 <HAL_COMP_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_COMP7_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 fb59 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN COMP7_Init 2 */

  /* USER CODE END COMP7_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200009bc 	.word	0x200009bc
 8000e9c:	40010034 	.word	0x40010034

08000ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eac:	f240 220b 	movw	r2, #523	; 0x20b
 8000eb0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ede:	f003 faf3 	bl	80044c8 <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 fb2c 	bl	8001544 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ef0:	f003 fb79 	bl	80045e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000efa:	f000 fb23 	bl	8001544 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000f02:	f003 fbbb 	bl	800467c <HAL_I2CEx_ConfigDigitalFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f000 fb1a 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000740 	.word	0x20000740
 8000f18:	40005400 	.word	0x40005400

08000f1c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <MX_OPAMP1_Init+0x48>)
 8000f24:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f40:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f44:	621a      	str	r2, [r3, #32]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_OPAMP1_Init+0x44>)
 8000f4e:	f003 fbe1 	bl	8004714 <HAL_OPAMP_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 8000f58:	f000 faf4 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200008b8 	.word	0x200008b8
 8000f64:	40010038 	.word	0x40010038

08000f68 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <MX_OPAMP2_Init+0x48>)
 8000f70:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f8c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f90:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_OPAMP2_Init+0x44>)
 8000f9a:	f003 fbbb 	bl	8004714 <HAL_OPAMP_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 8000fa4:	f000 face 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000574 	.word	0x20000574
 8000fb0:	4001003c 	.word	0x4001003c

08000fb4 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <MX_OPAMP3_Init+0x48>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	60da      	str	r2, [r3, #12]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000fdc:	621a      	str	r2, [r3, #32]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_OPAMP3_Init+0x44>)
 8000fe6:	f003 fb95 	bl	8004714 <HAL_OPAMP_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_OPAMP3_Init+0x40>
  {
    Error_Handler();
 8000ff0:	f000 faa8 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000814 	.word	0x20000814
 8000ffc:	40010040 	.word	0x40010040

08001000 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b096      	sub	sp, #88	; 0x58
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	222c      	movs	r2, #44	; 0x2c
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f009 fef9 	bl	800ae24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <MX_TIM1_Init+0x16c>)
 8001034:	4a4e      	ldr	r2, [pc, #312]	; (8001170 <MX_TIM1_Init+0x170>)
 8001036:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <MX_TIM1_Init+0x16c>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800103e:	4b4b      	ldr	r3, [pc, #300]	; (800116c <MX_TIM1_Init+0x16c>)
 8001040:	2220      	movs	r2, #32
 8001042:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001044:	4b49      	ldr	r3, [pc, #292]	; (800116c <MX_TIM1_Init+0x16c>)
 8001046:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800104a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b47      	ldr	r3, [pc, #284]	; (800116c <MX_TIM1_Init+0x16c>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <MX_TIM1_Init+0x16c>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <MX_TIM1_Init+0x16c>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800105e:	4843      	ldr	r0, [pc, #268]	; (800116c <MX_TIM1_Init+0x16c>)
 8001060:	f005 fce6 	bl	8006a30 <HAL_TIM_PWM_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800106a:	f000 fa6b 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800106e:	2370      	movs	r3, #112	; 0x70
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800107e:	4619      	mov	r1, r3
 8001080:	483a      	ldr	r0, [pc, #232]	; (800116c <MX_TIM1_Init+0x16c>)
 8001082:	f006 fec7 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800108c:	f000 fa5a 	bl	8001544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001090:	2360      	movs	r3, #96	; 0x60
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 512;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	482d      	ldr	r0, [pc, #180]	; (800116c <MX_TIM1_Init+0x16c>)
 80010b8:	f005 ff2e 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80010c2:	f000 fa3f 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ca:	2204      	movs	r2, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4827      	ldr	r0, [pc, #156]	; (800116c <MX_TIM1_Init+0x16c>)
 80010d0:	f005 ff22 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80010da:	f000 fa33 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e2:	2208      	movs	r2, #8
 80010e4:	4619      	mov	r1, r3
 80010e6:	4821      	ldr	r0, [pc, #132]	; (800116c <MX_TIM1_Init+0x16c>)
 80010e8:	f005 ff16 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010f2:	f000 fa27 	bl	8001544 <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 80010f6:	2305      	movs	r3, #5
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fe:	220c      	movs	r2, #12
 8001100:	4619      	mov	r1, r3
 8001102:	481a      	ldr	r0, [pc, #104]	; (800116c <MX_TIM1_Init+0x16c>)
 8001104:	f005 ff08 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800110e:	f000 fa19 	bl	8001544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001116:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 8001122:	231e      	movs	r3, #30
 8001124:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001138:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800113a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 6;
 8001140:	2306      	movs	r3, #6
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM1_Init+0x16c>)
 800114e:	f006 fee1 	bl	8007f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001158:	f000 f9f4 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM1_Init+0x16c>)
 800115e:	f000 fda9 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	; 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000a38 	.word	0x20000a38
 8001170:	40012c00 	.word	0x40012c00

08001174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <MX_TIM3_Init+0x104>)
 80011a4:	4a35      	ldr	r2, [pc, #212]	; (800127c <MX_TIM3_Init+0x108>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_TIM3_Init+0x104>)
 80011aa:	2247      	movs	r2, #71	; 0x47
 80011ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <MX_TIM3_Init+0x104>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_TIM3_Init+0x104>)
 80011b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_TIM3_Init+0x104>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_TIM3_Init+0x104>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c8:	482b      	ldr	r0, [pc, #172]	; (8001278 <MX_TIM3_Init+0x104>)
 80011ca:	f005 fbdb 	bl	8006984 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80011d4:	f000 f9b6 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011d8:	4827      	ldr	r0, [pc, #156]	; (8001278 <MX_TIM3_Init+0x104>)
 80011da:	f005 fcad 	bl	8006b38 <HAL_TIM_IC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80011e4:	f000 f9ae 	bl	8001544 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011e8:	2304      	movs	r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011ec:	2350      	movs	r3, #80	; 0x50
 80011ee:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	481e      	ldr	r0, [pc, #120]	; (8001278 <MX_TIM3_Init+0x104>)
 8001200:	f005 ffbe 	bl	8007180 <HAL_TIM_SlaveConfigSynchro>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800120a:	f000 f99b 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <MX_TIM3_Init+0x104>)
 800121e:	f006 fdf9 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001228:	f000 f98c 	bl	8001544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM3_Init+0x104>)
 8001244:	f005 fdcc 	bl	8006de0 <HAL_TIM_IC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800124e:	f000 f979 	bl	8001544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001252:	2302      	movs	r3, #2
 8001254:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001256:	2302      	movs	r3, #2
 8001258:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2204      	movs	r2, #4
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM3_Init+0x104>)
 8001262:	f005 fdbd 	bl	8006de0 <HAL_TIM_IC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 800126c:	f000 f96a 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000878 	.word	0x20000878
 800127c:	40000400 	.word	0x40000400

08001280 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012b0:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <MX_TIM4_Init+0x128>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 109;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012b6:	226d      	movs	r2, #109	; 0x6d
 80012b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012d6:	f005 fb55 	bl	8006984 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80012e0:	f000 f930 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012e4:	482f      	ldr	r0, [pc, #188]	; (80013a4 <MX_TIM4_Init+0x124>)
 80012e6:	f005 fc27 	bl	8006b38 <HAL_TIM_IC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80012f0:	f000 f928 	bl	8001544 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012f4:	2304      	movs	r3, #4
 80012f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <MX_TIM4_Init+0x124>)
 800130c:	f005 ff38 	bl	8007180 <HAL_TIM_SlaveConfigSynchro>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001316:	f000 f915 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	481e      	ldr	r0, [pc, #120]	; (80013a4 <MX_TIM4_Init+0x124>)
 800132a:	f006 fd73 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001334:	f000 f906 	bl	8001544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001338:	2300      	movs	r3, #0
 800133a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800133c:	2301      	movs	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <MX_TIM4_Init+0x124>)
 8001350:	f005 fd46 	bl	8006de0 <HAL_TIM_IC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800135a:	f000 f8f3 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	2204      	movs	r2, #4
 8001362:	4619      	mov	r1, r3
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <MX_TIM4_Init+0x124>)
 8001366:	f005 fd3b 	bl	8006de0 <HAL_TIM_IC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001370:	f000 f8e8 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	2208      	movs	r2, #8
 8001378:	4619      	mov	r1, r3
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <MX_TIM4_Init+0x124>)
 800137c:	f005 fd30 	bl	8006de0 <HAL_TIM_IC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 8001386:	f000 f8dd 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim4, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM4_Init+0x124>)
 800138e:	f005 fedb 	bl	8007148 <HAL_TIM_ConfigTI1Input>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001398:	f000 f8d4 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200005a8 	.word	0x200005a8
 80013a8:	40000800 	.word	0x40000800

080013ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <MX_USART3_UART_Init+0x5c>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013f0:	f006 fe51 	bl	8008096 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013fa:	f000 f8a3 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000062c 	.word	0x2000062c
 8001408:	40004800 	.word	0x40004800

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <MX_DMA_Init+0xb0>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <MX_DMA_Init+0xb0>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <MX_DMA_Init+0xb0>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_DMA_Init+0xb0>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <MX_DMA_Init+0xb0>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_DMA_Init+0xb0>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	200b      	movs	r0, #11
 8001448:	f002 fcce 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800144c:	200b      	movs	r0, #11
 800144e:	f002 fce7 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200c      	movs	r0, #12
 8001458:	f002 fcc6 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800145c:	200c      	movs	r0, #12
 800145e:	f002 fcdf 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200d      	movs	r0, #13
 8001468:	f002 fcbe 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800146c:	200d      	movs	r0, #13
 800146e:	f002 fcd7 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2010      	movs	r0, #16
 8001478:	f002 fcb6 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800147c:	2010      	movs	r0, #16
 800147e:	f002 fccf 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2011      	movs	r0, #17
 8001488:	f002 fcae 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800148c:	2011      	movs	r0, #17
 800148e:	f002 fcc7 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2038      	movs	r0, #56	; 0x38
 8001498:	f002 fca6 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800149c:	2038      	movs	r0, #56	; 0x38
 800149e:	f002 fcbf 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	203c      	movs	r0, #60	; 0x3c
 80014a8:	f002 fc9e 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80014ac:	203c      	movs	r0, #60	; 0x3c
 80014ae:	f002 fcb7 	bl	8003e20 <HAL_NVIC_EnableIRQ>

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_GPIO_Init+0x5c>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <MX_GPIO_Init+0x5c>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d0:	6153      	str	r3, [r2, #20]
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_GPIO_Init+0x5c>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_GPIO_Init+0x5c>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <MX_GPIO_Init+0x5c>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	6153      	str	r3, [r2, #20]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_GPIO_Init+0x5c>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_GPIO_Init+0x5c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <MX_GPIO_Init+0x5c>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_GPIO_Init+0x5c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001532:	f000 fe2b 	bl	800218c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40001400 	.word	0x40001400

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_MspInit+0x4c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_MspInit+0x4c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_MspInit+0x4c>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_MspInit+0x4c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_MspInit+0x4c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	210f      	movs	r1, #15
 800158e:	f06f 0001 	mvn.w	r0, #1
 8001592:	f002 fc29 	bl	8003de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c4:	d15f      	bne.n	8001686 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015c6:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_ADC_MspInit+0x228>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a7f      	ldr	r2, [pc, #508]	; (80017cc <HAL_ADC_MspInit+0x228>)
 80015ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015d0:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <HAL_ADC_MspInit+0x228>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d10b      	bne.n	80015f0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015d8:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	4a7c      	ldr	r2, [pc, #496]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6153      	str	r3, [r2, #20]
 80015e4:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b77      	ldr	r3, [pc, #476]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a76      	ldr	r2, [pc, #472]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80015f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fa:	6153      	str	r3, [r2, #20]
 80015fc:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001608:	2309      	movs	r3, #9
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f002 fdc1 	bl	80041a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001622:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 8001624:	4a6c      	ldr	r2, [pc, #432]	; (80017d8 <HAL_ADC_MspInit+0x234>)
 8001626:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800162e:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001634:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800163a:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 8001644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001648:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800164a:	4b62      	ldr	r3, [pc, #392]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 800164c:	2220      	movs	r2, #32
 800164e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001650:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 8001652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001656:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001658:	485e      	ldr	r0, [pc, #376]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 800165a:	f002 fbef 	bl	8003e3c <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001664:	f7ff ff6e 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a5a      	ldr	r2, [pc, #360]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 800166c:	639a      	str	r2, [r3, #56]	; 0x38
 800166e:	4a59      	ldr	r2, [pc, #356]	; (80017d4 <HAL_ADC_MspInit+0x230>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2012      	movs	r0, #18
 800167a:	f002 fbb5 	bl	8003de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800167e:	2012      	movs	r0, #18
 8001680:	f002 fbce 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001684:	e09e      	b.n	80017c4 <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_ADC_MspInit+0x238>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d15f      	bne.n	8001750 <HAL_ADC_MspInit+0x1ac>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_ADC_MspInit+0x228>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_ADC_MspInit+0x228>)
 8001698:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_ADC_MspInit+0x228>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10b      	bne.n	80016ba <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6153      	str	r3, [r2, #20]
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d2:	2330      	movs	r3, #48	; 0x30
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	2303      	movs	r3, #3
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f002 fd5c 	bl	80041a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 80016ee:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <HAL_ADC_MspInit+0x240>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 8001706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 800170e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001712:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 8001716:	2220      	movs	r2, #32
 8001718:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 800171c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001720:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001722:	482f      	ldr	r0, [pc, #188]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 8001724:	f002 fb8a 	bl	8003e3c <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 800172e:	f7ff ff09 	bl	8001544 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_ADC_MspInit+0x23c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2012      	movs	r0, #18
 8001744:	f002 fb50 	bl	8003de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001748:	2012      	movs	r0, #18
 800174a:	f002 fb69 	bl	8003e20 <HAL_NVIC_EnableIRQ>
}
 800174e:	e039      	b.n	80017c4 <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <HAL_ADC_MspInit+0x244>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d134      	bne.n	80017c4 <HAL_ADC_MspInit+0x220>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 8001760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_ADC_MspInit+0x22c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA2_Channel5;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_ADC_MspInit+0x248>)
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_ADC_MspInit+0x24c>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_ADC_MspInit+0x248>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_ADC_MspInit+0x248>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_ADC_MspInit+0x248>)
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_ADC_MspInit+0x248>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_ADC_MspInit+0x248>)
 8001794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001798:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_ADC_MspInit+0x248>)
 800179c:	2220      	movs	r2, #32
 800179e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_ADC_MspInit+0x248>)
 80017a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80017a8:	4810      	ldr	r0, [pc, #64]	; (80017ec <HAL_ADC_MspInit+0x248>)
 80017aa:	f002 fb47 	bl	8003e3c <HAL_DMA_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 80017b4:	f7ff fec6 	bl	8001544 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_ADC_MspInit+0x248>)
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_ADC_MspInit+0x248>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000038 	.word	0x20000038
 80017d0:	40021000 	.word	0x40021000
 80017d4:	200009ec 	.word	0x200009ec
 80017d8:	40020008 	.word	0x40020008
 80017dc:	50000100 	.word	0x50000100
 80017e0:	20000af0 	.word	0x20000af0
 80017e4:	40020408 	.word	0x40020408
 80017e8:	50000400 	.word	0x50000400
 80017ec:	2000078c 	.word	0x2000078c
 80017f0:	40020458 	.word	0x40020458

080017f4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_COMP_MspInit+0x114>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d119      	bne.n	800184a <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_COMP_MspInit+0x118>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a3c      	ldr	r2, [pc, #240]	; (800190c <HAL_COMP_MspInit+0x118>)
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	6153      	str	r3, [r2, #20]
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_COMP_MspInit+0x118>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f002 fcae 	bl	80041a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8001848:	e05a      	b.n	8001900 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a30      	ldr	r2, [pc, #192]	; (8001910 <HAL_COMP_MspInit+0x11c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d119      	bne.n	8001888 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_COMP_MspInit+0x118>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4a2c      	ldr	r2, [pc, #176]	; (800190c <HAL_COMP_MspInit+0x118>)
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185e:	6153      	str	r3, [r2, #20]
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_COMP_MspInit+0x118>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	2303      	movs	r3, #3
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f002 fc8f 	bl	80041a4 <HAL_GPIO_Init>
}
 8001886:	e03b      	b.n	8001900 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_COMP_MspInit+0x120>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d118      	bne.n	80018c4 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_COMP_MspInit+0x118>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_COMP_MspInit+0x118>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6153      	str	r3, [r2, #20]
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_COMP_MspInit+0x118>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4816      	ldr	r0, [pc, #88]	; (8001918 <HAL_COMP_MspInit+0x124>)
 80018be:	f002 fc71 	bl	80041a4 <HAL_GPIO_Init>
}
 80018c2:	e01d      	b.n	8001900 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_COMP_MspInit+0x128>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d118      	bne.n	8001900 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_COMP_MspInit+0x118>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_COMP_MspInit+0x118>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_COMP_MspInit+0x118>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f002 fc52 	bl	80041a4 <HAL_GPIO_Init>
}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	4001001c 	.word	0x4001001c
 800190c:	40021000 	.word	0x40021000
 8001910:	40010020 	.word	0x40010020
 8001914:	40010028 	.word	0x40010028
 8001918:	48000400 	.word	0x48000400
 800191c:	40010034 	.word	0x40010034

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4d      	ldr	r2, [pc, #308]	; (8001a74 <HAL_I2C_MspInit+0x154>)
 800193e:	4293      	cmp	r3, r2
 8001940:	f040 8093 	bne.w	8001a6a <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	6153      	str	r3, [r2, #20]
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a45      	ldr	r2, [pc, #276]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 8001962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001966:	6153      	str	r3, [r2, #20]
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001986:	2304      	movs	r3, #4
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f002 fc06 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	2312      	movs	r3, #18
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019aa:	2304      	movs	r3, #4
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4831      	ldr	r0, [pc, #196]	; (8001a7c <HAL_I2C_MspInit+0x15c>)
 80019b6:	f002 fbf5 	bl	80041a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a2e      	ldr	r2, [pc, #184]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 80019c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_I2C_MspInit+0x158>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019d4:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <HAL_I2C_MspInit+0x164>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a02:	481f      	ldr	r0, [pc, #124]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 8001a04:	f002 fa1a 	bl	8003e3c <HAL_DMA_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_MspInit+0xf2>
    {
      Error_Handler();
 8001a0e:	f7ff fd99 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_I2C_MspInit+0x160>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a20:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <HAL_I2C_MspInit+0x16c>)
 8001a22:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a26:	2210      	movs	r2, #16
 8001a28:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a50:	f002 f9f4 	bl	8003e3c <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001a5a:	f7ff fd73 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
 8001a64:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_I2C_MspInit+0x168>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	20000a7c 	.word	0x20000a7c
 8001a84:	40020080 	.word	0x40020080
 8001a88:	200006fc 	.word	0x200006fc
 8001a8c:	4002006c 	.word	0x4002006c

08001a90 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <HAL_OPAMP_MspInit+0xd8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d119      	bne.n	8001ae6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001aca:	2306      	movs	r3, #6
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f002 fb60 	bl	80041a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001ae4:	e03b      	b.n	8001b5e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_OPAMP_MspInit+0xe0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d119      	bne.n	8001b24 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afa:	6153      	str	r3, [r2, #20]
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b08:	23c0      	movs	r3, #192	; 0xc0
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f002 fb41 	bl	80041a4 <HAL_GPIO_Init>
}
 8001b22:	e01c      	b.n	8001b5e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <HAL_OPAMP_MspInit+0xe4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d117      	bne.n	8001b5e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6153      	str	r3, [r2, #20]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_OPAMP_MspInit+0xdc>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b46:	2303      	movs	r3, #3
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4807      	ldr	r0, [pc, #28]	; (8001b78 <HAL_OPAMP_MspInit+0xe8>)
 8001b5a:	f002 fb23 	bl	80041a4 <HAL_GPIO_Init>
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40010038 	.word	0x40010038
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	4001003c 	.word	0x4001003c
 8001b74:	40010040 	.word	0x40010040
 8001b78:	48000400 	.word	0x48000400

08001b7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_TIM_PWM_MspInit+0x38>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_TIM_Base_MspInit+0xe8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d130      	bne.n	8001c40 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6153      	str	r3, [r2, #20]
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4820      	ldr	r0, [pc, #128]	; (8001cac <HAL_TIM_Base_MspInit+0xf0>)
 8001c2a:	f002 fabb 	bl	80041a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	201d      	movs	r0, #29
 8001c34:	f002 f8d8 	bl	8003de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c38:	201d      	movs	r0, #29
 8001c3a:	f002 f8f1 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c3e:	e02d      	b.n	8001c9c <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_TIM_Base_MspInit+0xf4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d128      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_TIM_Base_MspInit+0xec>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001c7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_TIM_Base_MspInit+0xf0>)
 8001c98:	f002 fa84 	bl	80041a4 <HAL_GPIO_Init>
}
 8001c9c:	bf00      	nop
 8001c9e:	3730      	adds	r7, #48	; 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	40000800 	.word	0x40000800

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_TIM_MspPostInit+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d14b      	bne.n	8001d6e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_TIM_MspPostInit+0xc8>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_TIM_MspPostInit+0xc8>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6153      	str	r3, [r2, #20]
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_TIM_MspPostInit+0xc8>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_TIM_MspPostInit+0xc8>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <HAL_TIM_MspPostInit+0xc8>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_TIM_MspPostInit+0xc8>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d06:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4817      	ldr	r0, [pc, #92]	; (8001d80 <HAL_TIM_MspPostInit+0xcc>)
 8001d24:	f002 fa3e 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	480e      	ldr	r0, [pc, #56]	; (8001d80 <HAL_TIM_MspPostInit+0xcc>)
 8001d46:	f002 fa2d 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d4a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d5c:	2306      	movs	r3, #6
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6a:	f002 fa1b 	bl	80041a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000400 	.word	0x48000400

08001d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a46      	ldr	r2, [pc, #280]	; (8001ebc <HAL_UART_MspInit+0x138>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f040 8086 	bne.w	8001eb4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da8:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <HAL_UART_MspInit+0x13c>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a44      	ldr	r2, [pc, #272]	; (8001ec0 <HAL_UART_MspInit+0x13c>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db2:	61d3      	str	r3, [r2, #28]
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <HAL_UART_MspInit+0x13c>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_UART_MspInit+0x13c>)
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	4a3e      	ldr	r2, [pc, #248]	; (8001ec0 <HAL_UART_MspInit+0x13c>)
 8001dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dca:	6153      	str	r3, [r2, #20]
 8001dcc:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <HAL_UART_MspInit+0x13c>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dea:	2307      	movs	r3, #7
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4833      	ldr	r0, [pc, #204]	; (8001ec4 <HAL_UART_MspInit+0x140>)
 8001df6:	f002 f9d5 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	482b      	ldr	r0, [pc, #172]	; (8001ec4 <HAL_UART_MspInit+0x140>)
 8001e18:	f002 f9c4 	bl	80041a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e1e:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <HAL_UART_MspInit+0x148>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e4c:	481e      	ldr	r0, [pc, #120]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e4e:	f001 fff5 	bl	8003e3c <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8001e58:	f7ff fb74 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e60:	66da      	str	r2, [r3, #108]	; 0x6c
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_UART_MspInit+0x144>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <HAL_UART_MspInit+0x150>)
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e70:	2210      	movs	r2, #16
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001e9a:	f001 ffcf 	bl	8003e3c <HAL_DMA_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8001ea4:	f7ff fb4e 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001eac:	669a      	str	r2, [r3, #104]	; 0x68
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_UART_MspInit+0x14c>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40004800 	.word	0x40004800
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	48000400 	.word	0x48000400
 8001ec8:	200005e8 	.word	0x200005e8
 8001ecc:	40020030 	.word	0x40020030
 8001ed0:	200007d0 	.word	0x200007d0
 8001ed4:	4002001c 	.word	0x4002001c

08001ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2037      	movs	r0, #55	; 0x37
 8001eee:	f001 ff7b 	bl	8003de8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ef2:	2037      	movs	r0, #55	; 0x37
 8001ef4:	f001 ff94 	bl	8003e20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_InitTick+0xa0>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_InitTick+0xa0>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	61d3      	str	r3, [r2, #28]
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_InitTick+0xa0>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f10:	f107 0210 	add.w	r2, r7, #16
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fb50 	bl	80065c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f20:	f004 fb0a 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9b      	lsrs	r3, r3, #18
 8001f34:	3b01      	subs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_InitTick+0xac>)
 8001f3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f44:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f5a:	f004 fd13 	bl	8006984 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001f64:	4806      	ldr	r0, [pc, #24]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f66:	f004 fd39 	bl	80069dc <HAL_TIM_Base_Start_IT>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	20000b34 	.word	0x20000b34
 8001f84:	40001400 	.word	0x40001400

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc0:	4810      	ldr	r0, [pc, #64]	; (8002004 <DMA1_Channel1_IRQHandler+0x48>)
 8001fc2:	f001 ffe1 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	BLDCCommuteHall();
 8001fc6:	f7fe f939 	bl	800023c <BLDCCommuteHall>
	extern float adcBuff1[3];
	adcBuff1[0]=(float)measurement_buffers.RawADC[0][0];
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <DMA1_Channel1_IRQHandler+0x4c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <DMA1_Channel1_IRQHandler+0x50>)
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
	adcBuff1[1]=(float)measurement_buffers.RawADC[0][1];
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <DMA1_Channel1_IRQHandler+0x4c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <DMA1_Channel1_IRQHandler+0x50>)
 8001fea:	edc3 7a01 	vstr	s15, [r3, #4]
	adcBuff1[2]=(float)measurement_buffers.RawADC[0][2];
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <DMA1_Channel1_IRQHandler+0x4c>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <DMA1_Channel1_IRQHandler+0x50>)
 8001ffc:	edc3 7a02 	vstr	s15, [r3, #8]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200009ec 	.word	0x200009ec
 8002008:	200004c8 	.word	0x200004c8
 800200c:	2000002c 	.word	0x2000002c

08002010 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Channel2_IRQHandler+0x10>)
 8002016:	f001 ffb7 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200007d0 	.word	0x200007d0

08002024 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <DMA1_Channel3_IRQHandler+0x10>)
 800202a:	f001 ffad 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200005e8 	.word	0x200005e8

08002038 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA1_Channel6_IRQHandler+0x10>)
 800203e:	f001 ffa3 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200006fc 	.word	0x200006fc

0800204c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Channel7_IRQHandler+0x10>)
 8002052:	f001 ff99 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000a7c 	.word	0x20000a7c

08002060 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */


  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <ADC1_2_IRQHandler+0x14>)
 8002066:	f000 fbf7 	bl	8002858 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <ADC1_2_IRQHandler+0x18>)
 800206c:	f000 fbf4 	bl	8002858 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000091c 	.word	0x2000091c
 8002078:	200006ac 	.word	0x200006ac

0800207c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002082:	f002 fc1e 	bl	80048c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000b78 	.word	0x20000b78

08002090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM3_IRQHandler+0x10>)
 8002096:	f004 fd84 	bl	8006ba2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000878 	.word	0x20000878

080020a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM7_IRQHandler+0x10>)
 80020aa:	f004 fd7a 	bl	8006ba2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000b34 	.word	0x20000b34

080020b8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <DMA2_Channel1_IRQHandler+0x10>)
 80020be:	f001 ff63 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000af0 	.word	0x20000af0

080020cc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <DMA2_Channel5_IRQHandler+0x10>)
 80020d2:	f001 ff59 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000078c 	.word	0x2000078c

080020e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <SystemInit+0x28>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <SystemInit+0x28>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SystemInit+0x28>)
 80020f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fa:	609a      	str	r2, [r3, #8]
#endif
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002144 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002110:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002112:	e003      	b.n	800211c <LoopCopyDataInit>

08002114 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002116:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002118:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800211a:	3104      	adds	r1, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <LoopForever+0xa>)
	ldr	r3, =_edata
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002120:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002122:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002124:	d3f6      	bcc.n	8002114 <CopyDataInit>
	ldr	r2, =_sbss
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002128:	e002      	b.n	8002130 <LoopFillZerobss>

0800212a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800212a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800212c:	f842 3b04 	str.w	r3, [r2], #4

08002130 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <LoopForever+0x16>)
	cmp	r2, r3
 8002132:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002134:	d3f9      	bcc.n	800212a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002136:	f7ff ffd3 	bl	80020e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213a:	f008 fe4f 	bl	800addc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800213e:	f7fe fb51 	bl	80007e4 <main>

08002142 <LoopForever>:

LoopForever:
    b LoopForever
 8002142:	e7fe      	b.n	8002142 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002144:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002148:	0800ae8c 	.word	0x0800ae8c
	ldr	r0, =_sdata
 800214c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002150:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002154:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002158:	20000de4 	.word	0x20000de4

0800215c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC3_IRQHandler>
	...

08002160 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_Init+0x28>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_Init+0x28>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f001 fe2e 	bl	8003dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff feae 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217c:	f7ff f9ea 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40022000 	.word	0x40022000

0800218c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x20>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x24>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4413      	add	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_IncTick+0x24>)
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000000c 	.word	0x2000000c
 80021b0:	20000b74 	.word	0x20000b74

080021b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000b74 	.word	0x20000b74

080021cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_Delay+0x40>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000000c 	.word	0x2000000c

08002210 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b09a      	sub	sp, #104	; 0x68
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e1c9      	b.n	8002614 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d176      	bne.n	8002380 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d152      	bne.n	8002340 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff f975 	bl	80015a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d13b      	bne.n	8002340 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f001 fb05 	bl	80038d8 <ADC_Disable>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d12f      	bne.n	8002340 <HAL_ADC_Init+0xe0>
 80022e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d12b      	bne.n	8002340 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f0:	f023 0302 	bic.w	r3, r3, #2
 80022f4:	f043 0202 	orr.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800230a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800231a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800231c:	4b86      	ldr	r3, [pc, #536]	; (8002538 <HAL_ADC_Init+0x2d8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a86      	ldr	r2, [pc, #536]	; (800253c <HAL_ADC_Init+0x2dc>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9a      	lsrs	r2, r3, #18
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002332:	e002      	b.n	800233a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800235c:	d110      	bne.n	8002380 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f023 0312 	bic.w	r3, r3, #18
 8002366:	f043 0210 	orr.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 8136 	bne.w	80025fa <HAL_ADC_Init+0x39a>
 800238e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 8131 	bne.w	80025fa <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8129 	bne.w	80025fa <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023b0:	f043 0202 	orr.w	r2, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c0:	d004      	beq.n	80023cc <HAL_ADC_Init+0x16c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5e      	ldr	r2, [pc, #376]	; (8002540 <HAL_ADC_Init+0x2e0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_Init+0x170>
 80023cc:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_ADC_Init+0x2e4>)
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_Init+0x172>
 80023d0:	4b5d      	ldr	r3, [pc, #372]	; (8002548 <HAL_ADC_Init+0x2e8>)
 80023d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023dc:	d102      	bne.n	80023e4 <HAL_ADC_Init+0x184>
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_ADC_Init+0x2e0>)
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e01a      	b.n	800241a <HAL_ADC_Init+0x1ba>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a55      	ldr	r2, [pc, #340]	; (8002540 <HAL_ADC_Init+0x2e0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d103      	bne.n	80023f6 <HAL_ADC_Init+0x196>
 80023ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e011      	b.n	800241a <HAL_ADC_Init+0x1ba>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_ADC_Init+0x2ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d102      	bne.n	8002406 <HAL_ADC_Init+0x1a6>
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_ADC_Init+0x2f0>)
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e009      	b.n	800241a <HAL_ADC_Init+0x1ba>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a51      	ldr	r2, [pc, #324]	; (8002550 <HAL_ADC_Init+0x2f0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d102      	bne.n	8002416 <HAL_ADC_Init+0x1b6>
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_ADC_Init+0x2ec>)
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e001      	b.n	800241a <HAL_ADC_Init+0x1ba>
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d108      	bne.n	800243a <HAL_ADC_Init+0x1da>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_ADC_Init+0x1da>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_ADC_Init+0x1dc>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11c      	bne.n	800247a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002440:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	d010      	beq.n	8002468 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_ADC_Init+0x202>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Init+0x202>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_ADC_Init+0x204>
 8002462:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002464:	2b00      	cmp	r3, #0
 8002466:	d108      	bne.n	800247a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002478:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7e5b      	ldrb	r3, [r3, #25]
 800247e:	035b      	lsls	r3, r3, #13
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002484:	2a01      	cmp	r2, #1
 8002486:	d002      	beq.n	800248e <HAL_ADC_Init+0x22e>
 8002488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800248c:	e000      	b.n	8002490 <HAL_ADC_Init+0x230>
 800248e:	2200      	movs	r2, #0
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4313      	orrs	r3, r2
 800249e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024a0:	4313      	orrs	r3, r2
 80024a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d11b      	bne.n	80024e6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e5b      	ldrb	r3, [r3, #25]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	3b01      	subs	r3, #1
 80024bc:	045a      	lsls	r2, r3, #17
 80024be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	663b      	str	r3, [r7, #96]	; 0x60
 80024c8:	e00d      	b.n	80024e6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d03a      	beq.n	8002564 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_ADC_Init+0x2ec>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_Init+0x2a2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <HAL_ADC_Init+0x2f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d128      	bne.n	8002554 <HAL_ADC_Init+0x2f4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800250a:	d012      	beq.n	8002532 <HAL_ADC_Init+0x2d2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d00a      	beq.n	800252c <HAL_ADC_Init+0x2cc>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800251e:	d002      	beq.n	8002526 <HAL_ADC_Init+0x2c6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	e018      	b.n	8002558 <HAL_ADC_Init+0x2f8>
 8002526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252a:	e015      	b.n	8002558 <HAL_ADC_Init+0x2f8>
 800252c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002530:	e012      	b.n	8002558 <HAL_ADC_Init+0x2f8>
 8002532:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002536:	e00f      	b.n	8002558 <HAL_ADC_Init+0x2f8>
 8002538:	20000004 	.word	0x20000004
 800253c:	431bde83 	.word	0x431bde83
 8002540:	50000100 	.word	0x50000100
 8002544:	50000300 	.word	0x50000300
 8002548:	50000700 	.word	0x50000700
 800254c:	50000400 	.word	0x50000400
 8002550:	50000500 	.word	0x50000500
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800255c:	4313      	orrs	r3, r2
 800255e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002560:	4313      	orrs	r3, r2
 8002562:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d114      	bne.n	800259c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002580:	f023 0302 	bic.w	r3, r3, #2
 8002584:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e1b      	ldrb	r3, [r3, #24]
 800258a:	039a      	lsls	r2, r3, #14
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4313      	orrs	r3, r2
 8002596:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002598:	4313      	orrs	r3, r2
 800259a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_ADC_Init+0x3bc>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025ac:	430b      	orrs	r3, r1
 80025ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10c      	bne.n	80025d2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f023 010f 	bic.w	r1, r3, #15
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
 80025d0:	e007      	b.n	80025e2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 020f 	bic.w	r2, r2, #15
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f023 0303 	bic.w	r3, r3, #3
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
 80025f8:	e00a      	b.n	8002610 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f023 0312 	bic.w	r3, r3, #18
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002614:	4618      	mov	r0, r3
 8002616:	3768      	adds	r7, #104	; 0x68
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	fff0c007 	.word	0xfff0c007

08002620 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80f7 	bne.w	800282e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_ADC_Start_DMA+0x2e>
 800264a:	2302      	movs	r3, #2
 800264c:	e0f2      	b.n	8002834 <HAL_ADC_Start_DMA+0x214>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800265e:	d004      	beq.n	800266a <HAL_ADC_Start_DMA+0x4a>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a75      	ldr	r2, [pc, #468]	; (800283c <HAL_ADC_Start_DMA+0x21c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d109      	bne.n	800267e <HAL_ADC_Start_DMA+0x5e>
 800266a:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_ADC_Start_DMA+0x220>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	e008      	b.n	8002690 <HAL_ADC_Start_DMA+0x70>
 800267e:	4b71      	ldr	r3, [pc, #452]	; (8002844 <HAL_ADC_Start_DMA+0x224>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80c5 	beq.w	8002820 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f001 f8c0 	bl	800381c <ADC_Enable>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80b7 	bne.w	8002816 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c4:	d004      	beq.n	80026d0 <HAL_ADC_Start_DMA+0xb0>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5c      	ldr	r2, [pc, #368]	; (800283c <HAL_ADC_Start_DMA+0x21c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d106      	bne.n	80026de <HAL_ADC_Start_DMA+0xbe>
 80026d0:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_ADC_Start_DMA+0x220>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_ADC_Start_DMA+0xde>
 80026dc:	e005      	b.n	80026ea <HAL_ADC_Start_DMA+0xca>
 80026de:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_ADC_Start_DMA+0x224>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_ADC_Start_DMA+0xde>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_Start_DMA+0xde>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a53      	ldr	r2, [pc, #332]	; (8002848 <HAL_ADC_Start_DMA+0x228>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d115      	bne.n	800272a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d036      	beq.n	8002786 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002720:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002728:	e02d      	b.n	8002786 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273e:	d004      	beq.n	800274a <HAL_ADC_Start_DMA+0x12a>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3d      	ldr	r2, [pc, #244]	; (800283c <HAL_ADC_Start_DMA+0x21c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10a      	bne.n	8002760 <HAL_ADC_Start_DMA+0x140>
 800274a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e008      	b.n	8002772 <HAL_ADC_Start_DMA+0x152>
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_ADC_Start_DMA+0x228>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800277e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d106      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f023 0206 	bic.w	r2, r3, #6
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	4a25      	ldr	r2, [pc, #148]	; (800284c <HAL_ADC_Start_DMA+0x22c>)
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	4a24      	ldr	r2, [pc, #144]	; (8002850 <HAL_ADC_Start_DMA+0x230>)
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_ADC_Start_DMA+0x234>)
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	221c      	movs	r2, #28
 80027ce:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0210 	orr.w	r2, r2, #16
 80027de:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3340      	adds	r3, #64	; 0x40
 80027fa:	4619      	mov	r1, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f001 fb63 	bl	8003eca <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0204 	orr.w	r2, r2, #4
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00d      	b.n	8002832 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800281e:	e008      	b.n	8002832 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800282c:	e001      	b.n	8002832 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002832:	7dfb      	ldrb	r3, [r7, #23]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	50000100 	.word	0x50000100
 8002840:	50000300 	.word	0x50000300
 8002844:	50000700 	.word	0x50000700
 8002848:	50000400 	.word	0x50000400
 800284c:	08003751 	.word	0x08003751
 8002850:	080037cb 	.word	0x080037cb
 8002854:	080037e7 	.word	0x080037e7

08002858 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d106      	bne.n	8002888 <HAL_ADC_IRQHandler+0x30>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d00f      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002892:	2b08      	cmp	r3, #8
 8002894:	f040 80c0 	bne.w	8002a18 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	f040 80b8 	bne.w	8002a18 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x7c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a95      	ldr	r2, [pc, #596]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d106      	bne.n	80028e2 <HAL_ADC_IRQHandler+0x8a>
 80028d4:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <HAL_ADC_IRQHandler+0x2d0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d03e      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 80028e0:	e005      	b.n	80028ee <HAL_ADC_IRQHandler+0x96>
 80028e2:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_ADC_IRQHandler+0x2d4>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d037      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f6:	d004      	beq.n	8002902 <HAL_ADC_IRQHandler+0xaa>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a89      	ldr	r2, [pc, #548]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d106      	bne.n	8002910 <HAL_ADC_IRQHandler+0xb8>
 8002902:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_ADC_IRQHandler+0x2d0>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2b05      	cmp	r3, #5
 800290c:	d027      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 800290e:	e005      	b.n	800291c <HAL_ADC_IRQHandler+0xc4>
 8002910:	4b86      	ldr	r3, [pc, #536]	; (8002b2c <HAL_ADC_IRQHandler+0x2d4>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2b05      	cmp	r3, #5
 800291a:	d020      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002924:	d004      	beq.n	8002930 <HAL_ADC_IRQHandler+0xd8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7e      	ldr	r2, [pc, #504]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d106      	bne.n	800293e <HAL_ADC_IRQHandler+0xe6>
 8002930:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_ADC_IRQHandler+0x2d0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2b09      	cmp	r3, #9
 800293a:	d010      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 800293c:	e005      	b.n	800294a <HAL_ADC_IRQHandler+0xf2>
 800293e:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <HAL_ADC_IRQHandler+0x2d4>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2b09      	cmp	r3, #9
 8002948:	d009      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002952:	d004      	beq.n	800295e <HAL_ADC_IRQHandler+0x106>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a75      	ldr	r2, [pc, #468]	; (8002b30 <HAL_ADC_IRQHandler+0x2d8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d104      	bne.n	8002968 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e00f      	b.n	8002988 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002970:	d004      	beq.n	800297c <HAL_ADC_IRQHandler+0x124>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6b      	ldr	r2, [pc, #428]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d102      	bne.n	8002982 <HAL_ADC_IRQHandler+0x12a>
 800297c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002980:	e000      	b.n	8002984 <HAL_ADC_IRQHandler+0x12c>
 8002982:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_ADC_IRQHandler+0x2d8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002992:	2b00      	cmp	r3, #0
 8002994:	d139      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800299c:	2b00      	cmp	r3, #0
 800299e:	d134      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d12d      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11a      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020c 	bic.w	r2, r2, #12
 80029ca:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d112      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
 80029f0:	e00b      	b.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fc00 	bl	8002210 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	220c      	movs	r2, #12
 8002a16:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_IRQHandler+0x1dc>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d00f      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	f040 813c 	bne.w	8002cbc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	f040 8134 	bne.w	8002cbc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a68:	d004      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x21c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d106      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x22a>
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_ADC_IRQHandler+0x2d0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03e      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002a80:	e005      	b.n	8002a8e <HAL_ADC_IRQHandler+0x236>
 8002a82:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_ADC_IRQHandler+0x2d4>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d037      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a96:	d004      	beq.n	8002aa2 <HAL_ADC_IRQHandler+0x24a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_IRQHandler+0x258>
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_ADC_IRQHandler+0x2d0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d027      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002aae:	e005      	b.n	8002abc <HAL_ADC_IRQHandler+0x264>
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_ADC_IRQHandler+0x2d4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d020      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac4:	d004      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x278>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_IRQHandler+0x286>
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_ADC_IRQHandler+0x2d0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2b09      	cmp	r3, #9
 8002ada:	d010      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002adc:	e005      	b.n	8002aea <HAL_ADC_IRQHandler+0x292>
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_ADC_IRQHandler+0x2d4>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	d009      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af2:	d004      	beq.n	8002afe <HAL_ADC_IRQHandler+0x2a6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_ADC_IRQHandler+0x2d8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d104      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e018      	b.n	8002b3a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b10:	d004      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x2c4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_ADC_IRQHandler+0x2cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x2dc>
 8002b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b20:	e009      	b.n	8002b36 <HAL_ADC_IRQHandler+0x2de>
 8002b22:	bf00      	nop
 8002b24:	50000100 	.word	0x50000100
 8002b28:	50000300 	.word	0x50000300
 8002b2c:	50000700 	.word	0x50000700
 8002b30:	50000400 	.word	0x50000400
 8002b34:	4b9d      	ldr	r3, [pc, #628]	; (8002dac <HAL_ADC_IRQHandler+0x554>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80ad 	bne.w	8002cae <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 80a5 	bne.w	8002cae <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 809f 	bne.w	8002cae <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	f040 8097 	bne.w	8002cae <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b88:	d004      	beq.n	8002b94 <HAL_ADC_IRQHandler+0x33c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a88      	ldr	r2, [pc, #544]	; (8002db0 <HAL_ADC_IRQHandler+0x558>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d106      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x34a>
 8002b94:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <HAL_ADC_IRQHandler+0x55c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d03e      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002ba0:	e005      	b.n	8002bae <HAL_ADC_IRQHandler+0x356>
 8002ba2:	4b85      	ldr	r3, [pc, #532]	; (8002db8 <HAL_ADC_IRQHandler+0x560>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d037      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x36a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_ADC_IRQHandler+0x558>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d106      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x378>
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	; (8002db4 <HAL_ADC_IRQHandler+0x55c>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d027      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002bce:	e005      	b.n	8002bdc <HAL_ADC_IRQHandler+0x384>
 8002bd0:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <HAL_ADC_IRQHandler+0x560>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d020      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x398>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a71      	ldr	r2, [pc, #452]	; (8002db0 <HAL_ADC_IRQHandler+0x558>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d106      	bne.n	8002bfe <HAL_ADC_IRQHandler+0x3a6>
 8002bf0:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_ADC_IRQHandler+0x55c>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	d010      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002bfc:	e005      	b.n	8002c0a <HAL_ADC_IRQHandler+0x3b2>
 8002bfe:	4b6e      	ldr	r3, [pc, #440]	; (8002db8 <HAL_ADC_IRQHandler+0x560>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2b07      	cmp	r3, #7
 8002c08:	d009      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x3c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a64      	ldr	r2, [pc, #400]	; (8002dac <HAL_ADC_IRQHandler+0x554>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d104      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e00f      	b.n	8002c48 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x3e4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_ADC_IRQHandler+0x558>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x3ea>
 8002c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_IRQHandler+0x3ec>
 8002c42:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <HAL_ADC_IRQHandler+0x554>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d12d      	bne.n	8002cae <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11a      	bne.n	8002c96 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c6e:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d112      	bne.n	8002cae <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
 8002c94:	e00b      	b.n	8002cae <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f948 	bl	8002f44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2260      	movs	r2, #96	; 0x60
 8002cba:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d113      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x49a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff faa7 	bl	8002238 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d00:	d115      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x4d6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d10d      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f924 	bl	8002f6c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d115      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x512>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4c:	d10d      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f910 	bl	8002f80 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d151      	bne.n	8002e1c <HAL_ADC_IRQHandler+0x5c4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d14a      	bne.n	8002e1c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e02d      	b.n	8002df0 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x550>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <HAL_ADC_IRQHandler+0x558>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x564>
 8002da8:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <HAL_ADC_IRQHandler+0x55c>)
 8002daa:	e008      	b.n	8002dbe <HAL_ADC_IRQHandler+0x566>
 8002dac:	50000400 	.word	0x50000400
 8002db0:	50000100 	.word	0x50000100
 8002db4:	50000300 	.word	0x50000300
 8002db8:	50000700 	.word	0x50000700
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_ADC_IRQHandler+0x614>)
 8002dbe:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10a      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e007      	b.n	8002df0 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002dec:	2301      	movs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10e      	bne.n	8002e14 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f043 0202 	orr.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fa1c 	bl	800224c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2a:	d11b      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x60c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d113      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f043 0208 	orr.w	r2, r3, #8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f87a 	bl	8002f58 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002e64:	bf00      	nop
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	50000700 	.word	0x50000700

08002e70 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ADCEx_Calibration_Start+0x1c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e057      	b.n	8002f3c <HAL_ADCEx_Calibration_Start+0xcc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fd1f 	bl	80038d8 <ADC_Disable>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d146      	bne.n	8002f32 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002eb8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ece:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ede:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002ee0:	f7ff f968 	bl	80021b4 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ee6:	e014      	b.n	8002f12 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ee8:	f7ff f964 	bl	80021b4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b0a      	cmp	r3, #10
 8002ef4:	d90d      	bls.n	8002f12 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f023 0312 	bic.w	r3, r3, #18
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e014      	b.n	8002f3c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f20:	d0e2      	beq.n	8002ee8 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b09b      	sub	sp, #108	; 0x6c
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x22>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e2cb      	b.n	800354e <HAL_ADC_ConfigChannel+0x5ba>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f040 82af 	bne.w	800352c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d81c      	bhi.n	8003010 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	461a      	mov	r2, r3
 8002fea:	231f      	movs	r3, #31
 8002fec:	4093      	lsls	r3, r2
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4019      	ands	r1, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa00 f203 	lsl.w	r2, r0, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
 800300e:	e063      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b09      	cmp	r3, #9
 8003016:	d81e      	bhi.n	8003056 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	3b1e      	subs	r3, #30
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	4019      	ands	r1, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	3b1e      	subs	r3, #30
 8003048:	fa00 f203 	lsl.w	r2, r0, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
 8003054:	e040      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b0e      	cmp	r3, #14
 800305c:	d81e      	bhi.n	800309c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	3b3c      	subs	r3, #60	; 0x3c
 8003072:	221f      	movs	r2, #31
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	4019      	ands	r1, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	3b3c      	subs	r3, #60	; 0x3c
 800308e:	fa00 f203 	lsl.w	r2, r0, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
 800309a:	e01d      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	3b5a      	subs	r3, #90	; 0x5a
 80030b0:	221f      	movs	r2, #31
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4019      	ands	r1, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	3b5a      	subs	r3, #90	; 0x5a
 80030cc:	fa00 f203 	lsl.w	r2, r0, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 80e5 	bne.w	80032b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b09      	cmp	r3, #9
 80030ee:	d91c      	bls.n	800312a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	3b1e      	subs	r3, #30
 8003102:	2207      	movs	r2, #7
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	4019      	ands	r1, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6898      	ldr	r0, [r3, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	3b1e      	subs	r3, #30
 800311c:	fa00 f203 	lsl.w	r2, r0, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	619a      	str	r2, [r3, #24]
 8003128:	e019      	b.n	800315e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6959      	ldr	r1, [r3, #20]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	2207      	movs	r2, #7
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	4019      	ands	r1, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6898      	ldr	r0, [r3, #8]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	fa00 f203 	lsl.w	r2, r0, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	3b01      	subs	r3, #1
 800317c:	2b03      	cmp	r3, #3
 800317e:	d84f      	bhi.n	8003220 <HAL_ADC_ConfigChannel+0x28c>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_ADC_ConfigChannel+0x1f4>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	08003199 	.word	0x08003199
 800318c:	080031bb 	.word	0x080031bb
 8003190:	080031dd 	.word	0x080031dd
 8003194:	080031ff 	.word	0x080031ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800319e:	4b9f      	ldr	r3, [pc, #636]	; (800341c <HAL_ADC_ConfigChannel+0x488>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	0691      	lsls	r1, r2, #26
 80031a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031aa:	430a      	orrs	r2, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031b8:	e07e      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031c0:	4b96      	ldr	r3, [pc, #600]	; (800341c <HAL_ADC_ConfigChannel+0x488>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	0691      	lsls	r1, r2, #26
 80031ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031cc:	430a      	orrs	r2, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031da:	e06d      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031e2:	4b8e      	ldr	r3, [pc, #568]	; (800341c <HAL_ADC_ConfigChannel+0x488>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	0691      	lsls	r1, r2, #26
 80031ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031ee:	430a      	orrs	r2, r1
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031fc:	e05c      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003204:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_ADC_ConfigChannel+0x488>)
 8003206:	4013      	ands	r3, r2
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	0691      	lsls	r1, r2, #26
 800320e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003210:	430a      	orrs	r2, r1
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800321c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800321e:	e04b      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	069b      	lsls	r3, r3, #26
 8003230:	429a      	cmp	r2, r3
 8003232:	d107      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003242:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	069b      	lsls	r3, r3, #26
 8003254:	429a      	cmp	r2, r3
 8003256:	d107      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003266:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	069b      	lsls	r3, r3, #26
 8003278:	429a      	cmp	r2, r3
 800327a:	d107      	bne.n	800328c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800328a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	069b      	lsls	r3, r3, #26
 800329c:	429a      	cmp	r2, r3
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80032b0:	e001      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80032b6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x344>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x344>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_ADC_ConfigChannel+0x346>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8131 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d00f      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	400a      	ands	r2, r1
 8003302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003306:	e049      	b.n	800339c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d91c      	bls.n	8003364 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6999      	ldr	r1, [r3, #24]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	3b1b      	subs	r3, #27
 800333c:	2207      	movs	r2, #7
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	4019      	ands	r1, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6898      	ldr	r0, [r3, #8]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	3b1b      	subs	r3, #27
 8003356:	fa00 f203 	lsl.w	r2, r0, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	e01b      	b.n	800339c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	2207      	movs	r2, #7
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	4019      	ands	r1, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6898      	ldr	r0, [r3, #8]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	fa00 f203 	lsl.w	r2, r0, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a4:	d004      	beq.n	80033b0 <HAL_ADC_ConfigChannel+0x41c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_ADC_ConfigChannel+0x48c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x420>
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <HAL_ADC_ConfigChannel+0x490>)
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x422>
 80033b4:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_ADC_ConfigChannel+0x494>)
 80033b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d105      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033d0:	2b11      	cmp	r3, #17
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	f040 80ac 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80a5 	bne.w	8003542 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003400:	d102      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x474>
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_ADC_ConfigChannel+0x48c>)
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e023      	b.n	8003450 <HAL_ADC_ConfigChannel+0x4bc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <HAL_ADC_ConfigChannel+0x48c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10c      	bne.n	800342c <HAL_ADC_ConfigChannel+0x498>
 8003412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e01a      	b.n	8003450 <HAL_ADC_ConfigChannel+0x4bc>
 800341a:	bf00      	nop
 800341c:	83fff000 	.word	0x83fff000
 8003420:	50000100 	.word	0x50000100
 8003424:	50000300 	.word	0x50000300
 8003428:	50000700 	.word	0x50000700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a4a      	ldr	r2, [pc, #296]	; (800355c <HAL_ADC_ConfigChannel+0x5c8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d102      	bne.n	800343c <HAL_ADC_ConfigChannel+0x4a8>
 8003436:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <HAL_ADC_ConfigChannel+0x5cc>)
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e009      	b.n	8003450 <HAL_ADC_ConfigChannel+0x4bc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a47      	ldr	r2, [pc, #284]	; (8003560 <HAL_ADC_ConfigChannel+0x5cc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d102      	bne.n	800344c <HAL_ADC_ConfigChannel+0x4b8>
 8003446:	4b45      	ldr	r3, [pc, #276]	; (800355c <HAL_ADC_ConfigChannel+0x5c8>)
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e001      	b.n	8003450 <HAL_ADC_ConfigChannel+0x4bc>
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x4dc>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x4dc>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_ADC_ConfigChannel+0x4de>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d150      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003476:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d107      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x504>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x504>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_ADC_ConfigChannel+0x506>
 8003498:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d13c      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d11d      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x54e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ae:	d118      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <HAL_ADC_ConfigChannel+0x5d0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a29      	ldr	r2, [pc, #164]	; (8003568 <HAL_ADC_ConfigChannel+0x5d4>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9a      	lsrs	r2, r3, #18
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034d2:	e002      	b.n	80034da <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034e0:	e02e      	b.n	8003540 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b11      	cmp	r3, #17
 80034e8:	d10b      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x56e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f2:	d106      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80034fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003500:	e01e      	b.n	8003540 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b12      	cmp	r3, #18
 8003508:	d11a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003514:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003516:	e013      	b.n	8003540 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800352a:	e00a      	b.n	8003542 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800353e:	e000      	b.n	8003542 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003540:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800354a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800354e:	4618      	mov	r0, r3
 8003550:	376c      	adds	r7, #108	; 0x6c
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	50000400 	.word	0x50000400
 8003560:	50000500 	.word	0x50000500
 8003564:	20000004 	.word	0x20000004
 8003568:	431bde83 	.word	0x431bde83

0800356c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800356c:	b480      	push	{r7}
 800356e:	b099      	sub	sp, #100	; 0x64
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003584:	d102      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003586:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	e01a      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d103      	bne.n	800359e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	e011      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a67      	ldr	r2, [pc, #412]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	e009      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a64      	ldr	r2, [pc, #400]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d102      	bne.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035b8:	4b61      	ldr	r3, [pc, #388]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	e001      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b0      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e0a9      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f040 808d 	bne.w	800370c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 8086 	bne.w	800370c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003608:	d004      	beq.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4b      	ldr	r2, [pc, #300]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003614:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003616:	e000      	b.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003618:	4b4c      	ldr	r3, [pc, #304]	; (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800361a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d040      	beq.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003636:	035b      	lsls	r3, r3, #13
 8003638:	430b      	orrs	r3, r1
 800363a:	431a      	orrs	r2, r3
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d15c      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d107      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003682:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003684:	2b00      	cmp	r3, #0
 8003686:	d14b      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003690:	f023 030f 	bic.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6811      	ldr	r1, [r2, #0]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	430a      	orrs	r2, r1
 800369e:	431a      	orrs	r2, r3
 80036a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036a4:	e03c      	b.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d123      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80036f4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d112      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003702:	f023 030f 	bic.w	r3, r3, #15
 8003706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003708:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800370a:	e009      	b.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800371e:	e000      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003720:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800372a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800372e:	4618      	mov	r0, r3
 8003730:	3764      	adds	r7, #100	; 0x64
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	50000100 	.word	0x50000100
 8003740:	50000400 	.word	0x50000400
 8003744:	50000500 	.word	0x50000500
 8003748:	50000300 	.word	0x50000300
 800374c:	50000700 	.word	0x50000700

08003750 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d126      	bne.n	80037b8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7fe fd2d 	bl	8002210 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80037b6:	e004      	b.n	80037c2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7fe fd23 	bl	8002224 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7fe fd1d 	bl	800224c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <ADC_Enable+0x2c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <ADC_Enable+0x2c>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <ADC_Enable+0x2e>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d13c      	bne.n	80038c8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <ADC_Enable+0xb8>)
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0210 	orr.w	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e028      	b.n	80038ca <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003888:	f7fe fc94 	bl	80021b4 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800388e:	e014      	b.n	80038ba <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003890:	f7fe fc90 	bl	80021b4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d90d      	bls.n	80038ba <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e007      	b.n	80038ca <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d1e3      	bne.n	8003890 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	8000003f 	.word	0x8000003f

080038d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <ADC_Disable+0x2c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <ADC_Disable+0x2c>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <ADC_Disable+0x2e>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d040      	beq.n	800398c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030d 	and.w	r3, r3, #13
 8003914:	2b01      	cmp	r3, #1
 8003916:	d10f      	bne.n	8003938 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0202 	orr.w	r2, r2, #2
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2203      	movs	r2, #3
 800392e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003930:	f7fe fc40 	bl	80021b4 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003936:	e022      	b.n	800397e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f043 0210 	orr.w	r2, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e01c      	b.n	800398e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003954:	f7fe fc2e 	bl	80021b4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d90d      	bls.n	800397e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e007      	b.n	800398e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d0e3      	beq.n	8003954 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_COMP_Init+0x22>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
 80039be:	e064      	b.n	8003a8a <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c0:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <HAL_COMP_Init+0xfc>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <HAL_COMP_Init+0xfc>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_COMP_Init+0xfc>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd ff0b 	bl	80017f4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f023 020c 	bic.w	r2, r3, #12
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_COMP_Start+0x26>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	e0c4      	b.n	8003c4e <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 80bc 	bne.w	8003c4a <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <HAL_COMP_Start+0x1c4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d028      	beq.n	8003b2e <HAL_COMP_Start+0x96>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5f      	ldr	r2, [pc, #380]	; (8003c60 <HAL_COMP_Start+0x1c8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d020      	beq.n	8003b28 <HAL_COMP_Start+0x90>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5e      	ldr	r2, [pc, #376]	; (8003c64 <HAL_COMP_Start+0x1cc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_COMP_Start+0x8a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5c      	ldr	r2, [pc, #368]	; (8003c68 <HAL_COMP_Start+0x1d0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d010      	beq.n	8003b1c <HAL_COMP_Start+0x84>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5b      	ldr	r2, [pc, #364]	; (8003c6c <HAL_COMP_Start+0x1d4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d008      	beq.n	8003b16 <HAL_COMP_Start+0x7e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a59      	ldr	r2, [pc, #356]	; (8003c70 <HAL_COMP_Start+0x1d8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_COMP_Start+0x7a>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <HAL_COMP_Start+0x9a>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e00d      	b.n	8003b32 <HAL_COMP_Start+0x9a>
 8003b16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b1a:	e00a      	b.n	8003b32 <HAL_COMP_Start+0x9a>
 8003b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b20:	e007      	b.n	8003b32 <HAL_COMP_Start+0x9a>
 8003b22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b26:	e004      	b.n	8003b32 <HAL_COMP_Start+0x9a>
 8003b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b2c:	e001      	b.n	8003b32 <HAL_COMP_Start+0x9a>
 8003b2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b32:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d077      	beq.n	8003c30 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d012      	beq.n	8003b72 <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <HAL_COMP_Start+0xcc>
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	4946      	ldr	r1, [pc, #280]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	628b      	str	r3, [r1, #40]	; 0x28
 8003b62:	e01a      	b.n	8003b9a <HAL_COMP_Start+0x102>
 8003b64:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4942      	ldr	r1, [pc, #264]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]
 8003b70:	e013      	b.n	8003b9a <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_COMP_Start+0xf4>
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	493b      	ldr	r1, [pc, #236]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	628b      	str	r3, [r1, #40]	; 0x28
 8003b8a:	e006      	b.n	8003b9a <HAL_COMP_Start+0x102>
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	4937      	ldr	r1, [pc, #220]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d012      	beq.n	8003bcc <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_COMP_Start+0x126>
 8003bb0:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	492f      	ldr	r1, [pc, #188]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003bbc:	e01a      	b.n	8003bf4 <HAL_COMP_Start+0x15c>
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	492c      	ldr	r1, [pc, #176]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60cb      	str	r3, [r1, #12]
 8003bca:	e013      	b.n	8003bf4 <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <HAL_COMP_Start+0x14e>
 8003bd6:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	4925      	ldr	r1, [pc, #148]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003be4:	e006      	b.n	8003bf4 <HAL_COMP_Start+0x15c>
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	4921      	ldr	r1, [pc, #132]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_COMP_Start+0x174>
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c02:	491c      	ldr	r1, [pc, #112]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	624b      	str	r3, [r1, #36]	; 0x24
 8003c0a:	e005      	b.n	8003c18 <HAL_COMP_Start+0x180>
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4918      	ldr	r1, [pc, #96]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_COMP_Start+0x192>
 8003c22:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6353      	str	r3, [r2, #52]	; 0x34
 8003c28:	e002      	b.n	8003c30 <HAL_COMP_Start+0x198>
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <HAL_COMP_Start+0x1dc>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003c48:	e001      	b.n	8003c4e <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	4001001c 	.word	0x4001001c
 8003c60:	40010020 	.word	0x40010020
 8003c64:	40010024 	.word	0x40010024
 8003c68:	40010028 	.word	0x40010028
 8003c6c:	4001002c 	.word	0x4001002c
 8003c70:	40010030 	.word	0x40010030
 8003c74:	40010400 	.word	0x40010400

08003c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <__NVIC_SetPriorityGrouping+0x44>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c94:	4013      	ands	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <__NVIC_SetPriorityGrouping+0x44>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	60d3      	str	r3, [r2, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	f003 0307 	and.w	r3, r3, #7
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	db0b      	blt.n	8003d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4907      	ldr	r1, [pc, #28]	; (8003d14 <__NVIC_EnableIRQ+0x38>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e100 	.word	0xe000e100

08003d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	db0a      	blt.n	8003d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	490c      	ldr	r1, [pc, #48]	; (8003d64 <__NVIC_SetPriority+0x4c>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d40:	e00a      	b.n	8003d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <__NVIC_SetPriority+0x50>)
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	3b04      	subs	r3, #4
 8003d50:	0112      	lsls	r2, r2, #4
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	440b      	add	r3, r1
 8003d56:	761a      	strb	r2, [r3, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000e100 	.word	0xe000e100
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	bf28      	it	cs
 8003d8a:	2304      	movcs	r3, #4
 8003d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3304      	adds	r3, #4
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d902      	bls.n	8003d9c <NVIC_EncodePriority+0x30>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3b03      	subs	r3, #3
 8003d9a:	e000      	b.n	8003d9e <NVIC_EncodePriority+0x32>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	401a      	ands	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db4:	f04f 31ff 	mov.w	r1, #4294967295
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	43d9      	mvns	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	4313      	orrs	r3, r2
         );
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff4c 	bl	8003c78 <__NVIC_SetPriorityGrouping>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfa:	f7ff ff61 	bl	8003cc0 <__NVIC_GetPriorityGrouping>
 8003dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	6978      	ldr	r0, [r7, #20]
 8003e06:	f7ff ffb1 	bl	8003d6c <NVIC_EncodePriority>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff ff80 	bl	8003d18 <__NVIC_SetPriority>
}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff ff54 	bl	8003cdc <__NVIC_EnableIRQ>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e037      	b.n	8003ec2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f941 	bl	800412c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}  
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_DMA_Start_IT+0x20>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e04a      	b.n	8003f80 <HAL_DMA_Start_IT+0xb6>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d13a      	bne.n	8003f72 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f8d4 	bl	80040ce <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 020e 	orr.w	r2, r2, #14
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e00f      	b.n	8003f60 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 020a 	orr.w	r2, r2, #10
 8003f4e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0204 	bic.w	r2, r2, #4
 8003f5e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e005      	b.n	8003f7e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d024      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x72>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d06a      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	e065      	b.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2202      	movs	r2, #2
 8004000:	409a      	lsls	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02c      	beq.n	8004064 <HAL_DMA_IRQHandler+0xdc>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d027      	beq.n	8004064 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 020a 	bic.w	r2, r2, #10
 8004030:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	2102      	movs	r1, #2
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d035      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004062:	e030      	b.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2208      	movs	r2, #8
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d028      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d023      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 020e 	bic.w	r2, r2, #14
 800408c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f202 	lsl.w	r2, r1, r2
 800409c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    }
  }
}  
 80040c4:	e7ff      	b.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d108      	bne.n	800410e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800410c:	e007      	b.n	800411e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <DMA_CalcBaseAndBitshift+0x60>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d80f      	bhi.n	8004160 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <DMA_CalcBaseAndBitshift+0x64>)
 8004148:	4413      	add	r3, r2
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <DMA_CalcBaseAndBitshift+0x68>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <DMA_CalcBaseAndBitshift+0x6c>)
 800415c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800415e:	e00e      	b.n	800417e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <DMA_CalcBaseAndBitshift+0x70>)
 8004168:	4413      	add	r3, r2
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <DMA_CalcBaseAndBitshift+0x68>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <DMA_CalcBaseAndBitshift+0x74>)
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40020407 	.word	0x40020407
 8004190:	bffdfff8 	.word	0xbffdfff8
 8004194:	cccccccd 	.word	0xcccccccd
 8004198:	40020000 	.word	0x40020000
 800419c:	bffdfbf8 	.word	0xbffdfbf8
 80041a0:	40020400 	.word	0x40020400

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b2:	e154      	b.n	800445e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8146 	beq.w	8004458 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x38>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b12      	cmp	r3, #18
 80041da:	d123      	bne.n	8004224 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	08da      	lsrs	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3208      	adds	r2, #8
 80041e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	220f      	movs	r2, #15
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	08da      	lsrs	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3208      	adds	r2, #8
 800421e:	6939      	ldr	r1, [r7, #16]
 8004220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0203 	and.w	r2, r3, #3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d00b      	beq.n	8004278 <HAL_GPIO_Init+0xd4>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d007      	beq.n	8004278 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800426c:	2b11      	cmp	r3, #17
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b12      	cmp	r3, #18
 8004276:	d130      	bne.n	80042da <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ae:	2201      	movs	r2, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0201 	and.w	r2, r3, #1
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	2203      	movs	r2, #3
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80a0 	beq.w	8004458 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004318:	4b58      	ldr	r3, [pc, #352]	; (800447c <HAL_GPIO_Init+0x2d8>)
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	4a57      	ldr	r2, [pc, #348]	; (800447c <HAL_GPIO_Init+0x2d8>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6193      	str	r3, [r2, #24]
 8004324:	4b55      	ldr	r3, [pc, #340]	; (800447c <HAL_GPIO_Init+0x2d8>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004330:	4a53      	ldr	r2, [pc, #332]	; (8004480 <HAL_GPIO_Init+0x2dc>)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	3302      	adds	r3, #2
 8004338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	220f      	movs	r2, #15
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800435a:	d019      	beq.n	8004390 <HAL_GPIO_Init+0x1ec>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a49      	ldr	r2, [pc, #292]	; (8004484 <HAL_GPIO_Init+0x2e0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_GPIO_Init+0x1e8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a48      	ldr	r2, [pc, #288]	; (8004488 <HAL_GPIO_Init+0x2e4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00d      	beq.n	8004388 <HAL_GPIO_Init+0x1e4>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a47      	ldr	r2, [pc, #284]	; (800448c <HAL_GPIO_Init+0x2e8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <HAL_GPIO_Init+0x1e0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a46      	ldr	r2, [pc, #280]	; (8004490 <HAL_GPIO_Init+0x2ec>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_GPIO_Init+0x1dc>
 800437c:	2304      	movs	r3, #4
 800437e:	e008      	b.n	8004392 <HAL_GPIO_Init+0x1ee>
 8004380:	2305      	movs	r3, #5
 8004382:	e006      	b.n	8004392 <HAL_GPIO_Init+0x1ee>
 8004384:	2303      	movs	r3, #3
 8004386:	e004      	b.n	8004392 <HAL_GPIO_Init+0x1ee>
 8004388:	2302      	movs	r3, #2
 800438a:	e002      	b.n	8004392 <HAL_GPIO_Init+0x1ee>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_GPIO_Init+0x1ee>
 8004390:	2300      	movs	r3, #0
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	f002 0203 	and.w	r2, r2, #3
 8004398:	0092      	lsls	r2, r2, #2
 800439a:	4093      	lsls	r3, r2
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043a2:	4937      	ldr	r1, [pc, #220]	; (8004480 <HAL_GPIO_Init+0x2dc>)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	089b      	lsrs	r3, r3, #2
 80043a8:	3302      	adds	r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b0:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043d4:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043fe:	4a25      	ldr	r2, [pc, #148]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004404:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	43db      	mvns	r3, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004452:	4a10      	ldr	r2, [pc, #64]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	3301      	adds	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f aea3 	bne.w	80041b4 <HAL_GPIO_Init+0x10>
  }
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	40010000 	.word	0x40010000
 8004484:	48000400 	.word	0x48000400
 8004488:	48000800 	.word	0x48000800
 800448c:	48000c00 	.word	0x48000c00
 8004490:	48001000 	.word	0x48001000
 8004494:	40010400 	.word	0x40010400

08004498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e001      	b.n	80044ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e081      	b.n	80045de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd fa16 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d107      	bne.n	8004542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	e006      	b.n	8004550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800454e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d104      	bne.n	8004562 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004574:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	ea42 0103 	orr.w	r1, r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	021a      	lsls	r2, r3, #8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d138      	bne.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004606:	2302      	movs	r3, #2
 8004608:	e032      	b.n	8004670 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2224      	movs	r2, #36	; 0x24
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004638:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b20      	cmp	r3, #32
 8004690:	d139      	bne.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800469c:	2302      	movs	r3, #2
 800469e:	e033      	b.n	8004708 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	; 0x24
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e092      	b.n	8004850 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b05      	cmp	r3, #5
 8004734:	d101      	bne.n	800473a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e08a      	b.n	8004850 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d101      	bne.n	800474a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e082      	b.n	8004850 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004756:	4b40      	ldr	r3, [pc, #256]	; (8004858 <HAL_OPAMP_Init+0x144>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <HAL_OPAMP_Init+0x144>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6193      	str	r3, [r2, #24]
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_OPAMP_Init+0x144>)
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd f984 	bl	8001a90 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d003      	beq.n	8004798 <HAL_OPAMP_Init+0x84>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d125      	bne.n	80047e4 <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b2f      	ldr	r3, [pc, #188]	; (800485c <HAL_OPAMP_Init+0x148>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6851      	ldr	r1, [r2, #4]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68d2      	ldr	r2, [r2, #12]
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6912      	ldr	r2, [r2, #16]
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6992      	ldr	r2, [r2, #24]
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	69d2      	ldr	r2, [r2, #28]
 80047bc:	4311      	orrs	r1, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6a12      	ldr	r2, [r2, #32]
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047ce:	04d2      	lsls	r2, r2, #19
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047d6:	0612      	lsls	r2, r2, #24
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	430b      	orrs	r3, r1
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e02a      	b.n	800483a <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b1c      	ldr	r3, [pc, #112]	; (800485c <HAL_OPAMP_Init+0x148>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6851      	ldr	r1, [r2, #4]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68d2      	ldr	r2, [r2, #12]
 80047fc:	4311      	orrs	r1, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6912      	ldr	r2, [r2, #16]
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6952      	ldr	r2, [r2, #20]
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6992      	ldr	r2, [r2, #24]
 800480e:	4311      	orrs	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	69d2      	ldr	r2, [r2, #28]
 8004814:	4311      	orrs	r1, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6a12      	ldr	r2, [r2, #32]
 800481a:	4311      	orrs	r1, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004826:	04d2      	lsls	r2, r2, #19
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800482e:	0612      	lsls	r2, r2, #24
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	430b      	orrs	r3, r1
 8004838:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d103      	bne.n	800484e <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000
 800485c:	e0003811 	.word	0xe0003811

08004860 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e01d      	b.n	80048b4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b05      	cmp	r3, #5
 8004882:	d102      	bne.n	800488a <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e014      	b.n	80048b4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10c      	bne.n	80048b0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2204      	movs	r2, #4
 80048aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80048ae:	e001      	b.n	80048b4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 fe5c 	bl	800958c <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d102      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fa91 	bl	8004e08 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f004 fe4e 	bl	800958c <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fa:	d112      	bne.n	8004922 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490e:	b292      	uxth	r2, r2
 8004910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f006 f8fe 	bl	800ab16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800491a:	2100      	movs	r1, #0
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8d2 	bl	8004ac6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f004 fe30 	bl	800958c <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004936:	d10b      	bne.n	8004950 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800494a:	b292      	uxth	r2, r2
 800494c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f004 fe19 	bl	800958c <USB_ReadInterrupts>
 800495a:	4603      	mov	r3, r0
 800495c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004964:	d10b      	bne.n	800497e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004978:	b292      	uxth	r2, r2
 800497a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f004 fe02 	bl	800958c <USB_ReadInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	d126      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0204 	bic.w	r2, r2, #4
 80049a6:	b292      	uxth	r2, r2
 80049a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0208 	bic.w	r2, r2, #8
 80049be:	b292      	uxth	r2, r2
 80049c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f006 f8df 	bl	800ab88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049dc:	b292      	uxth	r2, r2
 80049de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f004 fdd0 	bl	800958c <USB_ReadInterrupts>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d131      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a22:	b292      	uxth	r2, r2
 8004a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0204 	orr.w	r2, r2, #4
 8004a3a:	b292      	uxth	r2, r2
 8004a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f004 fda1 	bl	800958c <USB_ReadInterrupts>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d002      	beq.n	8004a5c <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f006 f87c 	bl	800ab54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f004 fd93 	bl	800958c <USB_ReadInterrupts>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a70:	d10e      	bne.n	8004a90 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a84:	b292      	uxth	r2, r2
 8004a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f006 f835 	bl	800aafa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f004 fd79 	bl	800958c <USB_ReadInterrupts>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa4:	d10b      	bne.n	8004abe <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab8:	b292      	uxth	r2, r2
 8004aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_PCD_SetAddress+0x1a>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e013      	b.n	8004b08 <HAL_PCD_SetAddress+0x42>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f004 fd33 	bl	8009564 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	70fb      	strb	r3, [r7, #3]
 8004b22:	460b      	mov	r3, r1
 8004b24:	803b      	strh	r3, [r7, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da0b      	bge.n	8004b4e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	015b      	lsls	r3, r3, #5
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	705a      	strb	r2, [r3, #1]
 8004b4c:	e00b      	b.n	8004b66 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	015b      	lsls	r3, r3, #5
 8004b56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b72:	883a      	ldrh	r2, [r7, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	78ba      	ldrb	r2, [r7, #2]
 8004b7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b90:	78bb      	ldrb	r3, [r7, #2]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d102      	bne.n	8004b9c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_PCD_EP_Open+0x9a>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e00e      	b.n	8004bc8 <HAL_PCD_EP_Open+0xb8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 fe37 	bl	800882c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	015b      	lsls	r3, r3, #5
 8004be8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c16:	7afb      	ldrb	r3, [r7, #11]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f004 f8f4 	bl	8008e14 <USB_EPStartXfer>
 8004c2c:	e005      	b.n	8004c3a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 f8ed 	bl	8008e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	460b      	mov	r3, r1
 8004c52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c54:	7afb      	ldrb	r3, [r7, #11]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	015b      	lsls	r3, r3, #5
 8004c5c:	3328      	adds	r3, #40	; 0x28
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c7c:	7afb      	ldrb	r3, [r7, #11]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6979      	ldr	r1, [r7, #20]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 f8bb 	bl	8008e14 <USB_EPStartXfer>
 8004c9e:	e005      	b.n	8004cac <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6979      	ldr	r1, [r7, #20]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f004 f8b4 	bl	8008e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	f003 0207 	and.w	r2, r3, #7
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d901      	bls.n	8004cd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e046      	b.n	8004d62 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da0b      	bge.n	8004cf4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	015b      	lsls	r3, r3, #5
 8004ce4:	3328      	adds	r3, #40	; 0x28
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	705a      	strb	r2, [r3, #1]
 8004cf2:	e009      	b.n	8004d08 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	015b      	lsls	r3, r3, #5
 8004cf8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4413      	add	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_PCD_EP_SetStall+0x72>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e01c      	b.n	8004d62 <HAL_PCD_EP_SetStall+0xac>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f004 fb3e 	bl	80093b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d108      	bne.n	8004d58 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f004 fc2a 	bl	80095ac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d901      	bls.n	8004d88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e03a      	b.n	8004dfe <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	da0b      	bge.n	8004da8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	015b      	lsls	r3, r3, #5
 8004d98:	3328      	adds	r3, #40	; 0x28
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	705a      	strb	r2, [r3, #1]
 8004da6:	e00b      	b.n	8004dc0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	015b      	lsls	r3, r3, #5
 8004db0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_PCD_EP_ClrStall+0x76>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e00e      	b.n	8004dfe <HAL_PCD_EP_ClrStall+0x94>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f004 fb24 	bl	800943c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e10:	e286      	b.n	8005320 <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e1a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e1c:	8afb      	ldrh	r3, [r7, #22]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004e26:	7d7b      	ldrb	r3, [r7, #21]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 8146 	bne.w	80050ba <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e2e:	8afb      	ldrh	r3, [r7, #22]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d151      	bne.n	8004edc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	b29c      	uxth	r4, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3328      	adds	r3, #40	; 0x28
 8004e5e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	3302      	adds	r3, #2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	441a      	add	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f005 fe15 	bl	800aacc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8238 	beq.w	8005320 <PCD_EP_ISR_Handler+0x518>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 8233 	bne.w	8005320 <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004eda:	e221      	b.n	8005320 <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ee2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004eec:	8a7b      	ldrh	r3, [r7, #18]
 8004eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d033      	beq.n	8004f5e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3306      	adds	r3, #6
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f004 fb8a 	bl	800964e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29c      	uxth	r4, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004f52:	b292      	uxth	r2, r2
 8004f54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f005 fd8e 	bl	800aa78 <HAL_PCD_SetupStageCallback>
 8004f5c:	e1e0      	b.n	8005320 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f280 81dc 	bge.w	8005320 <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f74:	4013      	ands	r3, r2
 8004f76:	b29c      	uxth	r4, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004f80:	b292      	uxth	r2, r2
 8004f82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4413      	add	r3, r2
 8004f98:	3306      	adds	r3, #6
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d019      	beq.n	8004fec <PCD_EP_ISR_Handler+0x1e4>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6959      	ldr	r1, [r3, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f004 fb3c 	bl	800964e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	441a      	add	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f005 fd58 	bl	800aa9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461c      	mov	r4, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	441c      	add	r4, r3
 8004ffe:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d110      	bne.n	800502e <PCD_EP_ISR_Handler+0x226>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005014:	b29a      	uxth	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005026:	b29a      	uxth	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	e02f      	b.n	800508e <PCD_EP_ISR_Handler+0x286>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b3e      	cmp	r3, #62	; 0x3e
 8005034:	d813      	bhi.n	800505e <PCD_EP_ISR_Handler+0x256>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <PCD_EP_ISR_Handler+0x248>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	3301      	adds	r3, #1
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	b29b      	uxth	r3, r3
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	b29a      	uxth	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	e017      	b.n	800508e <PCD_EP_ISR_Handler+0x286>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <PCD_EP_ISR_Handler+0x270>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	3b01      	subs	r3, #1
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	b29b      	uxth	r3, r3
 800507c:	029b      	lsls	r3, r3, #10
 800507e:	b29b      	uxth	r3, r3
 8005080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005088:	b29a      	uxth	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	b29c      	uxth	r4, r3
 80050a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050a4:	b29c      	uxth	r4, r3
 80050a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050aa:	b29c      	uxth	r4, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4ba2      	ldr	r3, [pc, #648]	; (800533c <PCD_EP_ISR_Handler+0x534>)
 80050b2:	4323      	orrs	r3, r4
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]
 80050b8:	e132      	b.n	8005320 <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	7d7b      	ldrb	r3, [r7, #21]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f280 80d1 	bge.w	8005276 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	7d7b      	ldrb	r3, [r7, #21]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050e8:	4013      	ands	r3, r2
 80050ea:	b29c      	uxth	r4, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	7d7b      	ldrb	r3, [r7, #21]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80050fc:	b292      	uxth	r2, r2
 80050fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005100:	7d7b      	ldrb	r3, [r7, #21]
 8005102:	015b      	lsls	r3, r3, #5
 8005104:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	7b1b      	ldrb	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d121      	bne.n	800515a <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511e:	b29b      	uxth	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4413      	add	r3, r2
 800512a:	3306      	adds	r3, #6
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800513e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8005140:	8bfb      	ldrh	r3, [r7, #30]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d072      	beq.n	800522c <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	88da      	ldrh	r2, [r3, #6]
 8005152:	8bfb      	ldrh	r3, [r7, #30]
 8005154:	f004 fa7b 	bl	800964e <USB_ReadPMA>
 8005158:	e068      	b.n	800522c <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d021      	beq.n	80051b8 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	3302      	adds	r3, #2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800519e:	8bfb      	ldrh	r3, [r7, #30]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d02a      	beq.n	80051fa <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	891a      	ldrh	r2, [r3, #8]
 80051b0:	8bfb      	ldrh	r3, [r7, #30]
 80051b2:	f004 fa4c 	bl	800964e <USB_ReadPMA>
 80051b6:	e020      	b.n	80051fa <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	3306      	adds	r3, #6
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80051e2:	8bfb      	ldrh	r3, [r7, #30]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6959      	ldr	r1, [r3, #20]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	895a      	ldrh	r2, [r3, #10]
 80051f4:	8bfb      	ldrh	r3, [r7, #30]
 80051f6:	f004 fa2a 	bl	800964e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	b29c      	uxth	r4, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	4b46      	ldr	r3, [pc, #280]	; (8005340 <PCD_EP_ISR_Handler+0x538>)
 8005226:	4323      	orrs	r3, r4
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	8bfb      	ldrh	r3, [r7, #30]
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	8bfb      	ldrh	r3, [r7, #30]
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <PCD_EP_ISR_Handler+0x44e>
 800524c:	8bfa      	ldrh	r2, [r7, #30]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d206      	bcs.n	8005264 <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f005 fc1d 	bl	800aa9c <HAL_PCD_DataOutStageCallback>
 8005262:	e008      	b.n	8005276 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	7819      	ldrb	r1, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fcad 	bl	8004bd0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005276:	8a7b      	ldrh	r3, [r7, #18]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d04f      	beq.n	8005320 <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 8005280:	7d7b      	ldrb	r3, [r7, #21]
 8005282:	015b      	lsls	r3, r3, #5
 8005284:	3328      	adds	r3, #40	; 0x28
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	7d7b      	ldrb	r3, [r7, #21]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	b29c      	uxth	r4, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	7d7b      	ldrb	r3, [r7, #21]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	3302      	adds	r3, #2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f005 fbe0 	bl	800aacc <HAL_PCD_DataInStageCallback>
 800530c:	e008      	b.n	8005320 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	7819      	ldrb	r1, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fc92 	bl	8004c44 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005328:	b29b      	uxth	r3, r3
 800532a:	b21b      	sxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	f6ff ad70 	blt.w	8004e12 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3724      	adds	r7, #36	; 0x24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}
 800533c:	ffff8080 	.word	0xffff8080
 8005340:	ffff80c0 	.word	0xffff80c0

08005344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800534a:	af00      	add	r7, sp, #0
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f000 bef4 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 816a 	beq.w	8005642 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800536e:	4bb3      	ldr	r3, [pc, #716]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b04      	cmp	r3, #4
 8005378:	d00c      	beq.n	8005394 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800537a:	4bb0      	ldr	r3, [pc, #704]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b08      	cmp	r3, #8
 8005384:	d159      	bne.n	800543a <HAL_RCC_OscConfig+0xf6>
 8005386:	4bad      	ldr	r3, [pc, #692]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d152      	bne.n	800543a <HAL_RCC_OscConfig+0xf6>
 8005394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005398:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80053a0:	fa93 f3a3 	rbit	r3, r3
 80053a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	fab3 f383 	clz	r3, r3
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d102      	bne.n	80053c6 <HAL_RCC_OscConfig+0x82>
 80053c0:	4b9e      	ldr	r3, [pc, #632]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_OscConfig+0xae>
 80053c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80053da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80053e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80053ee:	4b93      	ldr	r3, [pc, #588]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80053fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80053fe:	fa92 f2a2 	rbit	r2, r2
 8005402:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005406:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800540a:	fab2 f282 	clz	r2, r2
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	f042 0220 	orr.w	r2, r2, #32
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	f002 021f 	and.w	r2, r2, #31
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 810c 	beq.w	8005640 <HAL_RCC_OscConfig+0x2fc>
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 8106 	bne.w	8005640 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f000 be86 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d106      	bne.n	8005454 <HAL_RCC_OscConfig+0x110>
 8005446:	4b7d      	ldr	r3, [pc, #500]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7c      	ldr	r2, [pc, #496]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e030      	b.n	80054b6 <HAL_RCC_OscConfig+0x172>
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x134>
 800545e:	4b77      	ldr	r3, [pc, #476]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a76      	ldr	r2, [pc, #472]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b74      	ldr	r3, [pc, #464]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a73      	ldr	r2, [pc, #460]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e01e      	b.n	80054b6 <HAL_RCC_OscConfig+0x172>
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005482:	d10c      	bne.n	800549e <HAL_RCC_OscConfig+0x15a>
 8005484:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6c      	ldr	r2, [pc, #432]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 800548a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	4b6a      	ldr	r3, [pc, #424]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a69      	ldr	r2, [pc, #420]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e00b      	b.n	80054b6 <HAL_RCC_OscConfig+0x172>
 800549e:	4b67      	ldr	r3, [pc, #412]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a66      	ldr	r2, [pc, #408]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80054a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4b64      	ldr	r3, [pc, #400]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a63      	ldr	r2, [pc, #396]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80054b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054b6:	4b61      	ldr	r3, [pc, #388]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f023 020f 	bic.w	r2, r3, #15
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	495d      	ldr	r1, [pc, #372]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d059      	beq.n	8005588 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fc fe6e 	bl	80021b4 <HAL_GetTick>
 80054d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054de:	f7fc fe69 	bl	80021b4 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b64      	cmp	r3, #100	; 0x64
 80054ec:	d902      	bls.n	80054f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	f000 be29 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>
 80054f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005500:	fa93 f3a3 	rbit	r3, r3
 8005504:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005508:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d102      	bne.n	8005526 <HAL_RCC_OscConfig+0x1e2>
 8005520:	4b46      	ldr	r3, [pc, #280]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	e015      	b.n	8005552 <HAL_RCC_OscConfig+0x20e>
 8005526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800552a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800553a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800553e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005542:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800554e:	4b3b      	ldr	r3, [pc, #236]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005556:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800555a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800555e:	fa92 f2a2 	rbit	r2, r2
 8005562:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005566:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800556a:	fab2 f282 	clz	r2, r2
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	f042 0220 	orr.w	r2, r2, #32
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	f002 021f 	and.w	r2, r2, #31
 800557a:	2101      	movs	r1, #1
 800557c:	fa01 f202 	lsl.w	r2, r1, r2
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ab      	beq.n	80054de <HAL_RCC_OscConfig+0x19a>
 8005586:	e05c      	b.n	8005642 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fc fe14 	bl	80021b4 <HAL_GetTick>
 800558c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005590:	e00a      	b.n	80055a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005592:	f7fc fe0f 	bl	80021b4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d902      	bls.n	80055a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	f000 bdcf 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>
 80055a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80055b4:	fa93 f3a3 	rbit	r3, r3
 80055b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80055bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c0:	fab3 f383 	clz	r3, r3
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d102      	bne.n	80055da <HAL_RCC_OscConfig+0x296>
 80055d4:	4b19      	ldr	r3, [pc, #100]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	e015      	b.n	8005606 <HAL_RCC_OscConfig+0x2c2>
 80055da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80055ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80055f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005602:	4b0e      	ldr	r3, [pc, #56]	; (800563c <HAL_RCC_OscConfig+0x2f8>)
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800560a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800560e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005612:	fa92 f2a2 	rbit	r2, r2
 8005616:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800561a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800561e:	fab2 f282 	clz	r2, r2
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	f042 0220 	orr.w	r2, r2, #32
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	f002 021f 	and.w	r2, r2, #31
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f202 	lsl.w	r2, r1, r2
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ab      	bne.n	8005592 <HAL_RCC_OscConfig+0x24e>
 800563a:	e002      	b.n	8005642 <HAL_RCC_OscConfig+0x2fe>
 800563c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 816f 	beq.w	8005930 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005652:	4bd0      	ldr	r3, [pc, #832]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800565e:	4bcd      	ldr	r3, [pc, #820]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b08      	cmp	r3, #8
 8005668:	d16c      	bne.n	8005744 <HAL_RCC_OscConfig+0x400>
 800566a:	4bca      	ldr	r3, [pc, #808]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d166      	bne.n	8005744 <HAL_RCC_OscConfig+0x400>
 8005676:	2302      	movs	r3, #2
 8005678:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005680:	fa93 f3a3 	rbit	r3, r3
 8005684:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005688:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568c:	fab3 f383 	clz	r3, r3
 8005690:	b2db      	uxtb	r3, r3
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d102      	bne.n	80056a6 <HAL_RCC_OscConfig+0x362>
 80056a0:	4bbc      	ldr	r3, [pc, #752]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	e013      	b.n	80056ce <HAL_RCC_OscConfig+0x38a>
 80056a6:	2302      	movs	r3, #2
 80056a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80056b8:	2302      	movs	r3, #2
 80056ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80056be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80056ca:	4bb2      	ldr	r3, [pc, #712]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2202      	movs	r2, #2
 80056d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80056d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80056d8:	fa92 f2a2 	rbit	r2, r2
 80056dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80056e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80056e4:	fab2 f282 	clz	r2, r2
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	f042 0220 	orr.w	r2, r2, #32
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	f002 021f 	and.w	r2, r2, #31
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f202 	lsl.w	r2, r1, r2
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <HAL_RCC_OscConfig+0x3cc>
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d002      	beq.n	8005710 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f000 bd1b 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005710:	4ba0      	ldr	r3, [pc, #640]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	21f8      	movs	r1, #248	; 0xf8
 8005720:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005728:	fa91 f1a1 	rbit	r1, r1
 800572c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005730:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005734:	fab1 f181 	clz	r1, r1
 8005738:	b2c9      	uxtb	r1, r1
 800573a:	408b      	lsls	r3, r1
 800573c:	4995      	ldr	r1, [pc, #596]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005742:	e0f5      	b.n	8005930 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8085 	beq.w	800585a <HAL_RCC_OscConfig+0x516>
 8005750:	2301      	movs	r3, #1
 8005752:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005756:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800575a:	fa93 f3a3 	rbit	r3, r3
 800575e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005762:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	461a      	mov	r2, r3
 8005778:	2301      	movs	r3, #1
 800577a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fc fd1a 	bl	80021b4 <HAL_GetTick>
 8005780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005786:	f7fc fd15 	bl	80021b4 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d902      	bls.n	800579c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	f000 bcd5 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>
 800579c:	2302      	movs	r3, #2
 800579e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80057a6:	fa93 f3a3 	rbit	r3, r3
 80057aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80057ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d102      	bne.n	80057cc <HAL_RCC_OscConfig+0x488>
 80057c6:	4b73      	ldr	r3, [pc, #460]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	e013      	b.n	80057f4 <HAL_RCC_OscConfig+0x4b0>
 80057cc:	2302      	movs	r3, #2
 80057ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80057de:	2302      	movs	r3, #2
 80057e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80057e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80057f0:	4b68      	ldr	r3, [pc, #416]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2202      	movs	r2, #2
 80057f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80057fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80057fe:	fa92 f2a2 	rbit	r2, r2
 8005802:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005806:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800580a:	fab2 f282 	clz	r2, r2
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	f042 0220 	orr.w	r2, r2, #32
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	f002 021f 	and.w	r2, r2, #31
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f202 	lsl.w	r2, r1, r2
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0af      	beq.n	8005786 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	21f8      	movs	r1, #248	; 0xf8
 8005836:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800583e:	fa91 f1a1 	rbit	r1, r1
 8005842:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005846:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800584a:	fab1 f181 	clz	r1, r1
 800584e:	b2c9      	uxtb	r1, r1
 8005850:	408b      	lsls	r3, r1
 8005852:	4950      	ldr	r1, [pc, #320]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]
 8005858:	e06a      	b.n	8005930 <HAL_RCC_OscConfig+0x5ec>
 800585a:	2301      	movs	r3, #1
 800585c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005860:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005864:	fa93 f3a3 	rbit	r3, r3
 8005868:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800586c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800587a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005886:	f7fc fc95 	bl	80021b4 <HAL_GetTick>
 800588a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	e00a      	b.n	80058a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005890:	f7fc fc90 	bl	80021b4 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d902      	bls.n	80058a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	f000 bc50 	b.w	8006146 <HAL_RCC_OscConfig+0xe02>
 80058a6:	2302      	movs	r3, #2
 80058a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058b0:	fa93 f3a3 	rbit	r3, r3
 80058b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80058b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058bc:	fab3 f383 	clz	r3, r3
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d102      	bne.n	80058d6 <HAL_RCC_OscConfig+0x592>
 80058d0:	4b30      	ldr	r3, [pc, #192]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	e013      	b.n	80058fe <HAL_RCC_OscConfig+0x5ba>
 80058d6:	2302      	movs	r3, #2
 80058d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058e0:	fa93 f3a3 	rbit	r3, r3
 80058e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058e8:	2302      	movs	r3, #2
 80058ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058f2:	fa93 f3a3 	rbit	r3, r3
 80058f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <HAL_RCC_OscConfig+0x650>)
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2202      	movs	r2, #2
 8005900:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005904:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005908:	fa92 f2a2 	rbit	r2, r2
 800590c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005910:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005914:	fab2 f282 	clz	r2, r2
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	f042 0220 	orr.w	r2, r2, #32
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	f002 021f 	and.w	r2, r2, #31
 8005924:	2101      	movs	r1, #1
 8005926:	fa01 f202 	lsl.w	r2, r1, r2
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1af      	bne.n	8005890 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005930:	1d3b      	adds	r3, r7, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80da 	beq.w	8005af4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d069      	beq.n	8005a1e <HAL_RCC_OscConfig+0x6da>
 800594a:	2301      	movs	r3, #1
 800594c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005954:	fa93 f3a3 	rbit	r3, r3
 8005958:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCC_OscConfig+0x654>)
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	461a      	mov	r2, r3
 8005970:	2301      	movs	r3, #1
 8005972:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005974:	f7fc fc1e 	bl	80021b4 <HAL_GetTick>
 8005978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597c:	e00e      	b.n	800599c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800597e:	f7fc fc19 	bl	80021b4 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d906      	bls.n	800599c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e3d9      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	10908120 	.word	0x10908120
 800599c:	2302      	movs	r3, #2
 800599e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80059b2:	2202      	movs	r2, #2
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	fa93 f2a3 	rbit	r2, r3
 80059c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80059ca:	2202      	movs	r2, #2
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	fa93 f2a3 	rbit	r2, r3
 80059d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80059dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059de:	4ba5      	ldr	r3, [pc, #660]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 80059e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059e6:	2102      	movs	r1, #2
 80059e8:	6019      	str	r1, [r3, #0]
 80059ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	fa93 f1a3 	rbit	r1, r3
 80059f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059f8:	6019      	str	r1, [r3, #0]
  return result;
 80059fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	fab3 f383 	clz	r3, r3
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2101      	movs	r1, #1
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	4013      	ands	r3, r2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0b0      	beq.n	800597e <HAL_RCC_OscConfig+0x63a>
 8005a1c:	e06a      	b.n	8005af4 <HAL_RCC_OscConfig+0x7b0>
 8005a1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	fa93 f2a3 	rbit	r2, r3
 8005a30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a34:	601a      	str	r2, [r3, #0]
  return result;
 8005a36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a3a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3c:	fab3 f383 	clz	r3, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b8c      	ldr	r3, [pc, #560]	; (8005c78 <HAL_RCC_OscConfig+0x934>)
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a50:	f7fc fbb0 	bl	80021b4 <HAL_GetTick>
 8005a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a58:	e009      	b.n	8005a6e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5a:	f7fc fbab 	bl	80021b4 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e36b      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8005a6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005a72:	2202      	movs	r2, #2
 8005a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	fa93 f2a3 	rbit	r2, r3
 8005a98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	fa93 f2a3 	rbit	r2, r3
 8005ab0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005ab4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab6:	4b6f      	ldr	r3, [pc, #444]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005abe:	2102      	movs	r1, #2
 8005ac0:	6019      	str	r1, [r3, #0]
 8005ac2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f1a3 	rbit	r1, r3
 8005acc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ad0:	6019      	str	r1, [r3, #0]
  return result;
 8005ad2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fab3 f383 	clz	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2101      	movs	r1, #1
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1b2      	bne.n	8005a5a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8158 	beq.w	8005db4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0a:	4b5a      	ldr	r3, [pc, #360]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d112      	bne.n	8005b3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b16:	4b57      	ldr	r3, [pc, #348]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	4a56      	ldr	r2, [pc, #344]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b20:	61d3      	str	r3, [r2, #28]
 8005b22:	4b54      	ldr	r3, [pc, #336]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f107 0308 	add.w	r3, r7, #8
 8005b34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3c:	4b4f      	ldr	r3, [pc, #316]	; (8005c7c <HAL_RCC_OscConfig+0x938>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d11a      	bne.n	8005b7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b48:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <HAL_RCC_OscConfig+0x938>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a4b      	ldr	r2, [pc, #300]	; (8005c7c <HAL_RCC_OscConfig+0x938>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b54:	f7fc fb2e 	bl	80021b4 <HAL_GetTick>
 8005b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5c:	e009      	b.n	8005b72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5e:	f7fc fb29 	bl	80021b4 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	; 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e2e9      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b72:	4b42      	ldr	r3, [pc, #264]	; (8005c7c <HAL_RCC_OscConfig+0x938>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ef      	beq.n	8005b5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d106      	bne.n	8005b96 <HAL_RCC_OscConfig+0x852>
 8005b88:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4a39      	ldr	r2, [pc, #228]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6213      	str	r3, [r2, #32]
 8005b94:	e02f      	b.n	8005bf6 <HAL_RCC_OscConfig+0x8b2>
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10c      	bne.n	8005bba <HAL_RCC_OscConfig+0x876>
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	4a33      	ldr	r2, [pc, #204]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	6213      	str	r3, [r2, #32]
 8005bac:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	4a30      	ldr	r2, [pc, #192]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	6213      	str	r3, [r2, #32]
 8005bb8:	e01d      	b.n	8005bf6 <HAL_RCC_OscConfig+0x8b2>
 8005bba:	1d3b      	adds	r3, r7, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d10c      	bne.n	8005bde <HAL_RCC_OscConfig+0x89a>
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bca:	f043 0304 	orr.w	r3, r3, #4
 8005bce:	6213      	str	r3, [r2, #32]
 8005bd0:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6213      	str	r3, [r2, #32]
 8005bdc:	e00b      	b.n	8005bf6 <HAL_RCC_OscConfig+0x8b2>
 8005bde:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	6213      	str	r3, [r2, #32]
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005bf0:	f023 0304 	bic.w	r3, r3, #4
 8005bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d06b      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c00:	f7fc fad8 	bl	80021b4 <HAL_GetTick>
 8005c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c08:	e00b      	b.n	8005c22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fc fad3 	bl	80021b4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e291      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8005c22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c26:	2202      	movs	r2, #2
 8005c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	fa93 f2a3 	rbit	r2, r3
 8005c34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c3e:	2202      	movs	r2, #2
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	fa93 f2a3 	rbit	r2, r3
 8005c4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c50:	601a      	str	r2, [r3, #0]
  return result;
 8005c52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c58:	fab3 f383 	clz	r3, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f043 0302 	orr.w	r3, r3, #2
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCC_OscConfig+0x93c>
 8005c6c:	4b01      	ldr	r3, [pc, #4]	; (8005c74 <HAL_RCC_OscConfig+0x930>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	e014      	b.n	8005c9c <HAL_RCC_OscConfig+0x958>
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000
 8005c78:	10908120 	.word	0x10908120
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005c84:	2202      	movs	r2, #2
 8005c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	fa93 f2a3 	rbit	r2, r3
 8005c92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	4bbb      	ldr	r3, [pc, #748]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ca0:	2102      	movs	r1, #2
 8005ca2:	6011      	str	r1, [r2, #0]
 8005ca4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	fa92 f1a2 	rbit	r1, r2
 8005cae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005cb2:	6011      	str	r1, [r2, #0]
  return result;
 8005cb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	fab2 f282 	clz	r2, r2
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	f002 021f 	and.w	r2, r2, #31
 8005cca:	2101      	movs	r1, #1
 8005ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d099      	beq.n	8005c0a <HAL_RCC_OscConfig+0x8c6>
 8005cd6:	e063      	b.n	8005da0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd8:	f7fc fa6c 	bl	80021b4 <HAL_GetTick>
 8005cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce0:	e00b      	b.n	8005cfa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fc fa67 	bl	80021b4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e225      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8005cfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005cfe:	2202      	movs	r2, #2
 8005d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fa93 f2a3 	rbit	r2, r3
 8005d0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d16:	2202      	movs	r2, #2
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	fa93 f2a3 	rbit	r2, r3
 8005d24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d28:	601a      	str	r2, [r3, #0]
  return result;
 8005d2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d30:	fab3 f383 	clz	r3, r3
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d102      	bne.n	8005d4a <HAL_RCC_OscConfig+0xa06>
 8005d44:	4b90      	ldr	r3, [pc, #576]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	e00d      	b.n	8005d66 <HAL_RCC_OscConfig+0xa22>
 8005d4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d4e:	2202      	movs	r2, #2
 8005d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	fa93 f2a3 	rbit	r2, r3
 8005d5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	6011      	str	r1, [r2, #0]
 8005d6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	fa92 f1a2 	rbit	r1, r2
 8005d78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005d7c:	6011      	str	r1, [r2, #0]
  return result;
 8005d7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	fab2 f282 	clz	r2, r2
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	f002 021f 	and.w	r2, r2, #31
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1a0      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005da0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da8:	4b77      	ldr	r3, [pc, #476]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4a76      	ldr	r2, [pc, #472]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db4:	1d3b      	adds	r3, r7, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 81c2 	beq.w	8006144 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	4b71      	ldr	r3, [pc, #452]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	f000 819c 	beq.w	8006106 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dce:	1d3b      	adds	r3, r7, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	f040 8114 	bne.w	8006002 <HAL_RCC_OscConfig+0xcbe>
 8005dda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	fa93 f2a3 	rbit	r2, r3
 8005dee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005df2:	601a      	str	r2, [r3, #0]
  return result;
 8005df4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005df8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfa:	fab3 f383 	clz	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7fc f9d0 	bl	80021b4 <HAL_GetTick>
 8005e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e18:	e009      	b.n	8005e2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fc f9cb 	bl	80021b4 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e18b      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8005e2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	fa93 f2a3 	rbit	r2, r3
 8005e42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e46:	601a      	str	r2, [r3, #0]
  return result;
 8005e48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d102      	bne.n	8005e68 <HAL_RCC_OscConfig+0xb24>
 8005e62:	4b49      	ldr	r3, [pc, #292]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	e01b      	b.n	8005ea0 <HAL_RCC_OscConfig+0xb5c>
 8005e68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	fa93 f2a3 	rbit	r2, r3
 8005e7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	fa93 f2a3 	rbit	r2, r3
 8005e96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ea4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ea8:	6011      	str	r1, [r2, #0]
 8005eaa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	fa92 f1a2 	rbit	r1, r2
 8005eb4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005eb8:	6011      	str	r1, [r2, #0]
  return result;
 8005eba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	fab2 f282 	clz	r2, r2
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	f042 0220 	orr.w	r2, r2, #32
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	f002 021f 	and.w	r2, r2, #31
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d19e      	bne.n	8005e1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005edc:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	4925      	ldr	r1, [pc, #148]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]
 8005ef8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	fa93 f2a3 	rbit	r2, r3
 8005f0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f10:	601a      	str	r2, [r3, #0]
  return result;
 8005f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f18:	fab3 f383 	clz	r3, r3
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2e:	f7fc f941 	bl	80021b4 <HAL_GetTick>
 8005f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f36:	e009      	b.n	8005f4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f38:	f7fc f93c 	bl	80021b4 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e0fc      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8005f4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	fa93 f2a3 	rbit	r2, r3
 8005f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f64:	601a      	str	r2, [r3, #0]
  return result;
 8005f66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f6c:	fab3 f383 	clz	r3, r3
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d105      	bne.n	8005f8c <HAL_RCC_OscConfig+0xc48>
 8005f80:	4b01      	ldr	r3, [pc, #4]	; (8005f88 <HAL_RCC_OscConfig+0xc44>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	e01e      	b.n	8005fc4 <HAL_RCC_OscConfig+0xc80>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	fa93 f2a3 	rbit	r2, r3
 8005fa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	fa93 f2a3 	rbit	r2, r3
 8005fba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_RCC_OscConfig+0xe0c>)
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005fc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	fa92 f1a2 	rbit	r1, r2
 8005fd8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005fdc:	6011      	str	r1, [r2, #0]
  return result;
 8005fde:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	fab2 f282 	clz	r2, r2
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	f042 0220 	orr.w	r2, r2, #32
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	f002 021f 	and.w	r2, r2, #31
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d09b      	beq.n	8005f38 <HAL_RCC_OscConfig+0xbf4>
 8006000:	e0a0      	b.n	8006144 <HAL_RCC_OscConfig+0xe00>
 8006002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006006:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800600a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	fa93 f2a3 	rbit	r2, r3
 8006016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800601a:	601a      	str	r2, [r3, #0]
  return result;
 800601c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006020:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800602c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	461a      	mov	r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006038:	f7fc f8bc 	bl	80021b4 <HAL_GetTick>
 800603c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006040:	e009      	b.n	8006056 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006042:	f7fc f8b7 	bl	80021b4 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e077      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
 8006056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800605a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800605e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	fa93 f2a3 	rbit	r2, r3
 800606a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606e:	601a      	str	r2, [r3, #0]
  return result;
 8006070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006074:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d102      	bne.n	8006090 <HAL_RCC_OscConfig+0xd4c>
 800608a:	4b31      	ldr	r3, [pc, #196]	; (8006150 <HAL_RCC_OscConfig+0xe0c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	e01b      	b.n	80060c8 <HAL_RCC_OscConfig+0xd84>
 8006090:	f107 0320 	add.w	r3, r7, #32
 8006094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	f107 0320 	add.w	r3, r7, #32
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	fa93 f2a3 	rbit	r2, r3
 80060a4:	f107 031c 	add.w	r3, r7, #28
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f107 0318 	add.w	r3, r7, #24
 80060ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	f107 0318 	add.w	r3, r7, #24
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	fa93 f2a3 	rbit	r2, r3
 80060be:	f107 0314 	add.w	r3, r7, #20
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	4b22      	ldr	r3, [pc, #136]	; (8006150 <HAL_RCC_OscConfig+0xe0c>)
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f107 0210 	add.w	r2, r7, #16
 80060cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	f107 0210 	add.w	r2, r7, #16
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	fa92 f1a2 	rbit	r1, r2
 80060dc:	f107 020c 	add.w	r2, r7, #12
 80060e0:	6011      	str	r1, [r2, #0]
  return result;
 80060e2:	f107 020c 	add.w	r2, r7, #12
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	fab2 f282 	clz	r2, r2
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	f042 0220 	orr.w	r2, r2, #32
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	f002 021f 	and.w	r2, r2, #31
 80060f8:	2101      	movs	r1, #1
 80060fa:	fa01 f202 	lsl.w	r2, r1, r2
 80060fe:	4013      	ands	r3, r2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d19e      	bne.n	8006042 <HAL_RCC_OscConfig+0xcfe>
 8006104:	e01e      	b.n	8006144 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e018      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <HAL_RCC_OscConfig+0xe0c>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800611c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006124:	1d3b      	adds	r3, r7, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	429a      	cmp	r2, r3
 800612c:	d108      	bne.n	8006140 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800612e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40021000 	.word	0x40021000

08006154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b09e      	sub	sp, #120	; 0x78
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e162      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800616c:	4b90      	ldr	r3, [pc, #576]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d910      	bls.n	800619c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617a:	4b8d      	ldr	r3, [pc, #564]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 0207 	bic.w	r2, r3, #7
 8006182:	498b      	ldr	r1, [pc, #556]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	4313      	orrs	r3, r2
 8006188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800618a:	4b89      	ldr	r3, [pc, #548]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d001      	beq.n	800619c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e14a      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a8:	4b82      	ldr	r3, [pc, #520]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	497f      	ldr	r1, [pc, #508]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80dc 	beq.w	8006380 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d13c      	bne.n	800624a <HAL_RCC_ClockConfig+0xf6>
 80061d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e0:	fab3 f383 	clz	r3, r3
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d102      	bne.n	80061fa <HAL_RCC_ClockConfig+0xa6>
 80061f4:	4b6f      	ldr	r3, [pc, #444]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	e00f      	b.n	800621a <HAL_RCC_ClockConfig+0xc6>
 80061fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006202:	fa93 f3a3 	rbit	r3, r3
 8006206:	667b      	str	r3, [r7, #100]	; 0x64
 8006208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	fa93 f3a3 	rbit	r3, r3
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006216:	4b67      	ldr	r3, [pc, #412]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800621e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006222:	fa92 f2a2 	rbit	r2, r2
 8006226:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800622a:	fab2 f282 	clz	r2, r2
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	f042 0220 	orr.w	r2, r2, #32
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	f002 021f 	and.w	r2, r2, #31
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f202 	lsl.w	r2, r1, r2
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d17b      	bne.n	800633e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e0f3      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d13c      	bne.n	80062cc <HAL_RCC_ClockConfig+0x178>
 8006252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006256:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d102      	bne.n	800627c <HAL_RCC_ClockConfig+0x128>
 8006276:	4b4f      	ldr	r3, [pc, #316]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	e00f      	b.n	800629c <HAL_RCC_ClockConfig+0x148>
 800627c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006284:	fa93 f3a3 	rbit	r3, r3
 8006288:	647b      	str	r3, [r7, #68]	; 0x44
 800628a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800628e:	643b      	str	r3, [r7, #64]	; 0x40
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	fa93 f3a3 	rbit	r3, r3
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006298:	4b46      	ldr	r3, [pc, #280]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80062a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062a4:	fa92 f2a2 	rbit	r2, r2
 80062a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80062aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ac:	fab2 f282 	clz	r2, r2
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	f042 0220 	orr.w	r2, r2, #32
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	f002 021f 	and.w	r2, r2, #31
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f202 	lsl.w	r2, r1, r2
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d13a      	bne.n	800633e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0b2      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
 80062cc:	2302      	movs	r3, #2
 80062ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062da:	fab3 f383 	clz	r3, r3
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d102      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x1a0>
 80062ee:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	e00d      	b.n	8006310 <HAL_RCC_ClockConfig+0x1bc>
 80062f4:	2302      	movs	r3, #2
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	fa93 f3a3 	rbit	r3, r3
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006300:	2302      	movs	r3, #2
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	fa93 f3a3 	rbit	r3, r3
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2202      	movs	r2, #2
 8006312:	61ba      	str	r2, [r7, #24]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	fa92 f2a2 	rbit	r2, r2
 800631a:	617a      	str	r2, [r7, #20]
  return result;
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	fab2 f282 	clz	r2, r2
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	f042 0220 	orr.w	r2, r2, #32
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	f002 021f 	and.w	r2, r2, #31
 800632e:	2101      	movs	r1, #1
 8006330:	fa01 f202 	lsl.w	r2, r1, r2
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e079      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800633e:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f023 0203 	bic.w	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	491a      	ldr	r1, [pc, #104]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 800634c:	4313      	orrs	r3, r2
 800634e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006350:	f7fb ff30 	bl	80021b4 <HAL_GetTick>
 8006354:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	e00a      	b.n	800636e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006358:	f7fb ff2c 	bl	80021b4 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	; 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e061      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_RCC_ClockConfig+0x260>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 020c 	and.w	r2, r3, #12
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	429a      	cmp	r2, r3
 800637e:	d1eb      	bne.n	8006358 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d214      	bcs.n	80063b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638e:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 0207 	bic.w	r2, r3, #7
 8006396:	4906      	ldr	r1, [pc, #24]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_RCC_ClockConfig+0x25c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d005      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e040      	b.n	8006432 <HAL_RCC_ClockConfig+0x2de>
 80063b0:	40022000 	.word	0x40022000
 80063b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c4:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_RCC_ClockConfig+0x2e8>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	491a      	ldr	r1, [pc, #104]	; (800643c <HAL_RCC_ClockConfig+0x2e8>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e2:	4b16      	ldr	r3, [pc, #88]	; (800643c <HAL_RCC_ClockConfig+0x2e8>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4912      	ldr	r1, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x2e8>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063f6:	f000 f829 	bl	800644c <HAL_RCC_GetSysClockFreq>
 80063fa:	4601      	mov	r1, r0
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <HAL_RCC_ClockConfig+0x2e8>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006404:	22f0      	movs	r2, #240	; 0xf0
 8006406:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	fa92 f2a2 	rbit	r2, r2
 800640e:	60fa      	str	r2, [r7, #12]
  return result;
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	fab2 f282 	clz	r2, r2
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	40d3      	lsrs	r3, r2
 800641a:	4a09      	ldr	r2, [pc, #36]	; (8006440 <HAL_RCC_ClockConfig+0x2ec>)
 800641c:	5cd3      	ldrb	r3, [r2, r3]
 800641e:	fa21 f303 	lsr.w	r3, r1, r3
 8006422:	4a08      	ldr	r2, [pc, #32]	; (8006444 <HAL_RCC_ClockConfig+0x2f0>)
 8006424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006426:	4b08      	ldr	r3, [pc, #32]	; (8006448 <HAL_RCC_ClockConfig+0x2f4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fb fd54 	bl	8001ed8 <HAL_InitTick>
  
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3778      	adds	r7, #120	; 0x78
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000
 8006440:	0800ae4c 	.word	0x0800ae4c
 8006444:	20000004 	.word	0x20000004
 8006448:	20000008 	.word	0x20000008

0800644c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	b480      	push	{r7}
 800644e:	b08b      	sub	sp, #44	; 0x2c
 8006450:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	2300      	movs	r3, #0
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006466:	4b29      	ldr	r3, [pc, #164]	; (800650c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b04      	cmp	r3, #4
 8006474:	d002      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x30>
 8006476:	2b08      	cmp	r3, #8
 8006478:	d003      	beq.n	8006482 <HAL_RCC_GetSysClockFreq+0x36>
 800647a:	e03c      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <HAL_RCC_GetSysClockFreq+0xc4>)
 800647e:	623b      	str	r3, [r7, #32]
      break;
 8006480:	e03c      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006488:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800648c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	fa92 f2a2 	rbit	r2, r2
 8006494:	607a      	str	r2, [r7, #4]
  return result;
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	fab2 f282 	clz	r2, r2
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	40d3      	lsrs	r3, r2
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <HAL_RCC_GetSysClockFreq+0xc8>)
 80064a2:	5cd3      	ldrb	r3, [r2, r3]
 80064a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80064a6:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_RCC_GetSysClockFreq+0xc0>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	220f      	movs	r2, #15
 80064b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	fa92 f2a2 	rbit	r2, r2
 80064b8:	60fa      	str	r2, [r7, #12]
  return result;
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	fab2 f282 	clz	r2, r2
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	40d3      	lsrs	r3, r2
 80064c4:	4a14      	ldr	r2, [pc, #80]	; (8006518 <HAL_RCC_GetSysClockFreq+0xcc>)
 80064c6:	5cd3      	ldrb	r3, [r2, r3]
 80064c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064d4:	4a0e      	ldr	r2, [pc, #56]	; (8006510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
 80064e4:	e004      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4a0c      	ldr	r2, [pc, #48]	; (800651c <HAL_RCC_GetSysClockFreq+0xd0>)
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	623b      	str	r3, [r7, #32]
      break;
 80064f4:	e002      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064f8:	623b      	str	r3, [r7, #32]
      break;
 80064fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fc:	6a3b      	ldr	r3, [r7, #32]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	372c      	adds	r7, #44	; 0x2c
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40021000 	.word	0x40021000
 8006510:	007a1200 	.word	0x007a1200
 8006514:	0800ae64 	.word	0x0800ae64
 8006518:	0800ae74 	.word	0x0800ae74
 800651c:	003d0900 	.word	0x003d0900

08006520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <HAL_RCC_GetHCLKFreq+0x14>)
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000004 	.word	0x20000004

08006538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800653e:	f7ff ffef 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006542:	4601      	mov	r1, r0
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800654c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	fa92 f2a2 	rbit	r2, r2
 8006558:	603a      	str	r2, [r7, #0]
  return result;
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	fab2 f282 	clz	r2, r2
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	40d3      	lsrs	r3, r2
 8006564:	4a04      	ldr	r2, [pc, #16]	; (8006578 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000
 8006578:	0800ae5c 	.word	0x0800ae5c

0800657c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006582:	f7ff ffcd 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006586:	4601      	mov	r1, r0
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006590:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006594:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	fa92 f2a2 	rbit	r2, r2
 800659c:	603a      	str	r2, [r7, #0]
  return result;
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	fab2 f282 	clz	r2, r2
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	40d3      	lsrs	r3, r2
 80065a8:	4a04      	ldr	r2, [pc, #16]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80065aa:	5cd3      	ldrb	r3, [r2, r3]
 80065ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40021000 	.word	0x40021000
 80065bc:	0800ae5c 	.word	0x0800ae5c

080065c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	220f      	movs	r2, #15
 80065ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065d0:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_GetClockConfig+0x5c>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 0203 	and.w	r2, r3, #3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <HAL_RCC_GetClockConfig+0x5c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <HAL_RCC_GetClockConfig+0x5c>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <HAL_RCC_GetClockConfig+0x5c>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	08db      	lsrs	r3, r3, #3
 80065fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <HAL_RCC_GetClockConfig+0x60>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0207 	and.w	r2, r3, #7
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40021000 	.word	0x40021000
 8006620:	40022000 	.word	0x40022000

08006624 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b092      	sub	sp, #72	; 0x48
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80d7 	beq.w	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006648:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10e      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006654:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	4a4a      	ldr	r2, [pc, #296]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665e:	61d3      	str	r3, [r2, #28]
 8006660:	4b48      	ldr	r3, [pc, #288]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b45      	ldr	r3, [pc, #276]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667e:	4b42      	ldr	r3, [pc, #264]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a41      	ldr	r2, [pc, #260]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006688:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668a:	f7fb fd93 	bl	80021b4 <HAL_GetTick>
 800668e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	e008      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fb fd8f 	bl	80021b4 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b64      	cmp	r3, #100	; 0x64
 800669e:	d901      	bls.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e169      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	4b38      	ldr	r3, [pc, #224]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066b0:	4b34      	ldr	r3, [pc, #208]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8084 	beq.w	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d07c      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ea:	fab3 f383 	clz	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	4b26      	ldr	r3, [pc, #152]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	461a      	mov	r2, r3
 80066fa:	2301      	movs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	fa93 f3a3 	rbit	r3, r3
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800670e:	fab3 f383 	clz	r3, r3
 8006712:	b2db      	uxtb	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	4b1d      	ldr	r3, [pc, #116]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04b      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006732:	f7fb fd3f 	bl	80021b4 <HAL_GetTick>
 8006736:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fb fd3b 	bl	80021b4 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e113      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006750:	2302      	movs	r3, #2
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
 800675c:	2302      	movs	r3, #2
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	fa93 f3a3 	rbit	r3, r3
 8006766:	61fb      	str	r3, [r7, #28]
  return result;
 8006768:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676a:	fab3 f383 	clz	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f043 0302 	orr.w	r3, r3, #2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d108      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800677e:	4b01      	ldr	r3, [pc, #4]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	e00d      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006784:	40021000 	.word	0x40021000
 8006788:	40007000 	.word	0x40007000
 800678c:	10908100 	.word	0x10908100
 8006790:	2302      	movs	r3, #2
 8006792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	fa93 f3a3 	rbit	r3, r3
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	4b78      	ldr	r3, [pc, #480]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2202      	movs	r2, #2
 80067a2:	613a      	str	r2, [r7, #16]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	fa92 f2a2 	rbit	r2, r2
 80067aa:	60fa      	str	r2, [r7, #12]
  return result;
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	fab2 f282 	clz	r2, r2
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	f002 021f 	and.w	r2, r2, #31
 80067be:	2101      	movs	r1, #1
 80067c0:	fa01 f202 	lsl.w	r2, r1, r2
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0b7      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80067ca:	4b6d      	ldr	r3, [pc, #436]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	496a      	ldr	r1, [pc, #424]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d105      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e4:	4b66      	ldr	r3, [pc, #408]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4a65      	ldr	r2, [pc, #404]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067fc:	4b60      	ldr	r3, [pc, #384]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f023 0203 	bic.w	r2, r3, #3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	495d      	ldr	r1, [pc, #372]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800680a:	4313      	orrs	r3, r2
 800680c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d008      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800681a:	4b59      	ldr	r3, [pc, #356]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	4956      	ldr	r1, [pc, #344]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006838:	4b51      	ldr	r3, [pc, #324]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	494e      	ldr	r1, [pc, #312]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006846:	4313      	orrs	r3, r2
 8006848:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006856:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	f023 0210 	bic.w	r2, r3, #16
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4947      	ldr	r1, [pc, #284]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006874:	4b42      	ldr	r3, [pc, #264]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	493f      	ldr	r1, [pc, #252]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006892:	4b3b      	ldr	r3, [pc, #236]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	f023 0220 	bic.w	r2, r3, #32
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	4938      	ldr	r1, [pc, #224]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068b0:	4b33      	ldr	r3, [pc, #204]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	4930      	ldr	r1, [pc, #192]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068ce:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	4929      	ldr	r1, [pc, #164]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068ec:	4b24      	ldr	r3, [pc, #144]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	4921      	ldr	r1, [pc, #132]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800690a:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	491a      	ldr	r1, [pc, #104]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006918:	4313      	orrs	r3, r2
 800691a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	4912      	ldr	r1, [pc, #72]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006946:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	490b      	ldr	r1, [pc, #44]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006970:	4903      	ldr	r1, [pc, #12]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3748      	adds	r7, #72	; 0x48
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40021000 	.word	0x40021000

08006984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e01d      	b.n	80069d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fb f906 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f000 fc46 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <HAL_TIM_Base_Start_IT+0x50>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b06      	cmp	r3, #6
 8006a04:	d00b      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x42>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d007      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	00010007 	.word	0x00010007

08006a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e01d      	b.n	8006a7e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fb f890 	bl	8001b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f000 fbf0 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2201      	movs	r2, #1
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f965 	bl	8007d6a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <HAL_TIM_PWM_Start+0x98>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0x4a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <HAL_TIM_PWM_Start+0x9c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0x4a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <HAL_TIM_PWM_Start+0xa0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0x4a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1a      	ldr	r2, [pc, #104]	; (8006b2c <HAL_TIM_PWM_Start+0xa4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0x4a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_TIM_PWM_Start+0xa8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d101      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x4e>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <HAL_TIM_PWM_Start+0x50>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_TIM_PWM_Start+0xac>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b06      	cmp	r3, #6
 8006afc:	d00b      	beq.n	8006b16 <HAL_TIM_PWM_Start+0x8e>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b04:	d007      	beq.n	8006b16 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40013400 	.word	0x40013400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	40014800 	.word	0x40014800
 8006b34:	00010007 	.word	0x00010007

08006b38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e01d      	b.n	8006b86 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f815 	bl	8006b8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 fb6c 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d122      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d11b      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f06f 0202 	mvn.w	r2, #2
 8006bce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb17 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006bea:	e005      	b.n	8006bf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fb09 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb1a 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d122      	bne.n	8006c52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d11b      	bne.n	8006c52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f06f 0204 	mvn.w	r2, #4
 8006c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 faed 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006c3e:	e005      	b.n	8006c4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fadf 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 faf0 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d122      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d11b      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f06f 0208 	mvn.w	r2, #8
 8006c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fac3 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006c92:	e005      	b.n	8006ca0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fab5 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fac6 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d122      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d11b      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f06f 0210 	mvn.w	r2, #16
 8006cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2208      	movs	r2, #8
 8006cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa99 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006ce6:	e005      	b.n	8006cf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa8b 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa9c 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10e      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d107      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f06f 0201 	mvn.w	r2, #1
 8006d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa fbfd 	bl	8001520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d10e      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d107      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f969 	bl	8008024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d60:	d10e      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d107      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f95c 	bl	8008038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d10e      	bne.n	8006dac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d107      	bne.n	8006dac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa4a 	bl	8007240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d10e      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d107      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0220 	mvn.w	r2, #32
 8006dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 f91c 	bl	8008010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_IC_ConfigChannel+0x1a>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e08a      	b.n	8006f10 <HAL_TIM_IC_ConfigChannel+0x130>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11b      	bne.n	8006e48 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6819      	ldr	r1, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f000 fe06 	bl	8007a30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 020c 	bic.w	r2, r2, #12
 8006e32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	619a      	str	r2, [r3, #24]
 8006e46:	e05a      	b.n	8006efe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d11c      	bne.n	8006e88 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6819      	ldr	r1, [r3, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f000 fe7e 	bl	8007b5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6999      	ldr	r1, [r3, #24]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	021a      	lsls	r2, r3, #8
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	619a      	str	r2, [r3, #24]
 8006e86:	e03a      	b.n	8006efe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f000 fecb 	bl	8007c38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 020c 	bic.w	r2, r2, #12
 8006eb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69d9      	ldr	r1, [r3, #28]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	61da      	str	r2, [r3, #28]
 8006ec4:	e01b      	b.n	8006efe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f000 feeb 	bl	8007cb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ee8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69d9      	ldr	r1, [r3, #28]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	021a      	lsls	r2, r3, #8
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e105      	b.n	800713e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b14      	cmp	r3, #20
 8006f46:	f200 80f0 	bhi.w	800712a <HAL_TIM_PWM_ConfigChannel+0x212>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	0800712b 	.word	0x0800712b
 8006f58:	0800712b 	.word	0x0800712b
 8006f5c:	0800712b 	.word	0x0800712b
 8006f60:	08006fe5 	.word	0x08006fe5
 8006f64:	0800712b 	.word	0x0800712b
 8006f68:	0800712b 	.word	0x0800712b
 8006f6c:	0800712b 	.word	0x0800712b
 8006f70:	08007027 	.word	0x08007027
 8006f74:	0800712b 	.word	0x0800712b
 8006f78:	0800712b 	.word	0x0800712b
 8006f7c:	0800712b 	.word	0x0800712b
 8006f80:	08007067 	.word	0x08007067
 8006f84:	0800712b 	.word	0x0800712b
 8006f88:	0800712b 	.word	0x0800712b
 8006f8c:	0800712b 	.word	0x0800712b
 8006f90:	080070a9 	.word	0x080070a9
 8006f94:	0800712b 	.word	0x0800712b
 8006f98:	0800712b 	.word	0x0800712b
 8006f9c:	0800712b 	.word	0x0800712b
 8006fa0:	080070e9 	.word	0x080070e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f9e2 	bl	8007374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0208 	orr.w	r2, r2, #8
 8006fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0204 	bic.w	r2, r2, #4
 8006fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6999      	ldr	r1, [r3, #24]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	619a      	str	r2, [r3, #24]
      break;
 8006fe2:	e0a3      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fa52 	bl	8007494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6999      	ldr	r1, [r3, #24]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	021a      	lsls	r2, r3, #8
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	619a      	str	r2, [r3, #24]
      break;
 8007024:	e082      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fabb 	bl	80075a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f042 0208 	orr.w	r2, r2, #8
 8007040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0204 	bic.w	r2, r2, #4
 8007050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	61da      	str	r2, [r3, #28]
      break;
 8007064:	e062      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fb23 	bl	80076b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	021a      	lsls	r2, r3, #8
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	61da      	str	r2, [r3, #28]
      break;
 80070a6:	e041      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fb6c 	bl	800778c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0208 	orr.w	r2, r2, #8
 80070c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0204 	bic.w	r2, r2, #4
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070e6:	e021      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fbb0 	bl	8007854 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	021a      	lsls	r2, r3, #8
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007128:	e000      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800712a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop

08007148 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007160:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007194:	2302      	movs	r3, #2
 8007196:	e031      	b.n	80071fc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fbb8 	bl	8007920 <TIM_SlaveTimer_SetConfig>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e018      	b.n	80071fc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071e8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <TIM_Base_SetConfig+0x104>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00f      	beq.n	800728c <TIM_Base_SetConfig+0x38>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d00b      	beq.n	800728c <TIM_Base_SetConfig+0x38>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a39      	ldr	r2, [pc, #228]	; (800735c <TIM_Base_SetConfig+0x108>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_Base_SetConfig+0x38>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a38      	ldr	r2, [pc, #224]	; (8007360 <TIM_Base_SetConfig+0x10c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_Base_SetConfig+0x38>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a37      	ldr	r2, [pc, #220]	; (8007364 <TIM_Base_SetConfig+0x110>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d108      	bne.n	800729e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <TIM_Base_SetConfig+0x104>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01b      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ac:	d017      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	; (800735c <TIM_Base_SetConfig+0x108>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d013      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a29      	ldr	r2, [pc, #164]	; (8007360 <TIM_Base_SetConfig+0x10c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00f      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a28      	ldr	r2, [pc, #160]	; (8007364 <TIM_Base_SetConfig+0x110>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00b      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a27      	ldr	r2, [pc, #156]	; (8007368 <TIM_Base_SetConfig+0x114>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d007      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a26      	ldr	r2, [pc, #152]	; (800736c <TIM_Base_SetConfig+0x118>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d003      	beq.n	80072de <TIM_Base_SetConfig+0x8a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a25      	ldr	r2, [pc, #148]	; (8007370 <TIM_Base_SetConfig+0x11c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d108      	bne.n	80072f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <TIM_Base_SetConfig+0x104>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00f      	beq.n	800733c <TIM_Base_SetConfig+0xe8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a11      	ldr	r2, [pc, #68]	; (8007364 <TIM_Base_SetConfig+0x110>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00b      	beq.n	800733c <TIM_Base_SetConfig+0xe8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a10      	ldr	r2, [pc, #64]	; (8007368 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_Base_SetConfig+0xe8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0f      	ldr	r2, [pc, #60]	; (800736c <TIM_Base_SetConfig+0x118>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0xe8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <TIM_Base_SetConfig+0x11c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d103      	bne.n	8007344 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	615a      	str	r2, [r3, #20]
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40012c00 	.word	0x40012c00
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40013400 	.word	0x40013400
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0201 	bic.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f023 0302 	bic.w	r3, r3, #2
 80073c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a2c      	ldr	r2, [pc, #176]	; (8007480 <TIM_OC1_SetConfig+0x10c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d00f      	beq.n	80073f4 <TIM_OC1_SetConfig+0x80>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a2b      	ldr	r2, [pc, #172]	; (8007484 <TIM_OC1_SetConfig+0x110>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00b      	beq.n	80073f4 <TIM_OC1_SetConfig+0x80>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <TIM_OC1_SetConfig+0x114>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d007      	beq.n	80073f4 <TIM_OC1_SetConfig+0x80>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a29      	ldr	r2, [pc, #164]	; (800748c <TIM_OC1_SetConfig+0x118>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d003      	beq.n	80073f4 <TIM_OC1_SetConfig+0x80>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a28      	ldr	r2, [pc, #160]	; (8007490 <TIM_OC1_SetConfig+0x11c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d10c      	bne.n	800740e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0308 	bic.w	r3, r3, #8
 80073fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 0304 	bic.w	r3, r3, #4
 800740c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <TIM_OC1_SetConfig+0x10c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00f      	beq.n	8007436 <TIM_OC1_SetConfig+0xc2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <TIM_OC1_SetConfig+0x110>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00b      	beq.n	8007436 <TIM_OC1_SetConfig+0xc2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a19      	ldr	r2, [pc, #100]	; (8007488 <TIM_OC1_SetConfig+0x114>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d007      	beq.n	8007436 <TIM_OC1_SetConfig+0xc2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a18      	ldr	r2, [pc, #96]	; (800748c <TIM_OC1_SetConfig+0x118>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d003      	beq.n	8007436 <TIM_OC1_SetConfig+0xc2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a17      	ldr	r2, [pc, #92]	; (8007490 <TIM_OC1_SetConfig+0x11c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d111      	bne.n	800745a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800743c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40012c00 	.word	0x40012c00
 8007484:	40013400 	.word	0x40013400
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400
 8007490:	40014800 	.word	0x40014800

08007494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f023 0210 	bic.w	r2, r3, #16
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f023 0320 	bic.w	r3, r3, #32
 80074e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a28      	ldr	r2, [pc, #160]	; (8007594 <TIM_OC2_SetConfig+0x100>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d003      	beq.n	8007500 <TIM_OC2_SetConfig+0x6c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a27      	ldr	r2, [pc, #156]	; (8007598 <TIM_OC2_SetConfig+0x104>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10d      	bne.n	800751c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a1d      	ldr	r2, [pc, #116]	; (8007594 <TIM_OC2_SetConfig+0x100>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00f      	beq.n	8007544 <TIM_OC2_SetConfig+0xb0>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <TIM_OC2_SetConfig+0x104>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00b      	beq.n	8007544 <TIM_OC2_SetConfig+0xb0>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1b      	ldr	r2, [pc, #108]	; (800759c <TIM_OC2_SetConfig+0x108>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <TIM_OC2_SetConfig+0xb0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a1a      	ldr	r2, [pc, #104]	; (80075a0 <TIM_OC2_SetConfig+0x10c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_OC2_SetConfig+0xb0>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <TIM_OC2_SetConfig+0x110>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d113      	bne.n	800756c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007552:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	4313      	orrs	r3, r2
 800756a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	621a      	str	r2, [r3, #32]
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40012c00 	.word	0x40012c00
 8007598:	40013400 	.word	0x40013400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800

080075a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a27      	ldr	r2, [pc, #156]	; (80076a4 <TIM_OC3_SetConfig+0xfc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_OC3_SetConfig+0x6a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <TIM_OC3_SetConfig+0x100>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d10d      	bne.n	800762e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800762c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <TIM_OC3_SetConfig+0xfc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00f      	beq.n	8007656 <TIM_OC3_SetConfig+0xae>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <TIM_OC3_SetConfig+0x100>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00b      	beq.n	8007656 <TIM_OC3_SetConfig+0xae>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1a      	ldr	r2, [pc, #104]	; (80076ac <TIM_OC3_SetConfig+0x104>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d007      	beq.n	8007656 <TIM_OC3_SetConfig+0xae>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a19      	ldr	r2, [pc, #100]	; (80076b0 <TIM_OC3_SetConfig+0x108>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d003      	beq.n	8007656 <TIM_OC3_SetConfig+0xae>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a18      	ldr	r2, [pc, #96]	; (80076b4 <TIM_OC3_SetConfig+0x10c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d113      	bne.n	800767e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800765c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800

080076b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	021b      	lsls	r3, r3, #8
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	031b      	lsls	r3, r3, #12
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a18      	ldr	r2, [pc, #96]	; (8007778 <TIM_OC4_SetConfig+0xc0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00f      	beq.n	800773c <TIM_OC4_SetConfig+0x84>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a17      	ldr	r2, [pc, #92]	; (800777c <TIM_OC4_SetConfig+0xc4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00b      	beq.n	800773c <TIM_OC4_SetConfig+0x84>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a16      	ldr	r2, [pc, #88]	; (8007780 <TIM_OC4_SetConfig+0xc8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d007      	beq.n	800773c <TIM_OC4_SetConfig+0x84>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a15      	ldr	r2, [pc, #84]	; (8007784 <TIM_OC4_SetConfig+0xcc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_OC4_SetConfig+0x84>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a14      	ldr	r2, [pc, #80]	; (8007788 <TIM_OC4_SetConfig+0xd0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d109      	bne.n	8007750 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	019b      	lsls	r3, r3, #6
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	621a      	str	r2, [r3, #32]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40012c00 	.word	0x40012c00
 800777c:	40013400 	.word	0x40013400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800

0800778c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a17      	ldr	r2, [pc, #92]	; (8007840 <TIM_OC5_SetConfig+0xb4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00f      	beq.n	8007806 <TIM_OC5_SetConfig+0x7a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a16      	ldr	r2, [pc, #88]	; (8007844 <TIM_OC5_SetConfig+0xb8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00b      	beq.n	8007806 <TIM_OC5_SetConfig+0x7a>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <TIM_OC5_SetConfig+0xbc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d007      	beq.n	8007806 <TIM_OC5_SetConfig+0x7a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a14      	ldr	r2, [pc, #80]	; (800784c <TIM_OC5_SetConfig+0xc0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <TIM_OC5_SetConfig+0x7a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a13      	ldr	r2, [pc, #76]	; (8007850 <TIM_OC5_SetConfig+0xc4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d109      	bne.n	800781a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800780c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40014000 	.word	0x40014000
 800784c:	40014400 	.word	0x40014400
 8007850:	40014800 	.word	0x40014800

08007854 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800789a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	051b      	lsls	r3, r3, #20
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a18      	ldr	r2, [pc, #96]	; (800790c <TIM_OC6_SetConfig+0xb8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00f      	beq.n	80078d0 <TIM_OC6_SetConfig+0x7c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a17      	ldr	r2, [pc, #92]	; (8007910 <TIM_OC6_SetConfig+0xbc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <TIM_OC6_SetConfig+0x7c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a16      	ldr	r2, [pc, #88]	; (8007914 <TIM_OC6_SetConfig+0xc0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d007      	beq.n	80078d0 <TIM_OC6_SetConfig+0x7c>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a15      	ldr	r2, [pc, #84]	; (8007918 <TIM_OC6_SetConfig+0xc4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_OC6_SetConfig+0x7c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a14      	ldr	r2, [pc, #80]	; (800791c <TIM_OC6_SetConfig+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d109      	bne.n	80078e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	029b      	lsls	r3, r3, #10
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	621a      	str	r2, [r3, #32]
}
 80078fe:	bf00      	nop
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40012c00 	.word	0x40012c00
 8007910:	40013400 	.word	0x40013400
 8007914:	40014000 	.word	0x40014000
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800

08007920 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007938:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b30      	cmp	r3, #48	; 0x30
 8007968:	d05c      	beq.n	8007a24 <TIM_SlaveTimer_SetConfig+0x104>
 800796a:	2b30      	cmp	r3, #48	; 0x30
 800796c:	d806      	bhi.n	800797c <TIM_SlaveTimer_SetConfig+0x5c>
 800796e:	2b10      	cmp	r3, #16
 8007970:	d058      	beq.n	8007a24 <TIM_SlaveTimer_SetConfig+0x104>
 8007972:	2b20      	cmp	r3, #32
 8007974:	d056      	beq.n	8007a24 <TIM_SlaveTimer_SetConfig+0x104>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d054      	beq.n	8007a24 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800797a:	e054      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d03d      	beq.n	80079fc <TIM_SlaveTimer_SetConfig+0xdc>
 8007980:	2b50      	cmp	r3, #80	; 0x50
 8007982:	d802      	bhi.n	800798a <TIM_SlaveTimer_SetConfig+0x6a>
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d010      	beq.n	80079aa <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8007988:	e04d      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800798a:	2b60      	cmp	r3, #96	; 0x60
 800798c:	d040      	beq.n	8007a10 <TIM_SlaveTimer_SetConfig+0xf0>
 800798e:	2b70      	cmp	r3, #112	; 0x70
 8007990:	d000      	beq.n	8007994 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8007992:	e048      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68d9      	ldr	r1, [r3, #12]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f000 f9c1 	bl	8007d2a <TIM_ETR_SetConfig>
      break;
 80079a8:	e03d      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d101      	bne.n	80079b6 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e038      	b.n	8007a28 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0201 	bic.w	r2, r2, #1
 80079cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079dc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	621a      	str	r2, [r3, #32]
      break;
 80079fa:	e014      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	6899      	ldr	r1, [r3, #8]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f000 f879 	bl	8007b00 <TIM_TI1_ConfigInputStage>
      break;
 8007a0e:	e00a      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6899      	ldr	r1, [r3, #8]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f000 f8db 	bl	8007bd8 <TIM_TI2_ConfigInputStage>
      break;
 8007a22:	e000      	b.n	8007a26 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8007a24:	bf00      	nop
  }
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 0201 	bic.w	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4a24      	ldr	r2, [pc, #144]	; (8007aec <TIM_TI1_SetConfig+0xbc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <TIM_TI1_SetConfig+0x56>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a64:	d00f      	beq.n	8007a86 <TIM_TI1_SetConfig+0x56>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4a21      	ldr	r2, [pc, #132]	; (8007af0 <TIM_TI1_SetConfig+0xc0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00b      	beq.n	8007a86 <TIM_TI1_SetConfig+0x56>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4a20      	ldr	r2, [pc, #128]	; (8007af4 <TIM_TI1_SetConfig+0xc4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d007      	beq.n	8007a86 <TIM_TI1_SetConfig+0x56>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <TIM_TI1_SetConfig+0xc8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_TI1_SetConfig+0x56>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4a1e      	ldr	r2, [pc, #120]	; (8007afc <TIM_TI1_SetConfig+0xcc>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d101      	bne.n	8007a8a <TIM_TI1_SetConfig+0x5a>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <TIM_TI1_SetConfig+0x5c>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e003      	b.n	8007aaa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f023 030a 	bic.w	r3, r3, #10
 8007ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 030a 	and.w	r3, r3, #10
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40013400 	.word	0x40013400
 8007afc:	40014000 	.word	0x40014000

08007b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f023 0201 	bic.w	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f023 030a 	bic.w	r3, r3, #10
 8007b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b087      	sub	sp, #28
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f023 0210 	bic.w	r2, r3, #16
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	031b      	lsls	r3, r3, #12
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	621a      	str	r2, [r3, #32]
}
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f023 0210 	bic.w	r2, r3, #16
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	031b      	lsls	r3, r3, #12
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	621a      	str	r2, [r3, #32]
}
 8007c2c:	bf00      	nop
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f023 0303 	bic.w	r3, r3, #3
 8007c64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	621a      	str	r2, [r3, #32]
}
 8007ca4:	bf00      	nop
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	031b      	lsls	r3, r3, #12
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007d02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	031b      	lsls	r3, r3, #12
 8007d08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	021a      	lsls	r2, r3, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	609a      	str	r2, [r3, #8]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1a      	ldr	r2, [r3, #32]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	401a      	ands	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007da2:	431a      	orrs	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	621a      	str	r2, [r3, #32]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f940 	bl	800804c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_TIMEx_PWMN_Start+0x5c>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b06      	cmp	r3, #6
 8007dec:	d00b      	beq.n	8007e06 <HAL_TIMEx_PWMN_Start+0x52>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df4:	d007      	beq.n	8007e06 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0201 	orr.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	00010007 	.word	0x00010007

08007e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e063      	b.n	8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2b      	ldr	r2, [pc, #172]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2a      	ldr	r2, [pc, #168]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d108      	bne.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d018      	beq.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9e:	d013      	beq.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00e      	beq.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d009      	beq.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d004      	beq.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10c      	bne.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ece:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40014000 	.word	0x40014000

08007f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e065      	b.n	8007ffc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a16      	ldr	r2, [pc, #88]	; (8008008 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d004      	beq.n	8007fbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a14      	ldr	r2, [pc, #80]	; (800800c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d115      	bne.n	8007fea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	051b      	lsls	r3, r3, #20
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	40012c00 	.word	0x40012c00
 800800c:	40013400 	.word	0x40013400

08008010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2204      	movs	r2, #4
 8008060:	fa02 f303 	lsl.w	r3, r2, r3
 8008064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1a      	ldr	r2, [r3, #32]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	43db      	mvns	r3, r3
 800806e:	401a      	ands	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1a      	ldr	r2, [r3, #32]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	431a      	orrs	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e040      	b.n	800812a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7f9 fe63 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2224      	movs	r2, #36	; 0x24
 80080c2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f82d 	bl	8008134 <UART_SetConfig>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e022      	b.n	800812a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fa3b 	bl	8008568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008100:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008110:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0201 	orr.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fac2 	bl	80086ac <UART_CheckIdleState>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800813c:	2300      	movs	r3, #0
 800813e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008166:	f023 030c 	bic.w	r3, r3, #12
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	6939      	ldr	r1, [r7, #16]
 8008170:	430b      	orrs	r3, r1
 8008172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4aa9      	ldr	r2, [pc, #676]	; (8008458 <UART_SetConfig+0x324>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d121      	bne.n	80081fc <UART_SetConfig+0xc8>
 80081b8:	4ba8      	ldr	r3, [pc, #672]	; (800845c <UART_SetConfig+0x328>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d817      	bhi.n	80081f4 <UART_SetConfig+0xc0>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <UART_SetConfig+0x98>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	080081e9 	.word	0x080081e9
 80081d4:	080081ef 	.word	0x080081ef
 80081d8:	080081e3 	.word	0x080081e3
 80081dc:	2301      	movs	r3, #1
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e0b2      	b.n	8008348 <UART_SetConfig+0x214>
 80081e2:	2302      	movs	r3, #2
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e0af      	b.n	8008348 <UART_SetConfig+0x214>
 80081e8:	2304      	movs	r3, #4
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e0ac      	b.n	8008348 <UART_SetConfig+0x214>
 80081ee:	2308      	movs	r3, #8
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e0a9      	b.n	8008348 <UART_SetConfig+0x214>
 80081f4:	2310      	movs	r3, #16
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	bf00      	nop
 80081fa:	e0a5      	b.n	8008348 <UART_SetConfig+0x214>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a97      	ldr	r2, [pc, #604]	; (8008460 <UART_SetConfig+0x32c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d123      	bne.n	800824e <UART_SetConfig+0x11a>
 8008206:	4b95      	ldr	r3, [pc, #596]	; (800845c <UART_SetConfig+0x328>)
 8008208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008212:	d012      	beq.n	800823a <UART_SetConfig+0x106>
 8008214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008218:	d802      	bhi.n	8008220 <UART_SetConfig+0xec>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <UART_SetConfig+0xfa>
 800821e:	e012      	b.n	8008246 <UART_SetConfig+0x112>
 8008220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008224:	d00c      	beq.n	8008240 <UART_SetConfig+0x10c>
 8008226:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800822a:	d003      	beq.n	8008234 <UART_SetConfig+0x100>
 800822c:	e00b      	b.n	8008246 <UART_SetConfig+0x112>
 800822e:	2300      	movs	r3, #0
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e089      	b.n	8008348 <UART_SetConfig+0x214>
 8008234:	2302      	movs	r3, #2
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e086      	b.n	8008348 <UART_SetConfig+0x214>
 800823a:	2304      	movs	r3, #4
 800823c:	77fb      	strb	r3, [r7, #31]
 800823e:	e083      	b.n	8008348 <UART_SetConfig+0x214>
 8008240:	2308      	movs	r3, #8
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e080      	b.n	8008348 <UART_SetConfig+0x214>
 8008246:	2310      	movs	r3, #16
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	bf00      	nop
 800824c:	e07c      	b.n	8008348 <UART_SetConfig+0x214>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a84      	ldr	r2, [pc, #528]	; (8008464 <UART_SetConfig+0x330>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d123      	bne.n	80082a0 <UART_SetConfig+0x16c>
 8008258:	4b80      	ldr	r3, [pc, #512]	; (800845c <UART_SetConfig+0x328>)
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008264:	d012      	beq.n	800828c <UART_SetConfig+0x158>
 8008266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800826a:	d802      	bhi.n	8008272 <UART_SetConfig+0x13e>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <UART_SetConfig+0x14c>
 8008270:	e012      	b.n	8008298 <UART_SetConfig+0x164>
 8008272:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008276:	d00c      	beq.n	8008292 <UART_SetConfig+0x15e>
 8008278:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800827c:	d003      	beq.n	8008286 <UART_SetConfig+0x152>
 800827e:	e00b      	b.n	8008298 <UART_SetConfig+0x164>
 8008280:	2300      	movs	r3, #0
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	e060      	b.n	8008348 <UART_SetConfig+0x214>
 8008286:	2302      	movs	r3, #2
 8008288:	77fb      	strb	r3, [r7, #31]
 800828a:	e05d      	b.n	8008348 <UART_SetConfig+0x214>
 800828c:	2304      	movs	r3, #4
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e05a      	b.n	8008348 <UART_SetConfig+0x214>
 8008292:	2308      	movs	r3, #8
 8008294:	77fb      	strb	r3, [r7, #31]
 8008296:	e057      	b.n	8008348 <UART_SetConfig+0x214>
 8008298:	2310      	movs	r3, #16
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	bf00      	nop
 800829e:	e053      	b.n	8008348 <UART_SetConfig+0x214>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a70      	ldr	r2, [pc, #448]	; (8008468 <UART_SetConfig+0x334>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d123      	bne.n	80082f2 <UART_SetConfig+0x1be>
 80082aa:	4b6c      	ldr	r3, [pc, #432]	; (800845c <UART_SetConfig+0x328>)
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b6:	d012      	beq.n	80082de <UART_SetConfig+0x1aa>
 80082b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082bc:	d802      	bhi.n	80082c4 <UART_SetConfig+0x190>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <UART_SetConfig+0x19e>
 80082c2:	e012      	b.n	80082ea <UART_SetConfig+0x1b6>
 80082c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082c8:	d00c      	beq.n	80082e4 <UART_SetConfig+0x1b0>
 80082ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082ce:	d003      	beq.n	80082d8 <UART_SetConfig+0x1a4>
 80082d0:	e00b      	b.n	80082ea <UART_SetConfig+0x1b6>
 80082d2:	2300      	movs	r3, #0
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e037      	b.n	8008348 <UART_SetConfig+0x214>
 80082d8:	2302      	movs	r3, #2
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e034      	b.n	8008348 <UART_SetConfig+0x214>
 80082de:	2304      	movs	r3, #4
 80082e0:	77fb      	strb	r3, [r7, #31]
 80082e2:	e031      	b.n	8008348 <UART_SetConfig+0x214>
 80082e4:	2308      	movs	r3, #8
 80082e6:	77fb      	strb	r3, [r7, #31]
 80082e8:	e02e      	b.n	8008348 <UART_SetConfig+0x214>
 80082ea:	2310      	movs	r3, #16
 80082ec:	77fb      	strb	r3, [r7, #31]
 80082ee:	bf00      	nop
 80082f0:	e02a      	b.n	8008348 <UART_SetConfig+0x214>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a5d      	ldr	r2, [pc, #372]	; (800846c <UART_SetConfig+0x338>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d123      	bne.n	8008344 <UART_SetConfig+0x210>
 80082fc:	4b57      	ldr	r3, [pc, #348]	; (800845c <UART_SetConfig+0x328>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008308:	d012      	beq.n	8008330 <UART_SetConfig+0x1fc>
 800830a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800830e:	d802      	bhi.n	8008316 <UART_SetConfig+0x1e2>
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <UART_SetConfig+0x1f0>
 8008314:	e012      	b.n	800833c <UART_SetConfig+0x208>
 8008316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800831a:	d00c      	beq.n	8008336 <UART_SetConfig+0x202>
 800831c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008320:	d003      	beq.n	800832a <UART_SetConfig+0x1f6>
 8008322:	e00b      	b.n	800833c <UART_SetConfig+0x208>
 8008324:	2300      	movs	r3, #0
 8008326:	77fb      	strb	r3, [r7, #31]
 8008328:	e00e      	b.n	8008348 <UART_SetConfig+0x214>
 800832a:	2302      	movs	r3, #2
 800832c:	77fb      	strb	r3, [r7, #31]
 800832e:	e00b      	b.n	8008348 <UART_SetConfig+0x214>
 8008330:	2304      	movs	r3, #4
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e008      	b.n	8008348 <UART_SetConfig+0x214>
 8008336:	2308      	movs	r3, #8
 8008338:	77fb      	strb	r3, [r7, #31]
 800833a:	e005      	b.n	8008348 <UART_SetConfig+0x214>
 800833c:	2310      	movs	r3, #16
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	bf00      	nop
 8008342:	e001      	b.n	8008348 <UART_SetConfig+0x214>
 8008344:	2310      	movs	r3, #16
 8008346:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008350:	f040 808e 	bne.w	8008470 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008354:	7ffb      	ldrb	r3, [r7, #31]
 8008356:	2b08      	cmp	r3, #8
 8008358:	d85e      	bhi.n	8008418 <UART_SetConfig+0x2e4>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <UART_SetConfig+0x22c>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008385 	.word	0x08008385
 8008364:	080083a5 	.word	0x080083a5
 8008368:	080083c5 	.word	0x080083c5
 800836c:	08008419 	.word	0x08008419
 8008370:	080083e1 	.word	0x080083e1
 8008374:	08008419 	.word	0x08008419
 8008378:	08008419 	.word	0x08008419
 800837c:	08008419 	.word	0x08008419
 8008380:	08008401 	.word	0x08008401
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008384:	f7fe f8d8 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 8008388:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	005a      	lsls	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	b29b      	uxth	r3, r3
 80083a0:	61bb      	str	r3, [r7, #24]
        break;
 80083a2:	e03c      	b.n	800841e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a4:	f7fe f8ea 	bl	800657c <HAL_RCC_GetPCLK2Freq>
 80083a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	005a      	lsls	r2, r3, #1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	441a      	add	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80083be:	b29b      	uxth	r3, r3
 80083c0:	61bb      	str	r3, [r7, #24]
        break;
 80083c2:	e02c      	b.n	800841e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80083ce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	6852      	ldr	r2, [r2, #4]
 80083d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	61bb      	str	r3, [r7, #24]
        break;
 80083de:	e01e      	b.n	800841e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083e0:	f7fe f834 	bl	800644c <HAL_RCC_GetSysClockFreq>
 80083e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	005a      	lsls	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	085b      	lsrs	r3, r3, #1
 80083f0:	441a      	add	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	61bb      	str	r3, [r7, #24]
        break;
 80083fe:	e00e      	b.n	800841e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	b29b      	uxth	r3, r3
 8008414:	61bb      	str	r3, [r7, #24]
        break;
 8008416:	e002      	b.n	800841e <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
        break;
 800841c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b0f      	cmp	r3, #15
 8008422:	d916      	bls.n	8008452 <UART_SetConfig+0x31e>
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842a:	d212      	bcs.n	8008452 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f023 030f 	bic.w	r3, r3, #15
 8008434:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	b29b      	uxth	r3, r3
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	b29a      	uxth	r2, r3
 8008442:	897b      	ldrh	r3, [r7, #10]
 8008444:	4313      	orrs	r3, r2
 8008446:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	897a      	ldrh	r2, [r7, #10]
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	e07e      	b.n	8008550 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e07b      	b.n	8008550 <UART_SetConfig+0x41c>
 8008458:	40013800 	.word	0x40013800
 800845c:	40021000 	.word	0x40021000
 8008460:	40004400 	.word	0x40004400
 8008464:	40004800 	.word	0x40004800
 8008468:	40004c00 	.word	0x40004c00
 800846c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008470:	7ffb      	ldrb	r3, [r7, #31]
 8008472:	2b08      	cmp	r3, #8
 8008474:	d85b      	bhi.n	800852e <UART_SetConfig+0x3fa>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x348>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084bf 	.word	0x080084bf
 8008484:	080084dd 	.word	0x080084dd
 8008488:	0800852f 	.word	0x0800852f
 800848c:	080084f9 	.word	0x080084f9
 8008490:	0800852f 	.word	0x0800852f
 8008494:	0800852f 	.word	0x0800852f
 8008498:	0800852f 	.word	0x0800852f
 800849c:	08008517 	.word	0x08008517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a0:	f7fe f84a 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 80084a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	085a      	lsrs	r2, r3, #1
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	441a      	add	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	61bb      	str	r3, [r7, #24]
        break;
 80084bc:	e03a      	b.n	8008534 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084be:	f7fe f85d 	bl	800657c <HAL_RCC_GetPCLK2Freq>
 80084c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	085a      	lsrs	r2, r3, #1
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	441a      	add	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	61bb      	str	r3, [r7, #24]
        break;
 80084da:	e02b      	b.n	8008534 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80084e6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	6852      	ldr	r2, [r2, #4]
 80084ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	61bb      	str	r3, [r7, #24]
        break;
 80084f6:	e01d      	b.n	8008534 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084f8:	f7fd ffa8 	bl	800644c <HAL_RCC_GetSysClockFreq>
 80084fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	085a      	lsrs	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	441a      	add	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	b29b      	uxth	r3, r3
 8008512:	61bb      	str	r3, [r7, #24]
        break;
 8008514:	e00e      	b.n	8008534 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	fbb2 f3f3 	udiv	r3, r2, r3
 8008528:	b29b      	uxth	r3, r3
 800852a:	61bb      	str	r3, [r7, #24]
        break;
 800852c:	e002      	b.n	8008534 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	75fb      	strb	r3, [r7, #23]
        break;
 8008532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b0f      	cmp	r3, #15
 8008538:	d908      	bls.n	800854c <UART_SetConfig+0x418>
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008540:	d204      	bcs.n	800854c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	e001      	b.n	8008550 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop

08008568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00a      	beq.n	80085d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	f003 0320 	and.w	r3, r3, #32
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01a      	beq.n	800867e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008666:	d10a      	bne.n	800867e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	605a      	str	r2, [r3, #4]
  }
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80086ba:	f7f9 fd7b 	bl	80021b4 <HAL_GetTick>
 80086be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	d10e      	bne.n	80086ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f82a 	bl	8008736 <UART_WaitOnFlagUntilTimeout>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e020      	b.n	800872e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d10e      	bne.n	8008718 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f814 	bl	8008736 <UART_WaitOnFlagUntilTimeout>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e00a      	b.n	800872e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008746:	e05d      	b.n	8008804 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d059      	beq.n	8008804 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008750:	f7f9 fd30 	bl	80021b4 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <UART_WaitOnFlagUntilTimeout+0x30>
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d11b      	bne.n	800879e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008774:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0201 	bic.w	r2, r2, #1
 8008784:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e042      	b.n	8008824 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02b      	beq.n	8008804 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ba:	d123      	bne.n	8008804 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2220      	movs	r2, #32
 80087ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2220      	movs	r2, #32
 80087f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e00f      	b.n	8008824 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69da      	ldr	r2, [r3, #28]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	4013      	ands	r3, r2
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	bf0c      	ite	eq
 8008814:	2301      	moveq	r3, #1
 8008816:	2300      	movne	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	429a      	cmp	r2, r3
 8008820:	d092      	beq.n	8008748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800882c:	b490      	push	{r4, r7}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800884c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008850:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	78db      	ldrb	r3, [r3, #3]
 8008856:	2b03      	cmp	r3, #3
 8008858:	d819      	bhi.n	800888e <USB_ActivateEndpoint+0x62>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USB_ActivateEndpoint+0x34>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008871 	.word	0x08008871
 8008864:	08008885 	.word	0x08008885
 8008868:	08008895 	.word	0x08008895
 800886c:	0800887b 	.word	0x0800887b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008870:	8abb      	ldrh	r3, [r7, #20]
 8008872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008876:	82bb      	strh	r3, [r7, #20]
      break;
 8008878:	e00d      	b.n	8008896 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800887a:	8abb      	ldrh	r3, [r7, #20]
 800887c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008880:	82bb      	strh	r3, [r7, #20]
      break;
 8008882:	e008      	b.n	8008896 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008884:	8abb      	ldrh	r3, [r7, #20]
 8008886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800888a:	82bb      	strh	r3, [r7, #20]
      break;
 800888c:	e003      	b.n	8008896 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	75fb      	strb	r3, [r7, #23]
      break;
 8008892:	e000      	b.n	8008896 <USB_ActivateEndpoint+0x6a>
      break;
 8008894:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	441a      	add	r2, r3
 80088a0:	8abb      	ldrh	r3, [r7, #20]
 80088a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	b21b      	sxth	r3, r3
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	b21a      	sxth	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	b21b      	sxth	r3, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b21b      	sxth	r3, r3
 80088da:	b29c      	uxth	r4, r3
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	4b8c      	ldr	r3, [pc, #560]	; (8008b18 <USB_ActivateEndpoint+0x2ec>)
 80088e8:	4323      	orrs	r3, r4
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	7b1b      	ldrb	r3, [r3, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f040 8116 	bne.w	8008b24 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d067      	beq.n	80089d0 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008900:	687c      	ldr	r4, [r7, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008908:	b29b      	uxth	r3, r3
 800890a:	441c      	add	r4, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4423      	add	r3, r4
 8008914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008918:	461c      	mov	r4, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	88db      	ldrh	r3, [r3, #6]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	b29b      	uxth	r3, r3
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29c      	uxth	r4, r3
 8008936:	4623      	mov	r3, r4
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d014      	beq.n	800896a <USB_ActivateEndpoint+0x13e>
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008956:	b29c      	uxth	r4, r3
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	441a      	add	r2, r3
 8008962:	4b6e      	ldr	r3, [pc, #440]	; (8008b1c <USB_ActivateEndpoint+0x2f0>)
 8008964:	4323      	orrs	r3, r4
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	78db      	ldrb	r3, [r3, #3]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d018      	beq.n	80089a4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008988:	b29c      	uxth	r4, r3
 800898a:	f084 0320 	eor.w	r3, r4, #32
 800898e:	b29c      	uxth	r4, r3
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	441a      	add	r2, r3
 800899a:	4b5f      	ldr	r3, [pc, #380]	; (8008b18 <USB_ActivateEndpoint+0x2ec>)
 800899c:	4323      	orrs	r3, r4
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]
 80089a2:	e22f      	b.n	8008e04 <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ba:	b29c      	uxth	r4, r3
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	4b54      	ldr	r3, [pc, #336]	; (8008b18 <USB_ActivateEndpoint+0x2ec>)
 80089c8:	4323      	orrs	r3, r4
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]
 80089ce:	e219      	b.n	8008e04 <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089d0:	687c      	ldr	r4, [r7, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d8:	b29b      	uxth	r3, r3
 80089da:	441c      	add	r4, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	4423      	add	r3, r4
 80089e4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80089e8:	461c      	mov	r4, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	88db      	ldrh	r3, [r3, #6]
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089f8:	687c      	ldr	r4, [r7, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	441c      	add	r4, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	4423      	add	r3, r4
 8008a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d110      	bne.n	8008a3c <USB_ActivateEndpoint+0x210>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	801a      	strh	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	e02f      	b.n	8008a9c <USB_ActivateEndpoint+0x270>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b3e      	cmp	r3, #62	; 0x3e
 8008a42:	d813      	bhi.n	8008a6c <USB_ActivateEndpoint+0x240>
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <USB_ActivateEndpoint+0x232>
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	e017      	b.n	8008a9c <USB_ActivateEndpoint+0x270>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	095b      	lsrs	r3, r3, #5
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 031f 	and.w	r3, r3, #31
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d102      	bne.n	8008a86 <USB_ActivateEndpoint+0x25a>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	613b      	str	r3, [r7, #16]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	029b      	lsls	r3, r3, #10
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29c      	uxth	r4, r3
 8008aaa:	4623      	mov	r3, r4
 8008aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d014      	beq.n	8008ade <USB_ActivateEndpoint+0x2b2>
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	b29c      	uxth	r4, r3
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <USB_ActivateEndpoint+0x2f4>)
 8008ad8:	4323      	orrs	r3, r4
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af4:	b29c      	uxth	r4, r3
 8008af6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008afa:	b29c      	uxth	r4, r3
 8008afc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008b00:	b29c      	uxth	r4, r3
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	441a      	add	r2, r3
 8008b0c:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <USB_ActivateEndpoint+0x2ec>)
 8008b0e:	4323      	orrs	r3, r4
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	8013      	strh	r3, [r2, #0]
 8008b14:	e176      	b.n	8008e04 <USB_ActivateEndpoint+0x5d8>
 8008b16:	bf00      	nop
 8008b18:	ffff8080 	.word	0xffff8080
 8008b1c:	ffff80c0 	.word	0xffff80c0
 8008b20:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3a:	b29c      	uxth	r4, r3
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	441a      	add	r2, r3
 8008b46:	4b96      	ldr	r3, [pc, #600]	; (8008da0 <USB_ActivateEndpoint+0x574>)
 8008b48:	4323      	orrs	r3, r4
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b4e:	687c      	ldr	r4, [r7, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	441c      	add	r4, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	4423      	add	r3, r4
 8008b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b66:	461c      	mov	r4, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	891b      	ldrh	r3, [r3, #8]
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	8023      	strh	r3, [r4, #0]
 8008b76:	687c      	ldr	r4, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	441c      	add	r4, r3
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	4423      	add	r3, r4
 8008b8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008b8e:	461c      	mov	r4, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	895b      	ldrh	r3, [r3, #10]
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	785b      	ldrb	r3, [r3, #1]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f040 8088 	bne.w	8008cb8 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	b29c      	uxth	r4, r3
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d014      	beq.n	8008bea <USB_ActivateEndpoint+0x3be>
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	b29c      	uxth	r4, r3
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	441a      	add	r2, r3
 8008be2:	4b70      	ldr	r3, [pc, #448]	; (8008da4 <USB_ActivateEndpoint+0x578>)
 8008be4:	4323      	orrs	r3, r4
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29c      	uxth	r4, r3
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d014      	beq.n	8008c2c <USB_ActivateEndpoint+0x400>
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c18:	b29c      	uxth	r4, r3
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	441a      	add	r2, r3
 8008c24:	4b60      	ldr	r3, [pc, #384]	; (8008da8 <USB_ActivateEndpoint+0x57c>)
 8008c26:	4323      	orrs	r3, r4
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	b29c      	uxth	r4, r3
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	4b56      	ldr	r3, [pc, #344]	; (8008da8 <USB_ActivateEndpoint+0x57c>)
 8008c50:	4323      	orrs	r3, r4
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6c:	b29c      	uxth	r4, r3
 8008c6e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008c72:	b29c      	uxth	r4, r3
 8008c74:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008c78:	b29c      	uxth	r4, r3
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	4b49      	ldr	r3, [pc, #292]	; (8008dac <USB_ActivateEndpoint+0x580>)
 8008c86:	4323      	orrs	r3, r4
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca2:	b29c      	uxth	r4, r3
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	441a      	add	r2, r3
 8008cae:	4b3f      	ldr	r3, [pc, #252]	; (8008dac <USB_ActivateEndpoint+0x580>)
 8008cb0:	4323      	orrs	r3, r4
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	8013      	strh	r3, [r2, #0]
 8008cb6:	e0a5      	b.n	8008e04 <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29c      	uxth	r4, r3
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d014      	beq.n	8008cfa <USB_ActivateEndpoint+0x4ce>
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce6:	b29c      	uxth	r4, r3
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	441a      	add	r2, r3
 8008cf2:	4b2c      	ldr	r3, [pc, #176]	; (8008da4 <USB_ActivateEndpoint+0x578>)
 8008cf4:	4323      	orrs	r3, r4
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29c      	uxth	r4, r3
 8008d08:	4623      	mov	r3, r4
 8008d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d014      	beq.n	8008d3c <USB_ActivateEndpoint+0x510>
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d28:	b29c      	uxth	r4, r3
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	441a      	add	r2, r3
 8008d34:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <USB_ActivateEndpoint+0x57c>)
 8008d36:	4323      	orrs	r3, r4
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d52:	b29c      	uxth	r4, r3
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	441a      	add	r2, r3
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <USB_ActivateEndpoint+0x578>)
 8008d60:	4323      	orrs	r3, r4
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	78db      	ldrb	r3, [r3, #3]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d020      	beq.n	8008db0 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d84:	b29c      	uxth	r4, r3
 8008d86:	f084 0320 	eor.w	r3, r4, #32
 8008d8a:	b29c      	uxth	r4, r3
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	441a      	add	r2, r3
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <USB_ActivateEndpoint+0x580>)
 8008d98:	4323      	orrs	r3, r4
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	8013      	strh	r3, [r2, #0]
 8008d9e:	e01c      	b.n	8008dda <USB_ActivateEndpoint+0x5ae>
 8008da0:	ffff8180 	.word	0xffff8180
 8008da4:	ffffc080 	.word	0xffffc080
 8008da8:	ffff80c0 	.word	0xffff80c0
 8008dac:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc6:	b29c      	uxth	r4, r3
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <USB_ActivateEndpoint+0x5e4>)
 8008dd4:	4323      	orrs	r3, r4
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df0:	b29c      	uxth	r4, r3
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	441a      	add	r2, r3
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <USB_ActivateEndpoint+0x5e4>)
 8008dfe:	4323      	orrs	r3, r4
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bc90      	pop	{r4, r7}
 8008e0e:	4770      	bx	lr
 8008e10:	ffff8080 	.word	0xffff8080

08008e14 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b095      	sub	sp, #84	; 0x54
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	f040 816d 	bne.w	8009102 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	699a      	ldr	r2, [r3, #24]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d909      	bls.n	8008e48 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	619a      	str	r2, [r3, #24]
 8008e46:	e005      	b.n	8008e54 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2200      	movs	r2, #0
 8008e52:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	7b1b      	ldrb	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d11a      	bne.n	8008e92 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6959      	ldr	r1, [r3, #20]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	88da      	ldrh	r2, [r3, #6]
 8008e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fbab 	bl	80095c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e6e:	687c      	ldr	r4, [r7, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	441c      	add	r4, r3
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	4423      	add	r3, r4
 8008e82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	e11b      	b.n	80090ca <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d06a      	beq.n	8008f7e <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ea8:	687c      	ldr	r4, [r7, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d14c      	bne.n	8008f4c <USB_EPStartXfer+0x138>
 8008eb2:	687c      	ldr	r4, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	441c      	add	r4, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	4423      	add	r3, r4
 8008ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d110      	bne.n	8008ef4 <USB_EPStartXfer+0xe0>
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e03f      	b.n	8008f74 <USB_EPStartXfer+0x160>
 8008ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ef8:	d811      	bhi.n	8008f1e <USB_EPStartXfer+0x10a>
 8008efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efc:	085b      	lsrs	r3, r3, #1
 8008efe:	647b      	str	r3, [r7, #68]	; 0x44
 8008f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <USB_EPStartXfer+0xfc>
 8008f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	029b      	lsls	r3, r3, #10
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	e02a      	b.n	8008f74 <USB_EPStartXfer+0x160>
 8008f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f20:	095b      	lsrs	r3, r3, #5
 8008f22:	647b      	str	r3, [r7, #68]	; 0x44
 8008f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <USB_EPStartXfer+0x120>
 8008f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f30:	3b01      	subs	r3, #1
 8008f32:	647b      	str	r3, [r7, #68]	; 0x44
 8008f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	029b      	lsls	r3, r3, #10
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e013      	b.n	8008f74 <USB_EPStartXfer+0x160>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d10f      	bne.n	8008f74 <USB_EPStartXfer+0x160>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	441c      	add	r4, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	4423      	add	r3, r4
 8008f66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	895b      	ldrh	r3, [r3, #10]
 8008f78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008f7c:	e069      	b.n	8009052 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d14c      	bne.n	8009020 <USB_EPStartXfer+0x20c>
 8008f86:	687c      	ldr	r4, [r7, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	441c      	add	r4, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	011b      	lsls	r3, r3, #4
 8008f98:	4423      	add	r3, r4
 8008f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f9e:	61bb      	str	r3, [r7, #24]
 8008fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d110      	bne.n	8008fc8 <USB_EPStartXfer+0x1b4>
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	801a      	strh	r2, [r3, #0]
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	801a      	strh	r2, [r3, #0]
 8008fc6:	e040      	b.n	800904a <USB_EPStartXfer+0x236>
 8008fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fca:	2b3e      	cmp	r3, #62	; 0x3e
 8008fcc:	d811      	bhi.n	8008ff2 <USB_EPStartXfer+0x1de>
 8008fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <USB_EPStartXfer+0x1d0>
 8008fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	029b      	lsls	r3, r3, #10
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	e02b      	b.n	800904a <USB_EPStartXfer+0x236>
 8008ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffa:	f003 031f 	and.w	r3, r3, #31
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <USB_EPStartXfer+0x1f4>
 8009002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009004:	3b01      	subs	r3, #1
 8009006:	643b      	str	r3, [r7, #64]	; 0x40
 8009008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800900a:	b29b      	uxth	r3, r3
 800900c:	029b      	lsls	r3, r3, #10
 800900e:	b29b      	uxth	r3, r3
 8009010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009018:	b29a      	uxth	r2, r3
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	e014      	b.n	800904a <USB_EPStartXfer+0x236>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d110      	bne.n	800904a <USB_EPStartXfer+0x236>
 8009028:	687c      	ldr	r4, [r7, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009030:	b29b      	uxth	r3, r3
 8009032:	441c      	add	r4, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	4423      	add	r3, r4
 800903c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009044:	b29a      	uxth	r2, r3
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	891b      	ldrh	r3, [r3, #8]
 800904e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	6959      	ldr	r1, [r3, #20]
 8009056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009058:	b29b      	uxth	r3, r3
 800905a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fab0 	bl	80095c4 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d115      	bne.n	8009098 <USB_EPStartXfer+0x284>
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009082:	b29c      	uxth	r4, r3
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	4b96      	ldr	r3, [pc, #600]	; (80092e8 <USB_EPStartXfer+0x4d4>)
 8009090:	4323      	orrs	r3, r4
 8009092:	b29b      	uxth	r3, r3
 8009094:	8013      	strh	r3, [r2, #0]
 8009096:	e018      	b.n	80090ca <USB_EPStartXfer+0x2b6>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d114      	bne.n	80090ca <USB_EPStartXfer+0x2b6>
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b6:	b29c      	uxth	r4, r3
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	441a      	add	r2, r3
 80090c2:	4b8a      	ldr	r3, [pc, #552]	; (80092ec <USB_EPStartXfer+0x4d8>)
 80090c4:	4323      	orrs	r3, r4
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e0:	b29c      	uxth	r4, r3
 80090e2:	f084 0310 	eor.w	r3, r4, #16
 80090e6:	b29c      	uxth	r4, r3
 80090e8:	f084 0320 	eor.w	r3, r4, #32
 80090ec:	b29c      	uxth	r4, r3
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	441a      	add	r2, r3
 80090f8:	4b7d      	ldr	r3, [pc, #500]	; (80092f0 <USB_EPStartXfer+0x4dc>)
 80090fa:	4323      	orrs	r3, r4
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	8013      	strh	r3, [r2, #0]
 8009100:	e153      	b.n	80093aa <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	429a      	cmp	r2, r3
 800910c:	d909      	bls.n	8009122 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	699a      	ldr	r2, [r3, #24]
 8009118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911a:	1ad2      	subs	r2, r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	619a      	str	r2, [r3, #24]
 8009120:	e005      	b.n	800912e <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	7b1b      	ldrb	r3, [r3, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d14c      	bne.n	80091d0 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009136:	687c      	ldr	r4, [r7, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800913e:	b29b      	uxth	r3, r3
 8009140:	441c      	add	r4, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	4423      	add	r3, r4
 800914a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800914e:	623b      	str	r3, [r7, #32]
 8009150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009152:	2b00      	cmp	r3, #0
 8009154:	d110      	bne.n	8009178 <USB_EPStartXfer+0x364>
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800915e:	b29a      	uxth	r2, r3
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800916c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009170:	b29a      	uxth	r2, r3
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	801a      	strh	r2, [r3, #0]
 8009176:	e0fd      	b.n	8009374 <USB_EPStartXfer+0x560>
 8009178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800917a:	2b3e      	cmp	r3, #62	; 0x3e
 800917c:	d811      	bhi.n	80091a2 <USB_EPStartXfer+0x38e>
 800917e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <USB_EPStartXfer+0x380>
 800918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009190:	3301      	adds	r3, #1
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009196:	b29b      	uxth	r3, r3
 8009198:	029b      	lsls	r3, r3, #10
 800919a:	b29a      	uxth	r2, r3
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	801a      	strh	r2, [r3, #0]
 80091a0:	e0e8      	b.n	8009374 <USB_EPStartXfer+0x560>
 80091a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <USB_EPStartXfer+0x3a4>
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	3b01      	subs	r3, #1
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	029b      	lsls	r3, r3, #10
 80091be:	b29b      	uxth	r3, r3
 80091c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	801a      	strh	r2, [r3, #0]
 80091ce:	e0d1      	b.n	8009374 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d14c      	bne.n	8009272 <USB_EPStartXfer+0x45e>
 80091d8:	687c      	ldr	r4, [r7, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	441c      	add	r4, r3
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	4423      	add	r3, r4
 80091ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d110      	bne.n	800921a <USB_EPStartXfer+0x406>
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009200:	b29a      	uxth	r2, r3
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009212:	b29a      	uxth	r2, r3
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	801a      	strh	r2, [r3, #0]
 8009218:	e040      	b.n	800929c <USB_EPStartXfer+0x488>
 800921a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800921c:	2b3e      	cmp	r3, #62	; 0x3e
 800921e:	d811      	bhi.n	8009244 <USB_EPStartXfer+0x430>
 8009220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	63bb      	str	r3, [r7, #56]	; 0x38
 8009226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <USB_EPStartXfer+0x422>
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	3301      	adds	r3, #1
 8009234:	63bb      	str	r3, [r7, #56]	; 0x38
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	b29b      	uxth	r3, r3
 800923a:	029b      	lsls	r3, r3, #10
 800923c:	b29a      	uxth	r2, r3
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	801a      	strh	r2, [r3, #0]
 8009242:	e02b      	b.n	800929c <USB_EPStartXfer+0x488>
 8009244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	63bb      	str	r3, [r7, #56]	; 0x38
 800924a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	2b00      	cmp	r3, #0
 8009252:	d102      	bne.n	800925a <USB_EPStartXfer+0x446>
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	3b01      	subs	r3, #1
 8009258:	63bb      	str	r3, [r7, #56]	; 0x38
 800925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925c:	b29b      	uxth	r3, r3
 800925e:	029b      	lsls	r3, r3, #10
 8009260:	b29b      	uxth	r3, r3
 8009262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800926a:	b29a      	uxth	r2, r3
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e014      	b.n	800929c <USB_EPStartXfer+0x488>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	785b      	ldrb	r3, [r3, #1]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d110      	bne.n	800929c <USB_EPStartXfer+0x488>
 800927a:	687c      	ldr	r4, [r7, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009282:	b29b      	uxth	r3, r3
 8009284:	441c      	add	r4, r3
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	4423      	add	r3, r4
 800928e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009292:	633b      	str	r3, [r7, #48]	; 0x30
 8009294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009296:	b29a      	uxth	r2, r3
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	687c      	ldr	r4, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d152      	bne.n	800934c <USB_EPStartXfer+0x538>
 80092a6:	687c      	ldr	r4, [r7, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	441c      	add	r4, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	4423      	add	r3, r4
 80092ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
 80092c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d116      	bne.n	80092f4 <USB_EPStartXfer+0x4e0>
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	801a      	strh	r2, [r3, #0]
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e045      	b.n	8009374 <USB_EPStartXfer+0x560>
 80092e8:	ffff80c0 	.word	0xffff80c0
 80092ec:	ffffc080 	.word	0xffffc080
 80092f0:	ffff8080 	.word	0xffff8080
 80092f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f6:	2b3e      	cmp	r3, #62	; 0x3e
 80092f8:	d811      	bhi.n	800931e <USB_EPStartXfer+0x50a>
 80092fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092fc:	085b      	lsrs	r3, r3, #1
 80092fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <USB_EPStartXfer+0x4fc>
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	3301      	adds	r3, #1
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	b29b      	uxth	r3, r3
 8009314:	029b      	lsls	r3, r3, #10
 8009316:	b29a      	uxth	r2, r3
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	e02a      	b.n	8009374 <USB_EPStartXfer+0x560>
 800931e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009320:	095b      	lsrs	r3, r3, #5
 8009322:	637b      	str	r3, [r7, #52]	; 0x34
 8009324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	2b00      	cmp	r3, #0
 800932c:	d102      	bne.n	8009334 <USB_EPStartXfer+0x520>
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	3b01      	subs	r3, #1
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	b29b      	uxth	r3, r3
 8009338:	029b      	lsls	r3, r3, #10
 800933a:	b29b      	uxth	r3, r3
 800933c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009344:	b29a      	uxth	r2, r3
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	801a      	strh	r2, [r3, #0]
 800934a:	e013      	b.n	8009374 <USB_EPStartXfer+0x560>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d10f      	bne.n	8009374 <USB_EPStartXfer+0x560>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800935a:	b29b      	uxth	r3, r3
 800935c:	441c      	add	r4, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	4423      	add	r3, r4
 8009366:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800936a:	62bb      	str	r3, [r7, #40]	; 0x28
 800936c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936e:	b29a      	uxth	r2, r3
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	b29c      	uxth	r4, r3
 800938c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009390:	b29c      	uxth	r4, r3
 8009392:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009396:	b29c      	uxth	r4, r3
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	441a      	add	r2, r3
 80093a2:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <USB_EPStartXfer+0x5a0>)
 80093a4:	4323      	orrs	r3, r4
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3754      	adds	r7, #84	; 0x54
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd90      	pop	{r4, r7, pc}
 80093b4:	ffff8080 	.word	0xffff8080

080093b8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093b8:	b490      	push	{r4, r7}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d018      	beq.n	80093fc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e0:	b29c      	uxth	r4, r3
 80093e2:	f084 0310 	eor.w	r3, r4, #16
 80093e6:	b29c      	uxth	r4, r3
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	441a      	add	r2, r3
 80093f2:	4b11      	ldr	r3, [pc, #68]	; (8009438 <USB_EPSetStall+0x80>)
 80093f4:	4323      	orrs	r3, r4
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	8013      	strh	r3, [r2, #0]
 80093fa:	e017      	b.n	800942c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800940e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009412:	b29c      	uxth	r4, r3
 8009414:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009418:	b29c      	uxth	r4, r3
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	441a      	add	r2, r3
 8009424:	4b04      	ldr	r3, [pc, #16]	; (8009438 <USB_EPSetStall+0x80>)
 8009426:	4323      	orrs	r3, r4
 8009428:	b29b      	uxth	r3, r3
 800942a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bc90      	pop	{r4, r7}
 8009436:	4770      	bx	lr
 8009438:	ffff8080 	.word	0xffff8080

0800943c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800943c:	b490      	push	{r4, r7}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	7b1b      	ldrb	r3, [r3, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d17d      	bne.n	800954a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d03d      	beq.n	80094d2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	b29c      	uxth	r4, r3
 8009464:	4623      	mov	r3, r4
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d014      	beq.n	8009498 <USB_EPClearStall+0x5c>
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009484:	b29c      	uxth	r4, r3
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	441a      	add	r2, r3
 8009490:	4b31      	ldr	r3, [pc, #196]	; (8009558 <USB_EPClearStall+0x11c>)
 8009492:	4323      	orrs	r3, r4
 8009494:	b29b      	uxth	r3, r3
 8009496:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	78db      	ldrb	r3, [r3, #3]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d054      	beq.n	800954a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094b6:	b29c      	uxth	r4, r3
 80094b8:	f084 0320 	eor.w	r3, r4, #32
 80094bc:	b29c      	uxth	r4, r3
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	441a      	add	r2, r3
 80094c8:	4b24      	ldr	r3, [pc, #144]	; (800955c <USB_EPClearStall+0x120>)
 80094ca:	4323      	orrs	r3, r4
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8013      	strh	r3, [r2, #0]
 80094d0:	e03b      	b.n	800954a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29c      	uxth	r4, r3
 80094e0:	4623      	mov	r3, r4
 80094e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d014      	beq.n	8009514 <USB_EPClearStall+0xd8>
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009500:	b29c      	uxth	r4, r3
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	441a      	add	r2, r3
 800950c:	4b14      	ldr	r3, [pc, #80]	; (8009560 <USB_EPClearStall+0x124>)
 800950e:	4323      	orrs	r3, r4
 8009510:	b29b      	uxth	r3, r3
 8009512:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	b29c      	uxth	r4, r3
 800952c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009530:	b29c      	uxth	r4, r3
 8009532:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009536:	b29c      	uxth	r4, r3
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	441a      	add	r2, r3
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <USB_EPClearStall+0x120>)
 8009544:	4323      	orrs	r3, r4
 8009546:	b29b      	uxth	r3, r3
 8009548:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bc90      	pop	{r4, r7}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	ffff80c0 	.word	0xffff80c0
 800955c:	ffff8080 	.word	0xffff8080
 8009560:	ffffc080 	.word	0xffffc080

08009564 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2280      	movs	r2, #128	; 0x80
 800957a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800959a:	b29b      	uxth	r3, r3
 800959c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800959e:	68fb      	ldr	r3, [r7, #12]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b08d      	sub	sp, #52	; 0x34
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4611      	mov	r1, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	460b      	mov	r3, r1
 80095d4:	80fb      	strh	r3, [r7, #6]
 80095d6:	4613      	mov	r3, r2
 80095d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80095da:	88bb      	ldrh	r3, [r7, #4]
 80095dc:	3301      	adds	r3, #1
 80095de:	085b      	lsrs	r3, r3, #1
 80095e0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	005a      	lsls	r2, r3, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095f6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fc:	e01e      	b.n	800963c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	3301      	adds	r3, #1
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b29b      	uxth	r3, r3
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	b29b      	uxth	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	4313      	orrs	r3, r2
 800961a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	b29a      	uxth	r2, r3
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	3302      	adds	r3, #2
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	3302      	adds	r3, #2
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	3301      	adds	r3, #1
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009638:	3b01      	subs	r3, #1
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1dd      	bne.n	80095fe <USB_WritePMA+0x3a>
  }
}
 8009642:	bf00      	nop
 8009644:	3734      	adds	r7, #52	; 0x34
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800964e:	b480      	push	{r7}
 8009650:	b08b      	sub	sp, #44	; 0x2c
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	4611      	mov	r1, r2
 800965a:	461a      	mov	r2, r3
 800965c:	460b      	mov	r3, r1
 800965e:	80fb      	strh	r3, [r7, #6]
 8009660:	4613      	mov	r3, r2
 8009662:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009664:	88bb      	ldrh	r3, [r7, #4]
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	b29b      	uxth	r3, r3
 800966a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009674:	88fb      	ldrh	r3, [r7, #6]
 8009676:	005a      	lsls	r2, r3, #1
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009680:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
 8009686:	e01b      	b.n	80096c0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	3302      	adds	r3, #2
 8009694:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	b2da      	uxtb	r2, r3
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	3301      	adds	r3, #1
 80096a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	3301      	adds	r3, #1
 80096b2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	3302      	adds	r3, #2
 80096b8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	3b01      	subs	r3, #1
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e0      	bne.n	8009688 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80096c6:	88bb      	ldrh	r3, [r7, #4]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	701a      	strb	r2, [r3, #0]
  }
}
 80096e2:	bf00      	nop
 80096e4:	372c      	adds	r7, #44	; 0x2c
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009710:	2302      	movs	r3, #2
 8009712:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00c      	beq.n	8009738 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	4611      	mov	r1, r2
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3

  return USBD_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fece 	bl	800a51c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800978e:	461a      	mov	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d00c      	beq.n	80097be <USBD_LL_SetupStage+0x56>
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d302      	bcc.n	80097ae <USBD_LL_SetupStage+0x46>
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d010      	beq.n	80097ce <USBD_LL_SetupStage+0x66>
 80097ac:	e017      	b.n	80097de <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f9ce 	bl	8009b58 <USBD_StdDevReq>
      break;
 80097bc:	e01a      	b.n	80097f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa30 	bl	8009c2c <USBD_StdItfReq>
      break;
 80097cc:	e012      	b.n	80097f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa6e 	bl	8009cb8 <USBD_StdEPReq>
      break;
 80097dc:	e00a      	b.n	80097f4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80097e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f9ff 	bl	800abf0 <USBD_LL_StallEP>
      break;
 80097f2:	bf00      	nop
  }

  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b086      	sub	sp, #24
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	460b      	mov	r3, r1
 8009808:	607a      	str	r2, [r7, #4]
 800980a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d14b      	bne.n	80098aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009818:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009820:	2b03      	cmp	r3, #3
 8009822:	d134      	bne.n	800988e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	429a      	cmp	r2, r3
 800982e:	d919      	bls.n	8009864 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	1ad2      	subs	r2, r2, r3
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009846:	429a      	cmp	r2, r3
 8009848:	d203      	bcs.n	8009852 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800984e:	b29b      	uxth	r3, r3
 8009850:	e002      	b.n	8009858 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009856:	b29b      	uxth	r3, r3
 8009858:	461a      	mov	r2, r3
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fed9 	bl	800a614 <USBD_CtlContinueRx>
 8009862:	e038      	b.n	80098d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00a      	beq.n	8009886 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009876:	2b03      	cmp	r3, #3
 8009878:	d105      	bne.n	8009886 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 fed6 	bl	800a638 <USBD_CtlSendStatus>
 800988c:	e023      	b.n	80098d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009894:	2b05      	cmp	r3, #5
 8009896:	d11e      	bne.n	80098d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f001 f9a4 	bl	800abf0 <USBD_LL_StallEP>
 80098a8:	e015      	b.n	80098d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00d      	beq.n	80098d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d108      	bne.n	80098d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	7afa      	ldrb	r2, [r7, #11]
 80098ca:	4611      	mov	r1, r2
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	4798      	blx	r3
 80098d0:	e001      	b.n	80098d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098d2:	2302      	movs	r3, #2
 80098d4:	e000      	b.n	80098d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	460b      	mov	r3, r1
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d17f      	bne.n	80099f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3314      	adds	r3, #20
 80098f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009900:	2b02      	cmp	r3, #2
 8009902:	d15c      	bne.n	80099be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	d915      	bls.n	800993c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	b29b      	uxth	r3, r3
 8009924:	461a      	mov	r2, r3
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fe61 	bl	800a5f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800992e:	2300      	movs	r3, #0
 8009930:	2200      	movs	r2, #0
 8009932:	2100      	movs	r1, #0
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f001 fa01 	bl	800ad3c <USBD_LL_PrepareReceive>
 800993a:	e04e      	b.n	80099da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	6912      	ldr	r2, [r2, #16]
 8009944:	fbb3 f1f2 	udiv	r1, r3, r2
 8009948:	fb02 f201 	mul.w	r2, r2, r1
 800994c:	1a9b      	subs	r3, r3, r2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d11c      	bne.n	800998c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800995a:	429a      	cmp	r2, r3
 800995c:	d316      	bcc.n	800998c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009968:	429a      	cmp	r2, r3
 800996a:	d20f      	bcs.n	800998c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800996c:	2200      	movs	r2, #0
 800996e:	2100      	movs	r1, #0
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fe3d 	bl	800a5f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800997e:	2300      	movs	r3, #0
 8009980:	2200      	movs	r2, #0
 8009982:	2100      	movs	r1, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f001 f9d9 	bl	800ad3c <USBD_LL_PrepareReceive>
 800998a:	e026      	b.n	80099da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d105      	bne.n	80099ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80099ae:	2180      	movs	r1, #128	; 0x80
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f001 f91d 	bl	800abf0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fe51 	bl	800a65e <USBD_CtlReceiveStatus>
 80099bc:	e00d      	b.n	80099da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d004      	beq.n	80099d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d103      	bne.n	80099da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099d2:	2180      	movs	r1, #128	; 0x80
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f001 f90b 	bl	800abf0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d11d      	bne.n	8009a20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff fe82 	bl	80096ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099f2:	e015      	b.n	8009a20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00d      	beq.n	8009a1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d108      	bne.n	8009a1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	7afa      	ldrb	r2, [r7, #11]
 8009a14:	4611      	mov	r1, r2
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	4798      	blx	r3
 8009a1a:	e001      	b.n	8009a20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e000      	b.n	8009a22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a32:	2340      	movs	r3, #64	; 0x40
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f001 f8b3 	bl	800aba4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2240      	movs	r2, #64	; 0x40
 8009a4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	2200      	movs	r2, #0
 8009a52:	2180      	movs	r1, #128	; 0x80
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 f8a5 	bl	800aba4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2240      	movs	r2, #64	; 0x40
 8009a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6852      	ldr	r2, [r2, #4]
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
  }

  return USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2204      	movs	r2, #4
 8009ae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d105      	bne.n	8009b14 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d10b      	bne.n	8009b4c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d004      	beq.n	8009b7c <USBD_StdDevReq+0x24>
 8009b72:	2b40      	cmp	r3, #64	; 0x40
 8009b74:	d002      	beq.n	8009b7c <USBD_StdDevReq+0x24>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d008      	beq.n	8009b8c <USBD_StdDevReq+0x34>
 8009b7a:	e04c      	b.n	8009c16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
      break;
 8009b8a:	e049      	b.n	8009c20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	d83a      	bhi.n	8009c0a <USBD_StdDevReq+0xb2>
 8009b94:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <USBD_StdDevReq+0x44>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009bed 	.word	0x08009bed
 8009ba0:	08009c01 	.word	0x08009c01
 8009ba4:	08009c0b 	.word	0x08009c0b
 8009ba8:	08009bf7 	.word	0x08009bf7
 8009bac:	08009c0b 	.word	0x08009c0b
 8009bb0:	08009bcf 	.word	0x08009bcf
 8009bb4:	08009bc5 	.word	0x08009bc5
 8009bb8:	08009c0b 	.word	0x08009c0b
 8009bbc:	08009be3 	.word	0x08009be3
 8009bc0:	08009bd9 	.word	0x08009bd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9d4 	bl	8009f74 <USBD_GetDescriptor>
          break;
 8009bcc:	e022      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fb37 	bl	800a244 <USBD_SetAddress>
          break;
 8009bd6:	e01d      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fb74 	bl	800a2c8 <USBD_SetConfig>
          break;
 8009be0:	e018      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fbfd 	bl	800a3e4 <USBD_GetConfig>
          break;
 8009bea:	e013      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fc2c 	bl	800a44c <USBD_GetStatus>
          break;
 8009bf4:	e00e      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fc5a 	bl	800a4b2 <USBD_SetFeature>
          break;
 8009bfe:	e009      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fc69 	bl	800a4da <USBD_ClrFeature>
          break;
 8009c08:	e004      	b.n	8009c14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fcc2 	bl	800a596 <USBD_CtlError>
          break;
 8009c12:	bf00      	nop
      }
      break;
 8009c14:	e004      	b.n	8009c20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fcbc 	bl	800a596 <USBD_CtlError>
      break;
 8009c1e:	bf00      	nop
  }

  return ret;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop

08009c2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	d003      	beq.n	8009c4e <USBD_StdItfReq+0x22>
 8009c46:	2b40      	cmp	r3, #64	; 0x40
 8009c48:	d001      	beq.n	8009c4e <USBD_StdItfReq+0x22>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d12a      	bne.n	8009ca4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	3b01      	subs	r3, #1
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d81d      	bhi.n	8009c96 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	889b      	ldrh	r3, [r3, #4]
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d813      	bhi.n	8009c8c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	4798      	blx	r3
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d110      	bne.n	8009ca0 <USBD_StdItfReq+0x74>
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10d      	bne.n	8009ca0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fcd7 	bl	800a638 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c8a:	e009      	b.n	8009ca0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fc81 	bl	800a596 <USBD_CtlError>
          break;
 8009c94:	e004      	b.n	8009ca0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fc7c 	bl	800a596 <USBD_CtlError>
          break;
 8009c9e:	e000      	b.n	8009ca2 <USBD_StdItfReq+0x76>
          break;
 8009ca0:	bf00      	nop
      }
      break;
 8009ca2:	e004      	b.n	8009cae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fc75 	bl	800a596 <USBD_CtlError>
      break;
 8009cac:	bf00      	nop
  }

  return USBD_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	889b      	ldrh	r3, [r3, #4]
 8009cca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d004      	beq.n	8009ce2 <USBD_StdEPReq+0x2a>
 8009cd8:	2b40      	cmp	r3, #64	; 0x40
 8009cda:	d002      	beq.n	8009ce2 <USBD_StdEPReq+0x2a>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <USBD_StdEPReq+0x3a>
 8009ce0:	e13d      	b.n	8009f5e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
      break;
 8009cf0:	e13a      	b.n	8009f68 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	d10a      	bne.n	8009d14 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	e12a      	b.n	8009f6a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	785b      	ldrb	r3, [r3, #1]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d03e      	beq.n	8009d9a <USBD_StdEPReq+0xe2>
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d002      	beq.n	8009d26 <USBD_StdEPReq+0x6e>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d070      	beq.n	8009e06 <USBD_StdEPReq+0x14e>
 8009d24:	e115      	b.n	8009f52 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d002      	beq.n	8009d36 <USBD_StdEPReq+0x7e>
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d015      	beq.n	8009d60 <USBD_StdEPReq+0xa8>
 8009d34:	e02b      	b.n	8009d8e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00c      	beq.n	8009d56 <USBD_StdEPReq+0x9e>
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
 8009d3e:	2b80      	cmp	r3, #128	; 0x80
 8009d40:	d009      	beq.n	8009d56 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 ff52 	bl	800abf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d4c:	2180      	movs	r1, #128	; 0x80
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 ff4e 	bl	800abf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d54:	e020      	b.n	8009d98 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fc1c 	bl	800a596 <USBD_CtlError>
              break;
 8009d5e:	e01b      	b.n	8009d98 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	885b      	ldrh	r3, [r3, #2]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10e      	bne.n	8009d86 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <USBD_StdEPReq+0xce>
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	2b80      	cmp	r3, #128	; 0x80
 8009d72:	d008      	beq.n	8009d86 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	88db      	ldrh	r3, [r3, #6]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d104      	bne.n	8009d86 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 ff35 	bl	800abf0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fc56 	bl	800a638 <USBD_CtlSendStatus>

              break;
 8009d8c:	e004      	b.n	8009d98 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fc00 	bl	800a596 <USBD_CtlError>
              break;
 8009d96:	bf00      	nop
          }
          break;
 8009d98:	e0e0      	b.n	8009f5c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d002      	beq.n	8009daa <USBD_StdEPReq+0xf2>
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d015      	beq.n	8009dd4 <USBD_StdEPReq+0x11c>
 8009da8:	e026      	b.n	8009df8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00c      	beq.n	8009dca <USBD_StdEPReq+0x112>
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b80      	cmp	r3, #128	; 0x80
 8009db4:	d009      	beq.n	8009dca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 ff18 	bl	800abf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009dc0:	2180      	movs	r1, #128	; 0x80
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 ff14 	bl	800abf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dc8:	e01c      	b.n	8009e04 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fbe2 	bl	800a596 <USBD_CtlError>
              break;
 8009dd2:	e017      	b.n	8009e04 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	885b      	ldrh	r3, [r3, #2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d112      	bne.n	8009e02 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 ff1f 	bl	800ac2e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fc21 	bl	800a638 <USBD_CtlSendStatus>
              }
              break;
 8009df6:	e004      	b.n	8009e02 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fbcb 	bl	800a596 <USBD_CtlError>
              break;
 8009e00:	e000      	b.n	8009e04 <USBD_StdEPReq+0x14c>
              break;
 8009e02:	bf00      	nop
          }
          break;
 8009e04:	e0aa      	b.n	8009f5c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d002      	beq.n	8009e16 <USBD_StdEPReq+0x15e>
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d032      	beq.n	8009e7a <USBD_StdEPReq+0x1c2>
 8009e14:	e097      	b.n	8009f46 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <USBD_StdEPReq+0x174>
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b80      	cmp	r3, #128	; 0x80
 8009e20:	d004      	beq.n	8009e2c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fbb6 	bl	800a596 <USBD_CtlError>
                break;
 8009e2a:	e091      	b.n	8009f50 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da0b      	bge.n	8009e4c <USBD_StdEPReq+0x194>
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	3310      	adds	r3, #16
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	4413      	add	r3, r2
 8009e48:	3304      	adds	r3, #4
 8009e4a:	e00b      	b.n	8009e64 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	3304      	adds	r3, #4
 8009e64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fba0 	bl	800a5b8 <USBD_CtlSendData>
              break;
 8009e78:	e06a      	b.n	8009f50 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	da11      	bge.n	8009ea6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	f003 020f 	and.w	r2, r3, #15
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	3318      	adds	r3, #24
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d117      	bne.n	8009ecc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fb79 	bl	800a596 <USBD_CtlError>
                  break;
 8009ea4:	e054      	b.n	8009f50 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	f003 020f 	and.w	r2, r3, #15
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	440b      	add	r3, r1
 8009eb8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fb66 	bl	800a596 <USBD_CtlError>
                  break;
 8009eca:	e041      	b.n	8009f50 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	da0b      	bge.n	8009eec <USBD_StdEPReq+0x234>
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	3310      	adds	r3, #16
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3304      	adds	r3, #4
 8009eea:	e00b      	b.n	8009f04 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	4413      	add	r3, r2
 8009f02:	3304      	adds	r3, #4
 8009f04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <USBD_StdEPReq+0x25a>
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	2b80      	cmp	r3, #128	; 0x80
 8009f10:	d103      	bne.n	8009f1a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	e00e      	b.n	8009f38 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fea4 	bl	800ac6c <USBD_LL_IsStallEP>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	e002      	b.n	8009f38 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2200      	movs	r2, #0
 8009f36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fb3a 	bl	800a5b8 <USBD_CtlSendData>
              break;
 8009f44:	e004      	b.n	8009f50 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fb24 	bl	800a596 <USBD_CtlError>
              break;
 8009f4e:	bf00      	nop
          }
          break;
 8009f50:	e004      	b.n	8009f5c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fb1e 	bl	800a596 <USBD_CtlError>
          break;
 8009f5a:	bf00      	nop
      }
      break;
 8009f5c:	e004      	b.n	8009f68 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fb18 	bl	800a596 <USBD_CtlError>
      break;
 8009f66:	bf00      	nop
  }

  return ret;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	885b      	ldrh	r3, [r3, #2]
 8009f8e:	0a1b      	lsrs	r3, r3, #8
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	2b06      	cmp	r3, #6
 8009f96:	f200 8128 	bhi.w	800a1ea <USBD_GetDescriptor+0x276>
 8009f9a:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <USBD_GetDescriptor+0x2c>)
 8009f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa0:	08009fbd 	.word	0x08009fbd
 8009fa4:	08009fd5 	.word	0x08009fd5
 8009fa8:	0800a015 	.word	0x0800a015
 8009fac:	0800a1eb 	.word	0x0800a1eb
 8009fb0:	0800a1eb 	.word	0x0800a1eb
 8009fb4:	0800a18b 	.word	0x0800a18b
 8009fb8:	0800a1b7 	.word	0x0800a1b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	7c12      	ldrb	r2, [r2, #16]
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
      break;
 8009fd2:	e112      	b.n	800a1fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7c1b      	ldrb	r3, [r3, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10d      	bne.n	8009ff8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe4:	f107 0208 	add.w	r2, r7, #8
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ff6:	e100      	b.n	800a1fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	f107 0208 	add.w	r2, r7, #8
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
 800a008:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	2202      	movs	r2, #2
 800a010:	701a      	strb	r2, [r3, #0]
      break;
 800a012:	e0f2      	b.n	800a1fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	885b      	ldrh	r3, [r3, #2]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b05      	cmp	r3, #5
 800a01c:	f200 80ac 	bhi.w	800a178 <USBD_GetDescriptor+0x204>
 800a020:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <USBD_GetDescriptor+0xb4>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a041 	.word	0x0800a041
 800a02c:	0800a075 	.word	0x0800a075
 800a030:	0800a0a9 	.word	0x0800a0a9
 800a034:	0800a0dd 	.word	0x0800a0dd
 800a038:	0800a111 	.word	0x0800a111
 800a03c:	0800a145 	.word	0x0800a145
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	7c12      	ldrb	r2, [r2, #16]
 800a058:	f107 0108 	add.w	r1, r7, #8
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
 800a060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a062:	e091      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fa95 	bl	800a596 <USBD_CtlError>
            err++;
 800a06c:	7afb      	ldrb	r3, [r7, #11]
 800a06e:	3301      	adds	r3, #1
 800a070:	72fb      	strb	r3, [r7, #11]
          break;
 800a072:	e089      	b.n	800a188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00b      	beq.n	800a098 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	7c12      	ldrb	r2, [r2, #16]
 800a08c:	f107 0108 	add.w	r1, r7, #8
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a096:	e077      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa7b 	bl	800a596 <USBD_CtlError>
            err++;
 800a0a0:	7afb      	ldrb	r3, [r7, #11]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0a6:	e06f      	b.n	800a188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	7c12      	ldrb	r2, [r2, #16]
 800a0c0:	f107 0108 	add.w	r1, r7, #8
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4798      	blx	r3
 800a0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ca:	e05d      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa61 	bl	800a596 <USBD_CtlError>
            err++;
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0da:	e055      	b.n	800a188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	7c12      	ldrb	r2, [r2, #16]
 800a0f4:	f107 0108 	add.w	r1, r7, #8
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	4798      	blx	r3
 800a0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0fe:	e043      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fa47 	bl	800a596 <USBD_CtlError>
            err++;
 800a108:	7afb      	ldrb	r3, [r7, #11]
 800a10a:	3301      	adds	r3, #1
 800a10c:	72fb      	strb	r3, [r7, #11]
          break;
 800a10e:	e03b      	b.n	800a188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	7c12      	ldrb	r2, [r2, #16]
 800a128:	f107 0108 	add.w	r1, r7, #8
 800a12c:	4610      	mov	r0, r2
 800a12e:	4798      	blx	r3
 800a130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a132:	e029      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa2d 	bl	800a596 <USBD_CtlError>
            err++;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	3301      	adds	r3, #1
 800a140:	72fb      	strb	r3, [r7, #11]
          break;
 800a142:	e021      	b.n	800a188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7c12      	ldrb	r2, [r2, #16]
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
 800a164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a166:	e00f      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa13 	bl	800a596 <USBD_CtlError>
            err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
          break;
 800a176:	e007      	b.n	800a188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fa0b 	bl	800a596 <USBD_CtlError>
          err++;
 800a180:	7afb      	ldrb	r3, [r7, #11]
 800a182:	3301      	adds	r3, #1
 800a184:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a186:	e038      	b.n	800a1fa <USBD_GetDescriptor+0x286>
 800a188:	e037      	b.n	800a1fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	7c1b      	ldrb	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d109      	bne.n	800a1a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19a:	f107 0208 	add.w	r2, r7, #8
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4798      	blx	r3
 800a1a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1a4:	e029      	b.n	800a1fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f9f4 	bl	800a596 <USBD_CtlError>
        err++;
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b4:	e021      	b.n	800a1fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	7c1b      	ldrb	r3, [r3, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10d      	bne.n	800a1da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c6:	f107 0208 	add.w	r2, r7, #8
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4798      	blx	r3
 800a1ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	2207      	movs	r2, #7
 800a1d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1d8:	e00f      	b.n	800a1fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f9da 	bl	800a596 <USBD_CtlError>
        err++;
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e8:	e007      	b.n	800a1fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f9d2 	bl	800a596 <USBD_CtlError>
      err++;
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f8:	bf00      	nop
  }

  if (err != 0U)
 800a1fa:	7afb      	ldrb	r3, [r7, #11]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d11c      	bne.n	800a23a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a200:	893b      	ldrh	r3, [r7, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d011      	beq.n	800a22a <USBD_GetDescriptor+0x2b6>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	88db      	ldrh	r3, [r3, #6]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00d      	beq.n	800a22a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	88da      	ldrh	r2, [r3, #6]
 800a212:	893b      	ldrh	r3, [r7, #8]
 800a214:	4293      	cmp	r3, r2
 800a216:	bf28      	it	cs
 800a218:	4613      	movcs	r3, r2
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a21e:	893b      	ldrh	r3, [r7, #8]
 800a220:	461a      	mov	r2, r3
 800a222:	68f9      	ldr	r1, [r7, #12]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f9c7 	bl	800a5b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	88db      	ldrh	r3, [r3, #6]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa00 	bl	800a638 <USBD_CtlSendStatus>
 800a238:	e000      	b.n	800a23c <USBD_GetDescriptor+0x2c8>
    return;
 800a23a:	bf00      	nop
    }
  }
}
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop

0800a244 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	889b      	ldrh	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d130      	bne.n	800a2b8 <USBD_SetAddress+0x74>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	88db      	ldrh	r3, [r3, #6]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d12c      	bne.n	800a2b8 <USBD_SetAddress+0x74>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	2b7f      	cmp	r3, #127	; 0x7f
 800a264:	d828      	bhi.n	800a2b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	885b      	ldrh	r3, [r3, #2]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a270:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d104      	bne.n	800a286 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f989 	bl	800a596 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a284:	e01c      	b.n	800a2c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7bfa      	ldrb	r2, [r7, #15]
 800a28a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fd10 	bl	800acb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f9cd 	bl	800a638 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ac:	e008      	b.n	800a2c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b6:	e003      	b.n	800a2c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f96b 	bl	800a596 <USBD_CtlError>
  }
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	885b      	ldrh	r3, [r3, #2]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	4b41      	ldr	r3, [pc, #260]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a2da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2dc:	4b40      	ldr	r3, [pc, #256]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d904      	bls.n	800a2ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f955 	bl	800a596 <USBD_CtlError>
 800a2ec:	e075      	b.n	800a3da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d002      	beq.n	800a2fe <USBD_SetConfig+0x36>
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d023      	beq.n	800a344 <USBD_SetConfig+0x7c>
 800a2fc:	e062      	b.n	800a3c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a2fe:	4b38      	ldr	r3, [pc, #224]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d01a      	beq.n	800a33c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a306:	4b36      	ldr	r3, [pc, #216]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2203      	movs	r2, #3
 800a314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a318:	4b31      	ldr	r3, [pc, #196]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff f9f0 	bl	8009704 <USBD_SetClassConfig>
 800a324:	4603      	mov	r3, r0
 800a326:	2b02      	cmp	r3, #2
 800a328:	d104      	bne.n	800a334 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f932 	bl	800a596 <USBD_CtlError>
            return;
 800a332:	e052      	b.n	800a3da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f97f 	bl	800a638 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a33a:	e04e      	b.n	800a3da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f97b 	bl	800a638 <USBD_CtlSendStatus>
        break;
 800a342:	e04a      	b.n	800a3da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a344:	4b26      	ldr	r3, [pc, #152]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d112      	bne.n	800a372 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a354:	4b22      	ldr	r3, [pc, #136]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a35e:	4b20      	ldr	r3, [pc, #128]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff f9ec 	bl	8009742 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f964 	bl	800a638 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a370:	e033      	b.n	800a3da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a372:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d01d      	beq.n	800a3bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff f9da 	bl	8009742 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a398:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	4619      	mov	r1, r3
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7ff f9b0 	bl	8009704 <USBD_SetClassConfig>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d104      	bne.n	800a3b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f8f2 	bl	800a596 <USBD_CtlError>
            return;
 800a3b2:	e012      	b.n	800a3da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f93f 	bl	800a638 <USBD_CtlSendStatus>
        break;
 800a3ba:	e00e      	b.n	800a3da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f93b 	bl	800a638 <USBD_CtlSendStatus>
        break;
 800a3c2:	e00a      	b.n	800a3da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f8e5 	bl	800a596 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a3cc:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <USBD_SetConfig+0x118>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff f9b5 	bl	8009742 <USBD_ClrClassConfig>
        break;
 800a3d8:	bf00      	nop
    }
  }
}
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	2000003c 	.word	0x2000003c

0800a3e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	88db      	ldrh	r3, [r3, #6]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d004      	beq.n	800a400 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f8cc 	bl	800a596 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3fe:	e021      	b.n	800a444 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a406:	2b01      	cmp	r3, #1
 800a408:	db17      	blt.n	800a43a <USBD_GetConfig+0x56>
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	dd02      	ble.n	800a414 <USBD_GetConfig+0x30>
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d00b      	beq.n	800a42a <USBD_GetConfig+0x46>
 800a412:	e012      	b.n	800a43a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3308      	adds	r3, #8
 800a41e:	2201      	movs	r2, #1
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f8c8 	bl	800a5b8 <USBD_CtlSendData>
        break;
 800a428:	e00c      	b.n	800a444 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3304      	adds	r3, #4
 800a42e:	2201      	movs	r2, #1
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f8c0 	bl	800a5b8 <USBD_CtlSendData>
        break;
 800a438:	e004      	b.n	800a444 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f8aa 	bl	800a596 <USBD_CtlError>
        break;
 800a442:	bf00      	nop
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45c:	3b01      	subs	r3, #1
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d81e      	bhi.n	800a4a0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d004      	beq.n	800a474 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f892 	bl	800a596 <USBD_CtlError>
        break;
 800a472:	e01a      	b.n	800a4aa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d005      	beq.n	800a490 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f043 0202 	orr.w	r2, r3, #2
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	330c      	adds	r3, #12
 800a494:	2202      	movs	r2, #2
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f88d 	bl	800a5b8 <USBD_CtlSendData>
      break;
 800a49e:	e004      	b.n	800a4aa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f877 	bl	800a596 <USBD_CtlError>
      break;
 800a4a8:	bf00      	nop
  }
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	885b      	ldrh	r3, [r3, #2]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d106      	bne.n	800a4d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f8b3 	bl	800a638 <USBD_CtlSendStatus>
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d80b      	bhi.n	800a508 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	885b      	ldrh	r3, [r3, #2]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d10c      	bne.n	800a512 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f899 	bl	800a638 <USBD_CtlSendStatus>
      }
      break;
 800a506:	e004      	b.n	800a512 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f843 	bl	800a596 <USBD_CtlError>
      break;
 800a510:	e000      	b.n	800a514 <USBD_ClrFeature+0x3a>
      break;
 800a512:	bf00      	nop
  }
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	785a      	ldrb	r2, [r3, #1]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	3302      	adds	r3, #2
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	3303      	adds	r3, #3
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4413      	add	r3, r2
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	3304      	adds	r3, #4
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	b29a      	uxth	r2, r3
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	3305      	adds	r3, #5
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	b29b      	uxth	r3, r3
 800a566:	4413      	add	r3, r2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	3306      	adds	r3, #6
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b29a      	uxth	r2, r3
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	3307      	adds	r3, #7
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	b29b      	uxth	r3, r3
 800a582:	4413      	add	r3, r2
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	80da      	strh	r2, [r3, #6]

}
 800a58a:	bf00      	nop
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a5a0:	2180      	movs	r1, #128	; 0x80
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fb24 	bl	800abf0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fb20 	bl	800abf0 <USBD_LL_StallEP>
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5ce:	88fa      	ldrh	r2, [r7, #6]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5d4:	88fa      	ldrh	r2, [r7, #6]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	2100      	movs	r1, #0
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f000 fb88 	bl	800acf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5fe:	88fb      	ldrh	r3, [r7, #6]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	2100      	movs	r1, #0
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fb76 	bl	800acf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	4613      	mov	r3, r2
 800a620:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	2100      	movs	r1, #0
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 fb87 	bl	800ad3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2204      	movs	r2, #4
 800a644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a648:	2300      	movs	r3, #0
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fb51 	bl	800acf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2205      	movs	r2, #5
 800a66a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a66e:	2300      	movs	r3, #0
 800a670:	2200      	movs	r2, #0
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fb61 	bl	800ad3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	6892      	ldr	r2, [r2, #8]
 800a6e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	6852      	ldr	r2, [r2, #4]
 800a6ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d103      	bne.n	800a700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	1e5a      	subs	r2, r3, #1
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a726:	2300      	movs	r3, #0
 800a728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a72a:	4b51      	ldr	r3, [pc, #324]	; (800a870 <xTaskIncrementTick+0x150>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f040 808d 	bne.w	800a84e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a734:	4b4f      	ldr	r3, [pc, #316]	; (800a874 <xTaskIncrementTick+0x154>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3301      	adds	r3, #1
 800a73a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a73c:	4a4d      	ldr	r2, [pc, #308]	; (800a874 <xTaskIncrementTick+0x154>)
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11f      	bne.n	800a788 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a748:	4b4b      	ldr	r3, [pc, #300]	; (800a878 <xTaskIncrementTick+0x158>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d009      	beq.n	800a766 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	e7fe      	b.n	800a764 <xTaskIncrementTick+0x44>
 800a766:	4b44      	ldr	r3, [pc, #272]	; (800a878 <xTaskIncrementTick+0x158>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	4b43      	ldr	r3, [pc, #268]	; (800a87c <xTaskIncrementTick+0x15c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a41      	ldr	r2, [pc, #260]	; (800a878 <xTaskIncrementTick+0x158>)
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	4a41      	ldr	r2, [pc, #260]	; (800a87c <xTaskIncrementTick+0x15c>)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	4b41      	ldr	r3, [pc, #260]	; (800a880 <xTaskIncrementTick+0x160>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3301      	adds	r3, #1
 800a780:	4a3f      	ldr	r2, [pc, #252]	; (800a880 <xTaskIncrementTick+0x160>)
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	f000 f8e6 	bl	800a954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a788:	4b3e      	ldr	r3, [pc, #248]	; (800a884 <xTaskIncrementTick+0x164>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d34e      	bcc.n	800a830 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a792:	4b39      	ldr	r3, [pc, #228]	; (800a878 <xTaskIncrementTick+0x158>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <xTaskIncrementTick+0x80>
 800a79c:	2301      	movs	r3, #1
 800a79e:	e000      	b.n	800a7a2 <xTaskIncrementTick+0x82>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d004      	beq.n	800a7b0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a6:	4b37      	ldr	r3, [pc, #220]	; (800a884 <xTaskIncrementTick+0x164>)
 800a7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ac:	601a      	str	r2, [r3, #0]
					break;
 800a7ae:	e03f      	b.n	800a830 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7b0:	4b31      	ldr	r3, [pc, #196]	; (800a878 <xTaskIncrementTick+0x158>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d203      	bcs.n	800a7d0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7c8:	4a2e      	ldr	r2, [pc, #184]	; (800a884 <xTaskIncrementTick+0x164>)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6013      	str	r3, [r2, #0]
						break;
 800a7ce:	e02f      	b.n	800a830 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff ff79 	bl	800a6cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	3318      	adds	r3, #24
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff ff70 	bl	800a6cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f0:	4b25      	ldr	r3, [pc, #148]	; (800a888 <xTaskIncrementTick+0x168>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d903      	bls.n	800a800 <xTaskIncrementTick+0xe0>
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fc:	4a22      	ldr	r2, [pc, #136]	; (800a888 <xTaskIncrementTick+0x168>)
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4a1f      	ldr	r2, [pc, #124]	; (800a88c <xTaskIncrementTick+0x16c>)
 800a80e:	441a      	add	r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	3304      	adds	r3, #4
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f7ff ff34 	bl	800a684 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a820:	4b1b      	ldr	r3, [pc, #108]	; (800a890 <xTaskIncrementTick+0x170>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	429a      	cmp	r2, r3
 800a828:	d3b3      	bcc.n	800a792 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a82a:	2301      	movs	r3, #1
 800a82c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a82e:	e7b0      	b.n	800a792 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a830:	4b17      	ldr	r3, [pc, #92]	; (800a890 <xTaskIncrementTick+0x170>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a836:	4915      	ldr	r1, [pc, #84]	; (800a88c <xTaskIncrementTick+0x16c>)
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d907      	bls.n	800a858 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a848:	2301      	movs	r3, #1
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e004      	b.n	800a858 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a84e:	4b11      	ldr	r3, [pc, #68]	; (800a894 <xTaskIncrementTick+0x174>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	4a0f      	ldr	r2, [pc, #60]	; (800a894 <xTaskIncrementTick+0x174>)
 800a856:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a858:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <xTaskIncrementTick+0x178>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a864:	697b      	ldr	r3, [r7, #20]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	200004c4 	.word	0x200004c4
 800a874:	200004ac 	.word	0x200004ac
 800a878:	200004a4 	.word	0x200004a4
 800a87c:	200004a8 	.word	0x200004a8
 800a880:	200004bc 	.word	0x200004bc
 800a884:	200004c0 	.word	0x200004c0
 800a888:	200004b0 	.word	0x200004b0
 800a88c:	20000044 	.word	0x20000044
 800a890:	20000040 	.word	0x20000040
 800a894:	200004b4 	.word	0x200004b4
 800a898:	200004b8 	.word	0x200004b8

0800a89c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8a2:	4b27      	ldr	r3, [pc, #156]	; (800a940 <vTaskSwitchContext+0xa4>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8aa:	4b26      	ldr	r3, [pc, #152]	; (800a944 <vTaskSwitchContext+0xa8>)
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8b0:	e040      	b.n	800a934 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a8b2:	4b24      	ldr	r3, [pc, #144]	; (800a944 <vTaskSwitchContext+0xa8>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a8b8:	4b23      	ldr	r3, [pc, #140]	; (800a948 <vTaskSwitchContext+0xac>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e00f      	b.n	800a8e0 <vTaskSwitchContext+0x44>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <vTaskSwitchContext+0x3e>
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	607b      	str	r3, [r7, #4]
 800a8d8:	e7fe      	b.n	800a8d8 <vTaskSwitchContext+0x3c>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	491a      	ldr	r1, [pc, #104]	; (800a94c <vTaskSwitchContext+0xb0>)
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	440b      	add	r3, r1
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0e5      	beq.n	800a8c0 <vTaskSwitchContext+0x24>
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4a13      	ldr	r2, [pc, #76]	; (800a94c <vTaskSwitchContext+0xb0>)
 800a900:	4413      	add	r3, r2
 800a902:	60bb      	str	r3, [r7, #8]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	605a      	str	r2, [r3, #4]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	3308      	adds	r3, #8
 800a916:	429a      	cmp	r2, r3
 800a918:	d104      	bne.n	800a924 <vTaskSwitchContext+0x88>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	605a      	str	r2, [r3, #4]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	4a09      	ldr	r2, [pc, #36]	; (800a950 <vTaskSwitchContext+0xb4>)
 800a92c:	6013      	str	r3, [r2, #0]
 800a92e:	4a06      	ldr	r2, [pc, #24]	; (800a948 <vTaskSwitchContext+0xac>)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6013      	str	r3, [r2, #0]
}
 800a934:	bf00      	nop
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	200004c4 	.word	0x200004c4
 800a944:	200004b8 	.word	0x200004b8
 800a948:	200004b0 	.word	0x200004b0
 800a94c:	20000044 	.word	0x20000044
 800a950:	20000040 	.word	0x20000040

0800a954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a95a:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <prvResetNextTaskUnblockTime+0x44>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <prvResetNextTaskUnblockTime+0x14>
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <prvResetNextTaskUnblockTime+0x16>
 800a968:	2300      	movs	r3, #0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d004      	beq.n	800a978 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a96e:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <prvResetNextTaskUnblockTime+0x48>)
 800a970:	f04f 32ff 	mov.w	r2, #4294967295
 800a974:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a976:	e008      	b.n	800a98a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a978:	4b07      	ldr	r3, [pc, #28]	; (800a998 <prvResetNextTaskUnblockTime+0x44>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	4a05      	ldr	r2, [pc, #20]	; (800a99c <prvResetNextTaskUnblockTime+0x48>)
 800a988:	6013      	str	r3, [r2, #0]
}
 800a98a:	bf00      	nop
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	200004a4 	.word	0x200004a4
 800a99c:	200004c0 	.word	0x200004c0

0800a9a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <pxCurrentTCBConst2>)
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	6808      	ldr	r0, [r1, #0]
 800a9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	f380 8809 	msr	PSP, r0
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	4770      	bx	lr
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst2>:
 800a9c0:	20000040 	.word	0x20000040
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
	...

0800a9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9d0:	f3ef 8009 	mrs	r0, PSP
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <pxCurrentTCBConst>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f01e 0f10 	tst.w	lr, #16
 800a9e0:	bf08      	it	eq
 800a9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9f4:	f380 8811 	msr	BASEPRI, r0
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f7ff ff4c 	bl	800a89c <vTaskSwitchContext>
 800aa04:	f04f 0000 	mov.w	r0, #0
 800aa08:	f380 8811 	msr	BASEPRI, r0
 800aa0c:	bc09      	pop	{r0, r3}
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f01e 0f10 	tst.w	lr, #16
 800aa1a:	bf08      	it	eq
 800aa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa20:	f380 8809 	msr	PSP, r0
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst>:
 800aa30:	20000040 	.word	0x20000040
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa50:	f7ff fe66 	bl	800a720 <xTaskIncrementTick>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa5a:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <SysTick_Handler+0x3c>)
 800aa5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	2300      	movs	r3, #0
 800aa64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f7fe fe6a 	bl	8009768 <USBD_LL_SetupStage>
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800aaae:	78fb      	ldrb	r3, [r7, #3]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	015b      	lsls	r3, r3, #5
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	4619      	mov	r1, r3
 800aac0:	f7fe fe9d 	bl	80097fe <USBD_LL_DataOutStage>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	015b      	lsls	r3, r3, #5
 800aae4:	4413      	add	r3, r2
 800aae6:	333c      	adds	r3, #60	; 0x3c
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7fe fef7 	bl	80098e0 <USBD_LL_DataInStage>
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff f80a 	bl	8009b22 <USBD_LL_SOF>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d001      	beq.n	800ab2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab2a:	f7f6 fd0b 	bl	8001544 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ab34:	7bfa      	ldrb	r2, [r7, #15]
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe ffb7 	bl	8009aac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe ff70 	bl	8009a2a <USBD_LL_Reset>
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe ffb2 	bl	8009acc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab70:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <HAL_PCD_SuspendCallback+0x30>)
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	4a03      	ldr	r2, [pc, #12]	; (800ab84 <HAL_PCD_SuspendCallback+0x30>)
 800ab76:	f043 0306 	orr.w	r3, r3, #6
 800ab7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	e000ed00 	.word	0xe000ed00

0800ab88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe ffad 	bl	8009af6 <USBD_LL_Resume>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	461a      	mov	r2, r3
 800abb2:	4603      	mov	r3, r0
 800abb4:	70fb      	strb	r3, [r7, #3]
 800abb6:	460b      	mov	r3, r1
 800abb8:	70bb      	strb	r3, [r7, #2]
 800abba:	4613      	mov	r3, r2
 800abbc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abcc:	78bb      	ldrb	r3, [r7, #2]
 800abce:	883a      	ldrh	r2, [r7, #0]
 800abd0:	78f9      	ldrb	r1, [r7, #3]
 800abd2:	f7f9 ff9d 	bl	8004b10 <HAL_PCD_EP_Open>
 800abd6:	4603      	mov	r3, r0
 800abd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 f8d1 	bl	800ad84 <USBD_Get_USB_Status>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac0a:	78fa      	ldrb	r2, [r7, #3]
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fa f851 	bl	8004cb6 <HAL_PCD_EP_SetStall>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 f8b2 	bl	800ad84 <USBD_Get_USB_Status>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac48:	78fa      	ldrb	r2, [r7, #3]
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fa f88c 	bl	8004d6a <HAL_PCD_EP_ClrStall>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 f893 	bl	800ad84 <USBD_Get_USB_Status>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	da08      	bge.n	800ac9a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac88:	78fb      	ldrb	r3, [r7, #3]
 800ac8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	015b      	lsls	r3, r3, #5
 800ac92:	4413      	add	r3, r2
 800ac94:	332a      	adds	r3, #42	; 0x2a
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	e008      	b.n	800acac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	015b      	lsls	r3, r3, #5
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800acaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acd2:	78fa      	ldrb	r2, [r7, #3]
 800acd4:	4611      	mov	r1, r2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7f9 fef5 	bl	8004ac6 <HAL_PCD_SetAddress>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 f84e 	bl	800ad84 <USBD_Get_USB_Status>
 800ace8:	4603      	mov	r3, r0
 800acea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acec:	7bbb      	ldrb	r3, [r7, #14]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	461a      	mov	r2, r3
 800ad02:	460b      	mov	r3, r1
 800ad04:	72fb      	strb	r3, [r7, #11]
 800ad06:	4613      	mov	r3, r2
 800ad08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad18:	893b      	ldrh	r3, [r7, #8]
 800ad1a:	7af9      	ldrb	r1, [r7, #11]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	f7f9 ff91 	bl	8004c44 <HAL_PCD_EP_Transmit>
 800ad22:	4603      	mov	r3, r0
 800ad24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 f82b 	bl	800ad84 <USBD_Get_USB_Status>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	607a      	str	r2, [r7, #4]
 800ad46:	461a      	mov	r2, r3
 800ad48:	460b      	mov	r3, r1
 800ad4a:	72fb      	strb	r3, [r7, #11]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad5e:	893b      	ldrh	r3, [r7, #8]
 800ad60:	7af9      	ldrb	r1, [r7, #11]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	f7f9 ff34 	bl	8004bd0 <HAL_PCD_EP_Receive>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f808 	bl	800ad84 <USBD_Get_USB_Status>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d817      	bhi.n	800adc8 <USBD_Get_USB_Status+0x44>
 800ad98:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <USBD_Get_USB_Status+0x1c>)
 800ad9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9e:	bf00      	nop
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adb7 	.word	0x0800adb7
 800ada8:	0800adbd 	.word	0x0800adbd
 800adac:	0800adc3 	.word	0x0800adc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
    break;
 800adb4:	e00b      	b.n	800adce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adb6:	2302      	movs	r3, #2
 800adb8:	73fb      	strb	r3, [r7, #15]
    break;
 800adba:	e008      	b.n	800adce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800adbc:	2301      	movs	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
    break;
 800adc0:	e005      	b.n	800adce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adc2:	2302      	movs	r3, #2
 800adc4:	73fb      	strb	r3, [r7, #15]
    break;
 800adc6:	e002      	b.n	800adce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800adc8:	2302      	movs	r3, #2
 800adca:	73fb      	strb	r3, [r7, #15]
    break;
 800adcc:	bf00      	nop
  }
  return usb_status;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <__libc_init_array>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	4e0d      	ldr	r6, [pc, #52]	; (800ae14 <__libc_init_array+0x38>)
 800ade0:	4c0d      	ldr	r4, [pc, #52]	; (800ae18 <__libc_init_array+0x3c>)
 800ade2:	1ba4      	subs	r4, r4, r6
 800ade4:	10a4      	asrs	r4, r4, #2
 800ade6:	2500      	movs	r5, #0
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d109      	bne.n	800ae00 <__libc_init_array+0x24>
 800adec:	4e0b      	ldr	r6, [pc, #44]	; (800ae1c <__libc_init_array+0x40>)
 800adee:	4c0c      	ldr	r4, [pc, #48]	; (800ae20 <__libc_init_array+0x44>)
 800adf0:	f000 f820 	bl	800ae34 <_init>
 800adf4:	1ba4      	subs	r4, r4, r6
 800adf6:	10a4      	asrs	r4, r4, #2
 800adf8:	2500      	movs	r5, #0
 800adfa:	42a5      	cmp	r5, r4
 800adfc:	d105      	bne.n	800ae0a <__libc_init_array+0x2e>
 800adfe:	bd70      	pop	{r4, r5, r6, pc}
 800ae00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae04:	4798      	blx	r3
 800ae06:	3501      	adds	r5, #1
 800ae08:	e7ee      	b.n	800ade8 <__libc_init_array+0xc>
 800ae0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae0e:	4798      	blx	r3
 800ae10:	3501      	adds	r5, #1
 800ae12:	e7f2      	b.n	800adfa <__libc_init_array+0x1e>
 800ae14:	0800ae84 	.word	0x0800ae84
 800ae18:	0800ae84 	.word	0x0800ae84
 800ae1c:	0800ae84 	.word	0x0800ae84
 800ae20:	0800ae88 	.word	0x0800ae88

0800ae24 <memset>:
 800ae24:	4402      	add	r2, r0
 800ae26:	4603      	mov	r3, r0
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d100      	bne.n	800ae2e <memset+0xa>
 800ae2c:	4770      	bx	lr
 800ae2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae32:	e7f9      	b.n	800ae28 <memset+0x4>

0800ae34 <_init>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	bf00      	nop
 800ae38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3a:	bc08      	pop	{r3}
 800ae3c:	469e      	mov	lr, r3
 800ae3e:	4770      	bx	lr

0800ae40 <_fini>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	bf00      	nop
 800ae44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae46:	bc08      	pop	{r3}
 800ae48:	469e      	mov	lr, r3
 800ae4a:	4770      	bx	lr
