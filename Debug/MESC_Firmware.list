
MESC_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aebc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b084  0800b084  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800b084  0800b084  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b084  0800b084  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b084  0800b084  0001b084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b088  0800b088  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  20000010  0800b09c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000df0  0800b09c  00020df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002273a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000415b  00000000  00000000  0004277a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba8  00000000  00000000  000468d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d0  00000000  00000000  00048480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f969  00000000  00000000  00049e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000189d1  00000000  00000000  000697b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9e02  00000000  00000000  0008218a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bf8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007440  00000000  00000000  0013c008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b034 	.word	0x0800b034

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800b034 	.word	0x0800b034

080001d0 <BLDCInit>:
#include "MESChw_setup.h"

extern TIM_HandleTypeDef htim1;


void BLDCInit(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	BLDCVars.ReqCurrent=0;					//Start the motor at 0 current
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <BLDCInit+0x58>)
 80001d6:	f04f 0200 	mov.w	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
	BLDCVars.BLDCduty=0;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <BLDCInit+0x58>)
 80001de:	2200      	movs	r2, #0
 80001e0:	605a      	str	r2, [r3, #4]
	BLDCVars.CurrentChannel=0;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <BLDCInit+0x58>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
	BLDCVars.pGain=1023*motor.Rphase/48; 	//wtf should I set the gain as by default... V/Amp error...Perhaps base it on Rphase and the bus voltage (nominally 48V)? But we don;t know the exact bus voltage yet...
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <BLDCInit+0x5c>)
 80001ea:	edd3 7a00 	vldr	s15, [r3]
 80001ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000230 <BLDCInit+0x60>
 80001f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80001f6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000234 <BLDCInit+0x64>
 80001fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80001fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000202:	ee17 2a90 	vmov	r2, s15
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <BLDCInit+0x58>)
 8000208:	611a      	str	r2, [r3, #16]
	BLDCVars.iGain=BLDCVars.pGain;			//Initially, let's just make the iGain the same as the pGain, so after 1 second their contributions will be equal.
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <BLDCInit+0x58>)
 800020c:	691b      	ldr	r3, [r3, #16]
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <BLDCInit+0x58>)
 8000210:	6153      	str	r3, [r2, #20]
	BLDCVars.BLDCEstate=GetHallState();
 8000212:	f000 f941 	bl	8000498 <GetHallState>
 8000216:	4602      	mov	r2, r0
 8000218:	4b03      	ldr	r3, [pc, #12]	; (8000228 <BLDCInit+0x58>)
 800021a:	609a      	str	r2, [r3, #8]
	BLDCState=BLDC_FORWARDS;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <BLDCInit+0x68>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000528 	.word	0x20000528
 800022c:	20000544 	.word	0x20000544
 8000230:	447fc000 	.word	0x447fc000
 8000234:	42400000 	.word	0x42400000
 8000238:	20000541 	.word	0x20000541

0800023c <BLDCCommuteHall>:


void BLDCCommuteHall(){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
int CurrentHallState=GetHallState(); //Borrow the hall state detection from the FOC system
 8000242:	f000 f929 	bl	8000498 <GetHallState>
 8000246:	6078      	str	r0, [r7, #4]

static int LastHallState=7;	//Initialise the LastHallState at a value that means it will call the commutation and correctly set the current measurement channel, avoiding a runaway on the PI loop

if(BLDCState==BLDC_FORWARDS){
 8000248:	4b48      	ldr	r3, [pc, #288]	; (800036c <BLDCCommuteHall+0x130>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d119      	bne.n	8000284 <BLDCCommuteHall+0x48>
	if(!(LastHallState==CurrentHallState)){
 8000250:	4b47      	ldr	r3, [pc, #284]	; (8000370 <BLDCCommuteHall+0x134>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	429a      	cmp	r2, r3
 8000258:	f000 8084 	beq.w	8000364 <BLDCCommuteHall+0x128>
		BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	1c59      	adds	r1, r3, #1
 8000260:	4b44      	ldr	r3, [pc, #272]	; (8000374 <BLDCCommuteHall+0x138>)
 8000262:	fb83 3201 	smull	r3, r2, r3, r1
 8000266:	17cb      	asrs	r3, r1, #31
 8000268:	1ad2      	subs	r2, r2, r3
 800026a:	4613      	mov	r3, r2
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	4413      	add	r3, r2
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	1aca      	subs	r2, r1, r3
 8000274:	4b40      	ldr	r3, [pc, #256]	; (8000378 <BLDCCommuteHall+0x13c>)
 8000276:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the next state to generate forward torque
 8000278:	f000 f880 	bl	800037c <writeBLDC>
		LastHallState=CurrentHallState;		//Avoid repeatedly writing the registers
 800027c:	4a3c      	ldr	r2, [pc, #240]	; (8000370 <BLDCCommuteHall+0x134>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]
//Disable the drivers, freewheel
phU_Break();
phV_Break();
phW_Break();
}
}
 8000282:	e06f      	b.n	8000364 <BLDCCommuteHall+0x128>
else if(BLDCState==BLDC_BACKWARDS){
 8000284:	4b39      	ldr	r3, [pc, #228]	; (800036c <BLDCCommuteHall+0x130>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b02      	cmp	r3, #2
 800028a:	d118      	bne.n	80002be <BLDCCommuteHall+0x82>
	if(!(LastHallState==CurrentHallState)){
 800028c:	4b38      	ldr	r3, [pc, #224]	; (8000370 <BLDCCommuteHall+0x134>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	429a      	cmp	r2, r3
 8000294:	d066      	beq.n	8000364 <BLDCCommuteHall+0x128>
		BLDCVars.BLDCEstate=(CurrentHallState+5)%6;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	1d59      	adds	r1, r3, #5
 800029a:	4b36      	ldr	r3, [pc, #216]	; (8000374 <BLDCCommuteHall+0x138>)
 800029c:	fb83 3201 	smull	r3, r2, r3, r1
 80002a0:	17cb      	asrs	r3, r1, #31
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	4613      	mov	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	4413      	add	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	1aca      	subs	r2, r1, r3
 80002ae:	4b32      	ldr	r3, [pc, #200]	; (8000378 <BLDCCommuteHall+0x13c>)
 80002b0:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the previous state to generate reverse torque
 80002b2:	f000 f863 	bl	800037c <writeBLDC>
		LastHallState=CurrentHallState;
 80002b6:	4a2e      	ldr	r2, [pc, #184]	; (8000370 <BLDCCommuteHall+0x134>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	e052      	b.n	8000364 <BLDCCommuteHall+0x128>
else if(BLDCState==BLDC_BRAKE){
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <BLDCCommuteHall+0x130>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d148      	bne.n	8000358 <BLDCCommuteHall+0x11c>
		if(((CurrentHallState-LastHallState)%6)>1){
 80002c6:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <BLDCCommuteHall+0x134>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	1ad1      	subs	r1, r2, r3
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <BLDCCommuteHall+0x138>)
 80002d0:	fb83 3201 	smull	r3, r2, r3, r1
 80002d4:	17cb      	asrs	r3, r1, #31
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	1aca      	subs	r2, r1, r3
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	dd13      	ble.n	800030e <BLDCCommuteHall+0xd2>
			BLDCVars.BLDCEstate=(CurrentHallState-1)%6;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	1e59      	subs	r1, r3, #1
 80002ea:	4b22      	ldr	r3, [pc, #136]	; (8000374 <BLDCCommuteHall+0x138>)
 80002ec:	fb83 3201 	smull	r3, r2, r3, r1
 80002f0:	17cb      	asrs	r3, r1, #31
 80002f2:	1ad2      	subs	r2, r2, r3
 80002f4:	4613      	mov	r3, r2
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	4413      	add	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	1aca      	subs	r2, r1, r3
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <BLDCCommuteHall+0x13c>)
 8000300:	609a      	str	r2, [r3, #8]
			writeBLDC();
 8000302:	f000 f83b 	bl	800037c <writeBLDC>
			LastHallState=CurrentHallState;
 8000306:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <BLDCCommuteHall+0x134>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	e02a      	b.n	8000364 <BLDCCommuteHall+0x128>
		else if(((CurrentHallState-LastHallState)%6)<-1){
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <BLDCCommuteHall+0x134>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	1ad1      	subs	r1, r2, r3
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <BLDCCommuteHall+0x138>)
 8000318:	fb83 3201 	smull	r3, r2, r3, r1
 800031c:	17cb      	asrs	r3, r1, #31
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	1aca      	subs	r2, r1, r3
 800032a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800032e:	da19      	bge.n	8000364 <BLDCCommuteHall+0x128>
			BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	1c59      	adds	r1, r3, #1
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <BLDCCommuteHall+0x138>)
 8000336:	fb83 3201 	smull	r3, r2, r3, r1
 800033a:	17cb      	asrs	r3, r1, #31
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4613      	mov	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4413      	add	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1aca      	subs	r2, r1, r3
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <BLDCCommuteHall+0x13c>)
 800034a:	609a      	str	r2, [r3, #8]
			writeBLDC();
 800034c:	f000 f816 	bl	800037c <writeBLDC>
			LastHallState=CurrentHallState;
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <BLDCCommuteHall+0x134>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
}
 8000356:	e005      	b.n	8000364 <BLDCCommuteHall+0x128>
phU_Break();
 8000358:	f000 f8e8 	bl	800052c <phU_Break>
phV_Break();
 800035c:	f000 f95a 	bl	8000614 <phV_Break>
phW_Break();
 8000360:	f000 f9cc 	bl	80006fc <phW_Break>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000541 	.word	0x20000541
 8000370:	20000000 	.word	0x20000000
 8000374:	2aaaaaab 	.word	0x2aaaaaab
 8000378:	20000528 	.word	0x20000528

0800037c <writeBLDC>:

	BLDCVars.BLDCduty=Duty;

}

void writeBLDC(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	switch(BLDCVars.BLDCEstate){
 8000380:	4b43      	ldr	r3, [pc, #268]	; (8000490 <writeBLDC+0x114>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	2b05      	cmp	r3, #5
 8000386:	f200 8081 	bhi.w	800048c <writeBLDC+0x110>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <writeBLDC+0x14>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a9 	.word	0x080003a9
 8000394:	080003cf 	.word	0x080003cf
 8000398:	080003f5 	.word	0x080003f5
 800039c:	0800041b 	.word	0x0800041b
 80003a0:	08000441 	.word	0x08000441
 80003a4:	08000467 	.word	0x08000467
	case 0:
		//disable phase first
		phW_Break();
 80003a8:	f000 f9a8 	bl	80006fc <phW_Break>
		//WritePWM values
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 80003ac:	4b38      	ldr	r3, [pc, #224]	; (8000490 <writeBLDC+0x114>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	4b38      	ldr	r3, [pc, #224]	; (8000494 <writeBLDC+0x118>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=0;
 80003b6:	4b37      	ldr	r3, [pc, #220]	; (8000494 <writeBLDC+0x118>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2200      	movs	r2, #0
 80003bc:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 80003be:	f000 f8ef 	bl	80005a0 <phU_Enable>
		phV_Enable();
 80003c2:	f000 f961 	bl	8000688 <phV_Enable>
		BLDCVars.CurrentChannel=1; //Write the field into which the lowside current will flow, to be retrieved from the FOC_measurement_vars
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <writeBLDC+0x114>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	60da      	str	r2, [r3, #12]
		break;
 80003cc:	e05e      	b.n	800048c <writeBLDC+0x110>

	case 1:
		phV_Break();
 80003ce:	f000 f921 	bl	8000614 <phV_Break>
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <writeBLDC+0x114>)
 80003d4:	685a      	ldr	r2, [r3, #4]
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <writeBLDC+0x118>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=0;
 80003dc:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <writeBLDC+0x118>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2200      	movs	r2, #0
 80003e2:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 80003e4:	f000 f8dc 	bl	80005a0 <phU_Enable>
		phW_Enable();
 80003e8:	f000 f9c2 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=2;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <writeBLDC+0x114>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	60da      	str	r2, [r3, #12]
		break;
 80003f2:	e04b      	b.n	800048c <writeBLDC+0x110>

	case 2:
		phU_Break();
 80003f4:	f000 f89a 	bl	800052c <phU_Break>
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <writeBLDC+0x114>)
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <writeBLDC+0x118>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=0;
 8000402:	4b24      	ldr	r3, [pc, #144]	; (8000494 <writeBLDC+0x118>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2200      	movs	r2, #0
 8000408:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 800040a:	f000 f93d 	bl	8000688 <phV_Enable>
		phW_Enable();
 800040e:	f000 f9af 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=2;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <writeBLDC+0x114>)
 8000414:	2202      	movs	r2, #2
 8000416:	60da      	str	r2, [r3, #12]
		break;
 8000418:	e038      	b.n	800048c <writeBLDC+0x110>

	case 3:
		phW_Break();
 800041a:	f000 f96f 	bl	80006fc <phW_Break>
		htim1.Instance->CCR1=0;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <writeBLDC+0x118>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2200      	movs	r2, #0
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <writeBLDC+0x114>)
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <writeBLDC+0x118>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 8000430:	f000 f8b6 	bl	80005a0 <phU_Enable>
		phV_Enable();
 8000434:	f000 f928 	bl	8000688 <phV_Enable>
		BLDCVars.CurrentChannel=0;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <writeBLDC+0x114>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
		break;
 800043e:	e025      	b.n	800048c <writeBLDC+0x110>

	case 4:
		phV_Break();
 8000440:	f000 f8e8 	bl	8000614 <phV_Break>
		htim1.Instance->CCR1=0;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <writeBLDC+0x118>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <writeBLDC+0x114>)
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <writeBLDC+0x118>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 8000456:	f000 f8a3 	bl	80005a0 <phU_Enable>
		phW_Enable();
 800045a:	f000 f989 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=0;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <writeBLDC+0x114>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
		break;
 8000464:	e012      	b.n	800048c <writeBLDC+0x110>

	case 5:
		phU_Break();
 8000466:	f000 f861 	bl	800052c <phU_Break>
		htim1.Instance->CCR2=0;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <writeBLDC+0x118>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <writeBLDC+0x114>)
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <writeBLDC+0x118>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 800047c:	f000 f904 	bl	8000688 <phV_Enable>
		phW_Enable();
 8000480:	f000 f976 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=1;
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <writeBLDC+0x114>)
 8000486:	2201      	movs	r2, #1
 8000488:	60da      	str	r2, [r3, #12]
		break;
 800048a:	bf00      	nop

	}
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000528 	.word	0x20000528
 8000494:	20000a44 	.word	0x20000a44

08000498 <GetHallState>:
	phU_Break();
	phV_Break();
	phW_Break();
}

int GetHallState(){
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0


	int hallState=0;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
	hallState=((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))<<1)|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))<<2));
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	4820      	ldr	r0, [pc, #128]	; (8000528 <GetHallState+0x90>)
 80004a6:	f004 f84b 	bl	8004540 <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461c      	mov	r4, r3
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <GetHallState+0x90>)
 80004b2:	f004 f845 	bl	8004540 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	431c      	orrs	r4, r3
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <GetHallState+0x90>)
 80004c2:	f004 f83d 	bl	8004540 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4323      	orrs	r3, r4
 80004cc:	607b      	str	r3, [r7, #4]
	//ToDo Using these HAL_GPIO_ReadPin functions is very computationally expensive, should replace with a register read->byte mask->rightshift
	switch(hallState)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b07      	cmp	r3, #7
 80004d2:	d823      	bhi.n	800051c <GetHallState+0x84>
 80004d4:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <GetHallState+0x44>)
 80004d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004da:	bf00      	nop
 80004dc:	080004fd 	.word	0x080004fd
 80004e0:	08000505 	.word	0x08000505
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	08000509 	.word	0x08000509
 80004ec:	08000515 	.word	0x08000515
 80004f0:	08000519 	.word	0x08000519
 80004f4:	08000511 	.word	0x08000511
 80004f8:	08000501 	.word	0x08000501
		{
			case 0:
				return 7; //7 is the no hall sensor detected state (all low)
 80004fc:	2307      	movs	r3, #7
 80004fe:	e00e      	b.n	800051e <GetHallState+0x86>
				break;
			case 7:
				return 6; //6 is the no hall sensor detected state (all high)
 8000500:	2306      	movs	r3, #6
 8000502:	e00c      	b.n	800051e <GetHallState+0x86>
				break;
//Implement the hall table order here, depending how the hall sensors are configured
			case 1:
				return 0;
 8000504:	2300      	movs	r3, #0
 8000506:	e00a      	b.n	800051e <GetHallState+0x86>
				break;
			case 3:
				return 1;
 8000508:	2301      	movs	r3, #1
 800050a:	e008      	b.n	800051e <GetHallState+0x86>
				break;
			case 2:
				return 2;
 800050c:	2302      	movs	r3, #2
 800050e:	e006      	b.n	800051e <GetHallState+0x86>
				break;
			case 6:
				return 3;
 8000510:	2303      	movs	r3, #3
 8000512:	e004      	b.n	800051e <GetHallState+0x86>
				break;
			case 4:
				return 4;
 8000514:	2304      	movs	r3, #4
 8000516:	e002      	b.n	800051e <GetHallState+0x86>
				break;
			case 5:
				return 5;
 8000518:	2305      	movs	r3, #5
 800051a:	e000      	b.n	800051e <GetHallState+0x86>
				break;
			default:
				return 8;
 800051c:	2308      	movs	r3, #8
				break;
		}
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	bf00      	nop
 8000528:	48000400 	.word	0x48000400

0800052c <phU_Break>:


uint32_t tmpccmrx;	//Temporary buffer which is used to turn on/off phase PWMs
//Turn all phase U FETs off, Tristate the HBridge output - For BLDC mode mainly, but also used for measuring, software fault detection and recovery
//ToDo TEST THOROUGHLY The register manipulations for the break functions were used previously on an STM32F042K6 for my first BLDC drive, on TIM1, which should be identical, but definitely needs checking
void phU_Break(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <phU_Break+0x6c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <phU_Break+0x70>)
 8000538:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <phU_Break+0x70>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <phU_Break+0x70>)
 8000548:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <phU_Break+0x70>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f023 0303 	bic.w	r3, r3, #3
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <phU_Break+0x70>)
 8000554:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <phU_Break+0x70>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800055e:	4a0f      	ldr	r2, [pc, #60]	; (800059c <phU_Break+0x70>)
 8000560:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <phU_Break+0x6c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <phU_Break+0x70>)
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <phU_Break+0x6c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6a1a      	ldr	r2, [r3, #32]
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <phU_Break+0x6c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f022 0201 	bic.w	r2, r2, #1
 800057a:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <phU_Break+0x6c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <phU_Break+0x6c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 0204 	bic.w	r2, r2, #4
 800058a:	621a      	str	r2, [r3, #32]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000a44 	.word	0x20000a44
 800059c:	20000578 	.word	0x20000578

080005a0 <phU_Enable>:
//Basically un-break phase U, opposite of above...
void phU_Enable(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <phU_Enable+0x6c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a19      	ldr	r2, [pc, #100]	; (8000610 <phU_Enable+0x70>)
 80005ac:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <phU_Enable+0x70>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005ba:	4a15      	ldr	r2, [pc, #84]	; (8000610 <phU_Enable+0x70>)
 80005bc:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <phU_Enable+0x70>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f023 0303 	bic.w	r3, r3, #3
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <phU_Enable+0x70>)
 80005c8:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <phU_Enable+0x70>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <phU_Enable+0x70>)
 80005d4:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <phU_Enable+0x6c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <phU_Enable+0x70>)
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER |= TIM_CCER_CC1E;   //enable
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <phU_Enable+0x6c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a1a      	ldr	r2, [r3, #32]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <phU_Enable+0x6c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC1NE;   //enable
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <phU_Enable+0x6c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a1a      	ldr	r2, [r3, #32]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <phU_Enable+0x6c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f042 0204 	orr.w	r2, r2, #4
 80005fe:	621a      	str	r2, [r3, #32]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000a44 	.word	0x20000a44
 8000610:	20000578 	.word	0x20000578

08000614 <phV_Break>:

void phV_Break(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <phV_Break+0x6c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <phV_Break+0x70>)
 8000620:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <phV_Break+0x70>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800062a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <phV_Break+0x70>)
 8000630:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <phV_Break+0x70>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <phV_Break+0x70>)
 800063c:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE<<8;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <phV_Break+0x70>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <phV_Break+0x70>)
 8000648:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <phV_Break+0x6c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <phV_Break+0x70>)
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <phV_Break+0x6c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <phV_Break+0x6c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f022 0210 	bic.w	r2, r2, #16
 8000662:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <phV_Break+0x6c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <phV_Break+0x6c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000672:	621a      	str	r2, [r3, #32]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000a44 	.word	0x20000a44
 8000684:	20000578 	.word	0x20000578

08000688 <phV_Enable>:

void phV_Enable(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <phV_Enable+0x6c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <phV_Enable+0x70>)
 8000694:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <phV_Enable+0x70>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800069e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <phV_Enable+0x70>)
 80006a4:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <phV_Enable+0x70>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <phV_Enable+0x70>)
 80006b0:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1<<8;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <phV_Enable+0x70>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <phV_Enable+0x70>)
 80006bc:	6013      	str	r3, [r2, #0]
htim1.Instance->CCMR1 = tmpccmrx;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <phV_Enable+0x6c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <phV_Enable+0x70>)
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	619a      	str	r2, [r3, #24]
htim1.Instance->CCER |= TIM_CCER_CC2E;   //enable
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <phV_Enable+0x6c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6a1a      	ldr	r2, [r3, #32]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <phV_Enable+0x6c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0210 	orr.w	r2, r2, #16
 80006d6:	621a      	str	r2, [r3, #32]
htim1.Instance->CCER |= TIM_CCER_CC2NE;   //enable
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <phV_Enable+0x6c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a1a      	ldr	r2, [r3, #32]
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <phV_Enable+0x6c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e6:	621a      	str	r2, [r3, #32]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000a44 	.word	0x20000a44
 80006f8:	20000578 	.word	0x20000578

080006fc <phW_Break>:

void phW_Break(){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	   tmpccmrx = htim1.Instance->CCMR2;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <phW_Break+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <phW_Break+0x70>)
 8000708:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_OC3M;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <phW_Break+0x70>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <phW_Break+0x70>)
 8000718:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_CC3S;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <phW_Break+0x70>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 0303 	bic.w	r3, r3, #3
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <phW_Break+0x70>)
 8000724:	6013      	str	r3, [r2, #0]
	   tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <phW_Break+0x70>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <phW_Break+0x70>)
 8000730:	6013      	str	r3, [r2, #0]
	   htim1.Instance->CCMR2 = tmpccmrx;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <phW_Break+0x6c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <phW_Break+0x70>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	61da      	str	r2, [r3, #28]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <phW_Break+0x6c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a1a      	ldr	r2, [r3, #32]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <phW_Break+0x6c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800074a:	621a      	str	r2, [r3, #32]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <phW_Break+0x6c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a1a      	ldr	r2, [r3, #32]
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <phW_Break+0x6c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800075a:	621a      	str	r2, [r3, #32]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000a44 	.word	0x20000a44
 800076c:	20000578 	.word	0x20000578

08000770 <phW_Enable>:

void phW_Enable(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  	tmpccmrx = htim1.Instance->CCMR2;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <phW_Enable+0x6c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <phW_Enable+0x70>)
 800077c:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <phW_Enable+0x70>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <phW_Enable+0x70>)
 800078c:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <phW_Enable+0x70>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <phW_Enable+0x70>)
 8000798:	6013      	str	r3, [r2, #0]
    tmpccmrx |= TIM_OCMODE_PWM1;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <phW_Enable+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <phW_Enable+0x70>)
 80007a4:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCMR2 = tmpccmrx;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <phW_Enable+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <phW_Enable+0x70>)
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	61da      	str	r2, [r3, #28]
    htim1.Instance->CCER |= TIM_CCER_CC3E;   //enable
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <phW_Enable+0x6c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <phW_Enable+0x6c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007be:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER |= TIM_CCER_CC3NE;   //enable
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <phW_Enable+0x6c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6a1a      	ldr	r2, [r3, #32]
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <phW_Enable+0x6c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007ce:	621a      	str	r2, [r3, #32]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000a44 	.word	0x20000a44
 80007e0:	20000578 	.word	0x20000578

080007e4 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7f1b      	ldrb	r3, [r3, #28]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d133      	bne.n	800085c <HAL_TIM_IC_CaptureCallback+0x78>
		ICVals[0]=HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	481b      	ldr	r0, [pc, #108]	; (8000864 <HAL_TIM_IC_CaptureCallback+0x80>)
 80007f8:	f006 fdc8 	bl	800738c <HAL_TIM_ReadCapturedValue>
 80007fc:	4602      	mov	r2, r0
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000800:	601a      	str	r2, [r3, #0]
		if(ICVals[0]!=0){
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d012      	beq.n	8000830 <HAL_TIM_IC_CaptureCallback+0x4c>
			ICVals[1]=HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800080a:	2104      	movs	r1, #4
 800080c:	4815      	ldr	r0, [pc, #84]	; (8000864 <HAL_TIM_IC_CaptureCallback+0x80>)
 800080e:	f006 fdbd 	bl	800738c <HAL_TIM_ReadCapturedValue>
 8000812:	4602      	mov	r2, r0
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000816:	605a      	str	r2, [r3, #4]
			a=100*ICVals[1]/3000;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_TIM_IC_CaptureCallback+0x84>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	fb02 f303 	mul.w	r3, r2, r3
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	099b      	lsrs	r3, r3, #6
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800082e:	801a      	strh	r2, [r3, #0]
		}
	if(a<55){
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	2b36      	cmp	r3, #54	; 0x36
 8000836:	d802      	bhi.n	800083e <HAL_TIM_IC_CaptureCallback+0x5a>
		BLDCVars.BLDCduty=0;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
	}
	if(a>54){
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b36      	cmp	r3, #54	; 0x36
 8000844:	d90a      	bls.n	800085c <HAL_TIM_IC_CaptureCallback+0x78>
		BLDCVars.BLDCduty=10*(a-54);
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	461a      	mov	r2, r3
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_TIM_IC_CaptureCallback+0x90>)
 800085a:	605a      	str	r2, [r3, #4]
	}
	}

}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000884 	.word	0x20000884
 8000868:	2000003c 	.word	0x2000003c
 800086c:	057619f1 	.word	0x057619f1
 8000870:	2000002c 	.word	0x2000002c
 8000874:	20000528 	.word	0x20000528

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f001 fcc4 	bl	8002208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f8b8 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 fe70 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000888:	f000 fe14 	bl	80014b4 <MX_DMA_Init>
  MX_ADC1_Init();
 800088c:	f000 f91c 	bl	8000ac8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000890:	f000 f9aa 	bl	8000be8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000894:	f000 fa26 	bl	8000ce4 <MX_ADC3_Init>
  MX_COMP1_Init();
 8000898:	f000 fa96 	bl	8000dc8 <MX_COMP1_Init>
  MX_COMP2_Init();
 800089c:	f000 fac4 	bl	8000e28 <MX_COMP2_Init>
  MX_COMP4_Init();
 80008a0:	f000 faf2 	bl	8000e88 <MX_COMP4_Init>
  MX_COMP7_Init();
 80008a4:	f000 fb20 	bl	8000ee8 <MX_COMP7_Init>
  MX_I2C1_Init();
 80008a8:	f000 fb4e 	bl	8000f48 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 80008ac:	f000 fb8a 	bl	8000fc4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80008b0:	f000 fbae 	bl	8001010 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80008b4:	f000 fbd2 	bl	800105c <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80008b8:	f000 fbf6 	bl	80010a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008bc:	f000 fcae 	bl	800121c <MX_TIM3_Init>
  MX_TIM4_Init();
 80008c0:	f000 fd32 	bl	8001328 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80008c4:	f000 fdc6 	bl	8001454 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008c8:	2100      	movs	r1, #0
 80008ca:	483a      	ldr	r0, [pc, #232]	; (80009b4 <main+0x13c>)
 80008cc:	f006 f9be 	bl	8006c4c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80008d0:	2104      	movs	r1, #4
 80008d2:	4838      	ldr	r0, [pc, #224]	; (80009b4 <main+0x13c>)
 80008d4:	f006 f9ba 	bl	8006c4c <HAL_TIM_IC_Start_IT>
  //Place to mess about with PWM in


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80008d8:	2100      	movs	r1, #0
 80008da:	4837      	ldr	r0, [pc, #220]	; (80009b8 <main+0x140>)
 80008dc:	f002 fb1c 	bl	8002f18 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80008e0:	2100      	movs	r1, #0
 80008e2:	4836      	ldr	r0, [pc, #216]	; (80009bc <main+0x144>)
 80008e4:	f002 fb18 	bl	8002f18 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80008e8:	2100      	movs	r1, #0
 80008ea:	4835      	ldr	r0, [pc, #212]	; (80009c0 <main+0x148>)
 80008ec:	f002 fb14 	bl	8002f18 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(50);
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f001 fcbf 	bl	8002274 <HAL_Delay>
  HAL_OPAMP_Init(&hopamp1);
*/



  HAL_Delay(50);
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f001 fcbc 	bl	8002274 <HAL_Delay>
HAL_OPAMP_Start(&hopamp1);
 80008fc:	4831      	ldr	r0, [pc, #196]	; (80009c4 <main+0x14c>)
 80008fe:	f004 f803 	bl	8004908 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp2);
 8000902:	4831      	ldr	r0, [pc, #196]	; (80009c8 <main+0x150>)
 8000904:	f004 f800 	bl	8004908 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8000908:	4830      	ldr	r0, [pc, #192]	; (80009cc <main+0x154>)
 800090a:	f003 fffd 	bl	8004908 <HAL_OPAMP_Start>

BLDCInit();
 800090e:	f7ff fc5f 	bl	80001d0 <BLDCInit>

HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	482e      	ldr	r0, [pc, #184]	; (80009d0 <main+0x158>)
 8000916:	f006 f90b 	bl	8006b30 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800091a:	2100      	movs	r1, #0
 800091c:	482c      	ldr	r0, [pc, #176]	; (80009d0 <main+0x158>)
 800091e:	f007 fb47 	bl	8007fb0 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000922:	2104      	movs	r1, #4
 8000924:	482a      	ldr	r0, [pc, #168]	; (80009d0 <main+0x158>)
 8000926:	f006 f903 	bl	8006b30 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800092a:	2104      	movs	r1, #4
 800092c:	4828      	ldr	r0, [pc, #160]	; (80009d0 <main+0x158>)
 800092e:	f007 fb3f 	bl	8007fb0 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000932:	2108      	movs	r1, #8
 8000934:	4826      	ldr	r0, [pc, #152]	; (80009d0 <main+0x158>)
 8000936:	f006 f8fb 	bl	8006b30 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800093a:	2108      	movs	r1, #8
 800093c:	4824      	ldr	r0, [pc, #144]	; (80009d0 <main+0x158>)
 800093e:	f007 fb37 	bl	8007fb0 <HAL_TIMEx_PWMN_Start>

HAL_COMP_Start(&hcomp1);
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <main+0x15c>)
 8000944:	f003 f8fc 	bl	8003b40 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp2);
 8000948:	4823      	ldr	r0, [pc, #140]	; (80009d8 <main+0x160>)
 800094a:	f003 f8f9 	bl	8003b40 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp4);
 800094e:	4823      	ldr	r0, [pc, #140]	; (80009dc <main+0x164>)
 8000950:	f003 f8f6 	bl	8003b40 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp7);
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <main+0x168>)
 8000956:	f003 f8f3 	bl	8003b40 <HAL_COMP_Start>
HAL_Delay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095e:	f001 fc89 	bl	8002274 <HAL_Delay>
__HAL_TIM_MOE_ENABLE(&htim1); // initialising the comparators triggers the break state
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <main+0x158>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <main+0x158>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000970:	645a      	str	r2, [r3, #68]	; 0x44

BLDCVars.BLDCduty=70;
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <main+0x16c>)
 8000974:	2246      	movs	r2, #70	; 0x46
 8000976:	605a      	str	r2, [r3, #4]

HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&measurement_buffers.RawADC[0][0], 3);
 8000978:	2203      	movs	r2, #3
 800097a:	491b      	ldr	r1, [pc, #108]	; (80009e8 <main+0x170>)
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <main+0x140>)
 800097e:	f001 fea3 	bl	80026c8 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&measurement_buffers.RawADC[1][0], 3);
 8000982:	2203      	movs	r2, #3
 8000984:	4919      	ldr	r1, [pc, #100]	; (80009ec <main+0x174>)
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <main+0x144>)
 8000988:	f001 fe9e 	bl	80026c8 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&measurement_buffers.RawADC[2][0], 1);
 800098c:	2201      	movs	r2, #1
 800098e:	4918      	ldr	r1, [pc, #96]	; (80009f0 <main+0x178>)
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <main+0x148>)
 8000992:	f001 fe99 	bl	80026c8 <HAL_ADC_Start_DMA>

	//Add a little area in which I can mess about without the RTOS
while(1){
	//BLDCCommuteHall(); //This has been moved to the DMA1 channel one IRQ, which triggers after every ADC measurement, on every PWM pulse.
if(	BLDCVars.BLDCduty<700){
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <main+0x16c>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800099e:	dafa      	bge.n	8000996 <main+0x11e>
	BLDCVars.BLDCduty= 	BLDCVars.BLDCduty+10;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <main+0x16c>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	330a      	adds	r3, #10
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <main+0x16c>)
 80009a8:	6053      	str	r3, [r2, #4]
	HAL_Delay(100);
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f001 fc62 	bl	8002274 <HAL_Delay>
if(	BLDCVars.BLDCduty<700){
 80009b0:	e7f1      	b.n	8000996 <main+0x11e>
 80009b2:	bf00      	nop
 80009b4:	20000884 	.word	0x20000884
 80009b8:	20000928 	.word	0x20000928
 80009bc:	200006b8 	.word	0x200006b8
 80009c0:	20000978 	.word	0x20000978
 80009c4:	200008c4 	.word	0x200008c4
 80009c8:	20000580 	.word	0x20000580
 80009cc:	20000820 	.word	0x20000820
 80009d0:	20000a44 	.word	0x20000a44
 80009d4:	20000854 	.word	0x20000854
 80009d8:	20000acc 	.word	0x20000acc
 80009dc:	200008f8 	.word	0x200008f8
 80009e0:	200009c8 	.word	0x200009c8
 80009e4:	20000528 	.word	0x20000528
 80009e8:	200004d4 	.word	0x200004d4
 80009ec:	200004e0 	.word	0x200004e0
 80009f0:	200004ec 	.word	0x200004ec

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09e      	sub	sp, #120	; 0x78
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009fe:	2228      	movs	r2, #40	; 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00a fb0e 	bl	800b024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	223c      	movs	r2, #60	; 0x3c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f00a fb00 	bl	800b024 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a24:	2303      	movs	r3, #3
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a32:	2301      	movs	r3, #1
 8000a34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a36:	2310      	movs	r3, #16
 8000a38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a48:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fccc 	bl	80053ec <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 fdc7 	bl	80015ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fbbe 	bl	80061fc <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a86:	f000 fdb1 	bl	80015ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a8c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 fe0d 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ab8:	f000 fd98 	bl	80015ec <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3778      	adds	r7, #120	; 0x78
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	000211a4 	.word	0x000211a4

08000ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000aec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000af0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000af2:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000af8:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000afe:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0a:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000b1a:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b1c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b22:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b48:	4826      	ldr	r0, [pc, #152]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b4a:	f001 fbdd 	bl	8002308 <HAL_ADC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b54:	f000 fd4a 	bl	80015ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4820      	ldr	r0, [pc, #128]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b64:	f002 fd56 	bl	8003614 <HAL_ADCEx_MultiModeConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b6e:	f000 fd3d 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b72:	2303      	movs	r3, #3
 8000b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000b90:	f002 fa54 	bl	800303c <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000b9a:	f000 fd27 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000bac:	f002 fa46 	bl	800303c <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000bb6:	f000 fd19 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_ADC1_Init+0x11c>)
 8000bcc:	f002 fa36 	bl	800303c <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000bd6:	f000 fd09 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000928 	.word	0x20000928

08000be8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c00:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <MX_ADC2_Init+0xf8>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c10:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c2e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c5c:	f001 fb54 	bl	8002308 <HAL_ADC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000c66:	f000 fcc1 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000c76:	2305      	movs	r3, #5
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4619      	mov	r1, r3
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000c88:	f002 f9d8 	bl	800303c <HAL_ADC_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000c92:	f000 fcab 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000ca8:	f002 f9c8 	bl	800303c <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000cb2:	f000 fc9b 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_ADC2_Init+0xf4>)
 8000cc4:	f002 f9ba 	bl	800303c <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8000cce:	f000 fc8d 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200006b8 	.word	0x200006b8
 8000ce0:	50000100 	.word	0x50000100

08000ce4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <MX_ADC3_Init+0xe0>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d36:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d64:	f001 fad0 	bl	8002308 <HAL_ADC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000d6e:	f000 fc3d 	bl	80015ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000d7e:	f002 fc49 	bl	8003614 <HAL_ADCEx_MultiModeConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000d88:	f000 fc30 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_ADC3_Init+0xdc>)
 8000daa:	f002 f947 	bl	800303c <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000db4:	f000 fc1a 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000978 	.word	0x20000978
 8000dc4:	50000400 	.word	0x50000400

08000dc8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <MX_COMP1_Init+0x5c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000de0:	f640 027f 	movw	r2, #2175	; 0x87f
 8000de4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_COMP1_Init+0x58>)
 8000e0c:	f002 fe18 	bl	8003a40 <HAL_COMP_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 8000e16:	f000 fbe9 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000854 	.word	0x20000854
 8000e24:	4001001c 	.word	0x4001001c

08000e28 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_COMP2_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e40:	f640 027f 	movw	r2, #2175	; 0x87f
 8000e44:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_COMP2_Init+0x58>)
 8000e6c:	f002 fde8 	bl	8003a40 <HAL_COMP_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 fbb9 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000acc 	.word	0x20000acc
 8000e84:	40010020 	.word	0x40010020

08000e88 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <MX_COMP4_Init+0x5c>)
 8000e90:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000ea0:	f640 027f 	movw	r2, #2175	; 0x87f
 8000ea4:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_COMP4_Init+0x58>)
 8000ecc:	f002 fdb8 	bl	8003a40 <HAL_COMP_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 fb89 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200008f8 	.word	0x200008f8
 8000ee4:	40010028 	.word	0x40010028

08000ee8 <MX_COMP7_Init>:
  * @brief COMP7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP7_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP7_Init 0 */

  /* USER CODE BEGIN COMP7_Init 1 */

  /* USER CODE END COMP7_Init 1 */
  hcomp7.Instance = COMP7;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_COMP7_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hcomp7.Init.InvertingInput = COMP_INVERTINGINPUT_3_4VREFINT;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	605a      	str	r2, [r3, #4]
  hcomp7.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hcomp7.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f00:	f640 027f 	movw	r2, #2175	; 0x87f
 8000f04:	60da      	str	r2, [r3, #12]
  hcomp7.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hcomp7.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hcomp7.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hcomp7.Init.Mode = COMP_MODE_HIGHSPEED;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hcomp7.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hcomp7.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp7) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_COMP7_Init+0x58>)
 8000f2c:	f002 fd88 	bl	8003a40 <HAL_COMP_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_COMP7_Init+0x52>
  {
    Error_Handler();
 8000f36:	f000 fb59 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP7_Init 2 */

  /* USER CODE END COMP7_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200009c8 	.word	0x200009c8
 8000f44:	40010034 	.word	0x40010034

08000f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_I2C1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f54:	f240 220b 	movw	r2, #523	; 0x20b
 8000f58:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f86:	f003 faf3 	bl	8004570 <HAL_I2C_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f000 fb2c 	bl	80015ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f98:	f003 fb79 	bl	800468e <HAL_I2CEx_ConfigAnalogFilter>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fa2:	f000 fb23 	bl	80015ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000faa:	f003 fbbb 	bl	8004724 <HAL_I2CEx_ConfigDigitalFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 fb1a 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000074c 	.word	0x2000074c
 8000fc0:	40005400 	.word	0x40005400

08000fc4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <MX_OPAMP1_Init+0x48>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000fe8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000fec:	621a      	str	r2, [r3, #32]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_OPAMP1_Init+0x44>)
 8000ff6:	f003 fbe1 	bl	80047bc <HAL_OPAMP_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 8001000:	f000 faf4 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200008c4 	.word	0x200008c4
 800100c:	40010038 	.word	0x40010038

08001010 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_OPAMP2_Init+0x44>)
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <MX_OPAMP2_Init+0x48>)
 8001018:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_OPAMP2_Init+0x44>)
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_OPAMP2_Init+0x44>)
 8001022:	220c      	movs	r2, #12
 8001024:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_OPAMP2_Init+0x44>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_OPAMP2_Init+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_OPAMP2_Init+0x44>)
 8001034:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001038:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_OPAMP2_Init+0x44>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_OPAMP2_Init+0x44>)
 8001042:	f003 fbbb 	bl	80047bc <HAL_OPAMP_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 800104c:	f000 face 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000580 	.word	0x20000580
 8001058:	4001003c 	.word	0x4001003c

0800105c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <MX_OPAMP3_Init+0x48>)
 8001064:	601a      	str	r2, [r3, #0]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 800106e:	220c      	movs	r2, #12
 8001070:	60da      	str	r2, [r3, #12]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 8001080:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001084:	621a      	str	r2, [r3, #32]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_OPAMP3_Init+0x44>)
 800108e:	f003 fb95 	bl	80047bc <HAL_OPAMP_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_OPAMP3_Init+0x40>
  {
    Error_Handler();
 8001098:	f000 faa8 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000820 	.word	0x20000820
 80010a4:	40010040 	.word	0x40010040

080010a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	222c      	movs	r2, #44	; 0x2c
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 ffa5 	bl	800b024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010da:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <MX_TIM1_Init+0x16c>)
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <MX_TIM1_Init+0x170>)
 80010de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010e0:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <MX_TIM1_Init+0x16c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <MX_TIM1_Init+0x16c>)
 80010e8:	2220      	movs	r2, #32
 80010ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80010ec:	4b49      	ldr	r3, [pc, #292]	; (8001214 <MX_TIM1_Init+0x16c>)
 80010ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80010f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b47      	ldr	r3, [pc, #284]	; (8001214 <MX_TIM1_Init+0x16c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <MX_TIM1_Init+0x16c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b44      	ldr	r3, [pc, #272]	; (8001214 <MX_TIM1_Init+0x16c>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001106:	4843      	ldr	r0, [pc, #268]	; (8001214 <MX_TIM1_Init+0x16c>)
 8001108:	f005 fce6 	bl	8006ad8 <HAL_TIM_PWM_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001112:	f000 fa6b 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001116:	2370      	movs	r3, #112	; 0x70
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001122:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001126:	4619      	mov	r1, r3
 8001128:	483a      	ldr	r0, [pc, #232]	; (8001214 <MX_TIM1_Init+0x16c>)
 800112a:	f006 ff71 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001134:	f000 fa5a 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001138:	2360      	movs	r3, #96	; 0x60
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 512;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	482d      	ldr	r0, [pc, #180]	; (8001214 <MX_TIM1_Init+0x16c>)
 8001160:	f005 ff9e 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800116a:	f000 fa3f 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800116e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001172:	2204      	movs	r2, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4827      	ldr	r0, [pc, #156]	; (8001214 <MX_TIM1_Init+0x16c>)
 8001178:	f005 ff92 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001182:	f000 fa33 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118a:	2208      	movs	r2, #8
 800118c:	4619      	mov	r1, r3
 800118e:	4821      	ldr	r0, [pc, #132]	; (8001214 <MX_TIM1_Init+0x16c>)
 8001190:	f005 ff86 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800119a:	f000 fa27 	bl	80015ec <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 800119e:	2305      	movs	r3, #5
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a6:	220c      	movs	r2, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	481a      	ldr	r0, [pc, #104]	; (8001214 <MX_TIM1_Init+0x16c>)
 80011ac:	f005 ff78 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80011b6:	f000 fa19 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 80011ca:	231e      	movs	r3, #30
 80011cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80011dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 6;
 80011e8:	2306      	movs	r3, #6
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM1_Init+0x16c>)
 80011f6:	f006 ff8b 	bl	8008110 <HAL_TIMEx_ConfigBreakDeadTime>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001200:	f000 f9f4 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM1_Init+0x16c>)
 8001206:	f000 fda9 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3758      	adds	r7, #88	; 0x58
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000a44 	.word	0x20000a44
 8001218:	40012c00 	.word	0x40012c00

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <MX_TIM3_Init+0x104>)
 800124c:	4a35      	ldr	r2, [pc, #212]	; (8001324 <MX_TIM3_Init+0x108>)
 800124e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001250:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_TIM3_Init+0x104>)
 8001252:	2247      	movs	r2, #71	; 0x47
 8001254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <MX_TIM3_Init+0x104>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_TIM3_Init+0x104>)
 800125e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <MX_TIM3_Init+0x104>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_TIM3_Init+0x104>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001270:	482b      	ldr	r0, [pc, #172]	; (8001320 <MX_TIM3_Init+0x104>)
 8001272:	f005 fbdb 	bl	8006a2c <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800127c:	f000 f9b6 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001280:	4827      	ldr	r0, [pc, #156]	; (8001320 <MX_TIM3_Init+0x104>)
 8001282:	f005 fcad 	bl	8006be0 <HAL_TIM_IC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800128c:	f000 f9ae 	bl	80015ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001290:	2304      	movs	r3, #4
 8001292:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001294:	2350      	movs	r3, #80	; 0x50
 8001296:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <MX_TIM3_Init+0x104>)
 80012a8:	f006 f82e 	bl	8007308 <HAL_TIM_SlaveConfigSynchro>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012b2:	f000 f99b 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	4816      	ldr	r0, [pc, #88]	; (8001320 <MX_TIM3_Init+0x104>)
 80012c6:	f006 fea3 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80012d0:	f000 f98c 	bl	80015ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_TIM3_Init+0x104>)
 80012ec:	f005 fe3b 	bl	8006f66 <HAL_TIM_IC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80012f6:	f000 f979 	bl	80015ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012fa:	2302      	movs	r3, #2
 80012fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012fe:	2302      	movs	r3, #2
 8001300:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	2204      	movs	r2, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_TIM3_Init+0x104>)
 800130a:	f005 fe2c 	bl	8006f66 <HAL_TIM_IC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001314:	f000 f96a 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	; 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000884 	.word	0x20000884
 8001324:	40000400 	.word	0x40000400

08001328 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <MX_TIM4_Init+0x124>)
 8001358:	4a3d      	ldr	r2, [pc, #244]	; (8001450 <MX_TIM4_Init+0x128>)
 800135a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 109;
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <MX_TIM4_Init+0x124>)
 800135e:	226d      	movs	r2, #109	; 0x6d
 8001360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_TIM4_Init+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_TIM4_Init+0x124>)
 800136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <MX_TIM4_Init+0x124>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <MX_TIM4_Init+0x124>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800137c:	4833      	ldr	r0, [pc, #204]	; (800144c <MX_TIM4_Init+0x124>)
 800137e:	f005 fb55 	bl	8006a2c <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001388:	f000 f930 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800138c:	482f      	ldr	r0, [pc, #188]	; (800144c <MX_TIM4_Init+0x124>)
 800138e:	f005 fc27 	bl	8006be0 <HAL_TIM_IC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001398:	f000 f928 	bl	80015ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800139c:	2304      	movs	r3, #4
 800139e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4826      	ldr	r0, [pc, #152]	; (800144c <MX_TIM4_Init+0x124>)
 80013b4:	f005 ffa8 	bl	8007308 <HAL_TIM_SlaveConfigSynchro>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013be:	f000 f915 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MX_TIM4_Init+0x124>)
 80013d2:	f006 fe1d 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80013dc:	f000 f906 	bl	80015ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_TIM4_Init+0x124>)
 80013f8:	f005 fdb5 	bl	8006f66 <HAL_TIM_IC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001402:	f000 f8f3 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2204      	movs	r2, #4
 800140a:	4619      	mov	r1, r3
 800140c:	480f      	ldr	r0, [pc, #60]	; (800144c <MX_TIM4_Init+0x124>)
 800140e:	f005 fdaa 	bl	8006f66 <HAL_TIM_IC_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001418:	f000 f8e8 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	2208      	movs	r2, #8
 8001420:	4619      	mov	r1, r3
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <MX_TIM4_Init+0x124>)
 8001424:	f005 fd9f 	bl	8006f66 <HAL_TIM_IC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 800142e:	f000 f8dd 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim4, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_TIM4_Init+0x124>)
 8001436:	f005 ff4b 	bl	80072d0 <HAL_TIM_ConfigTI1Input>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001440:	f000 f8d4 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200005b4 	.word	0x200005b4
 8001450:	40000800 	.word	0x40000800

08001454 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <MX_USART3_UART_Init+0x5c>)
 800145c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001498:	f006 fefb 	bl	8008292 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014a2:	f000 f8a3 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000638 	.word	0x20000638
 80014b0:	40004800 	.word	0x40004800

080014b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <MX_DMA_Init+0xb0>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <MX_DMA_Init+0xb0>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6153      	str	r3, [r2, #20]
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <MX_DMA_Init+0xb0>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <MX_DMA_Init+0xb0>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <MX_DMA_Init+0xb0>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6153      	str	r3, [r2, #20]
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_DMA_Init+0xb0>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	200b      	movs	r0, #11
 80014f0:	f002 fcce 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f4:	200b      	movs	r0, #11
 80014f6:	f002 fce7 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200c      	movs	r0, #12
 8001500:	f002 fcc6 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001504:	200c      	movs	r0, #12
 8001506:	f002 fcdf 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200d      	movs	r0, #13
 8001510:	f002 fcbe 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001514:	200d      	movs	r0, #13
 8001516:	f002 fcd7 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2010      	movs	r0, #16
 8001520:	f002 fcb6 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001524:	2010      	movs	r0, #16
 8001526:	f002 fccf 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2011      	movs	r0, #17
 8001530:	f002 fcae 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001534:	2011      	movs	r0, #17
 8001536:	f002 fcc7 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2038      	movs	r0, #56	; 0x38
 8001540:	f002 fca6 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001544:	2038      	movs	r0, #56	; 0x38
 8001546:	f002 fcbf 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	203c      	movs	r0, #60	; 0x3c
 8001550:	f002 fc9e 	bl	8003e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001554:	203c      	movs	r0, #60	; 0x3c
 8001556:	f002 fcb7 	bl	8003ec8 <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_GPIO_Init+0x5c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <MX_GPIO_Init+0x5c>)
 8001574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_GPIO_Init+0x5c>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_GPIO_Init+0x5c>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <MX_GPIO_Init+0x5c>)
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_GPIO_Init+0x5c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_GPIO_Init+0x5c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <MX_GPIO_Init+0x5c>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6153      	str	r3, [r2, #20]
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_GPIO_Init+0x5c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015da:	f000 fe2b 	bl	8002234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40001400 	.word	0x40001400

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_MspInit+0x4c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_MspInit+0x4c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_MspInit+0x4c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_MspInit+0x4c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_MspInit+0x4c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f002 fc29 	bl	8003e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800166c:	d15f      	bne.n	800172e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_ADC_MspInit+0x228>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a7f      	ldr	r2, [pc, #508]	; (8001874 <HAL_ADC_MspInit+0x228>)
 8001676:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_ADC_MspInit+0x228>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10b      	bne.n	8001698 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001680:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a7c      	ldr	r2, [pc, #496]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	6153      	str	r3, [r2, #20]
 800168c:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4a76      	ldr	r2, [pc, #472]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6153      	str	r3, [r2, #20]
 80016a4:	4b74      	ldr	r3, [pc, #464]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016b0:	2309      	movs	r3, #9
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b4:	2303      	movs	r3, #3
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f002 fdc1 	bl	800424c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016ca:	4b6c      	ldr	r3, [pc, #432]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016cc:	4a6c      	ldr	r2, [pc, #432]	; (8001880 <HAL_ADC_MspInit+0x234>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016f2:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016f4:	2220      	movs	r2, #32
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016f8:	4b60      	ldr	r3, [pc, #384]	; (800187c <HAL_ADC_MspInit+0x230>)
 80016fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001700:	485e      	ldr	r0, [pc, #376]	; (800187c <HAL_ADC_MspInit+0x230>)
 8001702:	f002 fbef 	bl	8003ee4 <HAL_DMA_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800170c:	f7ff ff6e 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a5a      	ldr	r2, [pc, #360]	; (800187c <HAL_ADC_MspInit+0x230>)
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
 8001716:	4a59      	ldr	r2, [pc, #356]	; (800187c <HAL_ADC_MspInit+0x230>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2012      	movs	r0, #18
 8001722:	f002 fbb5 	bl	8003e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001726:	2012      	movs	r0, #18
 8001728:	f002 fbce 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800172c:	e09e      	b.n	800186c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a54      	ldr	r2, [pc, #336]	; (8001884 <HAL_ADC_MspInit+0x238>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d15f      	bne.n	80017f8 <HAL_ADC_MspInit+0x1ac>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001738:	4b4e      	ldr	r3, [pc, #312]	; (8001874 <HAL_ADC_MspInit+0x228>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_ADC_MspInit+0x228>)
 8001740:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001742:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_ADC_MspInit+0x228>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10b      	bne.n	8001762 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6153      	str	r3, [r2, #20]
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b45      	ldr	r3, [pc, #276]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a44      	ldr	r2, [pc, #272]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6153      	str	r3, [r2, #20]
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800177a:	2330      	movs	r3, #48	; 0x30
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f002 fd5c 	bl	800424c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001794:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <HAL_ADC_MspInit+0x240>)
 8001798:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017be:	2220      	movs	r2, #32
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017ca:	482f      	ldr	r0, [pc, #188]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017cc:	f002 fb8a 	bl	8003ee4 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 80017d6:	f7ff ff09 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	4a29      	ldr	r2, [pc, #164]	; (8001888 <HAL_ADC_MspInit+0x23c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2012      	movs	r0, #18
 80017ec:	f002 fb50 	bl	8003e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017f0:	2012      	movs	r0, #18
 80017f2:	f002 fb69 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
}
 80017f6:	e039      	b.n	800186c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_ADC_MspInit+0x244>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d134      	bne.n	800186c <HAL_ADC_MspInit+0x220>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800180c:	6153      	str	r3, [r2, #20]
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_ADC_MspInit+0x22c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA2_Channel5;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_ADC_MspInit+0x248>)
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_ADC_MspInit+0x24c>)
 800181e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_ADC_MspInit+0x248>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001838:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_ADC_MspInit+0x248>)
 800183c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001840:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001844:	2220      	movs	r2, #32
 8001846:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_ADC_MspInit+0x248>)
 800184a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001850:	4810      	ldr	r0, [pc, #64]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001852:	f002 fb47 	bl	8003ee4 <HAL_DMA_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 800185c:	f7ff fec6 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_ADC_MspInit+0x248>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000044 	.word	0x20000044
 8001878:	40021000 	.word	0x40021000
 800187c:	200009f8 	.word	0x200009f8
 8001880:	40020008 	.word	0x40020008
 8001884:	50000100 	.word	0x50000100
 8001888:	20000afc 	.word	0x20000afc
 800188c:	40020408 	.word	0x40020408
 8001890:	50000400 	.word	0x50000400
 8001894:	20000798 	.word	0x20000798
 8001898:	40020458 	.word	0x40020458

0800189c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_COMP_MspInit+0x114>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d119      	bne.n	80018f2 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f002 fcae 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80018f0:	e05a      	b.n	80019a8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <HAL_COMP_MspInit+0x11c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d119      	bne.n	8001930 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 8001902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001906:	6153      	str	r3, [r2, #20]
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f002 fc8f 	bl	800424c <HAL_GPIO_Init>
}
 800192e:	e03b      	b.n	80019a8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_COMP_MspInit+0x120>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d118      	bne.n	800196c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6153      	str	r3, [r2, #20]
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <HAL_COMP_MspInit+0x124>)
 8001966:	f002 fc71 	bl	800424c <HAL_GPIO_Init>
}
 800196a:	e01d      	b.n	80019a8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_COMP_MspInit+0x128>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d118      	bne.n	80019a8 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	6153      	str	r3, [r2, #20]
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_COMP_MspInit+0x118>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800198e:	2301      	movs	r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f002 fc52 	bl	800424c <HAL_GPIO_Init>
}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	4001001c 	.word	0x4001001c
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010020 	.word	0x40010020
 80019bc:	40010028 	.word	0x40010028
 80019c0:	48000400 	.word	0x48000400
 80019c4:	40010034 	.word	0x40010034

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_I2C_MspInit+0x154>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	f040 8093 	bne.w	8001b12 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f6:	6153      	str	r3, [r2, #20]
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	6153      	str	r3, [r2, #20]
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f002 fc06 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a46:	2312      	movs	r3, #18
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a52:	2304      	movs	r3, #4
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4831      	ldr	r0, [pc, #196]	; (8001b24 <HAL_I2C_MspInit+0x15c>)
 8001a5e:	f002 fbf5 	bl	800424c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a2e      	ldr	r2, [pc, #184]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 8001a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_I2C_MspInit+0x158>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_I2C_MspInit+0x164>)
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8c:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a92:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001aaa:	481f      	ldr	r0, [pc, #124]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001aac:	f002 fa1a 	bl	8003ee4 <HAL_DMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_MspInit+0xf2>
    {
      Error_Handler();
 8001ab6:	f7ff fd99 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_I2C_MspInit+0x160>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_I2C_MspInit+0x16c>)
 8001aca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001ace:	2210      	movs	r2, #16
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001af8:	f002 f9f4 	bl	8003ee4 <HAL_DMA_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001b02:	f7ff fd73 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b0c:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_I2C_MspInit+0x168>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	48000400 	.word	0x48000400
 8001b28:	20000a88 	.word	0x20000a88
 8001b2c:	40020080 	.word	0x40020080
 8001b30:	20000708 	.word	0x20000708
 8001b34:	4002006c 	.word	0x4002006c

08001b38 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <HAL_OPAMP_MspInit+0xd8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d119      	bne.n	8001b8e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b72:	2306      	movs	r3, #6
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	2303      	movs	r3, #3
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f002 fb60 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001b8c:	e03b      	b.n	8001c06 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <HAL_OPAMP_MspInit+0xe0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d119      	bne.n	8001bcc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba2:	6153      	str	r3, [r2, #20]
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb0:	23c0      	movs	r3, #192	; 0xc0
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f002 fb41 	bl	800424c <HAL_GPIO_Init>
}
 8001bca:	e01c      	b.n	8001c06 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_OPAMP_MspInit+0xe4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d117      	bne.n	8001c06 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6153      	str	r3, [r2, #20]
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <HAL_OPAMP_MspInit+0xe8>)
 8001c02:	f002 fb23 	bl	800424c <HAL_GPIO_Init>
}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40010038 	.word	0x40010038
 8001c14:	40021000 	.word	0x40021000
 8001c18:	4001003c 	.word	0x4001003c
 8001c1c:	40010040 	.word	0x40010040
 8001c20:	48000400 	.word	0x48000400

08001c24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_TIM_PWM_MspInit+0x38>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10b      	bne.n	8001c4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_TIM_Base_MspInit+0xe8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d130      	bne.n	8001ce8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca8:	6153      	str	r3, [r2, #20]
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4820      	ldr	r0, [pc, #128]	; (8001d54 <HAL_TIM_Base_MspInit+0xf0>)
 8001cd2:	f002 fabb 	bl	800424c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201d      	movs	r0, #29
 8001cdc:	f002 f8d8 	bl	8003e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ce0:	201d      	movs	r0, #29
 8001ce2:	f002 f8f1 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ce6:	e02d      	b.n	8001d44 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_TIM_Base_MspInit+0xf4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d128      	bne.n	8001d44 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_TIM_Base_MspInit+0xec>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001d22:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_TIM_Base_MspInit+0xf0>)
 8001d40:	f002 fa84 	bl	800424c <HAL_GPIO_Init>
}
 8001d44:	bf00      	nop
 8001d46:	3730      	adds	r7, #48	; 0x30
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40021000 	.word	0x40021000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	40000800 	.word	0x40000800

08001d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <HAL_TIM_MspPostInit+0xc4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d14b      	bne.n	8001e16 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_TIM_MspPostInit+0xc8>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <HAL_TIM_MspPostInit+0xc8>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6153      	str	r3, [r2, #20]
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_TIM_MspPostInit+0xc8>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_TIM_MspPostInit+0xc8>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <HAL_TIM_MspPostInit+0xc8>)
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	6153      	str	r3, [r2, #20]
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_TIM_MspPostInit+0xc8>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001dae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4817      	ldr	r0, [pc, #92]	; (8001e28 <HAL_TIM_MspPostInit+0xcc>)
 8001dcc:	f002 fa3e 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001de2:	2304      	movs	r3, #4
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	480e      	ldr	r0, [pc, #56]	; (8001e28 <HAL_TIM_MspPostInit+0xcc>)
 8001dee:	f002 fa2d 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001df2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e04:	2306      	movs	r3, #6
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f002 fa1b 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	48000400 	.word	0x48000400

08001e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_UART_MspInit+0x138>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f040 8086 	bne.w	8001f5c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e50:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <HAL_UART_MspInit+0x13c>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	4a44      	ldr	r2, [pc, #272]	; (8001f68 <HAL_UART_MspInit+0x13c>)
 8001e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5a:	61d3      	str	r3, [r2, #28]
 8001e5c:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <HAL_UART_MspInit+0x13c>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_UART_MspInit+0x13c>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	4a3e      	ldr	r2, [pc, #248]	; (8001f68 <HAL_UART_MspInit+0x13c>)
 8001e6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e72:	6153      	str	r3, [r2, #20]
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_UART_MspInit+0x13c>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e92:	2307      	movs	r3, #7
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4833      	ldr	r0, [pc, #204]	; (8001f6c <HAL_UART_MspInit+0x140>)
 8001e9e:	f002 f9d5 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	482b      	ldr	r0, [pc, #172]	; (8001f6c <HAL_UART_MspInit+0x140>)
 8001ec0:	f002 f9c4 	bl	800424c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <HAL_UART_MspInit+0x148>)
 8001ec8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ef4:	481e      	ldr	r0, [pc, #120]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001ef6:	f001 fff5 	bl	8003ee4 <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8001f00:	f7ff fb74 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001f08:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_UART_MspInit+0x144>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f12:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_UART_MspInit+0x150>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f18:	2210      	movs	r2, #16
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f42:	f001 ffcf 	bl	8003ee4 <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8001f4c:	f7ff fb4e 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f54:	669a      	str	r2, [r3, #104]	; 0x68
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_UART_MspInit+0x14c>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40004800 	.word	0x40004800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	200005f4 	.word	0x200005f4
 8001f74:	40020030 	.word	0x40020030
 8001f78:	200007dc 	.word	0x200007dc
 8001f7c:	4002001c 	.word	0x4002001c

08001f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	2037      	movs	r0, #55	; 0x37
 8001f96:	f001 ff7b 	bl	8003e90 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f9a:	2037      	movs	r0, #55	; 0x37
 8001f9c:	f001 ff94 	bl	8003ec8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_InitTick+0xa0>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_InitTick+0xa0>)
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_InitTick+0xa0>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fb8:	f107 0210 	add.w	r2, r7, #16
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fb50 	bl	8006668 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fc8:	f004 fb0a 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_InitTick+0xa4>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_InitTick+0xa8>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_InitTick+0xac>)
 8001fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_InitTick+0xa8>)
 8001fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fec:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_InitTick+0xa8>)
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_InitTick+0xa8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_InitTick+0xa8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002000:	4809      	ldr	r0, [pc, #36]	; (8002028 <HAL_InitTick+0xa8>)
 8002002:	f004 fd13 	bl	8006a2c <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <HAL_InitTick+0xa8>)
 800200e:	f004 fd39 	bl	8006a84 <HAL_TIM_Base_Start_IT>
 8002012:	4603      	mov	r3, r0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3730      	adds	r7, #48	; 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	431bde83 	.word	0x431bde83
 8002028:	20000b40 	.word	0x20000b40
 800202c:	40001400 	.word	0x40001400

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002068:	4810      	ldr	r0, [pc, #64]	; (80020ac <DMA1_Channel1_IRQHandler+0x48>)
 800206a:	f001 ffe1 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	BLDCCommuteHall();
 800206e:	f7fe f8e5 	bl	800023c <BLDCCommuteHall>
	extern float adcBuff1[3];
	adcBuff1[0]=(float)measurement_buffers.RawADC[0][0];
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <DMA1_Channel1_IRQHandler+0x4c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <DMA1_Channel1_IRQHandler+0x50>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
	adcBuff1[1]=(float)measurement_buffers.RawADC[0][1];
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <DMA1_Channel1_IRQHandler+0x4c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <DMA1_Channel1_IRQHandler+0x50>)
 8002092:	edc3 7a01 	vstr	s15, [r3, #4]
	adcBuff1[2]=(float)measurement_buffers.RawADC[0][2];
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <DMA1_Channel1_IRQHandler+0x4c>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <DMA1_Channel1_IRQHandler+0x50>)
 80020a4:	edc3 7a02 	vstr	s15, [r3, #8]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200009f8 	.word	0x200009f8
 80020b0:	200004d4 	.word	0x200004d4
 80020b4:	20000030 	.word	0x20000030

080020b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <DMA1_Channel2_IRQHandler+0x10>)
 80020be:	f001 ffb7 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200007dc 	.word	0x200007dc

080020cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <DMA1_Channel3_IRQHandler+0x10>)
 80020d2:	f001 ffad 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200005f4 	.word	0x200005f4

080020e0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA1_Channel6_IRQHandler+0x10>)
 80020e6:	f001 ffa3 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000708 	.word	0x20000708

080020f4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA1_Channel7_IRQHandler+0x10>)
 80020fa:	f001 ff99 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000a88 	.word	0x20000a88

08002108 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */


  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <ADC1_2_IRQHandler+0x14>)
 800210e:	f000 fbf7 	bl	8002900 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <ADC1_2_IRQHandler+0x18>)
 8002114:	f000 fbf4 	bl	8002900 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000928 	.word	0x20000928
 8002120:	200006b8 	.word	0x200006b8

08002124 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800212a:	f002 fc1e 	bl	800496a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000b84 	.word	0x20000b84

08002138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM3_IRQHandler+0x10>)
 800213e:	f004 fdf3 	bl	8006d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000884 	.word	0x20000884

0800214c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM7_IRQHandler+0x10>)
 8002152:	f004 fde9 	bl	8006d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000b40 	.word	0x20000b40

08002160 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <DMA2_Channel1_IRQHandler+0x10>)
 8002166:	f001 ff63 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000afc 	.word	0x20000afc

08002174 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <DMA2_Channel5_IRQHandler+0x10>)
 800217a:	f001 ff59 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000798 	.word	0x20000798

08002188 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <SystemInit+0x28>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <SystemInit+0x28>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SystemInit+0x28>)
 800219e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021a2:	609a      	str	r2, [r3, #8]
#endif
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021ba:	e003      	b.n	80021c4 <LoopCopyDataInit>

080021bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021c2:	3104      	adds	r1, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021c4:	480b      	ldr	r0, [pc, #44]	; (80021f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021cc:	d3f6      	bcc.n	80021bc <CopyDataInit>
	ldr	r2, =_sbss
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80021d0:	e002      	b.n	80021d8 <LoopFillZerobss>

080021d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021d4:	f842 3b04 	str.w	r3, [r2], #4

080021d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <LoopForever+0x16>)
	cmp	r2, r3
 80021da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021dc:	d3f9      	bcc.n	80021d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021de:	f7ff ffd3 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e2:	f008 fefb 	bl	800afdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021e6:	f7fe fb47 	bl	8000878 <main>

080021ea <LoopForever>:

LoopForever:
    b LoopForever
 80021ea:	e7fe      	b.n	80021ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021ec:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80021f0:	0800b08c 	.word	0x0800b08c
	ldr	r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021f8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80021fc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002200:	20000df0 	.word	0x20000df0

08002204 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC3_IRQHandler>
	...

08002208 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_Init+0x28>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_Init+0x28>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f001 fe2e 	bl	8003e7a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff feae 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002224:	f7ff f9ea 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000000c 	.word	0x2000000c
 8002258:	20000b80 	.word	0x20000b80

0800225c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000b80 	.word	0x20000b80

08002274 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff ffee 	bl	800225c <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_Delay+0x40>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffde 	bl	800225c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8f7      	bhi.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b09a      	sub	sp, #104	; 0x68
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e1c9      	b.n	80026bc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d176      	bne.n	8002428 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d152      	bne.n	80023e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff f975 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d13b      	bne.n	80023e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f001 fb05 	bl	8003980 <ADC_Disable>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d12f      	bne.n	80023e8 <HAL_ADC_Init+0xe0>
 8002388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12b      	bne.n	80023e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002398:	f023 0302 	bic.w	r3, r3, #2
 800239c:	f043 0202 	orr.w	r2, r3, #2
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023c4:	4b86      	ldr	r3, [pc, #536]	; (80025e0 <HAL_ADC_Init+0x2d8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a86      	ldr	r2, [pc, #536]	; (80025e4 <HAL_ADC_Init+0x2dc>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0c9a      	lsrs	r2, r3, #18
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023da:	e002      	b.n	80023e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002404:	d110      	bne.n	8002428 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f023 0312 	bic.w	r3, r3, #18
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8136 	bne.w	80026a2 <HAL_ADC_Init+0x39a>
 8002436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 8131 	bne.w	80026a2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 8129 	bne.w	80026a2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002458:	f043 0202 	orr.w	r2, r3, #2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002468:	d004      	beq.n	8002474 <HAL_ADC_Init+0x16c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <HAL_ADC_Init+0x2e0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_ADC_Init+0x170>
 8002474:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_ADC_Init+0x2e4>)
 8002476:	e000      	b.n	800247a <HAL_ADC_Init+0x172>
 8002478:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <HAL_ADC_Init+0x2e8>)
 800247a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002484:	d102      	bne.n	800248c <HAL_ADC_Init+0x184>
 8002486:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <HAL_ADC_Init+0x2e0>)
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e01a      	b.n	80024c2 <HAL_ADC_Init+0x1ba>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <HAL_ADC_Init+0x2e0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d103      	bne.n	800249e <HAL_ADC_Init+0x196>
 8002496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e011      	b.n	80024c2 <HAL_ADC_Init+0x1ba>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_ADC_Init+0x2ec>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d102      	bne.n	80024ae <HAL_ADC_Init+0x1a6>
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_ADC_Init+0x2f0>)
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e009      	b.n	80024c2 <HAL_ADC_Init+0x1ba>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_ADC_Init+0x2f0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d102      	bne.n	80024be <HAL_ADC_Init+0x1b6>
 80024b8:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <HAL_ADC_Init+0x2ec>)
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e001      	b.n	80024c2 <HAL_ADC_Init+0x1ba>
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_ADC_Init+0x1da>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0x1da>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_Init+0x1dc>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11c      	bne.n	8002522 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_ADC_Init+0x202>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_Init+0x202>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_ADC_Init+0x204>
 800250a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	431a      	orrs	r2, r3
 800251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002520:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7e5b      	ldrb	r3, [r3, #25]
 8002526:	035b      	lsls	r3, r3, #13
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800252c:	2a01      	cmp	r2, #1
 800252e:	d002      	beq.n	8002536 <HAL_ADC_Init+0x22e>
 8002530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002534:	e000      	b.n	8002538 <HAL_ADC_Init+0x230>
 8002536:	2200      	movs	r2, #0
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002548:	4313      	orrs	r3, r2
 800254a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11b      	bne.n	800258e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e5b      	ldrb	r3, [r3, #25]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	045a      	lsls	r2, r3, #17
 8002566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002568:	4313      	orrs	r3, r2
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	663b      	str	r3, [r7, #96]	; 0x60
 8002570:	e00d      	b.n	800258e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	2b01      	cmp	r3, #1
 8002594:	d03a      	beq.n	800260c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_ADC_Init+0x2ec>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_ADC_Init+0x2a2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_ADC_Init+0x2f0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d128      	bne.n	80025fc <HAL_ADC_Init+0x2f4>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80025b2:	d012      	beq.n	80025da <HAL_ADC_Init+0x2d2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025bc:	d00a      	beq.n	80025d4 <HAL_ADC_Init+0x2cc>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80025c6:	d002      	beq.n	80025ce <HAL_ADC_Init+0x2c6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	e018      	b.n	8002600 <HAL_ADC_Init+0x2f8>
 80025ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d2:	e015      	b.n	8002600 <HAL_ADC_Init+0x2f8>
 80025d4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80025d8:	e012      	b.n	8002600 <HAL_ADC_Init+0x2f8>
 80025da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80025de:	e00f      	b.n	8002600 <HAL_ADC_Init+0x2f8>
 80025e0:	20000004 	.word	0x20000004
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	50000100 	.word	0x50000100
 80025ec:	50000300 	.word	0x50000300
 80025f0:	50000700 	.word	0x50000700
 80025f4:	50000400 	.word	0x50000400
 80025f8:	50000500 	.word	0x50000500
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002604:	4313      	orrs	r3, r2
 8002606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002608:	4313      	orrs	r3, r2
 800260a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002628:	f023 0302 	bic.w	r3, r3, #2
 800262c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7e1b      	ldrb	r3, [r3, #24]
 8002632:	039a      	lsls	r2, r3, #14
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4313      	orrs	r3, r2
 800263e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002640:	4313      	orrs	r3, r2
 8002642:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_ADC_Init+0x3bc>)
 800264c:	4013      	ands	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002654:	430b      	orrs	r3, r1
 8002656:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10c      	bne.n	800267a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f023 010f 	bic.w	r1, r3, #15
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	1e5a      	subs	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
 8002678:	e007      	b.n	800268a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 020f 	bic.w	r2, r2, #15
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f023 0303 	bic.w	r3, r3, #3
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
 80026a0:	e00a      	b.n	80026b8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f023 0312 	bic.w	r3, r3, #18
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80026b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3768      	adds	r7, #104	; 0x68
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	fff0c007 	.word	0xfff0c007

080026c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80f7 	bne.w	80028d6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_Start_DMA+0x2e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0f2      	b.n	80028dc <HAL_ADC_Start_DMA+0x214>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Start_DMA+0x4a>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a75      	ldr	r2, [pc, #468]	; (80028e4 <HAL_ADC_Start_DMA+0x21c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d109      	bne.n	8002726 <HAL_ADC_Start_DMA+0x5e>
 8002712:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <HAL_ADC_Start_DMA+0x220>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e008      	b.n	8002738 <HAL_ADC_Start_DMA+0x70>
 8002726:	4b71      	ldr	r3, [pc, #452]	; (80028ec <HAL_ADC_Start_DMA+0x224>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80c5 	beq.w	80028c8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f001 f8c0 	bl	80038c4 <ADC_Enable>
 8002744:	4603      	mov	r3, r0
 8002746:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80b7 	bne.w	80028be <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276c:	d004      	beq.n	8002778 <HAL_ADC_Start_DMA+0xb0>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5c      	ldr	r2, [pc, #368]	; (80028e4 <HAL_ADC_Start_DMA+0x21c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d106      	bne.n	8002786 <HAL_ADC_Start_DMA+0xbe>
 8002778:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_ADC_Start_DMA+0x220>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_ADC_Start_DMA+0xde>
 8002784:	e005      	b.n	8002792 <HAL_ADC_Start_DMA+0xca>
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_ADC_Start_DMA+0x224>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_ADC_Start_DMA+0xde>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Start_DMA+0xde>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a53      	ldr	r2, [pc, #332]	; (80028f0 <HAL_ADC_Start_DMA+0x228>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d115      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d036      	beq.n	800282e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027d0:	e02d      	b.n	800282e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_Start_DMA+0x12a>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a3d      	ldr	r2, [pc, #244]	; (80028e4 <HAL_ADC_Start_DMA+0x21c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10a      	bne.n	8002808 <HAL_ADC_Start_DMA+0x140>
 80027f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e008      	b.n	800281a <HAL_ADC_Start_DMA+0x152>
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_ADC_Start_DMA+0x228>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002826:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d106      	bne.n	800284a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f023 0206 	bic.w	r2, r3, #6
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
 8002848:	e002      	b.n	8002850 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <HAL_ADC_Start_DMA+0x22c>)
 800285e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	4a24      	ldr	r2, [pc, #144]	; (80028f8 <HAL_ADC_Start_DMA+0x230>)
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	4a23      	ldr	r2, [pc, #140]	; (80028fc <HAL_ADC_Start_DMA+0x234>)
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	221c      	movs	r2, #28
 8002876:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0210 	orr.w	r2, r2, #16
 8002886:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3340      	adds	r3, #64	; 0x40
 80028a2:	4619      	mov	r1, r3
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f001 fb63 	bl	8003f72 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0204 	orr.w	r2, r2, #4
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	e00d      	b.n	80028da <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028c6:	e008      	b.n	80028da <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028d4:	e001      	b.n	80028da <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	50000100 	.word	0x50000100
 80028e8:	50000300 	.word	0x50000300
 80028ec:	50000700 	.word	0x50000700
 80028f0:	50000400 	.word	0x50000400
 80028f4:	080037f9 	.word	0x080037f9
 80028f8:	08003873 	.word	0x08003873
 80028fc:	0800388f 	.word	0x0800388f

08002900 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d106      	bne.n	8002930 <HAL_ADC_IRQHandler+0x30>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d00f      	beq.n	8002950 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800293a:	2b08      	cmp	r3, #8
 800293c:	f040 80c0 	bne.w	8002ac0 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b08      	cmp	r3, #8
 800294c:	f040 80b8 	bne.w	8002ac0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002970:	d004      	beq.n	800297c <HAL_ADC_IRQHandler+0x7c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a95      	ldr	r2, [pc, #596]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d106      	bne.n	800298a <HAL_ADC_IRQHandler+0x8a>
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_ADC_IRQHandler+0x2d0>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03e      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 8002988:	e005      	b.n	8002996 <HAL_ADC_IRQHandler+0x96>
 800298a:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_ADC_IRQHandler+0x2d4>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2b00      	cmp	r3, #0
 8002994:	d037      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299e:	d004      	beq.n	80029aa <HAL_ADC_IRQHandler+0xaa>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a89      	ldr	r2, [pc, #548]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d106      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xb8>
 80029aa:	4b89      	ldr	r3, [pc, #548]	; (8002bd0 <HAL_ADC_IRQHandler+0x2d0>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d027      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 80029b6:	e005      	b.n	80029c4 <HAL_ADC_IRQHandler+0xc4>
 80029b8:	4b86      	ldr	r3, [pc, #536]	; (8002bd4 <HAL_ADC_IRQHandler+0x2d4>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d020      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029cc:	d004      	beq.n	80029d8 <HAL_ADC_IRQHandler+0xd8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7e      	ldr	r2, [pc, #504]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_IRQHandler+0xe6>
 80029d8:	4b7d      	ldr	r3, [pc, #500]	; (8002bd0 <HAL_ADC_IRQHandler+0x2d0>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	d010      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 80029e4:	e005      	b.n	80029f2 <HAL_ADC_IRQHandler+0xf2>
 80029e6:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_ADC_IRQHandler+0x2d4>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2b09      	cmp	r3, #9
 80029f0:	d009      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fa:	d004      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x106>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_ADC_IRQHandler+0x2d8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d104      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	e00f      	b.n	8002a30 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a18:	d004      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x124>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6b      	ldr	r2, [pc, #428]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d102      	bne.n	8002a2a <HAL_ADC_IRQHandler+0x12a>
 8002a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a28:	e000      	b.n	8002a2c <HAL_ADC_IRQHandler+0x12c>
 8002a2a:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <HAL_ADC_IRQHandler+0x2d8>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d139      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d134      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d12d      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11a      	bne.n	8002a9a <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 020c 	bic.w	r2, r2, #12
 8002a72:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d112      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
 8002a98:	e00b      	b.n	8002ab2 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fc00 	bl	80022b8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	220c      	movs	r2, #12
 8002abe:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_IRQHandler+0x1dc>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d00f      	beq.n	8002afc <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	f040 813c 	bne.w	8002d64 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	f040 8134 	bne.w	8002d64 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b10:	d004      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x21c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d106      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x22a>
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_ADC_IRQHandler+0x2d0>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d03e      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b28:	e005      	b.n	8002b36 <HAL_ADC_IRQHandler+0x236>
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_ADC_IRQHandler+0x2d4>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d037      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x24a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d106      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x258>
 8002b4a:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_ADC_IRQHandler+0x2d0>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d027      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b56:	e005      	b.n	8002b64 <HAL_ADC_IRQHandler+0x264>
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_ADC_IRQHandler+0x2d4>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d020      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6c:	d004      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x278>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_IRQHandler+0x286>
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_ADC_IRQHandler+0x2d0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	d010      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b84:	e005      	b.n	8002b92 <HAL_ADC_IRQHandler+0x292>
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_ADC_IRQHandler+0x2d4>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d009      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9a:	d004      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x2a6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_ADC_IRQHandler+0x2d8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d104      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e018      	b.n	8002be2 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_IRQHandler+0x2c4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <HAL_ADC_IRQHandler+0x2cc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x2dc>
 8002bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bc8:	e009      	b.n	8002bde <HAL_ADC_IRQHandler+0x2de>
 8002bca:	bf00      	nop
 8002bcc:	50000100 	.word	0x50000100
 8002bd0:	50000300 	.word	0x50000300
 8002bd4:	50000700 	.word	0x50000700
 8002bd8:	50000400 	.word	0x50000400
 8002bdc:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <HAL_ADC_IRQHandler+0x554>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80ad 	bne.w	8002d56 <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80a5 	bne.w	8002d56 <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 809f 	bne.w	8002d56 <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b40      	cmp	r3, #64	; 0x40
 8002c24:	f040 8097 	bne.w	8002d56 <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x33c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a88      	ldr	r2, [pc, #544]	; (8002e58 <HAL_ADC_IRQHandler+0x558>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_IRQHandler+0x34a>
 8002c3c:	4b87      	ldr	r3, [pc, #540]	; (8002e5c <HAL_ADC_IRQHandler+0x55c>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03e      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002c48:	e005      	b.n	8002c56 <HAL_ADC_IRQHandler+0x356>
 8002c4a:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <HAL_ADC_IRQHandler+0x560>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d037      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5e:	d004      	beq.n	8002c6a <HAL_ADC_IRQHandler+0x36a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7c      	ldr	r2, [pc, #496]	; (8002e58 <HAL_ADC_IRQHandler+0x558>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d106      	bne.n	8002c78 <HAL_ADC_IRQHandler+0x378>
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	; (8002e5c <HAL_ADC_IRQHandler+0x55c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d027      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002c76:	e005      	b.n	8002c84 <HAL_ADC_IRQHandler+0x384>
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <HAL_ADC_IRQHandler+0x560>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d020      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c8c:	d004      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x398>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a71      	ldr	r2, [pc, #452]	; (8002e58 <HAL_ADC_IRQHandler+0x558>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d106      	bne.n	8002ca6 <HAL_ADC_IRQHandler+0x3a6>
 8002c98:	4b70      	ldr	r3, [pc, #448]	; (8002e5c <HAL_ADC_IRQHandler+0x55c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2b07      	cmp	r3, #7
 8002ca2:	d010      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002ca4:	e005      	b.n	8002cb2 <HAL_ADC_IRQHandler+0x3b2>
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_ADC_IRQHandler+0x560>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2b07      	cmp	r3, #7
 8002cb0:	d009      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3c6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a64      	ldr	r2, [pc, #400]	; (8002e54 <HAL_ADC_IRQHandler+0x554>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d104      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e00f      	b.n	8002cf0 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x3e4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_ADC_IRQHandler+0x558>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d102      	bne.n	8002cea <HAL_ADC_IRQHandler+0x3ea>
 8002ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ce8:	e000      	b.n	8002cec <HAL_ADC_IRQHandler+0x3ec>
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_ADC_IRQHandler+0x554>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d12d      	bne.n	8002d56 <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11a      	bne.n	8002d3e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d16:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d112      	bne.n	8002d56 <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d3c:	e00b      	b.n	8002d56 <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f948 	bl	8002fec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2260      	movs	r2, #96	; 0x60
 8002d62:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d113      	bne.n	8002d9a <HAL_ADC_IRQHandler+0x49a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d10c      	bne.n	8002d9a <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff faa7 	bl	80022e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da8:	d115      	bne.n	8002dd6 <HAL_ADC_IRQHandler+0x4d6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db8:	d10d      	bne.n	8002dd6 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f924 	bl	8003014 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d115      	bne.n	8002e12 <HAL_ADC_IRQHandler+0x512>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d10d      	bne.n	8002e12 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f910 	bl	8003028 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d151      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x5c4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d14a      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d102      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002e36:	2301      	movs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e02d      	b.n	8002e98 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_IRQHandler+0x550>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_ADC_IRQHandler+0x558>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d109      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x564>
 8002e50:	4b02      	ldr	r3, [pc, #8]	; (8002e5c <HAL_ADC_IRQHandler+0x55c>)
 8002e52:	e008      	b.n	8002e66 <HAL_ADC_IRQHandler+0x566>
 8002e54:	50000400 	.word	0x50000400
 8002e58:	50000100 	.word	0x50000100
 8002e5c:	50000300 	.word	0x50000300
 8002e60:	50000700 	.word	0x50000700
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_ADC_IRQHandler+0x614>)
 8002e66:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e007      	b.n	8002e98 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002e94:	2301      	movs	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10e      	bne.n	8002ebc <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f043 0202 	orr.w	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fa1c 	bl	80022f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed2:	d11b      	bne.n	8002f0c <HAL_ADC_IRQHandler+0x60c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee2:	d113      	bne.n	8002f0c <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0208 	orr.w	r2, r3, #8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f87a 	bl	8003000 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	50000700 	.word	0x50000700

08002f18 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e057      	b.n	8002fe4 <HAL_ADCEx_Calibration_Start+0xcc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fd1f 	bl	8003980 <ADC_Disable>
 8002f42:	4603      	mov	r3, r0
 8002f44:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d146      	bne.n	8002fda <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002f60:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f76:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f86:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002f88:	f7ff f968 	bl	800225c <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002f8e:	e014      	b.n	8002fba <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f90:	f7ff f964 	bl	800225c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b0a      	cmp	r3, #10
 8002f9c:	d90d      	bls.n	8002fba <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f023 0312 	bic.w	r3, r3, #18
 8002fa6:	f043 0210 	orr.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e014      	b.n	8002fe4 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc8:	d0e2      	beq.n	8002f90 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800303c:	b480      	push	{r7}
 800303e:	b09b      	sub	sp, #108	; 0x6c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x22>
 800305a:	2302      	movs	r3, #2
 800305c:	e2cb      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x5ba>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 82af 	bne.w	80035d4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d81c      	bhi.n	80030b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	461a      	mov	r2, r3
 8003092:	231f      	movs	r3, #31
 8003094:	4093      	lsls	r3, r2
 8003096:	43db      	mvns	r3, r3
 8003098:	4019      	ands	r1, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa00 f203 	lsl.w	r2, r0, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
 80030b6:	e063      	b.n	8003180 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d81e      	bhi.n	80030fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	3b1e      	subs	r3, #30
 80030d4:	221f      	movs	r2, #31
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	4019      	ands	r1, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	3b1e      	subs	r3, #30
 80030f0:	fa00 f203 	lsl.w	r2, r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34
 80030fc:	e040      	b.n	8003180 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b0e      	cmp	r3, #14
 8003104:	d81e      	bhi.n	8003144 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	3b3c      	subs	r3, #60	; 0x3c
 800311a:	221f      	movs	r2, #31
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	4019      	ands	r1, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	3b3c      	subs	r3, #60	; 0x3c
 8003136:	fa00 f203 	lsl.w	r2, r0, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
 8003142:	e01d      	b.n	8003180 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	3b5a      	subs	r3, #90	; 0x5a
 8003158:	221f      	movs	r2, #31
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	4019      	ands	r1, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	3b5a      	subs	r3, #90	; 0x5a
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80e5 	bne.w	800335a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b09      	cmp	r3, #9
 8003196:	d91c      	bls.n	80031d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	3b1e      	subs	r3, #30
 80031aa:	2207      	movs	r2, #7
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4019      	ands	r1, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6898      	ldr	r0, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	3b1e      	subs	r3, #30
 80031c4:	fa00 f203 	lsl.w	r2, r0, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]
 80031d0:	e019      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6959      	ldr	r1, [r3, #20]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	2207      	movs	r2, #7
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4019      	ands	r1, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6898      	ldr	r0, [r3, #8]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	fa00 f203 	lsl.w	r2, r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	08db      	lsrs	r3, r3, #3
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	3b01      	subs	r3, #1
 8003224:	2b03      	cmp	r3, #3
 8003226:	d84f      	bhi.n	80032c8 <HAL_ADC_ConfigChannel+0x28c>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_ADC_ConfigChannel+0x1f4>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003241 	.word	0x08003241
 8003234:	08003263 	.word	0x08003263
 8003238:	08003285 	.word	0x08003285
 800323c:	080032a7 	.word	0x080032a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003246:	4b9f      	ldr	r3, [pc, #636]	; (80034c4 <HAL_ADC_ConfigChannel+0x488>)
 8003248:	4013      	ands	r3, r2
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	0691      	lsls	r1, r2, #26
 8003250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003252:	430a      	orrs	r2, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003260:	e07e      	b.n	8003360 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003268:	4b96      	ldr	r3, [pc, #600]	; (80034c4 <HAL_ADC_ConfigChannel+0x488>)
 800326a:	4013      	ands	r3, r2
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	0691      	lsls	r1, r2, #26
 8003272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003274:	430a      	orrs	r2, r1
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003280:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003282:	e06d      	b.n	8003360 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800328a:	4b8e      	ldr	r3, [pc, #568]	; (80034c4 <HAL_ADC_ConfigChannel+0x488>)
 800328c:	4013      	ands	r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	0691      	lsls	r1, r2, #26
 8003294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003296:	430a      	orrs	r2, r1
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80032a4:	e05c      	b.n	8003360 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032ac:	4b85      	ldr	r3, [pc, #532]	; (80034c4 <HAL_ADC_ConfigChannel+0x488>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	0691      	lsls	r1, r2, #26
 80032b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032b8:	430a      	orrs	r2, r1
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80032c6:	e04b      	b.n	8003360 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	069b      	lsls	r3, r3, #26
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800330e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	069b      	lsls	r3, r3, #26
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003332:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	069b      	lsls	r3, r3, #26
 8003344:	429a      	cmp	r2, r3
 8003346:	d10a      	bne.n	800335e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003356:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003358:	e001      	b.n	800335e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_ADC_ConfigChannel+0x324>
      break;
 800335e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d108      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x344>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x344>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x346>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 8131 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d00f      	beq.n	80033b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	400a      	ands	r2, r1
 80033aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80033ae:	e049      	b.n	8003444 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b09      	cmp	r3, #9
 80033d0:	d91c      	bls.n	800340c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6999      	ldr	r1, [r3, #24]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	3b1b      	subs	r3, #27
 80033e4:	2207      	movs	r2, #7
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	4019      	ands	r1, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6898      	ldr	r0, [r3, #8]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	3b1b      	subs	r3, #27
 80033fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]
 800340a:	e01b      	b.n	8003444 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6959      	ldr	r1, [r3, #20]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	2207      	movs	r2, #7
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	4019      	ands	r1, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6898      	ldr	r0, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	fa00 f203 	lsl.w	r2, r0, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344c:	d004      	beq.n	8003458 <HAL_ADC_ConfigChannel+0x41c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_ADC_ConfigChannel+0x48c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x420>
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_ADC_ConfigChannel+0x490>)
 800345a:	e000      	b.n	800345e <HAL_ADC_ConfigChannel+0x422>
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <HAL_ADC_ConfigChannel+0x494>)
 800345e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b10      	cmp	r3, #16
 8003466:	d105      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003478:	2b11      	cmp	r3, #17
 800347a:	d105      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800348c:	2b12      	cmp	r3, #18
 800348e:	f040 80ac 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 80a5 	bne.w	80035ea <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a8:	d102      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x474>
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_ADC_ConfigChannel+0x48c>)
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e023      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x4bc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_ADC_ConfigChannel+0x48c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10c      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x498>
 80034ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e01a      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x4bc>
 80034c2:	bf00      	nop
 80034c4:	83fff000 	.word	0x83fff000
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000300 	.word	0x50000300
 80034d0:	50000700 	.word	0x50000700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4a      	ldr	r2, [pc, #296]	; (8003604 <HAL_ADC_ConfigChannel+0x5c8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d102      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x4a8>
 80034de:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_ADC_ConfigChannel+0x5cc>)
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e009      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x4bc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a47      	ldr	r2, [pc, #284]	; (8003608 <HAL_ADC_ConfigChannel+0x5cc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d102      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x4b8>
 80034ee:	4b45      	ldr	r3, [pc, #276]	; (8003604 <HAL_ADC_ConfigChannel+0x5c8>)
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e001      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x4bc>
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d108      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x4dc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x4dc>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_ADC_ConfigChannel+0x4de>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d150      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800351e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x504>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x504>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_ADC_ConfigChannel+0x506>
 8003540:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003542:	2b00      	cmp	r3, #0
 8003544:	d13c      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b10      	cmp	r3, #16
 800354c:	d11d      	bne.n	800358a <HAL_ADC_ConfigChannel+0x54e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003556:	d118      	bne.n	800358a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003562:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003564:	4b29      	ldr	r3, [pc, #164]	; (800360c <HAL_ADC_ConfigChannel+0x5d0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_ADC_ConfigChannel+0x5d4>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0c9a      	lsrs	r2, r3, #18
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800357a:	e002      	b.n	8003582 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	3b01      	subs	r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f9      	bne.n	800357c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003588:	e02e      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b11      	cmp	r3, #17
 8003590:	d10b      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x56e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800359a:	d106      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800359c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80035a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035a8:	e01e      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b12      	cmp	r3, #18
 80035b0:	d11a      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035be:	e013      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80035d2:	e00a      	b.n	80035ea <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80035e6:	e000      	b.n	80035ea <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80035f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	376c      	adds	r7, #108	; 0x6c
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	50000400 	.word	0x50000400
 8003608:	50000500 	.word	0x50000500
 800360c:	20000004 	.word	0x20000004
 8003610:	431bde83 	.word	0x431bde83

08003614 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003614:	b480      	push	{r7}
 8003616:	b099      	sub	sp, #100	; 0x64
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362c:	d102      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800362e:	4b6d      	ldr	r3, [pc, #436]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	e01a      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800363e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e011      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a67      	ldr	r2, [pc, #412]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d102      	bne.n	8003656 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003650:	4b66      	ldr	r3, [pc, #408]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	e009      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a64      	ldr	r2, [pc, #400]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d102      	bne.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003660:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	e001      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b0      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800367e:	2302      	movs	r3, #2
 8003680:	e0a9      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 808d 	bne.w	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 8086 	bne.w	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b0:	d004      	beq.n	80036bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4b      	ldr	r2, [pc, #300]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80036be:	e000      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80036c0:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80036c2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d040      	beq.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80036cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036de:	035b      	lsls	r3, r3, #13
 80036e0:	430b      	orrs	r3, r1
 80036e2:	431a      	orrs	r2, r3
 80036e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d108      	bne.n	8003708 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d15c      	bne.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800372a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d14b      	bne.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	6811      	ldr	r1, [r2, #0]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	6892      	ldr	r2, [r2, #8]
 8003744:	430a      	orrs	r2, r1
 8003746:	431a      	orrs	r2, r3
 8003748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800374a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800374c:	e03c      	b.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800374e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003758:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d123      	bne.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800379c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d112      	bne.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80037a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037aa:	f023 030f 	bic.w	r3, r3, #15
 80037ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80037b2:	e009      	b.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80037c6:	e000      	b.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80037d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80037d6:	4618      	mov	r0, r3
 80037d8:	3764      	adds	r7, #100	; 0x64
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	50000100 	.word	0x50000100
 80037e8:	50000400 	.word	0x50000400
 80037ec:	50000500 	.word	0x50000500
 80037f0:	50000300 	.word	0x50000300
 80037f4:	50000700 	.word	0x50000700

080037f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d126      	bne.n	8003860 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003828:	2b00      	cmp	r3, #0
 800382a:	d115      	bne.n	8003858 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7fe fd2d 	bl	80022b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800385e:	e004      	b.n	800386a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7fe fd23 	bl	80022cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fe fd1d 	bl	80022f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <ADC_Enable+0x2c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <ADC_Enable+0x2c>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <ADC_Enable+0x2e>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d13c      	bne.n	8003970 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	4b1f      	ldr	r3, [pc, #124]	; (800397c <ADC_Enable+0xb8>)
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e028      	b.n	8003972 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003930:	f7fe fc94 	bl	800225c <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003936:	e014      	b.n	8003962 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003938:	f7fe fc90 	bl	800225c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d90d      	bls.n	8003962 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d1e3      	bne.n	8003938 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	8000003f 	.word	0x8000003f

08003980 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d108      	bne.n	80039ac <ADC_Disable+0x2c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <ADC_Disable+0x2c>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <ADC_Disable+0x2e>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d040      	beq.n	8003a34 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030d 	and.w	r3, r3, #13
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10f      	bne.n	80039e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0202 	orr.w	r2, r2, #2
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2203      	movs	r2, #3
 80039d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fc40 	bl	800225c <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039de:	e022      	b.n	8003a26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e01c      	b.n	8003a36 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039fc:	f7fe fc2e 	bl	800225c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d90d      	bls.n	8003a26 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f043 0210 	orr.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d0e3      	beq.n	80039fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_COMP_Init+0x22>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
 8003a66:	e064      	b.n	8003b32 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_COMP_Init+0xfc>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4a33      	ldr	r2, [pc, #204]	; (8003b3c <HAL_COMP_Init+0xfc>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6193      	str	r3, [r2, #24]
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_COMP_Init+0xfc>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fd ff0b 	bl	800189c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 020c 	bic.w	r2, r3, #12
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000

08003b40 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <HAL_COMP_Start+0x26>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e0c4      	b.n	8003cf6 <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f040 80bc 	bne.w	8003cf2 <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a61      	ldr	r2, [pc, #388]	; (8003d04 <HAL_COMP_Start+0x1c4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d028      	beq.n	8003bd6 <HAL_COMP_Start+0x96>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5f      	ldr	r2, [pc, #380]	; (8003d08 <HAL_COMP_Start+0x1c8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d020      	beq.n	8003bd0 <HAL_COMP_Start+0x90>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5e      	ldr	r2, [pc, #376]	; (8003d0c <HAL_COMP_Start+0x1cc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_COMP_Start+0x8a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5c      	ldr	r2, [pc, #368]	; (8003d10 <HAL_COMP_Start+0x1d0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d010      	beq.n	8003bc4 <HAL_COMP_Start+0x84>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_COMP_Start+0x1d4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d008      	beq.n	8003bbe <HAL_COMP_Start+0x7e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a59      	ldr	r2, [pc, #356]	; (8003d18 <HAL_COMP_Start+0x1d8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_COMP_Start+0x7a>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00f      	b.n	8003bda <HAL_COMP_Start+0x9a>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e00d      	b.n	8003bda <HAL_COMP_Start+0x9a>
 8003bbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bc2:	e00a      	b.n	8003bda <HAL_COMP_Start+0x9a>
 8003bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bc8:	e007      	b.n	8003bda <HAL_COMP_Start+0x9a>
 8003bca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003bce:	e004      	b.n	8003bda <HAL_COMP_Start+0x9a>
 8003bd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bd4:	e001      	b.n	8003bda <HAL_COMP_Start+0x9a>
 8003bd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bda:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d077      	beq.n	8003cd8 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d012      	beq.n	8003c1a <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_COMP_Start+0xcc>
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c02:	4946      	ldr	r1, [pc, #280]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	628b      	str	r3, [r1, #40]	; 0x28
 8003c0a:	e01a      	b.n	8003c42 <HAL_COMP_Start+0x102>
 8003c0c:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	4942      	ldr	r1, [pc, #264]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
 8003c18:	e013      	b.n	8003c42 <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_COMP_Start+0xf4>
 8003c24:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	493b      	ldr	r1, [pc, #236]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	628b      	str	r3, [r1, #40]	; 0x28
 8003c32:	e006      	b.n	8003c42 <HAL_COMP_Start+0x102>
 8003c34:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	4937      	ldr	r1, [pc, #220]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <HAL_COMP_Start+0x126>
 8003c58:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	492f      	ldr	r1, [pc, #188]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003c64:	e01a      	b.n	8003c9c <HAL_COMP_Start+0x15c>
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	492c      	ldr	r1, [pc, #176]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60cb      	str	r3, [r1, #12]
 8003c72:	e013      	b.n	8003c9c <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_COMP_Start+0x14e>
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	4925      	ldr	r1, [pc, #148]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003c8c:	e006      	b.n	8003c9c <HAL_COMP_Start+0x15c>
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	4921      	ldr	r1, [pc, #132]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <HAL_COMP_Start+0x174>
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003caa:	491c      	ldr	r1, [pc, #112]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	624b      	str	r3, [r1, #36]	; 0x24
 8003cb2:	e005      	b.n	8003cc0 <HAL_COMP_Start+0x180>
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4918      	ldr	r1, [pc, #96]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_COMP_Start+0x192>
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6353      	str	r3, [r2, #52]	; 0x34
 8003cd0:	e002      	b.n	8003cd8 <HAL_COMP_Start+0x198>
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <HAL_COMP_Start+0x1dc>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003cf0:	e001      	b.n	8003cf6 <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	4001001c 	.word	0x4001001c
 8003d08:	40010020 	.word	0x40010020
 8003d0c:	40010024 	.word	0x40010024
 8003d10:	40010028 	.word	0x40010028
 8003d14:	4001002c 	.word	0x4001002c
 8003d18:	40010030 	.word	0x40010030
 8003d1c:	40010400 	.word	0x40010400

08003d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <__NVIC_SetPriorityGrouping+0x44>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d52:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <__NVIC_SetPriorityGrouping+0x44>)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	60d3      	str	r3, [r2, #12]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <__NVIC_GetPriorityGrouping+0x18>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	f003 0307 	and.w	r3, r3, #7
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db0b      	blt.n	8003dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	4907      	ldr	r1, [pc, #28]	; (8003dbc <__NVIC_EnableIRQ+0x38>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2001      	movs	r0, #1
 8003da6:	fa00 f202 	lsl.w	r2, r0, r2
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000e100 	.word	0xe000e100

08003dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	db0a      	blt.n	8003dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	490c      	ldr	r1, [pc, #48]	; (8003e0c <__NVIC_SetPriority+0x4c>)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	0112      	lsls	r2, r2, #4
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	440b      	add	r3, r1
 8003de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de8:	e00a      	b.n	8003e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4908      	ldr	r1, [pc, #32]	; (8003e10 <__NVIC_SetPriority+0x50>)
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	3b04      	subs	r3, #4
 8003df8:	0112      	lsls	r2, r2, #4
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	761a      	strb	r2, [r3, #24]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000e100 	.word	0xe000e100
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f1c3 0307 	rsb	r3, r3, #7
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	bf28      	it	cs
 8003e32:	2304      	movcs	r3, #4
 8003e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d902      	bls.n	8003e44 <NVIC_EncodePriority+0x30>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3b03      	subs	r3, #3
 8003e42:	e000      	b.n	8003e46 <NVIC_EncodePriority+0x32>
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e48:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	401a      	ands	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	43d9      	mvns	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	4313      	orrs	r3, r2
         );
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff4c 	bl	8003d20 <__NVIC_SetPriorityGrouping>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea2:	f7ff ff61 	bl	8003d68 <__NVIC_GetPriorityGrouping>
 8003ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	6978      	ldr	r0, [r7, #20]
 8003eae:	f7ff ffb1 	bl	8003e14 <NVIC_EncodePriority>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff80 	bl	8003dc0 <__NVIC_SetPriority>
}
 8003ec0:	bf00      	nop
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff54 	bl	8003d84 <__NVIC_EnableIRQ>
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e037      	b.n	8003f6a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f941 	bl	80041d4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}  
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Start_IT+0x20>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e04a      	b.n	8004028 <HAL_DMA_Start_IT+0xb6>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d13a      	bne.n	800401a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8d4 	bl	8004176 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 020e 	orr.w	r2, r2, #14
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00f      	b.n	8004008 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 020a 	orr.w	r2, r2, #10
 8003ff6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e005      	b.n	8004026 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004022:	2302      	movs	r3, #2
 8004024:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004026:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2204      	movs	r2, #4
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d024      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x72>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01f      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0204 	bic.w	r2, r2, #4
 800407e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	2104      	movs	r1, #4
 800408a:	fa01 f202 	lsl.w	r2, r1, r2
 800408e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d06a      	beq.n	800416e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80040a0:	e065      	b.n	800416e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2202      	movs	r2, #2
 80040a8:	409a      	lsls	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d02c      	beq.n	800410c <HAL_DMA_IRQHandler+0xdc>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d027      	beq.n	800410c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 020a 	bic.w	r2, r2, #10
 80040d8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	2102      	movs	r1, #2
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d035      	beq.n	800416e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800410a:	e030      	b.n	800416e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2208      	movs	r2, #8
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d028      	beq.n	800416e <HAL_DMA_IRQHandler+0x13e>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d023      	beq.n	800416e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 020e 	bic.w	r2, r2, #14
 8004134:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2101      	movs	r1, #1
 8004140:	fa01 f202 	lsl.w	r2, r1, r2
 8004144:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
    }
  }
}  
 800416c:	e7ff      	b.n	800416e <HAL_DMA_IRQHandler+0x13e>
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d108      	bne.n	80041b6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041b4:	e007      	b.n	80041c6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	60da      	str	r2, [r3, #12]
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <DMA_CalcBaseAndBitshift+0x60>)
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d80f      	bhi.n	8004208 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <DMA_CalcBaseAndBitshift+0x64>)
 80041f0:	4413      	add	r3, r2
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <DMA_CalcBaseAndBitshift+0x68>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0f      	ldr	r2, [pc, #60]	; (8004240 <DMA_CalcBaseAndBitshift+0x6c>)
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004206:	e00e      	b.n	8004226 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <DMA_CalcBaseAndBitshift+0x70>)
 8004210:	4413      	add	r3, r2
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <DMA_CalcBaseAndBitshift+0x68>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <DMA_CalcBaseAndBitshift+0x74>)
 8004224:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40020407 	.word	0x40020407
 8004238:	bffdfff8 	.word	0xbffdfff8
 800423c:	cccccccd 	.word	0xcccccccd
 8004240:	40020000 	.word	0x40020000
 8004244:	bffdfbf8 	.word	0xbffdfbf8
 8004248:	40020400 	.word	0x40020400

0800424c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425a:	e154      	b.n	8004506 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8146 	beq.w	8004500 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x38>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b12      	cmp	r3, #18
 8004282:	d123      	bne.n	80042cc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	08da      	lsrs	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3208      	adds	r2, #8
 800428c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	220f      	movs	r2, #15
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	08da      	lsrs	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3208      	adds	r2, #8
 80042c6:	6939      	ldr	r1, [r7, #16]
 80042c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	2203      	movs	r2, #3
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0203 	and.w	r2, r3, #3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d00b      	beq.n	8004320 <HAL_GPIO_Init+0xd4>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d007      	beq.n	8004320 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004314:	2b11      	cmp	r3, #17
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b12      	cmp	r3, #18
 800431e:	d130      	bne.n	8004382 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004356:	2201      	movs	r2, #1
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 0201 	and.w	r2, r3, #1
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	2203      	movs	r2, #3
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80a0 	beq.w	8004500 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c0:	4b58      	ldr	r3, [pc, #352]	; (8004524 <HAL_GPIO_Init+0x2d8>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4a57      	ldr	r2, [pc, #348]	; (8004524 <HAL_GPIO_Init+0x2d8>)
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6193      	str	r3, [r2, #24]
 80043cc:	4b55      	ldr	r3, [pc, #340]	; (8004524 <HAL_GPIO_Init+0x2d8>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043d8:	4a53      	ldr	r2, [pc, #332]	; (8004528 <HAL_GPIO_Init+0x2dc>)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004402:	d019      	beq.n	8004438 <HAL_GPIO_Init+0x1ec>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a49      	ldr	r2, [pc, #292]	; (800452c <HAL_GPIO_Init+0x2e0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_GPIO_Init+0x1e8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a48      	ldr	r2, [pc, #288]	; (8004530 <HAL_GPIO_Init+0x2e4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00d      	beq.n	8004430 <HAL_GPIO_Init+0x1e4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a47      	ldr	r2, [pc, #284]	; (8004534 <HAL_GPIO_Init+0x2e8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <HAL_GPIO_Init+0x1e0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a46      	ldr	r2, [pc, #280]	; (8004538 <HAL_GPIO_Init+0x2ec>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_GPIO_Init+0x1dc>
 8004424:	2304      	movs	r3, #4
 8004426:	e008      	b.n	800443a <HAL_GPIO_Init+0x1ee>
 8004428:	2305      	movs	r3, #5
 800442a:	e006      	b.n	800443a <HAL_GPIO_Init+0x1ee>
 800442c:	2303      	movs	r3, #3
 800442e:	e004      	b.n	800443a <HAL_GPIO_Init+0x1ee>
 8004430:	2302      	movs	r3, #2
 8004432:	e002      	b.n	800443a <HAL_GPIO_Init+0x1ee>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_GPIO_Init+0x1ee>
 8004438:	2300      	movs	r3, #0
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	f002 0203 	and.w	r2, r2, #3
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	4093      	lsls	r3, r2
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800444a:	4937      	ldr	r1, [pc, #220]	; (8004528 <HAL_GPIO_Init+0x2dc>)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	3302      	adds	r3, #2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004458:	4b38      	ldr	r3, [pc, #224]	; (800453c <HAL_GPIO_Init+0x2f0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	43db      	mvns	r3, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <HAL_GPIO_Init+0x2f0>)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004482:	4b2e      	ldr	r3, [pc, #184]	; (800453c <HAL_GPIO_Init+0x2f0>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	43db      	mvns	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044a6:	4a25      	ldr	r2, [pc, #148]	; (800453c <HAL_GPIO_Init+0x2f0>)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <HAL_GPIO_Init+0x2f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044d0:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_GPIO_Init+0x2f0>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_GPIO_Init+0x2f0>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044fa:	4a10      	ldr	r2, [pc, #64]	; (800453c <HAL_GPIO_Init+0x2f0>)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3301      	adds	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	f47f aea3 	bne.w	800425c <HAL_GPIO_Init+0x10>
  }
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	40010000 	.word	0x40010000
 800452c:	48000400 	.word	0x48000400
 8004530:	48000800 	.word	0x48000800
 8004534:	48000c00 	.word	0x48000c00
 8004538:	48001000 	.word	0x48001000
 800453c:	40010400 	.word	0x40010400

08004540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e001      	b.n	8004562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e081      	b.n	8004686 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fa16 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	e006      	b.n	80045f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d104      	bne.n	800460a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800462c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	ea42 0103 	orr.w	r1, r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d138      	bne.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e032      	b.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
  }
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b20      	cmp	r3, #32
 8004738:	d139      	bne.n	80047ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004744:	2302      	movs	r3, #2
 8004746:	e033      	b.n	80047b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004776:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e092      	b.n	80048f8 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d101      	bne.n	80047e2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e08a      	b.n	80048f8 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e082      	b.n	80048f8 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <HAL_OPAMP_Init+0x144>)
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	4a3f      	ldr	r2, [pc, #252]	; (8004900 <HAL_OPAMP_Init+0x144>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6193      	str	r3, [r2, #24]
 800480a:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_OPAMP_Init+0x144>)
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd f984 	bl	8001b38 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d003      	beq.n	8004840 <HAL_OPAMP_Init+0x84>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b60      	cmp	r3, #96	; 0x60
 800483e:	d125      	bne.n	800488c <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_OPAMP_Init+0x148>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6851      	ldr	r1, [r2, #4]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68d2      	ldr	r2, [r2, #12]
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6992      	ldr	r2, [r2, #24]
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	69d2      	ldr	r2, [r2, #28]
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6a12      	ldr	r2, [r2, #32]
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004876:	04d2      	lsls	r2, r2, #19
 8004878:	4311      	orrs	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800487e:	0612      	lsls	r2, r2, #24
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	430b      	orrs	r3, r1
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e02a      	b.n	80048e2 <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <HAL_OPAMP_Init+0x148>)
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6851      	ldr	r1, [r2, #4]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6892      	ldr	r2, [r2, #8]
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68d2      	ldr	r2, [r2, #12]
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6912      	ldr	r2, [r2, #16]
 80048aa:	4311      	orrs	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6952      	ldr	r2, [r2, #20]
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6992      	ldr	r2, [r2, #24]
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	69d2      	ldr	r2, [r2, #28]
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a12      	ldr	r2, [r2, #32]
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048ce:	04d2      	lsls	r2, r2, #19
 80048d0:	4311      	orrs	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048d6:	0612      	lsls	r2, r2, #24
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	430b      	orrs	r3, r1
 80048e0:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	e0003811 	.word	0xe0003811

08004908 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	e01d      	b.n	800495c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b05      	cmp	r3, #5
 800492a:	d102      	bne.n	8004932 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e014      	b.n	800495c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10c      	bne.n	8004958 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004956:	e001      	b.n	800495c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f004 ff06 	bl	8009788 <USB_ReadInterrupts>
 800497c:	4603      	mov	r3, r0
 800497e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004986:	d102      	bne.n	800498e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fa91 	bl	8004eb0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f004 fef8 	bl	8009788 <USB_ReadInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a2:	d112      	bne.n	80049ca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b6:	b292      	uxth	r2, r2
 80049b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f006 f9aa 	bl	800ad16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80049c2:	2100      	movs	r1, #0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f8d2 	bl	8004b6e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f004 feda 	bl	8009788 <USB_ReadInterrupts>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049de:	d10b      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049f2:	b292      	uxth	r2, r2
 80049f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 fec3 	bl	8009788 <USB_ReadInterrupts>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d10b      	bne.n	8004a26 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a20:	b292      	uxth	r2, r2
 8004a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f004 feac 	bl	8009788 <USB_ReadInterrupts>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d126      	bne.n	8004a8a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0208 	bic.w	r2, r2, #8
 8004a66:	b292      	uxth	r2, r2
 8004a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f006 f98b 	bl	800ad88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a84:	b292      	uxth	r2, r2
 8004a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fe7a 	bl	8009788 <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9e:	d131      	bne.n	8004b04 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aca:	b292      	uxth	r2, r2
 8004acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0204 	orr.w	r2, r2, #4
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f004 fe4b 	bl	8009788 <USB_ReadInterrupts>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afc:	d002      	beq.n	8004b04 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f006 f928 	bl	800ad54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f004 fe3d 	bl	8009788 <USB_ReadInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b18:	d10e      	bne.n	8004b38 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f006 f8e1 	bl	800acfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f004 fe23 	bl	8009788 <USB_ReadInterrupts>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d10b      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b60:	b292      	uxth	r2, r2
 8004b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_PCD_SetAddress+0x1a>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e013      	b.n	8004bb0 <HAL_PCD_SetAddress+0x42>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 fddd 	bl	8009760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	70fb      	strb	r3, [r7, #3]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	803b      	strh	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da0b      	bge.n	8004bf6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	015b      	lsls	r3, r3, #5
 8004be6:	3328      	adds	r3, #40	; 0x28
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4413      	add	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	705a      	strb	r2, [r3, #1]
 8004bf4:	e00b      	b.n	8004c0e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	015b      	lsls	r3, r3, #5
 8004bfe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c1a:	883a      	ldrh	r2, [r7, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	78ba      	ldrb	r2, [r7, #2]
 8004c24:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c38:	78bb      	ldrb	r3, [r7, #2]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d102      	bne.n	8004c44 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_PCD_EP_Open+0x9a>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e00e      	b.n	8004c70 <HAL_PCD_EP_Open+0xb8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f003 fee1 	bl	8008a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	460b      	mov	r3, r1
 8004c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	015b      	lsls	r3, r3, #5
 8004c90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 f99e 	bl	8009010 <USB_EPStartXfer>
 8004cd4:	e005      	b.n	8004ce2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6979      	ldr	r1, [r7, #20]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 f997 	bl	8009010 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	3328      	adds	r3, #40	; 0x28
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2201      	movs	r2, #1
 8004d22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d24:	7afb      	ldrb	r3, [r7, #11]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f004 f965 	bl	8009010 <USB_EPStartXfer>
 8004d46:	e005      	b.n	8004d54 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f004 f95e 	bl	8009010 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	f003 0207 	and.w	r2, r3, #7
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d901      	bls.n	8004d7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e046      	b.n	8004e0a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	da0b      	bge.n	8004d9c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	015b      	lsls	r3, r3, #5
 8004d8c:	3328      	adds	r3, #40	; 0x28
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	705a      	strb	r2, [r3, #1]
 8004d9a:	e009      	b.n	8004db0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015b      	lsls	r3, r3, #5
 8004da0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_PCD_EP_SetStall+0x72>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e01c      	b.n	8004e0a <HAL_PCD_EP_SetStall+0xac>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68f9      	ldr	r1, [r7, #12]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f004 fbe8 	bl	80095b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d108      	bne.n	8004e00 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f004 fcd4 	bl	80097a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f003 020f 	and.w	r2, r3, #15
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d901      	bls.n	8004e30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e03a      	b.n	8004ea6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da0b      	bge.n	8004e50 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	015b      	lsls	r3, r3, #5
 8004e40:	3328      	adds	r3, #40	; 0x28
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	705a      	strb	r2, [r3, #1]
 8004e4e:	e00b      	b.n	8004e68 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	015b      	lsls	r3, r3, #5
 8004e58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_PCD_EP_ClrStall+0x76>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e00e      	b.n	8004ea6 <HAL_PCD_EP_ClrStall+0x94>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f004 fbce 	bl	8009638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b089      	sub	sp, #36	; 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eb8:	e286      	b.n	80053c8 <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ec2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ec4:	8afb      	ldrh	r3, [r7, #22]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004ece:	7d7b      	ldrb	r3, [r7, #21]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 8146 	bne.w	8005162 <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ed6:	8afb      	ldrh	r3, [r7, #22]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d151      	bne.n	8004f84 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	b29c      	uxth	r4, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3328      	adds	r3, #40	; 0x28
 8004f06:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f005 fec1 	bl	800accc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8238 	beq.w	80053c8 <PCD_EP_ISR_Handler+0x518>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8233 	bne.w	80053c8 <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b292      	uxth	r2, r2
 8004f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f82:	e221      	b.n	80053c8 <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f8a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d033      	beq.n	8005006 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3306      	adds	r3, #6
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f004 fc34 	bl	800984a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fee:	4013      	ands	r3, r2
 8004ff0:	b29c      	uxth	r4, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f005 fe3a 	bl	800ac78 <HAL_PCD_SetupStageCallback>
 8005004:	e1e0      	b.n	80053c8 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f280 81dc 	bge.w	80053c8 <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29a      	uxth	r2, r3
 8005018:	f640 738f 	movw	r3, #3983	; 0xf8f
 800501c:	4013      	ands	r3, r2
 800501e:	b29c      	uxth	r4, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005028:	b292      	uxth	r2, r2
 800502a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005034:	b29b      	uxth	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	3306      	adds	r3, #6
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d019      	beq.n	8005094 <PCD_EP_ISR_Handler+0x1e4>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6959      	ldr	r1, [r3, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005078:	b29b      	uxth	r3, r3
 800507a:	f004 fbe6 	bl	800984a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	441a      	add	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f005 fe04 	bl	800ac9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461c      	mov	r4, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	441c      	add	r4, r3
 80050a6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d110      	bne.n	80050d6 <PCD_EP_ISR_Handler+0x226>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e02f      	b.n	8005136 <PCD_EP_ISR_Handler+0x286>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b3e      	cmp	r3, #62	; 0x3e
 80050dc:	d813      	bhi.n	8005106 <PCD_EP_ISR_Handler+0x256>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <PCD_EP_ISR_Handler+0x248>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e017      	b.n	8005136 <PCD_EP_ISR_Handler+0x286>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <PCD_EP_ISR_Handler+0x270>
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3b01      	subs	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	b29b      	uxth	r3, r3
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	b29b      	uxth	r3, r3
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29a      	uxth	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	b29c      	uxth	r4, r3
 8005148:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800514c:	b29c      	uxth	r4, r3
 800514e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005152:	b29c      	uxth	r4, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4ba2      	ldr	r3, [pc, #648]	; (80053e4 <PCD_EP_ISR_Handler+0x534>)
 800515a:	4323      	orrs	r3, r4
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]
 8005160:	e132      	b.n	80053c8 <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	7d7b      	ldrb	r3, [r7, #21]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005172:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f280 80d1 	bge.w	800531e <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	7d7b      	ldrb	r3, [r7, #21]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29a      	uxth	r2, r3
 800518c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005190:	4013      	ands	r3, r2
 8005192:	b29c      	uxth	r4, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	7d7b      	ldrb	r3, [r7, #21]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80051a4:	b292      	uxth	r2, r2
 80051a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80051a8:	7d7b      	ldrb	r3, [r7, #21]
 80051aa:	015b      	lsls	r3, r3, #5
 80051ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	7b1b      	ldrb	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d121      	bne.n	8005202 <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	3306      	adds	r3, #6
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80051e8:	8bfb      	ldrh	r3, [r7, #30]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d072      	beq.n	80052d4 <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6959      	ldr	r1, [r3, #20]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	88da      	ldrh	r2, [r3, #6]
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	f004 fb25 	bl	800984a <USB_ReadPMA>
 8005200:	e068      	b.n	80052d4 <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d021      	beq.n	8005260 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	3302      	adds	r3, #2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005244:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005246:	8bfb      	ldrh	r3, [r7, #30]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02a      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6959      	ldr	r1, [r3, #20]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	891a      	ldrh	r2, [r3, #8]
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	f004 faf6 	bl	800984a <USB_ReadPMA>
 800525e:	e020      	b.n	80052a2 <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005268:	b29b      	uxth	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4413      	add	r3, r2
 8005274:	3306      	adds	r3, #6
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005288:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800528a:	8bfb      	ldrh	r3, [r7, #30]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6959      	ldr	r1, [r3, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	895a      	ldrh	r2, [r3, #10]
 800529c:	8bfb      	ldrh	r3, [r7, #30]
 800529e:	f004 fad4 	bl	800984a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	b29c      	uxth	r4, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	441a      	add	r2, r3
 80052cc:	4b46      	ldr	r3, [pc, #280]	; (80053e8 <PCD_EP_ISR_Handler+0x538>)
 80052ce:	4323      	orrs	r3, r4
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	8bfb      	ldrh	r3, [r7, #30]
 80052da:	441a      	add	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	8bfb      	ldrh	r3, [r7, #30]
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <PCD_EP_ISR_Handler+0x44e>
 80052f4:	8bfa      	ldrh	r2, [r7, #30]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d206      	bcs.n	800530c <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f005 fcc9 	bl	800ac9c <HAL_PCD_DataOutStageCallback>
 800530a:	e008      	b.n	800531e <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	7819      	ldrb	r1, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fcad 	bl	8004c78 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800531e:	8a7b      	ldrh	r3, [r7, #18]
 8005320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d04f      	beq.n	80053c8 <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 8005328:	7d7b      	ldrb	r3, [r7, #21]
 800532a:	015b      	lsls	r3, r3, #5
 800532c:	3328      	adds	r3, #40	; 0x28
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	7d7b      	ldrb	r3, [r7, #21]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	b29c      	uxth	r4, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	7d7b      	ldrb	r3, [r7, #21]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800535e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	3302      	adds	r3, #2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	441a      	add	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f005 fc8c 	bl	800accc <HAL_PCD_DataInStageCallback>
 80053b4:	e008      	b.n	80053c8 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fc92 	bl	8004cec <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f6ff ad70 	blt.w	8004eba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}
 80053e4:	ffff8080 	.word	0xffff8080
 80053e8:	ffff80c0 	.word	0xffff80c0

080053ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f000 bef4 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 816a 	beq.w	80056ea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005416:	4bb3      	ldr	r3, [pc, #716]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b04      	cmp	r3, #4
 8005420:	d00c      	beq.n	800543c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005422:	4bb0      	ldr	r3, [pc, #704]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d159      	bne.n	80054e2 <HAL_RCC_OscConfig+0xf6>
 800542e:	4bad      	ldr	r3, [pc, #692]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d152      	bne.n	80054e2 <HAL_RCC_OscConfig+0xf6>
 800543c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005440:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005444:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005448:	fa93 f3a3 	rbit	r3, r3
 800544c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005450:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d102      	bne.n	800546e <HAL_RCC_OscConfig+0x82>
 8005468:	4b9e      	ldr	r3, [pc, #632]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	e015      	b.n	800549a <HAL_RCC_OscConfig+0xae>
 800546e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005472:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005486:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800548a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005496:	4b93      	ldr	r3, [pc, #588]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800549e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80054a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80054a6:	fa92 f2a2 	rbit	r2, r2
 80054aa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80054ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80054b2:	fab2 f282 	clz	r2, r2
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	f042 0220 	orr.w	r2, r2, #32
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	f002 021f 	and.w	r2, r2, #31
 80054c2:	2101      	movs	r1, #1
 80054c4:	fa01 f202 	lsl.w	r2, r1, r2
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 810c 	beq.w	80056e8 <HAL_RCC_OscConfig+0x2fc>
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 8106 	bne.w	80056e8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f000 be86 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e2:	1d3b      	adds	r3, r7, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ec:	d106      	bne.n	80054fc <HAL_RCC_OscConfig+0x110>
 80054ee:	4b7d      	ldr	r3, [pc, #500]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a7c      	ldr	r2, [pc, #496]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e030      	b.n	800555e <HAL_RCC_OscConfig+0x172>
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <HAL_RCC_OscConfig+0x134>
 8005506:	4b77      	ldr	r3, [pc, #476]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a76      	ldr	r2, [pc, #472]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800550c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	4b74      	ldr	r3, [pc, #464]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e01e      	b.n	800555e <HAL_RCC_OscConfig+0x172>
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_OscConfig+0x15a>
 800552c:	4b6d      	ldr	r3, [pc, #436]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6c      	ldr	r2, [pc, #432]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a69      	ldr	r2, [pc, #420]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e00b      	b.n	800555e <HAL_RCC_OscConfig+0x172>
 8005546:	4b67      	ldr	r3, [pc, #412]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a66      	ldr	r2, [pc, #408]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800554c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b64      	ldr	r3, [pc, #400]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a63      	ldr	r2, [pc, #396]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800555e:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f023 020f 	bic.w	r2, r3, #15
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	495d      	ldr	r1, [pc, #372]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800556e:	4313      	orrs	r3, r2
 8005570:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d059      	beq.n	8005630 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fc fe6e 	bl	800225c <HAL_GetTick>
 8005580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005584:	e00a      	b.n	800559c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005586:	f7fc fe69 	bl	800225c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d902      	bls.n	800559c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	f000 be29 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>
 800559c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b4:	fab3 f383 	clz	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d102      	bne.n	80055ce <HAL_RCC_OscConfig+0x1e2>
 80055c8:	4b46      	ldr	r3, [pc, #280]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	e015      	b.n	80055fa <HAL_RCC_OscConfig+0x20e>
 80055ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80055e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80055ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80055f6:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005606:	fa92 f2a2 	rbit	r2, r2
 800560a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800560e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005612:	fab2 f282 	clz	r2, r2
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	f042 0220 	orr.w	r2, r2, #32
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	f002 021f 	and.w	r2, r2, #31
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0ab      	beq.n	8005586 <HAL_RCC_OscConfig+0x19a>
 800562e:	e05c      	b.n	80056ea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fc fe14 	bl	800225c <HAL_GetTick>
 8005634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005638:	e00a      	b.n	8005650 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563a:	f7fc fe0f 	bl	800225c <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d902      	bls.n	8005650 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	f000 bdcf 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>
 8005650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005654:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005664:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <HAL_RCC_OscConfig+0x296>
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	e015      	b.n	80056ae <HAL_RCC_OscConfig+0x2c2>
 8005682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005686:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800569e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_RCC_OscConfig+0x2f8>)
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056ba:	fa92 f2a2 	rbit	r2, r2
 80056be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056c6:	fab2 f282 	clz	r2, r2
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	f042 0220 	orr.w	r2, r2, #32
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	f002 021f 	and.w	r2, r2, #31
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f202 	lsl.w	r2, r1, r2
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1ab      	bne.n	800563a <HAL_RCC_OscConfig+0x24e>
 80056e2:	e002      	b.n	80056ea <HAL_RCC_OscConfig+0x2fe>
 80056e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 816f 	beq.w	80059d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80056fa:	4bd0      	ldr	r3, [pc, #832]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005706:	4bcd      	ldr	r3, [pc, #820]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b08      	cmp	r3, #8
 8005710:	d16c      	bne.n	80057ec <HAL_RCC_OscConfig+0x400>
 8005712:	4bca      	ldr	r3, [pc, #808]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d166      	bne.n	80057ec <HAL_RCC_OscConfig+0x400>
 800571e:	2302      	movs	r3, #2
 8005720:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005728:	fa93 f3a3 	rbit	r3, r3
 800572c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005730:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005734:	fab3 f383 	clz	r3, r3
 8005738:	b2db      	uxtb	r3, r3
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d102      	bne.n	800574e <HAL_RCC_OscConfig+0x362>
 8005748:	4bbc      	ldr	r3, [pc, #752]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	e013      	b.n	8005776 <HAL_RCC_OscConfig+0x38a>
 800574e:	2302      	movs	r3, #2
 8005750:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005758:	fa93 f3a3 	rbit	r3, r3
 800575c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005760:	2302      	movs	r3, #2
 8005762:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005766:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005772:	4bb2      	ldr	r3, [pc, #712]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2202      	movs	r2, #2
 8005778:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800577c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005780:	fa92 f2a2 	rbit	r2, r2
 8005784:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005788:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800578c:	fab2 f282 	clz	r2, r2
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	f042 0220 	orr.w	r2, r2, #32
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	f002 021f 	and.w	r2, r2, #31
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f202 	lsl.w	r2, r1, r2
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_RCC_OscConfig+0x3cc>
 80057a8:	1d3b      	adds	r3, r7, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d002      	beq.n	80057b8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f000 bd1b 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b8:	4ba0      	ldr	r3, [pc, #640]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	21f8      	movs	r1, #248	; 0xf8
 80057c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80057d0:	fa91 f1a1 	rbit	r1, r1
 80057d4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80057d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80057dc:	fab1 f181 	clz	r1, r1
 80057e0:	b2c9      	uxtb	r1, r1
 80057e2:	408b      	lsls	r3, r1
 80057e4:	4995      	ldr	r1, [pc, #596]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	e0f5      	b.n	80059d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8085 	beq.w	8005902 <HAL_RCC_OscConfig+0x516>
 80057f8:	2301      	movs	r3, #1
 80057fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800580a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580e:	fab3 f383 	clz	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005818:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	461a      	mov	r2, r3
 8005820:	2301      	movs	r3, #1
 8005822:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fc fd1a 	bl	800225c <HAL_GetTick>
 8005828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582e:	f7fc fd15 	bl	800225c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d902      	bls.n	8005844 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	f000 bcd5 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>
 8005844:	2302      	movs	r3, #2
 8005846:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800584e:	fa93 f3a3 	rbit	r3, r3
 8005852:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005856:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d102      	bne.n	8005874 <HAL_RCC_OscConfig+0x488>
 800586e:	4b73      	ldr	r3, [pc, #460]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	e013      	b.n	800589c <HAL_RCC_OscConfig+0x4b0>
 8005874:	2302      	movs	r3, #2
 8005876:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800587e:	fa93 f3a3 	rbit	r3, r3
 8005882:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005886:	2302      	movs	r3, #2
 8005888:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800588c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005890:	fa93 f3a3 	rbit	r3, r3
 8005894:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005898:	4b68      	ldr	r3, [pc, #416]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2202      	movs	r2, #2
 800589e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058a6:	fa92 f2a2 	rbit	r2, r2
 80058aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80058b2:	fab2 f282 	clz	r2, r2
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	f042 0220 	orr.w	r2, r2, #32
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	f002 021f 	and.w	r2, r2, #31
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f202 	lsl.w	r2, r1, r2
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0af      	beq.n	800582e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ce:	4b5b      	ldr	r3, [pc, #364]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	21f8      	movs	r1, #248	; 0xf8
 80058de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80058e6:	fa91 f1a1 	rbit	r1, r1
 80058ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80058ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80058f2:	fab1 f181 	clz	r1, r1
 80058f6:	b2c9      	uxtb	r1, r1
 80058f8:	408b      	lsls	r3, r1
 80058fa:	4950      	ldr	r1, [pc, #320]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	600b      	str	r3, [r1, #0]
 8005900:	e06a      	b.n	80059d8 <HAL_RCC_OscConfig+0x5ec>
 8005902:	2301      	movs	r3, #1
 8005904:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005908:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800590c:	fa93 f3a3 	rbit	r3, r3
 8005910:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005918:	fab3 f383 	clz	r3, r3
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005922:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	461a      	mov	r2, r3
 800592a:	2300      	movs	r3, #0
 800592c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592e:	f7fc fc95 	bl	800225c <HAL_GetTick>
 8005932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e00a      	b.n	800594e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005938:	f7fc fc90 	bl	800225c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d902      	bls.n	800594e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	f000 bc50 	b.w	80061ee <HAL_RCC_OscConfig+0xe02>
 800594e:	2302      	movs	r3, #2
 8005950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005958:	fa93 f3a3 	rbit	r3, r3
 800595c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005964:	fab3 f383 	clz	r3, r3
 8005968:	b2db      	uxtb	r3, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d102      	bne.n	800597e <HAL_RCC_OscConfig+0x592>
 8005978:	4b30      	ldr	r3, [pc, #192]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	e013      	b.n	80059a6 <HAL_RCC_OscConfig+0x5ba>
 800597e:	2302      	movs	r3, #2
 8005980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005990:	2302      	movs	r3, #2
 8005992:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800599a:	fa93 f3a3 	rbit	r3, r3
 800599e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059a2:	4b26      	ldr	r3, [pc, #152]	; (8005a3c <HAL_RCC_OscConfig+0x650>)
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2202      	movs	r2, #2
 80059a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80059ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80059b0:	fa92 f2a2 	rbit	r2, r2
 80059b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80059b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80059bc:	fab2 f282 	clz	r2, r2
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	f042 0220 	orr.w	r2, r2, #32
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	f002 021f 	and.w	r2, r2, #31
 80059cc:	2101      	movs	r1, #1
 80059ce:	fa01 f202 	lsl.w	r2, r1, r2
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1af      	bne.n	8005938 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80da 	beq.w	8005b9c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d069      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x6da>
 80059f2:	2301      	movs	r3, #1
 80059f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059fc:	fa93 f3a3 	rbit	r3, r3
 8005a00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a08:	fab3 f383 	clz	r3, r3
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_OscConfig+0x654>)
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	461a      	mov	r2, r3
 8005a18:	2301      	movs	r3, #1
 8005a1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1c:	f7fc fc1e 	bl	800225c <HAL_GetTick>
 8005a20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a24:	e00e      	b.n	8005a44 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a26:	f7fc fc19 	bl	800225c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d906      	bls.n	8005a44 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e3d9      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	10908120 	.word	0x10908120
 8005a44:	2302      	movs	r3, #2
 8005a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a4e:	fa93 f3a3 	rbit	r3, r3
 8005a52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	fa93 f2a3 	rbit	r2, r3
 8005a68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a72:	2202      	movs	r2, #2
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005a84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a86:	4ba5      	ldr	r3, [pc, #660]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005a8e:	2102      	movs	r1, #2
 8005a90:	6019      	str	r1, [r3, #0]
 8005a92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	fa93 f1a3 	rbit	r1, r3
 8005a9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005aa0:	6019      	str	r1, [r3, #0]
  return result;
 8005aa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	fab3 f383 	clz	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0b0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x63a>
 8005ac4:	e06a      	b.n	8005b9c <HAL_RCC_OscConfig+0x7b0>
 8005ac6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	fa93 f2a3 	rbit	r2, r3
 8005ad8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005adc:	601a      	str	r2, [r3, #0]
  return result;
 8005ade:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005ae2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	4b8c      	ldr	r3, [pc, #560]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	461a      	mov	r2, r3
 8005af4:	2300      	movs	r3, #0
 8005af6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af8:	f7fc fbb0 	bl	800225c <HAL_GetTick>
 8005afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b00:	e009      	b.n	8005b16 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b02:	f7fc fbab 	bl	800225c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e36b      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 8005b16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	fa93 f2a3 	rbit	r2, r3
 8005b28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b32:	2202      	movs	r2, #2
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	fa93 f2a3 	rbit	r2, r3
 8005b40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	fa93 f2a3 	rbit	r2, r3
 8005b58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005b5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5e:	4b6f      	ldr	r3, [pc, #444]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b66:	2102      	movs	r1, #2
 8005b68:	6019      	str	r1, [r3, #0]
 8005b6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	fa93 f1a3 	rbit	r1, r3
 8005b74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b78:	6019      	str	r1, [r3, #0]
  return result;
 8005b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	fab3 f383 	clz	r3, r3
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1b2      	bne.n	8005b02 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8158 	beq.w	8005e5c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb2:	4b5a      	ldr	r3, [pc, #360]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d112      	bne.n	8005be4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bbe:	4b57      	ldr	r3, [pc, #348]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4a56      	ldr	r2, [pc, #344]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	61d3      	str	r3, [r2, #28]
 8005bca:	4b54      	ldr	r3, [pc, #336]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005bd2:	f107 0308 	add.w	r3, r7, #8
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f107 0308 	add.w	r3, r7, #8
 8005bdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCC_OscConfig+0x938>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d11a      	bne.n	8005c26 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <HAL_RCC_OscConfig+0x938>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a4b      	ldr	r2, [pc, #300]	; (8005d24 <HAL_RCC_OscConfig+0x938>)
 8005bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfc:	f7fc fb2e 	bl	800225c <HAL_GetTick>
 8005c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c04:	e009      	b.n	8005c1a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c06:	f7fc fb29 	bl	800225c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e2e9      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4b42      	ldr	r3, [pc, #264]	; (8005d24 <HAL_RCC_OscConfig+0x938>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0ef      	beq.n	8005c06 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCC_OscConfig+0x852>
 8005c30:	4b3a      	ldr	r3, [pc, #232]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4a39      	ldr	r2, [pc, #228]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	6213      	str	r3, [r2, #32]
 8005c3c:	e02f      	b.n	8005c9e <HAL_RCC_OscConfig+0x8b2>
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10c      	bne.n	8005c62 <HAL_RCC_OscConfig+0x876>
 8005c48:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6213      	str	r3, [r2, #32]
 8005c54:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	4a30      	ldr	r2, [pc, #192]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c5a:	f023 0304 	bic.w	r3, r3, #4
 8005c5e:	6213      	str	r3, [r2, #32]
 8005c60:	e01d      	b.n	8005c9e <HAL_RCC_OscConfig+0x8b2>
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d10c      	bne.n	8005c86 <HAL_RCC_OscConfig+0x89a>
 8005c6c:	4b2b      	ldr	r3, [pc, #172]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c72:	f043 0304 	orr.w	r3, r3, #4
 8005c76:	6213      	str	r3, [r2, #32]
 8005c78:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6213      	str	r3, [r2, #32]
 8005c84:	e00b      	b.n	8005c9e <HAL_RCC_OscConfig+0x8b2>
 8005c86:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	4a24      	ldr	r2, [pc, #144]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	6213      	str	r3, [r2, #32]
 8005c92:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	4a21      	ldr	r2, [pc, #132]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005c98:	f023 0304 	bic.w	r3, r3, #4
 8005c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d06b      	beq.n	8005d80 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca8:	f7fc fad8 	bl	800225c <HAL_GetTick>
 8005cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	e00b      	b.n	8005cca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fc fad3 	bl	800225c <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e291      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 8005cca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cce:	2202      	movs	r2, #2
 8005cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	fa93 f2a3 	rbit	r2, r3
 8005cdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	fa93 f2a3 	rbit	r2, r3
 8005cf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005cf8:	601a      	str	r2, [r3, #0]
  return result;
 8005cfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005cfe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d00:	fab3 f383 	clz	r3, r3
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f043 0302 	orr.w	r3, r3, #2
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d109      	bne.n	8005d28 <HAL_RCC_OscConfig+0x93c>
 8005d14:	4b01      	ldr	r3, [pc, #4]	; (8005d1c <HAL_RCC_OscConfig+0x930>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	e014      	b.n	8005d44 <HAL_RCC_OscConfig+0x958>
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	10908120 	.word	0x10908120
 8005d24:	40007000 	.word	0x40007000
 8005d28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	fa93 f2a3 	rbit	r2, r3
 8005d3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	4bbb      	ldr	r3, [pc, #748]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d48:	2102      	movs	r1, #2
 8005d4a:	6011      	str	r1, [r2, #0]
 8005d4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	fa92 f1a2 	rbit	r1, r2
 8005d56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d5a:	6011      	str	r1, [r2, #0]
  return result;
 8005d5c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	fab2 f282 	clz	r2, r2
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	f002 021f 	and.w	r2, r2, #31
 8005d72:	2101      	movs	r1, #1
 8005d74:	fa01 f202 	lsl.w	r2, r1, r2
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d099      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x8c6>
 8005d7e:	e063      	b.n	8005e48 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d80:	f7fc fa6c 	bl	800225c <HAL_GetTick>
 8005d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d88:	e00b      	b.n	8005da2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8a:	f7fc fa67 	bl	800225c <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e225      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 8005da2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005da6:	2202      	movs	r2, #2
 8005da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005daa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	fa93 f2a3 	rbit	r2, r3
 8005db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	fa93 f2a3 	rbit	r2, r3
 8005dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005dd0:	601a      	str	r2, [r3, #0]
  return result;
 8005dd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005dd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f043 0302 	orr.w	r3, r3, #2
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d102      	bne.n	8005df2 <HAL_RCC_OscConfig+0xa06>
 8005dec:	4b90      	ldr	r3, [pc, #576]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	e00d      	b.n	8005e0e <HAL_RCC_OscConfig+0xa22>
 8005df2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005df6:	2202      	movs	r2, #2
 8005df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	fa93 f2a3 	rbit	r2, r3
 8005e04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	4b89      	ldr	r3, [pc, #548]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e12:	2102      	movs	r1, #2
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	fa92 f1a2 	rbit	r1, r2
 8005e20:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e24:	6011      	str	r1, [r2, #0]
  return result;
 8005e26:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	fab2 f282 	clz	r2, r2
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	f002 021f 	and.w	r2, r2, #31
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1a0      	bne.n	8005d8a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d105      	bne.n	8005e5c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e50:	4b77      	ldr	r3, [pc, #476]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	4a76      	ldr	r2, [pc, #472]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 81c2 	beq.w	80061ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e68:	4b71      	ldr	r3, [pc, #452]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f003 030c 	and.w	r3, r3, #12
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	f000 819c 	beq.w	80061ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e76:	1d3b      	adds	r3, r7, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	f040 8114 	bne.w	80060aa <HAL_RCC_OscConfig+0xcbe>
 8005e82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	fa93 f2a3 	rbit	r2, r3
 8005e96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e9a:	601a      	str	r2, [r3, #0]
  return result;
 8005e9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ea0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fc f9d0 	bl	800225c <HAL_GetTick>
 8005ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ec0:	e009      	b.n	8005ed6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fc f9cb 	bl	800225c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e18b      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 8005ed6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	fa93 f2a3 	rbit	r2, r3
 8005eea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005eee:	601a      	str	r2, [r3, #0]
  return result;
 8005ef0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef6:	fab3 f383 	clz	r3, r3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d102      	bne.n	8005f10 <HAL_RCC_OscConfig+0xb24>
 8005f0a:	4b49      	ldr	r3, [pc, #292]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	e01b      	b.n	8005f48 <HAL_RCC_OscConfig+0xb5c>
 8005f10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	fa93 f2a3 	rbit	r2, r3
 8005f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	fa93 f2a3 	rbit	r2, r3
 8005f3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	4b3a      	ldr	r3, [pc, #232]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f50:	6011      	str	r1, [r2, #0]
 8005f52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f56:	6812      	ldr	r2, [r2, #0]
 8005f58:	fa92 f1a2 	rbit	r1, r2
 8005f5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f60:	6011      	str	r1, [r2, #0]
  return result;
 8005f62:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	fab2 f282 	clz	r2, r2
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	f042 0220 	orr.w	r2, r2, #32
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	f002 021f 	and.w	r2, r2, #31
 8005f78:	2101      	movs	r1, #1
 8005f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d19e      	bne.n	8005ec2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f92:	1d3b      	adds	r3, r7, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	4925      	ldr	r1, [pc, #148]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]
 8005fa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005faa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	fa93 f2a3 	rbit	r2, r3
 8005fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fb8:	601a      	str	r2, [r3, #0]
  return result;
 8005fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fbe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd6:	f7fc f941 	bl	800225c <HAL_GetTick>
 8005fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fde:	e009      	b.n	8005ff4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe0:	f7fc f93c 	bl	800225c <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e0fc      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 8005ff4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	fa93 f2a3 	rbit	r2, r3
 8006008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800600c:	601a      	str	r2, [r3, #0]
  return result;
 800600e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006012:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006014:	fab3 f383 	clz	r3, r3
 8006018:	b2db      	uxtb	r3, r3
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d105      	bne.n	8006034 <HAL_RCC_OscConfig+0xc48>
 8006028:	4b01      	ldr	r3, [pc, #4]	; (8006030 <HAL_RCC_OscConfig+0xc44>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e01e      	b.n	800606c <HAL_RCC_OscConfig+0xc80>
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	fa93 f2a3 	rbit	r2, r3
 8006048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fa93 f2a3 	rbit	r2, r3
 8006062:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	4b63      	ldr	r3, [pc, #396]	; (80061f8 <HAL_RCC_OscConfig+0xe0c>)
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006070:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006074:	6011      	str	r1, [r2, #0]
 8006076:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	fa92 f1a2 	rbit	r1, r2
 8006080:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006084:	6011      	str	r1, [r2, #0]
  return result;
 8006086:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	fab2 f282 	clz	r2, r2
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	f042 0220 	orr.w	r2, r2, #32
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	f002 021f 	and.w	r2, r2, #31
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f202 	lsl.w	r2, r1, r2
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d09b      	beq.n	8005fe0 <HAL_RCC_OscConfig+0xbf4>
 80060a8:	e0a0      	b.n	80061ec <HAL_RCC_OscConfig+0xe00>
 80060aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	fa93 f2a3 	rbit	r2, r3
 80060be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060c2:	601a      	str	r2, [r3, #0]
  return result;
 80060c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	461a      	mov	r2, r3
 80060dc:	2300      	movs	r3, #0
 80060de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7fc f8bc 	bl	800225c <HAL_GetTick>
 80060e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060e8:	e009      	b.n	80060fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ea:	f7fc f8b7 	bl	800225c <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e077      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
 80060fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	fa93 f2a3 	rbit	r2, r3
 8006112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006116:	601a      	str	r2, [r3, #0]
  return result;
 8006118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800611c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800611e:	fab3 f383 	clz	r3, r3
 8006122:	b2db      	uxtb	r3, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d102      	bne.n	8006138 <HAL_RCC_OscConfig+0xd4c>
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <HAL_RCC_OscConfig+0xe0c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	e01b      	b.n	8006170 <HAL_RCC_OscConfig+0xd84>
 8006138:	f107 0320 	add.w	r3, r7, #32
 800613c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006142:	f107 0320 	add.w	r3, r7, #32
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	fa93 f2a3 	rbit	r2, r3
 800614c:	f107 031c 	add.w	r3, r7, #28
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	f107 0318 	add.w	r3, r7, #24
 8006156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f107 0318 	add.w	r3, r7, #24
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	fa93 f2a3 	rbit	r2, r3
 8006166:	f107 0314 	add.w	r3, r7, #20
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <HAL_RCC_OscConfig+0xe0c>)
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f107 0210 	add.w	r2, r7, #16
 8006174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	f107 0210 	add.w	r2, r7, #16
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	fa92 f1a2 	rbit	r1, r2
 8006184:	f107 020c 	add.w	r2, r7, #12
 8006188:	6011      	str	r1, [r2, #0]
  return result;
 800618a:	f107 020c 	add.w	r2, r7, #12
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	fab2 f282 	clz	r2, r2
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	f042 0220 	orr.w	r2, r2, #32
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	f002 021f 	and.w	r2, r2, #31
 80061a0:	2101      	movs	r1, #1
 80061a2:	fa01 f202 	lsl.w	r2, r1, r2
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d19e      	bne.n	80060ea <HAL_RCC_OscConfig+0xcfe>
 80061ac:	e01e      	b.n	80061ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e018      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <HAL_RCC_OscConfig+0xe0c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d108      	bne.n	80061e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80061d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000

080061fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b09e      	sub	sp, #120	; 0x78
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e162      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006214:	4b90      	ldr	r3, [pc, #576]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d910      	bls.n	8006244 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006222:	4b8d      	ldr	r3, [pc, #564]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 0207 	bic.w	r2, r3, #7
 800622a:	498b      	ldr	r1, [pc, #556]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	4313      	orrs	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b89      	ldr	r3, [pc, #548]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e14a      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006250:	4b82      	ldr	r3, [pc, #520]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	497f      	ldr	r1, [pc, #508]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80dc 	beq.w	8006428 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d13c      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xf6>
 8006278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800627c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006280:	fa93 f3a3 	rbit	r3, r3
 8006284:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006288:	fab3 f383 	clz	r3, r3
 800628c:	b2db      	uxtb	r3, r3
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d102      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xa6>
 800629c:	4b6f      	ldr	r3, [pc, #444]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	e00f      	b.n	80062c2 <HAL_RCC_ClockConfig+0xc6>
 80062a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	667b      	str	r3, [r7, #100]	; 0x64
 80062b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062b4:	663b      	str	r3, [r7, #96]	; 0x60
 80062b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b8:	fa93 f3a3 	rbit	r3, r3
 80062bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062be:	4b67      	ldr	r3, [pc, #412]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80062c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ca:	fa92 f2a2 	rbit	r2, r2
 80062ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80062d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062d2:	fab2 f282 	clz	r2, r2
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	f042 0220 	orr.w	r2, r2, #32
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	f002 021f 	and.w	r2, r2, #31
 80062e2:	2101      	movs	r1, #1
 80062e4:	fa01 f202 	lsl.w	r2, r1, r2
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d17b      	bne.n	80063e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0f3      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d13c      	bne.n	8006374 <HAL_RCC_ClockConfig+0x178>
 80062fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630a:	fab3 f383 	clz	r3, r3
 800630e:	b2db      	uxtb	r3, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d102      	bne.n	8006324 <HAL_RCC_ClockConfig+0x128>
 800631e:	4b4f      	ldr	r3, [pc, #316]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	e00f      	b.n	8006344 <HAL_RCC_ClockConfig+0x148>
 8006324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632c:	fa93 f3a3 	rbit	r3, r3
 8006330:	647b      	str	r3, [r7, #68]	; 0x44
 8006332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
 8006338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633a:	fa93 f3a3 	rbit	r3, r3
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006340:	4b46      	ldr	r3, [pc, #280]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006348:	63ba      	str	r2, [r7, #56]	; 0x38
 800634a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634c:	fa92 f2a2 	rbit	r2, r2
 8006350:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006354:	fab2 f282 	clz	r2, r2
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	f042 0220 	orr.w	r2, r2, #32
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	f002 021f 	and.w	r2, r2, #31
 8006364:	2101      	movs	r1, #1
 8006366:	fa01 f202 	lsl.w	r2, r1, r2
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d13a      	bne.n	80063e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0b2      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
 8006374:	2302      	movs	r3, #2
 8006376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006382:	fab3 f383 	clz	r3, r3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d102      	bne.n	800639c <HAL_RCC_ClockConfig+0x1a0>
 8006396:	4b31      	ldr	r3, [pc, #196]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	e00d      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1bc>
 800639c:	2302      	movs	r3, #2
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
 80063a8:	2302      	movs	r3, #2
 80063aa:	623b      	str	r3, [r7, #32]
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	fa93 f3a3 	rbit	r3, r3
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	4b29      	ldr	r3, [pc, #164]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2202      	movs	r2, #2
 80063ba:	61ba      	str	r2, [r7, #24]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	fa92 f2a2 	rbit	r2, r2
 80063c2:	617a      	str	r2, [r7, #20]
  return result;
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	fab2 f282 	clz	r2, r2
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	f042 0220 	orr.w	r2, r2, #32
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	f002 021f 	and.w	r2, r2, #31
 80063d6:	2101      	movs	r1, #1
 80063d8:	fa01 f202 	lsl.w	r2, r1, r2
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e079      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f023 0203 	bic.w	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	491a      	ldr	r1, [pc, #104]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063f8:	f7fb ff30 	bl	800225c <HAL_GetTick>
 80063fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006400:	f7fb ff2c 	bl	800225c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	; 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e061      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <HAL_RCC_ClockConfig+0x260>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f003 020c 	and.w	r2, r3, #12
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	429a      	cmp	r2, r3
 8006426:	d1eb      	bne.n	8006400 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d214      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006436:	4b08      	ldr	r3, [pc, #32]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f023 0207 	bic.w	r2, r3, #7
 800643e:	4906      	ldr	r1, [pc, #24]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	4313      	orrs	r3, r2
 8006444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006446:	4b04      	ldr	r3, [pc, #16]	; (8006458 <HAL_RCC_ClockConfig+0x25c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d005      	beq.n	8006460 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e040      	b.n	80064da <HAL_RCC_ClockConfig+0x2de>
 8006458:	40022000 	.word	0x40022000
 800645c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800646c:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <HAL_RCC_ClockConfig+0x2e8>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	491a      	ldr	r1, [pc, #104]	; (80064e4 <HAL_RCC_ClockConfig+0x2e8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648a:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <HAL_RCC_ClockConfig+0x2e8>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4912      	ldr	r1, [pc, #72]	; (80064e4 <HAL_RCC_ClockConfig+0x2e8>)
 800649a:	4313      	orrs	r3, r2
 800649c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800649e:	f000 f829 	bl	80064f4 <HAL_RCC_GetSysClockFreq>
 80064a2:	4601      	mov	r1, r0
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <HAL_RCC_ClockConfig+0x2e8>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ac:	22f0      	movs	r2, #240	; 0xf0
 80064ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	fa92 f2a2 	rbit	r2, r2
 80064b6:	60fa      	str	r2, [r7, #12]
  return result;
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	fab2 f282 	clz	r2, r2
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	40d3      	lsrs	r3, r2
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <HAL_RCC_ClockConfig+0x2ec>)
 80064c4:	5cd3      	ldrb	r3, [r2, r3]
 80064c6:	fa21 f303 	lsr.w	r3, r1, r3
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <HAL_RCC_ClockConfig+0x2f0>)
 80064cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80064ce:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <HAL_RCC_ClockConfig+0x2f4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fb fd54 	bl	8001f80 <HAL_InitTick>
  
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3778      	adds	r7, #120	; 0x78
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000
 80064e8:	0800b04c 	.word	0x0800b04c
 80064ec:	20000004 	.word	0x20000004
 80064f0:	20000008 	.word	0x20000008

080064f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b08b      	sub	sp, #44	; 0x2c
 80064f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800650e:	4b29      	ldr	r3, [pc, #164]	; (80065b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 030c 	and.w	r3, r3, #12
 800651a:	2b04      	cmp	r3, #4
 800651c:	d002      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x30>
 800651e:	2b08      	cmp	r3, #8
 8006520:	d003      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0x36>
 8006522:	e03c      	b.n	800659e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006526:	623b      	str	r3, [r7, #32]
      break;
 8006528:	e03c      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006530:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006534:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	fa92 f2a2 	rbit	r2, r2
 800653c:	607a      	str	r2, [r7, #4]
  return result;
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	fab2 f282 	clz	r2, r2
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	40d3      	lsrs	r3, r2
 8006548:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800654a:	5cd3      	ldrb	r3, [r2, r3]
 800654c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	220f      	movs	r2, #15
 8006558:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	fa92 f2a2 	rbit	r2, r2
 8006560:	60fa      	str	r2, [r7, #12]
  return result;
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	fab2 f282 	clz	r2, r2
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	40d3      	lsrs	r3, r2
 800656c:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800656e:	5cd3      	ldrb	r3, [r2, r3]
 8006570:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800657c:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	fbb2 f2f3 	udiv	r2, r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
 800658c:	e004      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	623b      	str	r3, [r7, #32]
      break;
 800659c:	e002      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80065a0:	623b      	str	r3, [r7, #32]
      break;
 80065a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	372c      	adds	r7, #44	; 0x2c
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
 80065b8:	007a1200 	.word	0x007a1200
 80065bc:	0800b064 	.word	0x0800b064
 80065c0:	0800b074 	.word	0x0800b074
 80065c4:	003d0900 	.word	0x003d0900

080065c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ce:	681b      	ldr	r3, [r3, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000004 	.word	0x20000004

080065e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80065e6:	f7ff ffef 	bl	80065c8 <HAL_RCC_GetHCLKFreq>
 80065ea:	4601      	mov	r1, r0
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80065f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	fa92 f2a2 	rbit	r2, r2
 8006600:	603a      	str	r2, [r7, #0]
  return result;
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	fab2 f282 	clz	r2, r2
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	40d3      	lsrs	r3, r2
 800660c:	4a04      	ldr	r2, [pc, #16]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x40>)
 800660e:	5cd3      	ldrb	r3, [r2, r3]
 8006610:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40021000 	.word	0x40021000
 8006620:	0800b05c 	.word	0x0800b05c

08006624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800662a:	f7ff ffcd 	bl	80065c8 <HAL_RCC_GetHCLKFreq>
 800662e:	4601      	mov	r1, r0
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006638:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800663c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	fa92 f2a2 	rbit	r2, r2
 8006644:	603a      	str	r2, [r7, #0]
  return result;
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	fab2 f282 	clz	r2, r2
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	40d3      	lsrs	r3, r2
 8006650:	4a04      	ldr	r2, [pc, #16]	; (8006664 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40021000 	.word	0x40021000
 8006664:	0800b05c 	.word	0x0800b05c

08006668 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	220f      	movs	r2, #15
 8006676:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006678:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <HAL_RCC_GetClockConfig+0x5c>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 0203 	and.w	r2, r3, #3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <HAL_RCC_GetClockConfig+0x5c>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	08db      	lsrs	r3, r3, #3
 80066a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <HAL_RCC_GetClockConfig+0x60>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0207 	and.w	r2, r3, #7
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	601a      	str	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40022000 	.word	0x40022000

080066cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b092      	sub	sp, #72	; 0x48
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80d7 	beq.w	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80066ea:	2300      	movs	r3, #0
 80066ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f0:	4b4e      	ldr	r3, [pc, #312]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10e      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fc:	4b4b      	ldr	r3, [pc, #300]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4a4a      	ldr	r2, [pc, #296]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006706:	61d3      	str	r3, [r2, #28]
 8006708:	4b48      	ldr	r3, [pc, #288]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d118      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006726:	4b42      	ldr	r3, [pc, #264]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a41      	ldr	r2, [pc, #260]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006730:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006732:	f7fb fd93 	bl	800225c <HAL_GetTick>
 8006736:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006738:	e008      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673a:	f7fb fd8f 	bl	800225c <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b64      	cmp	r3, #100	; 0x64
 8006746:	d901      	bls.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e169      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	4b38      	ldr	r3, [pc, #224]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006758:	4b34      	ldr	r3, [pc, #208]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8084 	beq.w	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006774:	429a      	cmp	r2, r3
 8006776:	d07c      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006778:	4b2c      	ldr	r3, [pc, #176]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	fa93 f3a3 	rbit	r3, r3
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006792:	fab3 f383 	clz	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	461a      	mov	r2, r3
 80067a2:	2301      	movs	r3, #1
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	fa93 f3a3 	rbit	r3, r3
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067b6:	fab3 f383 	clz	r3, r3
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067ca:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04b      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067da:	f7fb fd3f 	bl	800225c <HAL_GetTick>
 80067de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e0:	e00a      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e2:	f7fb fd3b 	bl	800225c <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e113      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80067f8:	2302      	movs	r3, #2
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	fa93 f3a3 	rbit	r3, r3
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	2302      	movs	r3, #2
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	61fb      	str	r3, [r7, #28]
  return result;
 8006810:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006812:	fab3 f383 	clz	r3, r3
 8006816:	b2db      	uxtb	r3, r3
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d108      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006826:	4b01      	ldr	r3, [pc, #4]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	e00d      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800682c:	40021000 	.word	0x40021000
 8006830:	40007000 	.word	0x40007000
 8006834:	10908100 	.word	0x10908100
 8006838:	2302      	movs	r3, #2
 800683a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	fa93 f3a3 	rbit	r3, r3
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	4b78      	ldr	r3, [pc, #480]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2202      	movs	r2, #2
 800684a:	613a      	str	r2, [r7, #16]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	fa92 f2a2 	rbit	r2, r2
 8006852:	60fa      	str	r2, [r7, #12]
  return result;
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	fab2 f282 	clz	r2, r2
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	f002 021f 	and.w	r2, r2, #31
 8006866:	2101      	movs	r1, #1
 8006868:	fa01 f202 	lsl.w	r2, r1, r2
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0b7      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006872:	4b6d      	ldr	r3, [pc, #436]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	496a      	ldr	r1, [pc, #424]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006880:	4313      	orrs	r3, r2
 8006882:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006884:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b66      	ldr	r3, [pc, #408]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4a65      	ldr	r2, [pc, #404]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006896:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068a4:	4b60      	ldr	r3, [pc, #384]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f023 0203 	bic.w	r2, r3, #3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	495d      	ldr	r1, [pc, #372]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068c2:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	4956      	ldr	r1, [pc, #344]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068e0:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	494e      	ldr	r1, [pc, #312]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068fe:	4b4a      	ldr	r3, [pc, #296]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f023 0210 	bic.w	r2, r3, #16
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	4947      	ldr	r1, [pc, #284]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800690c:	4313      	orrs	r3, r2
 800690e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800691c:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	493f      	ldr	r1, [pc, #252]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800693a:	4b3b      	ldr	r3, [pc, #236]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f023 0220 	bic.w	r2, r3, #32
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4938      	ldr	r1, [pc, #224]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006958:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	4930      	ldr	r1, [pc, #192]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006976:	4b2c      	ldr	r3, [pc, #176]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	4929      	ldr	r1, [pc, #164]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4921      	ldr	r1, [pc, #132]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	491a      	ldr	r1, [pc, #104]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80069d0:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	4912      	ldr	r1, [pc, #72]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80069ee:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	490b      	ldr	r1, [pc, #44]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	4903      	ldr	r1, [pc, #12]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3748      	adds	r7, #72	; 0x48
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40021000 	.word	0x40021000

08006a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e01d      	b.n	8006a7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fb f906 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f000 fcf0 	bl	8007450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <HAL_TIM_Base_Start_IT+0x50>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	d00b      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x42>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d007      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	00010007 	.word	0x00010007

08006ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e01d      	b.n	8006b26 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fb f890 	bl	8001c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f000 fc9a 	bl	8007450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fa0f 	bl	8007f66 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <HAL_TIM_PWM_Start+0x98>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x4a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_TIM_PWM_Start+0x9c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x4a>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_TIM_PWM_Start+0xa0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x4a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <HAL_TIM_PWM_Start+0xa4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x4a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_TIM_PWM_Start+0xa8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d101      	bne.n	8006b7e <HAL_TIM_PWM_Start+0x4e>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <HAL_TIM_PWM_Start+0x50>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	4b10      	ldr	r3, [pc, #64]	; (8006bdc <HAL_TIM_PWM_Start+0xac>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b06      	cmp	r3, #6
 8006ba4:	d00b      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x8e>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d007      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0201 	orr.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40012c00 	.word	0x40012c00
 8006bcc:	40013400 	.word	0x40013400
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	40014400 	.word	0x40014400
 8006bd8:	40014800 	.word	0x40014800
 8006bdc:	00010007 	.word	0x00010007

08006be0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e01d      	b.n	8006c2e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f815 	bl	8006c36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f000 fc16 	bl	8007450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d841      	bhi.n	8006ce0 <HAL_TIM_IC_Start_IT+0x94>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <HAL_TIM_IC_Start_IT+0x18>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006ce1 	.word	0x08006ce1
 8006c6c:	08006ce1 	.word	0x08006ce1
 8006c70:	08006ce1 	.word	0x08006ce1
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006ce1 	.word	0x08006ce1
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006ce1 	.word	0x08006ce1
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006ccf 	.word	0x08006ccf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0202 	orr.w	r2, r2, #2
 8006ca6:	60da      	str	r2, [r3, #12]
      break;
 8006ca8:	e01b      	b.n	8006ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0204 	orr.w	r2, r2, #4
 8006cb8:	60da      	str	r2, [r3, #12]
      break;
 8006cba:	e012      	b.n	8006ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0208 	orr.w	r2, r2, #8
 8006cca:	60da      	str	r2, [r3, #12]
      break;
 8006ccc:	e009      	b.n	8006ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0210 	orr.w	r2, r2, #16
 8006cdc:	60da      	str	r2, [r3, #12]
      break;
 8006cde:	e000      	b.n	8006ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006ce0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 f93b 	bl	8007f66 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_TIM_IC_Start_IT+0xd8>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d00b      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0xce>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d08:	d007      	beq.n	8006d1a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	00010007 	.word	0x00010007

08006d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d122      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d11b      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0202 	mvn.w	r2, #2
 8006d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7f9 fd3a 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8006d70:	e005      	b.n	8006d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fb4e 	bl	8007414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fb55 	bl	8007428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d122      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0204 	mvn.w	r2, #4
 8006da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7f9 fd10 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb24 	bl	8007414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb2b 	bl	8007428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d122      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0208 	mvn.w	r2, #8
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2204      	movs	r2, #4
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7f9 fce6 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fafa 	bl	8007414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb01 	bl	8007428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d122      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d11b      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0210 	mvn.w	r2, #16
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2208      	movs	r2, #8
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7f9 fcbc 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fad0 	bl	8007414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fad7 	bl	8007428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10e      	bne.n	8006eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d107      	bne.n	8006eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0201 	mvn.w	r2, #1
 8006ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fa fb8e 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b80      	cmp	r3, #128	; 0x80
 8006ec6:	d107      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f9a4 	bl	8008220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee6:	d10e      	bne.n	8006f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d107      	bne.n	8006f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 f997 	bl	8008234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d10e      	bne.n	8006f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d107      	bne.n	8006f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fa85 	bl	800743c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d10e      	bne.n	8006f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d107      	bne.n	8006f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f06f 0220 	mvn.w	r2, #32
 8006f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f957 	bl	800820c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e08a      	b.n	8007096 <HAL_TIM_IC_ConfigChannel+0x130>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d11b      	bne.n	8006fce <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6819      	ldr	r1, [r3, #0]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f000 fe41 	bl	8007c2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 020c 	bic.w	r2, r2, #12
 8006fb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6999      	ldr	r1, [r3, #24]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	619a      	str	r2, [r3, #24]
 8006fcc:	e05a      	b.n	8007084 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d11c      	bne.n	800700e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f000 feb9 	bl	8007d5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6999      	ldr	r1, [r3, #24]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	619a      	str	r2, [r3, #24]
 800700c:	e03a      	b.n	8007084 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d11b      	bne.n	800704c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6819      	ldr	r1, [r3, #0]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f000 ff06 	bl	8007e34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 020c 	bic.w	r2, r2, #12
 8007036:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69d9      	ldr	r1, [r3, #28]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	61da      	str	r2, [r3, #28]
 800704a:	e01b      	b.n	8007084 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f000 ff26 	bl	8007eac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69da      	ldr	r2, [r3, #28]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800706e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69d9      	ldr	r1, [r3, #28]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	021a      	lsls	r2, r3, #8
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e105      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b14      	cmp	r3, #20
 80070ce:	f200 80f0 	bhi.w	80072b2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	0800712d 	.word	0x0800712d
 80070dc:	080072b3 	.word	0x080072b3
 80070e0:	080072b3 	.word	0x080072b3
 80070e4:	080072b3 	.word	0x080072b3
 80070e8:	0800716d 	.word	0x0800716d
 80070ec:	080072b3 	.word	0x080072b3
 80070f0:	080072b3 	.word	0x080072b3
 80070f4:	080072b3 	.word	0x080072b3
 80070f8:	080071af 	.word	0x080071af
 80070fc:	080072b3 	.word	0x080072b3
 8007100:	080072b3 	.word	0x080072b3
 8007104:	080072b3 	.word	0x080072b3
 8007108:	080071ef 	.word	0x080071ef
 800710c:	080072b3 	.word	0x080072b3
 8007110:	080072b3 	.word	0x080072b3
 8007114:	080072b3 	.word	0x080072b3
 8007118:	08007231 	.word	0x08007231
 800711c:	080072b3 	.word	0x080072b3
 8007120:	080072b3 	.word	0x080072b3
 8007124:	080072b3 	.word	0x080072b3
 8007128:	08007271 	.word	0x08007271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fa1c 	bl	8007570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0208 	orr.w	r2, r2, #8
 8007146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6999      	ldr	r1, [r3, #24]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	619a      	str	r2, [r3, #24]
      break;
 800716a:	e0a3      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fa8c 	bl	8007690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	619a      	str	r2, [r3, #24]
      break;
 80071ac:	e082      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 faf5 	bl	80077a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0208 	orr.w	r2, r2, #8
 80071c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0204 	bic.w	r2, r2, #4
 80071d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69d9      	ldr	r1, [r3, #28]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	61da      	str	r2, [r3, #28]
      break;
 80071ec:	e062      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fb5d 	bl	80078b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69d9      	ldr	r1, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	61da      	str	r2, [r3, #28]
      break;
 800722e:	e041      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fba6 	bl	8007988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0208 	orr.w	r2, r2, #8
 800724a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0204 	bic.w	r2, r2, #4
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800726e:	e021      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fbea 	bl	8007a50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	021a      	lsls	r2, r3, #8
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072b0:	e000      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80072b2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIM_SlaveConfigSynchro+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e031      	b.n	8007384 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fbf2 	bl	8007b1c <TIM_SlaveTimer_SetConfig>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e018      	b.n	8007384 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007360:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007370:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d831      	bhi.n	8007404 <HAL_TIM_ReadCapturedValue+0x78>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073dd 	.word	0x080073dd
 80073ac:	08007405 	.word	0x08007405
 80073b0:	08007405 	.word	0x08007405
 80073b4:	08007405 	.word	0x08007405
 80073b8:	080073e7 	.word	0x080073e7
 80073bc:	08007405 	.word	0x08007405
 80073c0:	08007405 	.word	0x08007405
 80073c4:	08007405 	.word	0x08007405
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	08007405 	.word	0x08007405
 80073d0:	08007405 	.word	0x08007405
 80073d4:	08007405 	.word	0x08007405
 80073d8:	080073fb 	.word	0x080073fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	60fb      	str	r3, [r7, #12]

      break;
 80073e4:	e00f      	b.n	8007406 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	60fb      	str	r3, [r7, #12]

      break;
 80073ee:	e00a      	b.n	8007406 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f6:	60fb      	str	r3, [r7, #12]

      break;
 80073f8:	e005      	b.n	8007406 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	60fb      	str	r3, [r7, #12]

      break;
 8007402:	e000      	b.n	8007406 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007404:	bf00      	nop
  }

  return tmpreg;
 8007406:	68fb      	ldr	r3, [r7, #12]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3c      	ldr	r2, [pc, #240]	; (8007554 <TIM_Base_SetConfig+0x104>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00f      	beq.n	8007488 <TIM_Base_SetConfig+0x38>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746e:	d00b      	beq.n	8007488 <TIM_Base_SetConfig+0x38>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a39      	ldr	r2, [pc, #228]	; (8007558 <TIM_Base_SetConfig+0x108>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d007      	beq.n	8007488 <TIM_Base_SetConfig+0x38>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a38      	ldr	r2, [pc, #224]	; (800755c <TIM_Base_SetConfig+0x10c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_Base_SetConfig+0x38>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a37      	ldr	r2, [pc, #220]	; (8007560 <TIM_Base_SetConfig+0x110>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d108      	bne.n	800749a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2d      	ldr	r2, [pc, #180]	; (8007554 <TIM_Base_SetConfig+0x104>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01b      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a8:	d017      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <TIM_Base_SetConfig+0x108>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a29      	ldr	r2, [pc, #164]	; (800755c <TIM_Base_SetConfig+0x10c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a28      	ldr	r2, [pc, #160]	; (8007560 <TIM_Base_SetConfig+0x110>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a27      	ldr	r2, [pc, #156]	; (8007564 <TIM_Base_SetConfig+0x114>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a26      	ldr	r2, [pc, #152]	; (8007568 <TIM_Base_SetConfig+0x118>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_Base_SetConfig+0x8a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a25      	ldr	r2, [pc, #148]	; (800756c <TIM_Base_SetConfig+0x11c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a10      	ldr	r2, [pc, #64]	; (8007554 <TIM_Base_SetConfig+0x104>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00f      	beq.n	8007538 <TIM_Base_SetConfig+0xe8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a11      	ldr	r2, [pc, #68]	; (8007560 <TIM_Base_SetConfig+0x110>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00b      	beq.n	8007538 <TIM_Base_SetConfig+0xe8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a10      	ldr	r2, [pc, #64]	; (8007564 <TIM_Base_SetConfig+0x114>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_Base_SetConfig+0xe8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0f      	ldr	r2, [pc, #60]	; (8007568 <TIM_Base_SetConfig+0x118>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0xe8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0e      	ldr	r2, [pc, #56]	; (800756c <TIM_Base_SetConfig+0x11c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d103      	bne.n	8007540 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	615a      	str	r2, [r3, #20]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40012c00 	.word	0x40012c00
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40013400 	.word	0x40013400
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400
 800756c:	40014800 	.word	0x40014800

08007570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f023 0201 	bic.w	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0302 	bic.w	r3, r3, #2
 80075bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a2c      	ldr	r2, [pc, #176]	; (800767c <TIM_OC1_SetConfig+0x10c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00f      	beq.n	80075f0 <TIM_OC1_SetConfig+0x80>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a2b      	ldr	r2, [pc, #172]	; (8007680 <TIM_OC1_SetConfig+0x110>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00b      	beq.n	80075f0 <TIM_OC1_SetConfig+0x80>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a2a      	ldr	r2, [pc, #168]	; (8007684 <TIM_OC1_SetConfig+0x114>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d007      	beq.n	80075f0 <TIM_OC1_SetConfig+0x80>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a29      	ldr	r2, [pc, #164]	; (8007688 <TIM_OC1_SetConfig+0x118>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_OC1_SetConfig+0x80>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a28      	ldr	r2, [pc, #160]	; (800768c <TIM_OC1_SetConfig+0x11c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d10c      	bne.n	800760a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f023 0308 	bic.w	r3, r3, #8
 80075f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f023 0304 	bic.w	r3, r3, #4
 8007608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1b      	ldr	r2, [pc, #108]	; (800767c <TIM_OC1_SetConfig+0x10c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00f      	beq.n	8007632 <TIM_OC1_SetConfig+0xc2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1a      	ldr	r2, [pc, #104]	; (8007680 <TIM_OC1_SetConfig+0x110>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_OC1_SetConfig+0xc2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <TIM_OC1_SetConfig+0x114>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_OC1_SetConfig+0xc2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a18      	ldr	r2, [pc, #96]	; (8007688 <TIM_OC1_SetConfig+0x118>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_OC1_SetConfig+0xc2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a17      	ldr	r2, [pc, #92]	; (800768c <TIM_OC1_SetConfig+0x11c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d111      	bne.n	8007656 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	621a      	str	r2, [r3, #32]
}
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40013400 	.word	0x40013400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800

08007690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f023 0210 	bic.w	r2, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f023 0320 	bic.w	r3, r3, #32
 80076de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a28      	ldr	r2, [pc, #160]	; (8007790 <TIM_OC2_SetConfig+0x100>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_OC2_SetConfig+0x6c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a27      	ldr	r2, [pc, #156]	; (8007794 <TIM_OC2_SetConfig+0x104>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d10d      	bne.n	8007718 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <TIM_OC2_SetConfig+0x100>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00f      	beq.n	8007740 <TIM_OC2_SetConfig+0xb0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <TIM_OC2_SetConfig+0x104>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_OC2_SetConfig+0xb0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <TIM_OC2_SetConfig+0x108>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC2_SetConfig+0xb0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a1a      	ldr	r2, [pc, #104]	; (800779c <TIM_OC2_SetConfig+0x10c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC2_SetConfig+0xb0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <TIM_OC2_SetConfig+0x110>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d113      	bne.n	8007768 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007746:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800774e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40013400 	.word	0x40013400
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400
 80077a0:	40014800 	.word	0x40014800

080077a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a27      	ldr	r2, [pc, #156]	; (80078a0 <TIM_OC3_SetConfig+0xfc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_OC3_SetConfig+0x6a>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a26      	ldr	r2, [pc, #152]	; (80078a4 <TIM_OC3_SetConfig+0x100>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10d      	bne.n	800782a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007828:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a1c      	ldr	r2, [pc, #112]	; (80078a0 <TIM_OC3_SetConfig+0xfc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00f      	beq.n	8007852 <TIM_OC3_SetConfig+0xae>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a1b      	ldr	r2, [pc, #108]	; (80078a4 <TIM_OC3_SetConfig+0x100>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00b      	beq.n	8007852 <TIM_OC3_SetConfig+0xae>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a1a      	ldr	r2, [pc, #104]	; (80078a8 <TIM_OC3_SetConfig+0x104>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d007      	beq.n	8007852 <TIM_OC3_SetConfig+0xae>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <TIM_OC3_SetConfig+0x108>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d003      	beq.n	8007852 <TIM_OC3_SetConfig+0xae>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a18      	ldr	r2, [pc, #96]	; (80078b0 <TIM_OC3_SetConfig+0x10c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d113      	bne.n	800787a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	621a      	str	r2, [r3, #32]
}
 8007894:	bf00      	nop
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40013400 	.word	0x40013400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40014400 	.word	0x40014400
 80078b0:	40014800 	.word	0x40014800

080078b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	031b      	lsls	r3, r3, #12
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a18      	ldr	r2, [pc, #96]	; (8007974 <TIM_OC4_SetConfig+0xc0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00f      	beq.n	8007938 <TIM_OC4_SetConfig+0x84>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a17      	ldr	r2, [pc, #92]	; (8007978 <TIM_OC4_SetConfig+0xc4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00b      	beq.n	8007938 <TIM_OC4_SetConfig+0x84>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a16      	ldr	r2, [pc, #88]	; (800797c <TIM_OC4_SetConfig+0xc8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d007      	beq.n	8007938 <TIM_OC4_SetConfig+0x84>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a15      	ldr	r2, [pc, #84]	; (8007980 <TIM_OC4_SetConfig+0xcc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC4_SetConfig+0x84>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a14      	ldr	r2, [pc, #80]	; (8007984 <TIM_OC4_SetConfig+0xd0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d109      	bne.n	800794c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800793e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	019b      	lsls	r3, r3, #6
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40013400 	.word	0x40013400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <TIM_OC5_SetConfig+0xb4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00f      	beq.n	8007a02 <TIM_OC5_SetConfig+0x7a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a16      	ldr	r2, [pc, #88]	; (8007a40 <TIM_OC5_SetConfig+0xb8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00b      	beq.n	8007a02 <TIM_OC5_SetConfig+0x7a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <TIM_OC5_SetConfig+0xbc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d007      	beq.n	8007a02 <TIM_OC5_SetConfig+0x7a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <TIM_OC5_SetConfig+0xc0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d003      	beq.n	8007a02 <TIM_OC5_SetConfig+0x7a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a13      	ldr	r2, [pc, #76]	; (8007a4c <TIM_OC5_SetConfig+0xc4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d109      	bne.n	8007a16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800

08007a50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	051b      	lsls	r3, r3, #20
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <TIM_OC6_SetConfig+0xb8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00f      	beq.n	8007acc <TIM_OC6_SetConfig+0x7c>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <TIM_OC6_SetConfig+0xbc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00b      	beq.n	8007acc <TIM_OC6_SetConfig+0x7c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC6_SetConfig+0xc0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d007      	beq.n	8007acc <TIM_OC6_SetConfig+0x7c>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <TIM_OC6_SetConfig+0xc4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d003      	beq.n	8007acc <TIM_OC6_SetConfig+0x7c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <TIM_OC6_SetConfig+0xc8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d109      	bne.n	8007ae0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	029b      	lsls	r3, r3, #10
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	621a      	str	r2, [r3, #32]
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40014400 	.word	0x40014400
 8007b18:	40014800 	.word	0x40014800

08007b1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b34:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b30      	cmp	r3, #48	; 0x30
 8007b64:	d05c      	beq.n	8007c20 <TIM_SlaveTimer_SetConfig+0x104>
 8007b66:	2b30      	cmp	r3, #48	; 0x30
 8007b68:	d806      	bhi.n	8007b78 <TIM_SlaveTimer_SetConfig+0x5c>
 8007b6a:	2b10      	cmp	r3, #16
 8007b6c:	d058      	beq.n	8007c20 <TIM_SlaveTimer_SetConfig+0x104>
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d056      	beq.n	8007c20 <TIM_SlaveTimer_SetConfig+0x104>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d054      	beq.n	8007c20 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007b76:	e054      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8007b78:	2b50      	cmp	r3, #80	; 0x50
 8007b7a:	d03d      	beq.n	8007bf8 <TIM_SlaveTimer_SetConfig+0xdc>
 8007b7c:	2b50      	cmp	r3, #80	; 0x50
 8007b7e:	d802      	bhi.n	8007b86 <TIM_SlaveTimer_SetConfig+0x6a>
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d010      	beq.n	8007ba6 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8007b84:	e04d      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8007b86:	2b60      	cmp	r3, #96	; 0x60
 8007b88:	d040      	beq.n	8007c0c <TIM_SlaveTimer_SetConfig+0xf0>
 8007b8a:	2b70      	cmp	r3, #112	; 0x70
 8007b8c:	d000      	beq.n	8007b90 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8007b8e:	e048      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68d9      	ldr	r1, [r3, #12]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f000 f9c1 	bl	8007f26 <TIM_ETR_SetConfig>
      break;
 8007ba4:	e03d      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d101      	bne.n	8007bb2 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e038      	b.n	8007c24 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	621a      	str	r2, [r3, #32]
      break;
 8007bf6:	e014      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6899      	ldr	r1, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	461a      	mov	r2, r3
 8007c06:	f000 f879 	bl	8007cfc <TIM_TI1_ConfigInputStage>
      break;
 8007c0a:	e00a      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	6899      	ldr	r1, [r3, #8]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f000 f8db 	bl	8007dd4 <TIM_TI2_ConfigInputStage>
      break;
 8007c1e:	e000      	b.n	8007c22 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8007c20:	bf00      	nop
  }
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	f023 0201 	bic.w	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4a24      	ldr	r2, [pc, #144]	; (8007ce8 <TIM_TI1_SetConfig+0xbc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c60:	d00f      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a21      	ldr	r2, [pc, #132]	; (8007cec <TIM_TI1_SetConfig+0xc0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a20      	ldr	r2, [pc, #128]	; (8007cf0 <TIM_TI1_SetConfig+0xc4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <TIM_TI1_SetConfig+0xc8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <TIM_TI1_SetConfig+0xcc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d101      	bne.n	8007c86 <TIM_TI1_SetConfig+0x5a>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <TIM_TI1_SetConfig+0x5c>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d008      	beq.n	8007c9e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e003      	b.n	8007ca6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f023 030a 	bic.w	r3, r3, #10
 8007cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f003 030a 	and.w	r3, r3, #10
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40012c00 	.word	0x40012c00
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40013400 	.word	0x40013400
 8007cf8:	40014000 	.word	0x40014000

08007cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 030a 	bic.w	r3, r3, #10
 8007d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b087      	sub	sp, #28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f023 0210 	bic.w	r2, r3, #16
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	621a      	str	r2, [r3, #32]
}
 8007dc8:	bf00      	nop
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f023 0210 	bic.w	r2, r3, #16
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	031b      	lsls	r3, r3, #12
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	621a      	str	r2, [r3, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	031b      	lsls	r3, r3, #12
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007efe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	031b      	lsls	r3, r3, #12
 8007f04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b087      	sub	sp, #28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	021a      	lsls	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	609a      	str	r2, [r3, #8]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b087      	sub	sp, #28
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	2201      	movs	r2, #1
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1a      	ldr	r2, [r3, #32]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	401a      	ands	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1a      	ldr	r2, [r3, #32]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	621a      	str	r2, [r3, #32]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f940 	bl	8008248 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <HAL_TIMEx_PWMN_Start+0x5c>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b06      	cmp	r3, #6
 8007fe8:	d00b      	beq.n	8008002 <HAL_TIMEx_PWMN_Start+0x52>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff0:	d007      	beq.n	8008002 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0201 	orr.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	00010007 	.word	0x00010007

08008010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008024:	2302      	movs	r3, #2
 8008026:	e063      	b.n	80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a2b      	ldr	r2, [pc, #172]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a2a      	ldr	r2, [pc, #168]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d018      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809a:	d013      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a18      	ldr	r2, [pc, #96]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a17      	ldr	r2, [pc, #92]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a12      	ldr	r2, [pc, #72]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a13      	ldr	r2, [pc, #76]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d10c      	bne.n	80080de <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40013400 	.word	0x40013400
 8008104:	40000400 	.word	0x40000400
 8008108:	40000800 	.word	0x40000800
 800810c:	40014000 	.word	0x40014000

08008110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008128:	2302      	movs	r3, #2
 800812a:	e065      	b.n	80081f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a16      	ldr	r2, [pc, #88]	; (8008204 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d004      	beq.n	80081ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a14      	ldr	r2, [pc, #80]	; (8008208 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d115      	bne.n	80081e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	051b      	lsls	r3, r3, #20
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40013400 	.word	0x40013400

0800820c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2204      	movs	r2, #4
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1a      	ldr	r2, [r3, #32]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	43db      	mvns	r3, r3
 800826a:	401a      	ands	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1a      	ldr	r2, [r3, #32]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f003 031f 	and.w	r3, r3, #31
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	fa01 f303 	lsl.w	r3, r1, r3
 8008280:	431a      	orrs	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	621a      	str	r2, [r3, #32]
}
 8008286:	bf00      	nop
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e040      	b.n	8008326 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d106      	bne.n	80082ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7f9 fdb9 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2224      	movs	r2, #36	; 0x24
 80082be:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0201 	bic.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f82d 	bl	8008330 <UART_SetConfig>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e022      	b.n	8008326 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa3b 	bl	8008764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800830c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0201 	orr.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fac2 	bl	80088a8 <UART_CheckIdleState>
 8008324:	4603      	mov	r3, r0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008338:	2300      	movs	r3, #0
 800833a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008362:	f023 030c 	bic.w	r3, r3, #12
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	6939      	ldr	r1, [r7, #16]
 800836c:	430b      	orrs	r3, r1
 800836e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4aa9      	ldr	r2, [pc, #676]	; (8008654 <UART_SetConfig+0x324>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d121      	bne.n	80083f8 <UART_SetConfig+0xc8>
 80083b4:	4ba8      	ldr	r3, [pc, #672]	; (8008658 <UART_SetConfig+0x328>)
 80083b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d817      	bhi.n	80083f0 <UART_SetConfig+0xc0>
 80083c0:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x98>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083eb 	.word	0x080083eb
 80083d4:	080083df 	.word	0x080083df
 80083d8:	2301      	movs	r3, #1
 80083da:	77fb      	strb	r3, [r7, #31]
 80083dc:	e0b2      	b.n	8008544 <UART_SetConfig+0x214>
 80083de:	2302      	movs	r3, #2
 80083e0:	77fb      	strb	r3, [r7, #31]
 80083e2:	e0af      	b.n	8008544 <UART_SetConfig+0x214>
 80083e4:	2304      	movs	r3, #4
 80083e6:	77fb      	strb	r3, [r7, #31]
 80083e8:	e0ac      	b.n	8008544 <UART_SetConfig+0x214>
 80083ea:	2308      	movs	r3, #8
 80083ec:	77fb      	strb	r3, [r7, #31]
 80083ee:	e0a9      	b.n	8008544 <UART_SetConfig+0x214>
 80083f0:	2310      	movs	r3, #16
 80083f2:	77fb      	strb	r3, [r7, #31]
 80083f4:	bf00      	nop
 80083f6:	e0a5      	b.n	8008544 <UART_SetConfig+0x214>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a97      	ldr	r2, [pc, #604]	; (800865c <UART_SetConfig+0x32c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d123      	bne.n	800844a <UART_SetConfig+0x11a>
 8008402:	4b95      	ldr	r3, [pc, #596]	; (8008658 <UART_SetConfig+0x328>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840e:	d012      	beq.n	8008436 <UART_SetConfig+0x106>
 8008410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008414:	d802      	bhi.n	800841c <UART_SetConfig+0xec>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <UART_SetConfig+0xfa>
 800841a:	e012      	b.n	8008442 <UART_SetConfig+0x112>
 800841c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008420:	d00c      	beq.n	800843c <UART_SetConfig+0x10c>
 8008422:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008426:	d003      	beq.n	8008430 <UART_SetConfig+0x100>
 8008428:	e00b      	b.n	8008442 <UART_SetConfig+0x112>
 800842a:	2300      	movs	r3, #0
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	e089      	b.n	8008544 <UART_SetConfig+0x214>
 8008430:	2302      	movs	r3, #2
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e086      	b.n	8008544 <UART_SetConfig+0x214>
 8008436:	2304      	movs	r3, #4
 8008438:	77fb      	strb	r3, [r7, #31]
 800843a:	e083      	b.n	8008544 <UART_SetConfig+0x214>
 800843c:	2308      	movs	r3, #8
 800843e:	77fb      	strb	r3, [r7, #31]
 8008440:	e080      	b.n	8008544 <UART_SetConfig+0x214>
 8008442:	2310      	movs	r3, #16
 8008444:	77fb      	strb	r3, [r7, #31]
 8008446:	bf00      	nop
 8008448:	e07c      	b.n	8008544 <UART_SetConfig+0x214>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a84      	ldr	r2, [pc, #528]	; (8008660 <UART_SetConfig+0x330>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d123      	bne.n	800849c <UART_SetConfig+0x16c>
 8008454:	4b80      	ldr	r3, [pc, #512]	; (8008658 <UART_SetConfig+0x328>)
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800845c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008460:	d012      	beq.n	8008488 <UART_SetConfig+0x158>
 8008462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008466:	d802      	bhi.n	800846e <UART_SetConfig+0x13e>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <UART_SetConfig+0x14c>
 800846c:	e012      	b.n	8008494 <UART_SetConfig+0x164>
 800846e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008472:	d00c      	beq.n	800848e <UART_SetConfig+0x15e>
 8008474:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008478:	d003      	beq.n	8008482 <UART_SetConfig+0x152>
 800847a:	e00b      	b.n	8008494 <UART_SetConfig+0x164>
 800847c:	2300      	movs	r3, #0
 800847e:	77fb      	strb	r3, [r7, #31]
 8008480:	e060      	b.n	8008544 <UART_SetConfig+0x214>
 8008482:	2302      	movs	r3, #2
 8008484:	77fb      	strb	r3, [r7, #31]
 8008486:	e05d      	b.n	8008544 <UART_SetConfig+0x214>
 8008488:	2304      	movs	r3, #4
 800848a:	77fb      	strb	r3, [r7, #31]
 800848c:	e05a      	b.n	8008544 <UART_SetConfig+0x214>
 800848e:	2308      	movs	r3, #8
 8008490:	77fb      	strb	r3, [r7, #31]
 8008492:	e057      	b.n	8008544 <UART_SetConfig+0x214>
 8008494:	2310      	movs	r3, #16
 8008496:	77fb      	strb	r3, [r7, #31]
 8008498:	bf00      	nop
 800849a:	e053      	b.n	8008544 <UART_SetConfig+0x214>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a70      	ldr	r2, [pc, #448]	; (8008664 <UART_SetConfig+0x334>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d123      	bne.n	80084ee <UART_SetConfig+0x1be>
 80084a6:	4b6c      	ldr	r3, [pc, #432]	; (8008658 <UART_SetConfig+0x328>)
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80084ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b2:	d012      	beq.n	80084da <UART_SetConfig+0x1aa>
 80084b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b8:	d802      	bhi.n	80084c0 <UART_SetConfig+0x190>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <UART_SetConfig+0x19e>
 80084be:	e012      	b.n	80084e6 <UART_SetConfig+0x1b6>
 80084c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c4:	d00c      	beq.n	80084e0 <UART_SetConfig+0x1b0>
 80084c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ca:	d003      	beq.n	80084d4 <UART_SetConfig+0x1a4>
 80084cc:	e00b      	b.n	80084e6 <UART_SetConfig+0x1b6>
 80084ce:	2300      	movs	r3, #0
 80084d0:	77fb      	strb	r3, [r7, #31]
 80084d2:	e037      	b.n	8008544 <UART_SetConfig+0x214>
 80084d4:	2302      	movs	r3, #2
 80084d6:	77fb      	strb	r3, [r7, #31]
 80084d8:	e034      	b.n	8008544 <UART_SetConfig+0x214>
 80084da:	2304      	movs	r3, #4
 80084dc:	77fb      	strb	r3, [r7, #31]
 80084de:	e031      	b.n	8008544 <UART_SetConfig+0x214>
 80084e0:	2308      	movs	r3, #8
 80084e2:	77fb      	strb	r3, [r7, #31]
 80084e4:	e02e      	b.n	8008544 <UART_SetConfig+0x214>
 80084e6:	2310      	movs	r3, #16
 80084e8:	77fb      	strb	r3, [r7, #31]
 80084ea:	bf00      	nop
 80084ec:	e02a      	b.n	8008544 <UART_SetConfig+0x214>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a5d      	ldr	r2, [pc, #372]	; (8008668 <UART_SetConfig+0x338>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d123      	bne.n	8008540 <UART_SetConfig+0x210>
 80084f8:	4b57      	ldr	r3, [pc, #348]	; (8008658 <UART_SetConfig+0x328>)
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008504:	d012      	beq.n	800852c <UART_SetConfig+0x1fc>
 8008506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800850a:	d802      	bhi.n	8008512 <UART_SetConfig+0x1e2>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d007      	beq.n	8008520 <UART_SetConfig+0x1f0>
 8008510:	e012      	b.n	8008538 <UART_SetConfig+0x208>
 8008512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008516:	d00c      	beq.n	8008532 <UART_SetConfig+0x202>
 8008518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800851c:	d003      	beq.n	8008526 <UART_SetConfig+0x1f6>
 800851e:	e00b      	b.n	8008538 <UART_SetConfig+0x208>
 8008520:	2300      	movs	r3, #0
 8008522:	77fb      	strb	r3, [r7, #31]
 8008524:	e00e      	b.n	8008544 <UART_SetConfig+0x214>
 8008526:	2302      	movs	r3, #2
 8008528:	77fb      	strb	r3, [r7, #31]
 800852a:	e00b      	b.n	8008544 <UART_SetConfig+0x214>
 800852c:	2304      	movs	r3, #4
 800852e:	77fb      	strb	r3, [r7, #31]
 8008530:	e008      	b.n	8008544 <UART_SetConfig+0x214>
 8008532:	2308      	movs	r3, #8
 8008534:	77fb      	strb	r3, [r7, #31]
 8008536:	e005      	b.n	8008544 <UART_SetConfig+0x214>
 8008538:	2310      	movs	r3, #16
 800853a:	77fb      	strb	r3, [r7, #31]
 800853c:	bf00      	nop
 800853e:	e001      	b.n	8008544 <UART_SetConfig+0x214>
 8008540:	2310      	movs	r3, #16
 8008542:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854c:	f040 808e 	bne.w	800866c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008550:	7ffb      	ldrb	r3, [r7, #31]
 8008552:	2b08      	cmp	r3, #8
 8008554:	d85e      	bhi.n	8008614 <UART_SetConfig+0x2e4>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <UART_SetConfig+0x22c>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008581 	.word	0x08008581
 8008560:	080085a1 	.word	0x080085a1
 8008564:	080085c1 	.word	0x080085c1
 8008568:	08008615 	.word	0x08008615
 800856c:	080085dd 	.word	0x080085dd
 8008570:	08008615 	.word	0x08008615
 8008574:	08008615 	.word	0x08008615
 8008578:	08008615 	.word	0x08008615
 800857c:	080085fd 	.word	0x080085fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fe f82e 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
 8008584:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	005a      	lsls	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	441a      	add	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	fbb2 f3f3 	udiv	r3, r2, r3
 800859a:	b29b      	uxth	r3, r3
 800859c:	61bb      	str	r3, [r7, #24]
        break;
 800859e:	e03c      	b.n	800861a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085a0:	f7fe f840 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 80085a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	005a      	lsls	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	085b      	lsrs	r3, r3, #1
 80085b0:	441a      	add	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	61bb      	str	r3, [r7, #24]
        break;
 80085be:	e02c      	b.n	800861a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	085b      	lsrs	r3, r3, #1
 80085c6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80085ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6852      	ldr	r2, [r2, #4]
 80085d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	61bb      	str	r3, [r7, #24]
        break;
 80085da:	e01e      	b.n	800861a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085dc:	f7fd ff8a 	bl	80064f4 <HAL_RCC_GetSysClockFreq>
 80085e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	005a      	lsls	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	441a      	add	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	61bb      	str	r3, [r7, #24]
        break;
 80085fa:	e00e      	b.n	800861a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	b29b      	uxth	r3, r3
 8008610:	61bb      	str	r3, [r7, #24]
        break;
 8008612:	e002      	b.n	800861a <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]
        break;
 8008618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d916      	bls.n	800864e <UART_SetConfig+0x31e>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008626:	d212      	bcs.n	800864e <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f023 030f 	bic.w	r3, r3, #15
 8008630:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	085b      	lsrs	r3, r3, #1
 8008636:	b29b      	uxth	r3, r3
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	b29a      	uxth	r2, r3
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	4313      	orrs	r3, r2
 8008642:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	897a      	ldrh	r2, [r7, #10]
 800864a:	60da      	str	r2, [r3, #12]
 800864c:	e07e      	b.n	800874c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]
 8008652:	e07b      	b.n	800874c <UART_SetConfig+0x41c>
 8008654:	40013800 	.word	0x40013800
 8008658:	40021000 	.word	0x40021000
 800865c:	40004400 	.word	0x40004400
 8008660:	40004800 	.word	0x40004800
 8008664:	40004c00 	.word	0x40004c00
 8008668:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 800866c:	7ffb      	ldrb	r3, [r7, #31]
 800866e:	2b08      	cmp	r3, #8
 8008670:	d85b      	bhi.n	800872a <UART_SetConfig+0x3fa>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <UART_SetConfig+0x348>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	0800869d 	.word	0x0800869d
 800867c:	080086bb 	.word	0x080086bb
 8008680:	080086d9 	.word	0x080086d9
 8008684:	0800872b 	.word	0x0800872b
 8008688:	080086f5 	.word	0x080086f5
 800868c:	0800872b 	.word	0x0800872b
 8008690:	0800872b 	.word	0x0800872b
 8008694:	0800872b 	.word	0x0800872b
 8008698:	08008713 	.word	0x08008713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800869c:	f7fd ffa0 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
 80086a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	085a      	lsrs	r2, r3, #1
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	441a      	add	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	61bb      	str	r3, [r7, #24]
        break;
 80086b8:	e03a      	b.n	8008730 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ba:	f7fd ffb3 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 80086be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	085a      	lsrs	r2, r3, #1
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	441a      	add	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	61bb      	str	r3, [r7, #24]
        break;
 80086d6:	e02b      	b.n	8008730 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80086e2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6852      	ldr	r2, [r2, #4]
 80086ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	61bb      	str	r3, [r7, #24]
        break;
 80086f2:	e01d      	b.n	8008730 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086f4:	f7fd fefe 	bl	80064f4 <HAL_RCC_GetSysClockFreq>
 80086f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	085a      	lsrs	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	441a      	add	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	fbb2 f3f3 	udiv	r3, r2, r3
 800870c:	b29b      	uxth	r3, r3
 800870e:	61bb      	str	r3, [r7, #24]
        break;
 8008710:	e00e      	b.n	8008730 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	fbb2 f3f3 	udiv	r3, r2, r3
 8008724:	b29b      	uxth	r3, r3
 8008726:	61bb      	str	r3, [r7, #24]
        break;
 8008728:	e002      	b.n	8008730 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
        break;
 800872e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b0f      	cmp	r3, #15
 8008734:	d908      	bls.n	8008748 <UART_SetConfig+0x418>
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d204      	bcs.n	8008748 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	60da      	str	r2, [r3, #12]
 8008746:	e001      	b.n	800874c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008862:	d10a      	bne.n	800887a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80088b6:	f7f9 fcd1 	bl	800225c <HAL_GetTick>
 80088ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d10e      	bne.n	80088e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f82a 	bl	8008932 <UART_WaitOnFlagUntilTimeout>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e020      	b.n	800892a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d10e      	bne.n	8008914 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f814 	bl	8008932 <UART_WaitOnFlagUntilTimeout>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e00a      	b.n	800892a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2220      	movs	r2, #32
 800891e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	603b      	str	r3, [r7, #0]
 800893e:	4613      	mov	r3, r2
 8008940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008942:	e05d      	b.n	8008a00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894a:	d059      	beq.n	8008a00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800894c:	f7f9 fc86 	bl	800225c <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	429a      	cmp	r2, r3
 800895a:	d302      	bcc.n	8008962 <UART_WaitOnFlagUntilTimeout+0x30>
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11b      	bne.n	800899a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008970:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e042      	b.n	8008a20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d02b      	beq.n	8008a00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b6:	d123      	bne.n	8008a00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0201 	bic.w	r2, r2, #1
 80089e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e00f      	b.n	8008a20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	69da      	ldr	r2, [r3, #28]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	4013      	ands	r3, r2
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	bf0c      	ite	eq
 8008a10:	2301      	moveq	r3, #1
 8008a12:	2300      	movne	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d092      	beq.n	8008944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a28:	b490      	push	{r4, r7}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4c:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	78db      	ldrb	r3, [r3, #3]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d819      	bhi.n	8008a8a <USB_ActivateEndpoint+0x62>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <USB_ActivateEndpoint+0x34>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a81 	.word	0x08008a81
 8008a64:	08008a91 	.word	0x08008a91
 8008a68:	08008a77 	.word	0x08008a77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a6c:	8abb      	ldrh	r3, [r7, #20]
 8008a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a72:	82bb      	strh	r3, [r7, #20]
      break;
 8008a74:	e00d      	b.n	8008a92 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a76:	8abb      	ldrh	r3, [r7, #20]
 8008a78:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008a7c:	82bb      	strh	r3, [r7, #20]
      break;
 8008a7e:	e008      	b.n	8008a92 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a80:	8abb      	ldrh	r3, [r7, #20]
 8008a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a86:	82bb      	strh	r3, [r7, #20]
      break;
 8008a88:	e003      	b.n	8008a92 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a8e:	e000      	b.n	8008a92 <USB_ActivateEndpoint+0x6a>
      break;
 8008a90:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	8abb      	ldrh	r3, [r7, #20]
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	b21b      	sxth	r3, r3
 8008ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	b21a      	sxth	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b21b      	sxth	r3, r3
 8008ad6:	b29c      	uxth	r4, r3
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	4b8c      	ldr	r3, [pc, #560]	; (8008d14 <USB_ActivateEndpoint+0x2ec>)
 8008ae4:	4323      	orrs	r3, r4
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	7b1b      	ldrb	r3, [r3, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f040 8116 	bne.w	8008d20 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	785b      	ldrb	r3, [r3, #1]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d067      	beq.n	8008bcc <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008afc:	687c      	ldr	r4, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	441c      	add	r4, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	4423      	add	r3, r4
 8008b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b14:	461c      	mov	r4, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	88db      	ldrh	r3, [r3, #6]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29c      	uxth	r4, r3
 8008b32:	4623      	mov	r3, r4
 8008b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d014      	beq.n	8008b66 <USB_ActivateEndpoint+0x13e>
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b52:	b29c      	uxth	r4, r3
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	441a      	add	r2, r3
 8008b5e:	4b6e      	ldr	r3, [pc, #440]	; (8008d18 <USB_ActivateEndpoint+0x2f0>)
 8008b60:	4323      	orrs	r3, r4
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	78db      	ldrb	r3, [r3, #3]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d018      	beq.n	8008ba0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b84:	b29c      	uxth	r4, r3
 8008b86:	f084 0320 	eor.w	r3, r4, #32
 8008b8a:	b29c      	uxth	r4, r3
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	4b5f      	ldr	r3, [pc, #380]	; (8008d14 <USB_ActivateEndpoint+0x2ec>)
 8008b98:	4323      	orrs	r3, r4
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8013      	strh	r3, [r2, #0]
 8008b9e:	e22f      	b.n	8009000 <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb6:	b29c      	uxth	r4, r3
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	441a      	add	r2, r3
 8008bc2:	4b54      	ldr	r3, [pc, #336]	; (8008d14 <USB_ActivateEndpoint+0x2ec>)
 8008bc4:	4323      	orrs	r3, r4
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	8013      	strh	r3, [r2, #0]
 8008bca:	e219      	b.n	8009000 <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bcc:	687c      	ldr	r4, [r7, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	441c      	add	r4, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	4423      	add	r3, r4
 8008be0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008be4:	461c      	mov	r4, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88db      	ldrh	r3, [r3, #6]
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008bf4:	687c      	ldr	r4, [r7, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	441c      	add	r4, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	4423      	add	r3, r4
 8008c08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d110      	bne.n	8008c38 <USB_ActivateEndpoint+0x210>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	e02f      	b.n	8008c98 <USB_ActivateEndpoint+0x270>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008c3e:	d813      	bhi.n	8008c68 <USB_ActivateEndpoint+0x240>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	085b      	lsrs	r3, r3, #1
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <USB_ActivateEndpoint+0x232>
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3301      	adds	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e017      	b.n	8008c98 <USB_ActivateEndpoint+0x270>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <USB_ActivateEndpoint+0x25a>
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	029b      	lsls	r3, r3, #10
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b29c      	uxth	r4, r3
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d014      	beq.n	8008cda <USB_ActivateEndpoint+0x2b2>
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	b29c      	uxth	r4, r3
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	441a      	add	r2, r3
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <USB_ActivateEndpoint+0x2f4>)
 8008cd4:	4323      	orrs	r3, r4
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf0:	b29c      	uxth	r4, r3
 8008cf2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008cf6:	b29c      	uxth	r4, r3
 8008cf8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008cfc:	b29c      	uxth	r4, r3
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <USB_ActivateEndpoint+0x2ec>)
 8008d0a:	4323      	orrs	r3, r4
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	8013      	strh	r3, [r2, #0]
 8008d10:	e176      	b.n	8009000 <USB_ActivateEndpoint+0x5d8>
 8008d12:	bf00      	nop
 8008d14:	ffff8080 	.word	0xffff8080
 8008d18:	ffff80c0 	.word	0xffff80c0
 8008d1c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d36:	b29c      	uxth	r4, r3
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	441a      	add	r2, r3
 8008d42:	4b96      	ldr	r3, [pc, #600]	; (8008f9c <USB_ActivateEndpoint+0x574>)
 8008d44:	4323      	orrs	r3, r4
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d4a:	687c      	ldr	r4, [r7, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	441c      	add	r4, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	011b      	lsls	r3, r3, #4
 8008d5c:	4423      	add	r3, r4
 8008d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d62:	461c      	mov	r4, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	891b      	ldrh	r3, [r3, #8]
 8008d68:	085b      	lsrs	r3, r3, #1
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	8023      	strh	r3, [r4, #0]
 8008d72:	687c      	ldr	r4, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	441c      	add	r4, r3
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	4423      	add	r3, r4
 8008d86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	895b      	ldrh	r3, [r3, #10]
 8008d90:	085b      	lsrs	r3, r3, #1
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 8088 	bne.w	8008eb4 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29c      	uxth	r4, r3
 8008db2:	4623      	mov	r3, r4
 8008db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d014      	beq.n	8008de6 <USB_ActivateEndpoint+0x3be>
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	b29c      	uxth	r4, r3
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	441a      	add	r2, r3
 8008dde:	4b70      	ldr	r3, [pc, #448]	; (8008fa0 <USB_ActivateEndpoint+0x578>)
 8008de0:	4323      	orrs	r3, r4
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29c      	uxth	r4, r3
 8008df4:	4623      	mov	r3, r4
 8008df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d014      	beq.n	8008e28 <USB_ActivateEndpoint+0x400>
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e14:	b29c      	uxth	r4, r3
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	441a      	add	r2, r3
 8008e20:	4b60      	ldr	r3, [pc, #384]	; (8008fa4 <USB_ActivateEndpoint+0x57c>)
 8008e22:	4323      	orrs	r3, r4
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	b29c      	uxth	r4, r3
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	441a      	add	r2, r3
 8008e4a:	4b56      	ldr	r3, [pc, #344]	; (8008fa4 <USB_ActivateEndpoint+0x57c>)
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e68:	b29c      	uxth	r4, r3
 8008e6a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008e6e:	b29c      	uxth	r4, r3
 8008e70:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008e74:	b29c      	uxth	r4, r3
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	441a      	add	r2, r3
 8008e80:	4b49      	ldr	r3, [pc, #292]	; (8008fa8 <USB_ActivateEndpoint+0x580>)
 8008e82:	4323      	orrs	r3, r4
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e9e:	b29c      	uxth	r4, r3
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	441a      	add	r2, r3
 8008eaa:	4b3f      	ldr	r3, [pc, #252]	; (8008fa8 <USB_ActivateEndpoint+0x580>)
 8008eac:	4323      	orrs	r3, r4
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	8013      	strh	r3, [r2, #0]
 8008eb2:	e0a5      	b.n	8009000 <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29c      	uxth	r4, r3
 8008ec2:	4623      	mov	r3, r4
 8008ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d014      	beq.n	8008ef6 <USB_ActivateEndpoint+0x4ce>
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee2:	b29c      	uxth	r4, r3
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	441a      	add	r2, r3
 8008eee:	4b2c      	ldr	r3, [pc, #176]	; (8008fa0 <USB_ActivateEndpoint+0x578>)
 8008ef0:	4323      	orrs	r3, r4
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b29c      	uxth	r4, r3
 8008f04:	4623      	mov	r3, r4
 8008f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d014      	beq.n	8008f38 <USB_ActivateEndpoint+0x510>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f24:	b29c      	uxth	r4, r3
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	4b1c      	ldr	r3, [pc, #112]	; (8008fa4 <USB_ActivateEndpoint+0x57c>)
 8008f32:	4323      	orrs	r3, r4
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4e:	b29c      	uxth	r4, r3
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	441a      	add	r2, r3
 8008f5a:	4b11      	ldr	r3, [pc, #68]	; (8008fa0 <USB_ActivateEndpoint+0x578>)
 8008f5c:	4323      	orrs	r3, r4
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d020      	beq.n	8008fac <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f80:	b29c      	uxth	r4, r3
 8008f82:	f084 0320 	eor.w	r3, r4, #32
 8008f86:	b29c      	uxth	r4, r3
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <USB_ActivateEndpoint+0x580>)
 8008f94:	4323      	orrs	r3, r4
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	8013      	strh	r3, [r2, #0]
 8008f9a:	e01c      	b.n	8008fd6 <USB_ActivateEndpoint+0x5ae>
 8008f9c:	ffff8180 	.word	0xffff8180
 8008fa0:	ffffc080 	.word	0xffffc080
 8008fa4:	ffff80c0 	.word	0xffff80c0
 8008fa8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc2:	b29c      	uxth	r4, r3
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	441a      	add	r2, r3
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <USB_ActivateEndpoint+0x5e4>)
 8008fd0:	4323      	orrs	r3, r4
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fec:	b29c      	uxth	r4, r3
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	441a      	add	r2, r3
 8008ff8:	4b04      	ldr	r3, [pc, #16]	; (800900c <USB_ActivateEndpoint+0x5e4>)
 8008ffa:	4323      	orrs	r3, r4
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bc90      	pop	{r4, r7}
 800900a:	4770      	bx	lr
 800900c:	ffff8080 	.word	0xffff8080

08009010 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b095      	sub	sp, #84	; 0x54
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b01      	cmp	r3, #1
 8009020:	f040 816d 	bne.w	80092fe <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	429a      	cmp	r2, r3
 800902e:	d909      	bls.n	8009044 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903c:	1ad2      	subs	r2, r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	619a      	str	r2, [r3, #24]
 8009042:	e005      	b.n	8009050 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2200      	movs	r2, #0
 800904e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	7b1b      	ldrb	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d11a      	bne.n	800908e <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	6959      	ldr	r1, [r3, #20]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	88da      	ldrh	r2, [r3, #6]
 8009060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009062:	b29b      	uxth	r3, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fbab 	bl	80097c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800906a:	687c      	ldr	r4, [r7, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009072:	b29b      	uxth	r3, r3
 8009074:	441c      	add	r4, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	4423      	add	r3, r4
 800907e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e11b      	b.n	80092c6 <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d06a      	beq.n	800917a <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090a4:	687c      	ldr	r4, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d14c      	bne.n	8009148 <USB_EPStartXfer+0x138>
 80090ae:	687c      	ldr	r4, [r7, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	441c      	add	r4, r3
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	4423      	add	r3, r4
 80090c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d110      	bne.n	80090f0 <USB_EPStartXfer+0xe0>
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	801a      	strh	r2, [r3, #0]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	e03f      	b.n	8009170 <USB_EPStartXfer+0x160>
 80090f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f2:	2b3e      	cmp	r3, #62	; 0x3e
 80090f4:	d811      	bhi.n	800911a <USB_EPStartXfer+0x10a>
 80090f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
 80090fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <USB_EPStartXfer+0xfc>
 8009106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009108:	3301      	adds	r3, #1
 800910a:	647b      	str	r3, [r7, #68]	; 0x44
 800910c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910e:	b29b      	uxth	r3, r3
 8009110:	029b      	lsls	r3, r3, #10
 8009112:	b29a      	uxth	r2, r3
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	e02a      	b.n	8009170 <USB_EPStartXfer+0x160>
 800911a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
 8009120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009122:	f003 031f 	and.w	r3, r3, #31
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <USB_EPStartXfer+0x120>
 800912a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912c:	3b01      	subs	r3, #1
 800912e:	647b      	str	r3, [r7, #68]	; 0x44
 8009130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009132:	b29b      	uxth	r3, r3
 8009134:	029b      	lsls	r3, r3, #10
 8009136:	b29b      	uxth	r3, r3
 8009138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009140:	b29a      	uxth	r2, r3
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e013      	b.n	8009170 <USB_EPStartXfer+0x160>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d10f      	bne.n	8009170 <USB_EPStartXfer+0x160>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009156:	b29b      	uxth	r3, r3
 8009158:	441c      	add	r4, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	4423      	add	r3, r4
 8009162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916a:	b29a      	uxth	r2, r3
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	895b      	ldrh	r3, [r3, #10]
 8009174:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009178:	e069      	b.n	800924e <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d14c      	bne.n	800921c <USB_EPStartXfer+0x20c>
 8009182:	687c      	ldr	r4, [r7, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800918a:	b29b      	uxth	r3, r3
 800918c:	441c      	add	r4, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	4423      	add	r3, r4
 8009196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800919a:	61bb      	str	r3, [r7, #24]
 800919c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d110      	bne.n	80091c4 <USB_EPStartXfer+0x1b4>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	801a      	strh	r2, [r3, #0]
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091bc:	b29a      	uxth	r2, r3
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	e040      	b.n	8009246 <USB_EPStartXfer+0x236>
 80091c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c6:	2b3e      	cmp	r3, #62	; 0x3e
 80091c8:	d811      	bhi.n	80091ee <USB_EPStartXfer+0x1de>
 80091ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	643b      	str	r3, [r7, #64]	; 0x40
 80091d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <USB_EPStartXfer+0x1d0>
 80091da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091dc:	3301      	adds	r3, #1
 80091de:	643b      	str	r3, [r7, #64]	; 0x40
 80091e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	029b      	lsls	r3, r3, #10
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	e02b      	b.n	8009246 <USB_EPStartXfer+0x236>
 80091ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	643b      	str	r3, [r7, #64]	; 0x40
 80091f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d102      	bne.n	8009204 <USB_EPStartXfer+0x1f4>
 80091fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009200:	3b01      	subs	r3, #1
 8009202:	643b      	str	r3, [r7, #64]	; 0x40
 8009204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009206:	b29b      	uxth	r3, r3
 8009208:	029b      	lsls	r3, r3, #10
 800920a:	b29b      	uxth	r3, r3
 800920c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009214:	b29a      	uxth	r2, r3
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	801a      	strh	r2, [r3, #0]
 800921a:	e014      	b.n	8009246 <USB_EPStartXfer+0x236>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	785b      	ldrb	r3, [r3, #1]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d110      	bne.n	8009246 <USB_EPStartXfer+0x236>
 8009224:	687c      	ldr	r4, [r7, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922c:	b29b      	uxth	r3, r3
 800922e:	441c      	add	r4, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	4423      	add	r3, r4
 8009238:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009240:	b29a      	uxth	r2, r3
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	891b      	ldrh	r3, [r3, #8]
 800924a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	6959      	ldr	r1, [r3, #20]
 8009252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009254:	b29b      	uxth	r3, r3
 8009256:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fab0 	bl	80097c0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d115      	bne.n	8009294 <USB_EPStartXfer+0x284>
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	b29c      	uxth	r4, r3
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	4b96      	ldr	r3, [pc, #600]	; (80094e4 <USB_EPStartXfer+0x4d4>)
 800928c:	4323      	orrs	r3, r4
 800928e:	b29b      	uxth	r3, r3
 8009290:	8013      	strh	r3, [r2, #0]
 8009292:	e018      	b.n	80092c6 <USB_EPStartXfer+0x2b6>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d114      	bne.n	80092c6 <USB_EPStartXfer+0x2b6>
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b2:	b29c      	uxth	r4, r3
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	4b8a      	ldr	r3, [pc, #552]	; (80094e8 <USB_EPStartXfer+0x4d8>)
 80092c0:	4323      	orrs	r3, r4
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092dc:	b29c      	uxth	r4, r3
 80092de:	f084 0310 	eor.w	r3, r4, #16
 80092e2:	b29c      	uxth	r4, r3
 80092e4:	f084 0320 	eor.w	r3, r4, #32
 80092e8:	b29c      	uxth	r4, r3
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	441a      	add	r2, r3
 80092f4:	4b7d      	ldr	r3, [pc, #500]	; (80094ec <USB_EPStartXfer+0x4dc>)
 80092f6:	4323      	orrs	r3, r4
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	8013      	strh	r3, [r2, #0]
 80092fc:	e153      	b.n	80095a6 <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	d909      	bls.n	800931e <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	619a      	str	r2, [r3, #24]
 800931c:	e005      	b.n	800932a <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	7b1b      	ldrb	r3, [r3, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d14c      	bne.n	80093cc <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009332:	687c      	ldr	r4, [r7, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800933a:	b29b      	uxth	r3, r3
 800933c:	441c      	add	r4, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	4423      	add	r3, r4
 8009346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800934a:	623b      	str	r3, [r7, #32]
 800934c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934e:	2b00      	cmp	r3, #0
 8009350:	d110      	bne.n	8009374 <USB_EPStartXfer+0x364>
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800935a:	b29a      	uxth	r2, r3
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	801a      	strh	r2, [r3, #0]
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936c:	b29a      	uxth	r2, r3
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	e0fd      	b.n	8009570 <USB_EPStartXfer+0x560>
 8009374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009376:	2b3e      	cmp	r3, #62	; 0x3e
 8009378:	d811      	bhi.n	800939e <USB_EPStartXfer+0x38e>
 800937a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937c:	085b      	lsrs	r3, r3, #1
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <USB_EPStartXfer+0x380>
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938c:	3301      	adds	r3, #1
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009392:	b29b      	uxth	r3, r3
 8009394:	029b      	lsls	r3, r3, #10
 8009396:	b29a      	uxth	r2, r3
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	801a      	strh	r2, [r3, #0]
 800939c:	e0e8      	b.n	8009570 <USB_EPStartXfer+0x560>
 800939e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a0:	095b      	lsrs	r3, r3, #5
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a6:	f003 031f 	and.w	r3, r3, #31
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <USB_EPStartXfer+0x3a4>
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b0:	3b01      	subs	r3, #1
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	029b      	lsls	r3, r3, #10
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	e0d1      	b.n	8009570 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d14c      	bne.n	800946e <USB_EPStartXfer+0x45e>
 80093d4:	687c      	ldr	r4, [r7, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093dc:	b29b      	uxth	r3, r3
 80093de:	441c      	add	r4, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	4423      	add	r3, r4
 80093e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d110      	bne.n	8009416 <USB_EPStartXfer+0x406>
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	801a      	strh	r2, [r3, #0]
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800940a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800940e:	b29a      	uxth	r2, r3
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	e040      	b.n	8009498 <USB_EPStartXfer+0x488>
 8009416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009418:	2b3e      	cmp	r3, #62	; 0x3e
 800941a:	d811      	bhi.n	8009440 <USB_EPStartXfer+0x430>
 800941c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	63bb      	str	r3, [r7, #56]	; 0x38
 8009422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <USB_EPStartXfer+0x422>
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	3301      	adds	r3, #1
 8009430:	63bb      	str	r3, [r7, #56]	; 0x38
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	b29b      	uxth	r3, r3
 8009436:	029b      	lsls	r3, r3, #10
 8009438:	b29a      	uxth	r2, r3
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	801a      	strh	r2, [r3, #0]
 800943e:	e02b      	b.n	8009498 <USB_EPStartXfer+0x488>
 8009440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38
 8009446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <USB_EPStartXfer+0x446>
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	3b01      	subs	r3, #1
 8009454:	63bb      	str	r3, [r7, #56]	; 0x38
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	b29b      	uxth	r3, r3
 800945a:	029b      	lsls	r3, r3, #10
 800945c:	b29b      	uxth	r3, r3
 800945e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009466:	b29a      	uxth	r2, r3
 8009468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946a:	801a      	strh	r2, [r3, #0]
 800946c:	e014      	b.n	8009498 <USB_EPStartXfer+0x488>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d110      	bne.n	8009498 <USB_EPStartXfer+0x488>
 8009476:	687c      	ldr	r4, [r7, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800947e:	b29b      	uxth	r3, r3
 8009480:	441c      	add	r4, r3
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	4423      	add	r3, r4
 800948a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800948e:	633b      	str	r3, [r7, #48]	; 0x30
 8009490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009492:	b29a      	uxth	r2, r3
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	801a      	strh	r2, [r3, #0]
 8009498:	687c      	ldr	r4, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d152      	bne.n	8009548 <USB_EPStartXfer+0x538>
 80094a2:	687c      	ldr	r4, [r7, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	441c      	add	r4, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	4423      	add	r3, r4
 80094b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
 80094bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d116      	bne.n	80094f0 <USB_EPStartXfer+0x4e0>
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	801a      	strh	r2, [r3, #0]
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094dc:	b29a      	uxth	r2, r3
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	e045      	b.n	8009570 <USB_EPStartXfer+0x560>
 80094e4:	ffff80c0 	.word	0xffff80c0
 80094e8:	ffffc080 	.word	0xffffc080
 80094ec:	ffff8080 	.word	0xffff8080
 80094f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f2:	2b3e      	cmp	r3, #62	; 0x3e
 80094f4:	d811      	bhi.n	800951a <USB_EPStartXfer+0x50a>
 80094f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f8:	085b      	lsrs	r3, r3, #1
 80094fa:	637b      	str	r3, [r7, #52]	; 0x34
 80094fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <USB_EPStartXfer+0x4fc>
 8009506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009508:	3301      	adds	r3, #1
 800950a:	637b      	str	r3, [r7, #52]	; 0x34
 800950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950e:	b29b      	uxth	r3, r3
 8009510:	029b      	lsls	r3, r3, #10
 8009512:	b29a      	uxth	r2, r3
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	801a      	strh	r2, [r3, #0]
 8009518:	e02a      	b.n	8009570 <USB_EPStartXfer+0x560>
 800951a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800951c:	095b      	lsrs	r3, r3, #5
 800951e:	637b      	str	r3, [r7, #52]	; 0x34
 8009520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009522:	f003 031f 	and.w	r3, r3, #31
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <USB_EPStartXfer+0x520>
 800952a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952c:	3b01      	subs	r3, #1
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	b29b      	uxth	r3, r3
 8009534:	029b      	lsls	r3, r3, #10
 8009536:	b29b      	uxth	r3, r3
 8009538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009540:	b29a      	uxth	r2, r3
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	e013      	b.n	8009570 <USB_EPStartXfer+0x560>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10f      	bne.n	8009570 <USB_EPStartXfer+0x560>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009556:	b29b      	uxth	r3, r3
 8009558:	441c      	add	r4, r3
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	4423      	add	r3, r4
 8009562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
 8009568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800956a:	b29a      	uxth	r2, r3
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009586:	b29c      	uxth	r4, r3
 8009588:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800958c:	b29c      	uxth	r4, r3
 800958e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009592:	b29c      	uxth	r4, r3
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	441a      	add	r2, r3
 800959e:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <USB_EPStartXfer+0x5a0>)
 80095a0:	4323      	orrs	r3, r4
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3754      	adds	r7, #84	; 0x54
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd90      	pop	{r4, r7, pc}
 80095b0:	ffff8080 	.word	0xffff8080

080095b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095b4:	b490      	push	{r4, r7}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d018      	beq.n	80095f8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095dc:	b29c      	uxth	r4, r3
 80095de:	f084 0310 	eor.w	r3, r4, #16
 80095e2:	b29c      	uxth	r4, r3
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	441a      	add	r2, r3
 80095ee:	4b11      	ldr	r3, [pc, #68]	; (8009634 <USB_EPSetStall+0x80>)
 80095f0:	4323      	orrs	r3, r4
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8013      	strh	r3, [r2, #0]
 80095f6:	e017      	b.n	8009628 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	b29c      	uxth	r4, r3
 8009610:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009614:	b29c      	uxth	r4, r3
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	441a      	add	r2, r3
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <USB_EPSetStall+0x80>)
 8009622:	4323      	orrs	r3, r4
 8009624:	b29b      	uxth	r3, r3
 8009626:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bc90      	pop	{r4, r7}
 8009632:	4770      	bx	lr
 8009634:	ffff8080 	.word	0xffff8080

08009638 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009638:	b490      	push	{r4, r7}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	7b1b      	ldrb	r3, [r3, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d17d      	bne.n	8009746 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d03d      	beq.n	80096ce <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29c      	uxth	r4, r3
 8009660:	4623      	mov	r3, r4
 8009662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d014      	beq.n	8009694 <USB_EPClearStall+0x5c>
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	b29b      	uxth	r3, r3
 8009678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800967c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009680:	b29c      	uxth	r4, r3
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	441a      	add	r2, r3
 800968c:	4b31      	ldr	r3, [pc, #196]	; (8009754 <USB_EPClearStall+0x11c>)
 800968e:	4323      	orrs	r3, r4
 8009690:	b29b      	uxth	r3, r3
 8009692:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	78db      	ldrb	r3, [r3, #3]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d054      	beq.n	8009746 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b2:	b29c      	uxth	r4, r3
 80096b4:	f084 0320 	eor.w	r3, r4, #32
 80096b8:	b29c      	uxth	r4, r3
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	441a      	add	r2, r3
 80096c4:	4b24      	ldr	r3, [pc, #144]	; (8009758 <USB_EPClearStall+0x120>)
 80096c6:	4323      	orrs	r3, r4
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	8013      	strh	r3, [r2, #0]
 80096cc:	e03b      	b.n	8009746 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29c      	uxth	r4, r3
 80096dc:	4623      	mov	r3, r4
 80096de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d014      	beq.n	8009710 <USB_EPClearStall+0xd8>
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fc:	b29c      	uxth	r4, r3
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	441a      	add	r2, r3
 8009708:	4b14      	ldr	r3, [pc, #80]	; (800975c <USB_EPClearStall+0x124>)
 800970a:	4323      	orrs	r3, r4
 800970c:	b29b      	uxth	r3, r3
 800970e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009726:	b29c      	uxth	r4, r3
 8009728:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800972c:	b29c      	uxth	r4, r3
 800972e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009732:	b29c      	uxth	r4, r3
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	441a      	add	r2, r3
 800973e:	4b06      	ldr	r3, [pc, #24]	; (8009758 <USB_EPClearStall+0x120>)
 8009740:	4323      	orrs	r3, r4
 8009742:	b29b      	uxth	r3, r3
 8009744:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bc90      	pop	{r4, r7}
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	ffff80c0 	.word	0xffff80c0
 8009758:	ffff8080 	.word	0xffff8080
 800975c:	ffffc080 	.word	0xffffc080

08009760 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d103      	bne.n	800977a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2280      	movs	r2, #128	; 0x80
 8009776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009796:	b29b      	uxth	r3, r3
 8009798:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800979a:	68fb      	ldr	r3, [r7, #12]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b08d      	sub	sp, #52	; 0x34
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4611      	mov	r1, r2
 80097cc:	461a      	mov	r2, r3
 80097ce:	460b      	mov	r3, r1
 80097d0:	80fb      	strh	r3, [r7, #6]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80097d6:	88bb      	ldrh	r3, [r7, #4]
 80097d8:	3301      	adds	r3, #1
 80097da:	085b      	lsrs	r3, r3, #1
 80097dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	005a      	lsls	r2, r3, #1
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097f8:	e01e      	b.n	8009838 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	3301      	adds	r3, #1
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	b29b      	uxth	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	b29a      	uxth	r2, r3
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	3302      	adds	r3, #2
 8009824:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	3302      	adds	r3, #2
 800982a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	3301      	adds	r3, #1
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	3b01      	subs	r3, #1
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1dd      	bne.n	80097fa <USB_WritePMA+0x3a>
  }
}
 800983e:	bf00      	nop
 8009840:	3734      	adds	r7, #52	; 0x34
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800984a:	b480      	push	{r7}
 800984c:	b08b      	sub	sp, #44	; 0x2c
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	4611      	mov	r1, r2
 8009856:	461a      	mov	r2, r3
 8009858:	460b      	mov	r3, r1
 800985a:	80fb      	strh	r3, [r7, #6]
 800985c:	4613      	mov	r3, r2
 800985e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009860:	88bb      	ldrh	r3, [r7, #4]
 8009862:	085b      	lsrs	r3, r3, #1
 8009864:	b29b      	uxth	r3, r3
 8009866:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009870:	88fb      	ldrh	r3, [r7, #6]
 8009872:	005a      	lsls	r2, r3, #1
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800987c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	627b      	str	r3, [r7, #36]	; 0x24
 8009882:	e01b      	b.n	80098bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	3302      	adds	r3, #2
 8009890:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	b2da      	uxtb	r2, r3
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	3301      	adds	r3, #1
 800989e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	3301      	adds	r3, #1
 80098ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	3302      	adds	r3, #2
 80098b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	3b01      	subs	r3, #1
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e0      	bne.n	8009884 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80098c2:	88bb      	ldrh	r3, [r7, #4]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	701a      	strb	r2, [r3, #0]
  }
}
 80098de:	bf00      	nop
 80098e0:	372c      	adds	r7, #44	; 0x2c
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800990c:	2302      	movs	r3, #2
 800990e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	4611      	mov	r1, r2
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009934:	7bfb      	ldrb	r3, [r7, #15]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	4611      	mov	r1, r2
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	4798      	blx	r3

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fece 	bl	800a718 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009998:	f003 031f 	and.w	r3, r3, #31
 800999c:	2b01      	cmp	r3, #1
 800999e:	d00c      	beq.n	80099ba <USBD_LL_SetupStage+0x56>
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d302      	bcc.n	80099aa <USBD_LL_SetupStage+0x46>
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d010      	beq.n	80099ca <USBD_LL_SetupStage+0x66>
 80099a8:	e017      	b.n	80099da <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f9ce 	bl	8009d54 <USBD_StdDevReq>
      break;
 80099b8:	e01a      	b.n	80099f0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa30 	bl	8009e28 <USBD_StdItfReq>
      break;
 80099c8:	e012      	b.n	80099f0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa6e 	bl	8009eb4 <USBD_StdEPReq>
      break;
 80099d8:	e00a      	b.n	80099f0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 fa01 	bl	800adf0 <USBD_LL_StallEP>
      break;
 80099ee:	bf00      	nop
  }

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b086      	sub	sp, #24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	460b      	mov	r3, r1
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a08:	7afb      	ldrb	r3, [r7, #11]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d14b      	bne.n	8009aa6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d134      	bne.n	8009a8a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d919      	bls.n	8009a60 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	1ad2      	subs	r2, r2, r3
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d203      	bcs.n	8009a4e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	e002      	b.n	8009a54 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	461a      	mov	r2, r3
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fed9 	bl	800a810 <USBD_CtlContinueRx>
 8009a5e:	e038      	b.n	8009ad2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d105      	bne.n	8009a82 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fed6 	bl	800a834 <USBD_CtlSendStatus>
 8009a88:	e023      	b.n	8009ad2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a90:	2b05      	cmp	r3, #5
 8009a92:	d11e      	bne.n	8009ad2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f001 f9a6 	bl	800adf0 <USBD_LL_StallEP>
 8009aa4:	e015      	b.n	8009ad2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00d      	beq.n	8009ace <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d108      	bne.n	8009ace <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	7afa      	ldrb	r2, [r7, #11]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	4798      	blx	r3
 8009acc:	e001      	b.n	8009ad2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e000      	b.n	8009ad4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d17f      	bne.n	8009bf0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3314      	adds	r3, #20
 8009af4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d15c      	bne.n	8009bba <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d915      	bls.n	8009b38 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	1ad2      	subs	r2, r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	461a      	mov	r2, r3
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 fe61 	bl	800a7ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f001 fa03 	bl	800af3c <USBD_LL_PrepareReceive>
 8009b36:	e04e      	b.n	8009bd6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	6912      	ldr	r2, [r2, #16]
 8009b40:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b44:	fb02 f201 	mul.w	r2, r2, r1
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d11c      	bne.n	8009b88 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d316      	bcc.n	8009b88 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	689a      	ldr	r2, [r3, #8]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d20f      	bcs.n	8009b88 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fe3d 	bl	800a7ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2100      	movs	r1, #0
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f001 f9db 	bl	800af3c <USBD_LL_PrepareReceive>
 8009b86:	e026      	b.n	8009bd6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d105      	bne.n	8009baa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f001 f91f 	bl	800adf0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fe51 	bl	800a85a <USBD_CtlReceiveStatus>
 8009bb8:	e00d      	b.n	8009bd6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d004      	beq.n	8009bce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d103      	bne.n	8009bd6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009bce:	2180      	movs	r1, #128	; 0x80
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f001 f90d 	bl	800adf0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d11d      	bne.n	8009c1c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff fe82 	bl	80098ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009bee:	e015      	b.n	8009c1c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00d      	beq.n	8009c18 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d108      	bne.n	8009c18 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	7afa      	ldrb	r2, [r7, #11]
 8009c10:	4611      	mov	r1, r2
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	4798      	blx	r3
 8009c16:	e001      	b.n	8009c1c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e000      	b.n	8009c1e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f8b5 	bl	800ada4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2240      	movs	r2, #64	; 0x40
 8009c46:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c4a:	2340      	movs	r3, #64	; 0x40
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2180      	movs	r1, #128	; 0x80
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f8a7 	bl	800ada4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2240      	movs	r2, #64	; 0x40
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6852      	ldr	r2, [r2, #4]
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	4611      	mov	r1, r2
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	4798      	blx	r3
  }

  return USBD_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	78fa      	ldrb	r2, [r7, #3]
 8009cb8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2204      	movs	r2, #4
 8009ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	d105      	bne.n	8009d10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d10b      	bne.n	8009d48 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	d004      	beq.n	8009d78 <USBD_StdDevReq+0x24>
 8009d6e:	2b40      	cmp	r3, #64	; 0x40
 8009d70:	d002      	beq.n	8009d78 <USBD_StdDevReq+0x24>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d008      	beq.n	8009d88 <USBD_StdDevReq+0x34>
 8009d76:	e04c      	b.n	8009e12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
      break;
 8009d86:	e049      	b.n	8009e1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	d83a      	bhi.n	8009e06 <USBD_StdDevReq+0xb2>
 8009d90:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <USBD_StdDevReq+0x44>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009de9 	.word	0x08009de9
 8009d9c:	08009dfd 	.word	0x08009dfd
 8009da0:	08009e07 	.word	0x08009e07
 8009da4:	08009df3 	.word	0x08009df3
 8009da8:	08009e07 	.word	0x08009e07
 8009dac:	08009dcb 	.word	0x08009dcb
 8009db0:	08009dc1 	.word	0x08009dc1
 8009db4:	08009e07 	.word	0x08009e07
 8009db8:	08009ddf 	.word	0x08009ddf
 8009dbc:	08009dd5 	.word	0x08009dd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9d4 	bl	800a170 <USBD_GetDescriptor>
          break;
 8009dc8:	e022      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb37 	bl	800a440 <USBD_SetAddress>
          break;
 8009dd2:	e01d      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fb74 	bl	800a4c4 <USBD_SetConfig>
          break;
 8009ddc:	e018      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fbfd 	bl	800a5e0 <USBD_GetConfig>
          break;
 8009de6:	e013      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fc2c 	bl	800a648 <USBD_GetStatus>
          break;
 8009df0:	e00e      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fc5a 	bl	800a6ae <USBD_SetFeature>
          break;
 8009dfa:	e009      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fc69 	bl	800a6d6 <USBD_ClrFeature>
          break;
 8009e04:	e004      	b.n	8009e10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fcc2 	bl	800a792 <USBD_CtlError>
          break;
 8009e0e:	bf00      	nop
      }
      break;
 8009e10:	e004      	b.n	8009e1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fcbc 	bl	800a792 <USBD_CtlError>
      break;
 8009e1a:	bf00      	nop
  }

  return ret;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop

08009e28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d003      	beq.n	8009e4a <USBD_StdItfReq+0x22>
 8009e42:	2b40      	cmp	r3, #64	; 0x40
 8009e44:	d001      	beq.n	8009e4a <USBD_StdItfReq+0x22>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d12a      	bne.n	8009ea0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e50:	3b01      	subs	r3, #1
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d81d      	bhi.n	8009e92 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	889b      	ldrh	r3, [r3, #4]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d813      	bhi.n	8009e88 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	4798      	blx	r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	88db      	ldrh	r3, [r3, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d110      	bne.n	8009e9c <USBD_StdItfReq+0x74>
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10d      	bne.n	8009e9c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fcd7 	bl	800a834 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e86:	e009      	b.n	8009e9c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fc81 	bl	800a792 <USBD_CtlError>
          break;
 8009e90:	e004      	b.n	8009e9c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fc7c 	bl	800a792 <USBD_CtlError>
          break;
 8009e9a:	e000      	b.n	8009e9e <USBD_StdItfReq+0x76>
          break;
 8009e9c:	bf00      	nop
      }
      break;
 8009e9e:	e004      	b.n	8009eaa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fc75 	bl	800a792 <USBD_CtlError>
      break;
 8009ea8:	bf00      	nop
  }

  return USBD_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	889b      	ldrh	r3, [r3, #4]
 8009ec6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d004      	beq.n	8009ede <USBD_StdEPReq+0x2a>
 8009ed4:	2b40      	cmp	r3, #64	; 0x40
 8009ed6:	d002      	beq.n	8009ede <USBD_StdEPReq+0x2a>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d008      	beq.n	8009eee <USBD_StdEPReq+0x3a>
 8009edc:	e13d      	b.n	800a15a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
      break;
 8009eec:	e13a      	b.n	800a164 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	d10a      	bne.n	8009f10 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	4798      	blx	r3
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	e12a      	b.n	800a166 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d03e      	beq.n	8009f96 <USBD_StdEPReq+0xe2>
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d002      	beq.n	8009f22 <USBD_StdEPReq+0x6e>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d070      	beq.n	800a002 <USBD_StdEPReq+0x14e>
 8009f20:	e115      	b.n	800a14e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d002      	beq.n	8009f32 <USBD_StdEPReq+0x7e>
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d015      	beq.n	8009f5c <USBD_StdEPReq+0xa8>
 8009f30:	e02b      	b.n	8009f8a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00c      	beq.n	8009f52 <USBD_StdEPReq+0x9e>
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b80      	cmp	r3, #128	; 0x80
 8009f3c:	d009      	beq.n	8009f52 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 ff54 	bl	800adf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f48:	2180      	movs	r1, #128	; 0x80
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 ff50 	bl	800adf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f50:	e020      	b.n	8009f94 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fc1c 	bl	800a792 <USBD_CtlError>
              break;
 8009f5a:	e01b      	b.n	8009f94 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	885b      	ldrh	r3, [r3, #2]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10e      	bne.n	8009f82 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <USBD_StdEPReq+0xce>
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b80      	cmp	r3, #128	; 0x80
 8009f6e:	d008      	beq.n	8009f82 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	88db      	ldrh	r3, [r3, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d104      	bne.n	8009f82 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 ff37 	bl	800adf0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fc56 	bl	800a834 <USBD_CtlSendStatus>

              break;
 8009f88:	e004      	b.n	8009f94 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fc00 	bl	800a792 <USBD_CtlError>
              break;
 8009f92:	bf00      	nop
          }
          break;
 8009f94:	e0e0      	b.n	800a158 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d002      	beq.n	8009fa6 <USBD_StdEPReq+0xf2>
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d015      	beq.n	8009fd0 <USBD_StdEPReq+0x11c>
 8009fa4:	e026      	b.n	8009ff4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00c      	beq.n	8009fc6 <USBD_StdEPReq+0x112>
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	2b80      	cmp	r3, #128	; 0x80
 8009fb0:	d009      	beq.n	8009fc6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 ff1a 	bl	800adf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fbc:	2180      	movs	r1, #128	; 0x80
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 ff16 	bl	800adf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fc4:	e01c      	b.n	800a000 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fbe2 	bl	800a792 <USBD_CtlError>
              break;
 8009fce:	e017      	b.n	800a000 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	885b      	ldrh	r3, [r3, #2]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d112      	bne.n	8009ffe <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 ff21 	bl	800ae2e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fc21 	bl	800a834 <USBD_CtlSendStatus>
              }
              break;
 8009ff2:	e004      	b.n	8009ffe <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fbcb 	bl	800a792 <USBD_CtlError>
              break;
 8009ffc:	e000      	b.n	800a000 <USBD_StdEPReq+0x14c>
              break;
 8009ffe:	bf00      	nop
          }
          break;
 800a000:	e0aa      	b.n	800a158 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d002      	beq.n	800a012 <USBD_StdEPReq+0x15e>
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d032      	beq.n	800a076 <USBD_StdEPReq+0x1c2>
 800a010:	e097      	b.n	800a142 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <USBD_StdEPReq+0x174>
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	2b80      	cmp	r3, #128	; 0x80
 800a01c:	d004      	beq.n	800a028 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fbb6 	bl	800a792 <USBD_CtlError>
                break;
 800a026:	e091      	b.n	800a14c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	da0b      	bge.n	800a048 <USBD_StdEPReq+0x194>
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	3310      	adds	r3, #16
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4413      	add	r3, r2
 800a044:	3304      	adds	r3, #4
 800a046:	e00b      	b.n	800a060 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4413      	add	r3, r2
 800a05e:	3304      	adds	r3, #4
 800a060:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2202      	movs	r2, #2
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fba0 	bl	800a7b4 <USBD_CtlSendData>
              break;
 800a074:	e06a      	b.n	800a14c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	da11      	bge.n	800a0a2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	f003 020f 	and.w	r2, r3, #15
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	440b      	add	r3, r1
 800a090:	3318      	adds	r3, #24
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d117      	bne.n	800a0c8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fb79 	bl	800a792 <USBD_CtlError>
                  break;
 800a0a0:	e054      	b.n	800a14c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	f003 020f 	and.w	r2, r3, #15
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d104      	bne.n	800a0c8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fb66 	bl	800a792 <USBD_CtlError>
                  break;
 800a0c6:	e041      	b.n	800a14c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	da0b      	bge.n	800a0e8 <USBD_StdEPReq+0x234>
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	3310      	adds	r3, #16
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	e00b      	b.n	800a100 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3304      	adds	r3, #4
 800a100:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <USBD_StdEPReq+0x25a>
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b80      	cmp	r3, #128	; 0x80
 800a10c:	d103      	bne.n	800a116 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e00e      	b.n	800a134 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fea6 	bl	800ae6c <USBD_LL_IsStallEP>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	e002      	b.n	800a134 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2202      	movs	r2, #2
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fb3a 	bl	800a7b4 <USBD_CtlSendData>
              break;
 800a140:	e004      	b.n	800a14c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fb24 	bl	800a792 <USBD_CtlError>
              break;
 800a14a:	bf00      	nop
          }
          break;
 800a14c:	e004      	b.n	800a158 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fb1e 	bl	800a792 <USBD_CtlError>
          break;
 800a156:	bf00      	nop
      }
      break;
 800a158:	e004      	b.n	800a164 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fb18 	bl	800a792 <USBD_CtlError>
      break;
 800a162:	bf00      	nop
  }

  return ret;
 800a164:	7bfb      	ldrb	r3, [r7, #15]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	885b      	ldrh	r3, [r3, #2]
 800a18a:	0a1b      	lsrs	r3, r3, #8
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	3b01      	subs	r3, #1
 800a190:	2b06      	cmp	r3, #6
 800a192:	f200 8128 	bhi.w	800a3e6 <USBD_GetDescriptor+0x276>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <USBD_GetDescriptor+0x2c>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1b9 	.word	0x0800a1b9
 800a1a0:	0800a1d1 	.word	0x0800a1d1
 800a1a4:	0800a211 	.word	0x0800a211
 800a1a8:	0800a3e7 	.word	0x0800a3e7
 800a1ac:	0800a3e7 	.word	0x0800a3e7
 800a1b0:	0800a387 	.word	0x0800a387
 800a1b4:	0800a3b3 	.word	0x0800a3b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7c12      	ldrb	r2, [r2, #16]
 800a1c4:	f107 0108 	add.w	r1, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
      break;
 800a1ce:	e112      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7c1b      	ldrb	r3, [r3, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10d      	bne.n	800a1f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	f107 0208 	add.w	r2, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1f2:	e100      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	f107 0208 	add.w	r2, r7, #8
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3301      	adds	r3, #1
 800a20a:	2202      	movs	r2, #2
 800a20c:	701a      	strb	r2, [r3, #0]
      break;
 800a20e:	e0f2      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	885b      	ldrh	r3, [r3, #2]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b05      	cmp	r3, #5
 800a218:	f200 80ac 	bhi.w	800a374 <USBD_GetDescriptor+0x204>
 800a21c:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <USBD_GetDescriptor+0xb4>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a23d 	.word	0x0800a23d
 800a228:	0800a271 	.word	0x0800a271
 800a22c:	0800a2a5 	.word	0x0800a2a5
 800a230:	0800a2d9 	.word	0x0800a2d9
 800a234:	0800a30d 	.word	0x0800a30d
 800a238:	0800a341 	.word	0x0800a341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7c12      	ldrb	r2, [r2, #16]
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a25e:	e091      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa95 	bl	800a792 <USBD_CtlError>
            err++;
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	3301      	adds	r3, #1
 800a26c:	72fb      	strb	r3, [r7, #11]
          break;
 800a26e:	e089      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7c12      	ldrb	r2, [r2, #16]
 800a288:	f107 0108 	add.w	r1, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a292:	e077      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa7b 	bl	800a792 <USBD_CtlError>
            err++;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a2:	e06f      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	7c12      	ldrb	r2, [r2, #16]
 800a2bc:	f107 0108 	add.w	r1, r7, #8
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
 800a2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2c6:	e05d      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa61 	bl	800a792 <USBD_CtlError>
            err++;
 800a2d0:	7afb      	ldrb	r3, [r7, #11]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2d6:	e055      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	7c12      	ldrb	r2, [r2, #16]
 800a2f0:	f107 0108 	add.w	r1, r7, #8
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4798      	blx	r3
 800a2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fa:	e043      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa47 	bl	800a792 <USBD_CtlError>
            err++;
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	3301      	adds	r3, #1
 800a308:	72fb      	strb	r3, [r7, #11]
          break;
 800a30a:	e03b      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7c12      	ldrb	r2, [r2, #16]
 800a324:	f107 0108 	add.w	r1, r7, #8
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a32e:	e029      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa2d 	bl	800a792 <USBD_CtlError>
            err++;
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	3301      	adds	r3, #1
 800a33c:	72fb      	strb	r3, [r7, #11]
          break;
 800a33e:	e021      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	7c12      	ldrb	r2, [r2, #16]
 800a358:	f107 0108 	add.w	r1, r7, #8
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a362:	e00f      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa13 	bl	800a792 <USBD_CtlError>
            err++;
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	3301      	adds	r3, #1
 800a370:	72fb      	strb	r3, [r7, #11]
          break;
 800a372:	e007      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa0b 	bl	800a792 <USBD_CtlError>
          err++;
 800a37c:	7afb      	ldrb	r3, [r7, #11]
 800a37e:	3301      	adds	r3, #1
 800a380:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a382:	e038      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
 800a384:	e037      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	7c1b      	ldrb	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a396:	f107 0208 	add.w	r2, r7, #8
 800a39a:	4610      	mov	r0, r2
 800a39c:	4798      	blx	r3
 800a39e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3a0:	e029      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f9f4 	bl	800a792 <USBD_CtlError>
        err++;
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b0:	e021      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	7c1b      	ldrb	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10d      	bne.n	800a3d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	f107 0208 	add.w	r2, r7, #8
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	4798      	blx	r3
 800a3ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3d4:	e00f      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f9da 	bl	800a792 <USBD_CtlError>
        err++;
 800a3de:	7afb      	ldrb	r3, [r7, #11]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3e4:	e007      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9d2 	bl	800a792 <USBD_CtlError>
      err++;
 800a3ee:	7afb      	ldrb	r3, [r7, #11]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f4:	bf00      	nop
  }

  if (err != 0U)
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d11c      	bne.n	800a436 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a3fc:	893b      	ldrh	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d011      	beq.n	800a426 <USBD_GetDescriptor+0x2b6>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	88db      	ldrh	r3, [r3, #6]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00d      	beq.n	800a426 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	88da      	ldrh	r2, [r3, #6]
 800a40e:	893b      	ldrh	r3, [r7, #8]
 800a410:	4293      	cmp	r3, r2
 800a412:	bf28      	it	cs
 800a414:	4613      	movcs	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	461a      	mov	r2, r3
 800a41e:	68f9      	ldr	r1, [r7, #12]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f9c7 	bl	800a7b4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	88db      	ldrh	r3, [r3, #6]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa00 	bl	800a834 <USBD_CtlSendStatus>
 800a434:	e000      	b.n	800a438 <USBD_GetDescriptor+0x2c8>
    return;
 800a436:	bf00      	nop
    }
  }
}
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop

0800a440 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	889b      	ldrh	r3, [r3, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d130      	bne.n	800a4b4 <USBD_SetAddress+0x74>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	88db      	ldrh	r3, [r3, #6]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d12c      	bne.n	800a4b4 <USBD_SetAddress+0x74>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	885b      	ldrh	r3, [r3, #2]
 800a45e:	2b7f      	cmp	r3, #127	; 0x7f
 800a460:	d828      	bhi.n	800a4b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	885b      	ldrh	r3, [r3, #2]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	2b03      	cmp	r3, #3
 800a476:	d104      	bne.n	800a482 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f989 	bl	800a792 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a480:	e01c      	b.n	800a4bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	7bfa      	ldrb	r2, [r7, #15]
 800a486:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fd12 	bl	800aeb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f9cd 	bl	800a834 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a8:	e008      	b.n	800a4bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	e003      	b.n	800a4bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f96b 	bl	800a792 <USBD_CtlError>
  }
}
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	4b41      	ldr	r3, [pc, #260]	; (800a5dc <USBD_SetConfig+0x118>)
 800a4d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4d8:	4b40      	ldr	r3, [pc, #256]	; (800a5dc <USBD_SetConfig+0x118>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d904      	bls.n	800a4ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f955 	bl	800a792 <USBD_CtlError>
 800a4e8:	e075      	b.n	800a5d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d002      	beq.n	800a4fa <USBD_SetConfig+0x36>
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d023      	beq.n	800a540 <USBD_SetConfig+0x7c>
 800a4f8:	e062      	b.n	800a5c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a4fa:	4b38      	ldr	r3, [pc, #224]	; (800a5dc <USBD_SetConfig+0x118>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d01a      	beq.n	800a538 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a502:	4b36      	ldr	r3, [pc, #216]	; (800a5dc <USBD_SetConfig+0x118>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2203      	movs	r2, #3
 800a510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a514:	4b31      	ldr	r3, [pc, #196]	; (800a5dc <USBD_SetConfig+0x118>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff f9f0 	bl	8009900 <USBD_SetClassConfig>
 800a520:	4603      	mov	r3, r0
 800a522:	2b02      	cmp	r3, #2
 800a524:	d104      	bne.n	800a530 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f932 	bl	800a792 <USBD_CtlError>
            return;
 800a52e:	e052      	b.n	800a5d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f97f 	bl	800a834 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a536:	e04e      	b.n	800a5d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f97b 	bl	800a834 <USBD_CtlSendStatus>
        break;
 800a53e:	e04a      	b.n	800a5d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a540:	4b26      	ldr	r3, [pc, #152]	; (800a5dc <USBD_SetConfig+0x118>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d112      	bne.n	800a56e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a550:	4b22      	ldr	r3, [pc, #136]	; (800a5dc <USBD_SetConfig+0x118>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a55a:	4b20      	ldr	r3, [pc, #128]	; (800a5dc <USBD_SetConfig+0x118>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff f9ec 	bl	800993e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f964 	bl	800a834 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a56c:	e033      	b.n	800a5d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a56e:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <USBD_SetConfig+0x118>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d01d      	beq.n	800a5b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff f9da 	bl	800993e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a58a:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <USBD_SetConfig+0x118>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <USBD_SetConfig+0x118>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff f9b0 	bl	8009900 <USBD_SetClassConfig>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d104      	bne.n	800a5b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f8f2 	bl	800a792 <USBD_CtlError>
            return;
 800a5ae:	e012      	b.n	800a5d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f93f 	bl	800a834 <USBD_CtlSendStatus>
        break;
 800a5b6:	e00e      	b.n	800a5d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f93b 	bl	800a834 <USBD_CtlSendStatus>
        break;
 800a5be:	e00a      	b.n	800a5d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f8e5 	bl	800a792 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a5c8:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <USBD_SetConfig+0x118>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff f9b5 	bl	800993e <USBD_ClrClassConfig>
        break;
 800a5d4:	bf00      	nop
    }
  }
}
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20000048 	.word	0x20000048

0800a5e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	88db      	ldrh	r3, [r3, #6]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d004      	beq.n	800a5fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f8cc 	bl	800a792 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5fa:	e021      	b.n	800a640 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a602:	2b01      	cmp	r3, #1
 800a604:	db17      	blt.n	800a636 <USBD_GetConfig+0x56>
 800a606:	2b02      	cmp	r3, #2
 800a608:	dd02      	ble.n	800a610 <USBD_GetConfig+0x30>
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d00b      	beq.n	800a626 <USBD_GetConfig+0x46>
 800a60e:	e012      	b.n	800a636 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3308      	adds	r3, #8
 800a61a:	2201      	movs	r2, #1
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f8c8 	bl	800a7b4 <USBD_CtlSendData>
        break;
 800a624:	e00c      	b.n	800a640 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	3304      	adds	r3, #4
 800a62a:	2201      	movs	r2, #1
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f8c0 	bl	800a7b4 <USBD_CtlSendData>
        break;
 800a634:	e004      	b.n	800a640 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f8aa 	bl	800a792 <USBD_CtlError>
        break;
 800a63e:	bf00      	nop
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a658:	3b01      	subs	r3, #1
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d81e      	bhi.n	800a69c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	88db      	ldrh	r3, [r3, #6]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d004      	beq.n	800a670 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f892 	bl	800a792 <USBD_CtlError>
        break;
 800a66e:	e01a      	b.n	800a6a6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d005      	beq.n	800a68c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	f043 0202 	orr.w	r2, r3, #2
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	330c      	adds	r3, #12
 800a690:	2202      	movs	r2, #2
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f88d 	bl	800a7b4 <USBD_CtlSendData>
      break;
 800a69a:	e004      	b.n	800a6a6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f877 	bl	800a792 <USBD_CtlError>
      break;
 800a6a4:	bf00      	nop
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	885b      	ldrh	r3, [r3, #2]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d106      	bne.n	800a6ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f8b3 	bl	800a834 <USBD_CtlSendStatus>
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d80b      	bhi.n	800a704 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	885b      	ldrh	r3, [r3, #2]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d10c      	bne.n	800a70e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f899 	bl	800a834 <USBD_CtlSendStatus>
      }
      break;
 800a702:	e004      	b.n	800a70e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f843 	bl	800a792 <USBD_CtlError>
      break;
 800a70c:	e000      	b.n	800a710 <USBD_ClrFeature+0x3a>
      break;
 800a70e:	bf00      	nop
  }
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	785a      	ldrb	r2, [r3, #1]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	3302      	adds	r3, #2
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	b29a      	uxth	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	3303      	adds	r3, #3
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	021b      	lsls	r3, r3, #8
 800a744:	b29b      	uxth	r3, r3
 800a746:	4413      	add	r3, r2
 800a748:	b29a      	uxth	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	3304      	adds	r3, #4
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	b29a      	uxth	r2, r3
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	3305      	adds	r3, #5
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	b29b      	uxth	r3, r3
 800a762:	4413      	add	r3, r2
 800a764:	b29a      	uxth	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	3306      	adds	r3, #6
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	b29a      	uxth	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	3307      	adds	r3, #7
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	021b      	lsls	r3, r3, #8
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	4413      	add	r3, r2
 800a780:	b29a      	uxth	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	80da      	strh	r2, [r3, #6]

}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a79c:	2180      	movs	r1, #128	; 0x80
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fb26 	bl	800adf0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fb22 	bl	800adf0 <USBD_LL_StallEP>
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a7d0:	88fa      	ldrh	r2, [r7, #6]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7d6:	88fb      	ldrh	r3, [r7, #6]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	2100      	movs	r1, #0
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 fb8a 	bl	800aef6 <USBD_LL_Transmit>

  return USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	2100      	movs	r1, #0
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fb78 	bl	800aef6 <USBD_LL_Transmit>

  return USBD_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a81e:	88fb      	ldrh	r3, [r7, #6]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	2100      	movs	r1, #0
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 fb89 	bl	800af3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2204      	movs	r2, #4
 800a840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a844:	2300      	movs	r3, #0
 800a846:	2200      	movs	r2, #0
 800a848:	2100      	movs	r1, #0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fb53 	bl	800aef6 <USBD_LL_Transmit>

  return USBD_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2205      	movs	r2, #5
 800a866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a86a:	2300      	movs	r3, #0
 800a86c:	2200      	movs	r2, #0
 800a86e:	2100      	movs	r1, #0
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fb63 	bl	800af3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	1c5a      	adds	r2, r3, #1
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	6892      	ldr	r2, [r2, #8]
 800a8de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6852      	ldr	r2, [r2, #4]
 800a8e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d103      	bne.n	800a8fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	1e5a      	subs	r2, r3, #1
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a926:	4b51      	ldr	r3, [pc, #324]	; (800aa6c <xTaskIncrementTick+0x150>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f040 808d 	bne.w	800aa4a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a930:	4b4f      	ldr	r3, [pc, #316]	; (800aa70 <xTaskIncrementTick+0x154>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a938:	4a4d      	ldr	r2, [pc, #308]	; (800aa70 <xTaskIncrementTick+0x154>)
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11f      	bne.n	800a984 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a944:	4b4b      	ldr	r3, [pc, #300]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	e7fe      	b.n	800a960 <xTaskIncrementTick+0x44>
 800a962:	4b44      	ldr	r3, [pc, #272]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	4b43      	ldr	r3, [pc, #268]	; (800aa78 <xTaskIncrementTick+0x15c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a41      	ldr	r2, [pc, #260]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	4a41      	ldr	r2, [pc, #260]	; (800aa78 <xTaskIncrementTick+0x15c>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	4b41      	ldr	r3, [pc, #260]	; (800aa7c <xTaskIncrementTick+0x160>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3301      	adds	r3, #1
 800a97c:	4a3f      	ldr	r2, [pc, #252]	; (800aa7c <xTaskIncrementTick+0x160>)
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	f000 f8e6 	bl	800ab50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a984:	4b3e      	ldr	r3, [pc, #248]	; (800aa80 <xTaskIncrementTick+0x164>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d34e      	bcc.n	800aa2c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a98e:	4b39      	ldr	r3, [pc, #228]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <xTaskIncrementTick+0x80>
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <xTaskIncrementTick+0x82>
 800a99c:	2300      	movs	r3, #0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a2:	4b37      	ldr	r3, [pc, #220]	; (800aa80 <xTaskIncrementTick+0x164>)
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a8:	601a      	str	r2, [r3, #0]
					break;
 800a9aa:	e03f      	b.n	800aa2c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a9ac:	4b31      	ldr	r3, [pc, #196]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d203      	bcs.n	800a9cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9c4:	4a2e      	ldr	r2, [pc, #184]	; (800aa80 <xTaskIncrementTick+0x164>)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6013      	str	r3, [r2, #0]
						break;
 800a9ca:	e02f      	b.n	800aa2c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff ff79 	bl	800a8c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d004      	beq.n	800a9e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	3318      	adds	r3, #24
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7ff ff70 	bl	800a8c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ec:	4b25      	ldr	r3, [pc, #148]	; (800aa84 <xTaskIncrementTick+0x168>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d903      	bls.n	800a9fc <xTaskIncrementTick+0xe0>
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	4a22      	ldr	r2, [pc, #136]	; (800aa84 <xTaskIncrementTick+0x168>)
 800a9fa:	6013      	str	r3, [r2, #0]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4a1f      	ldr	r2, [pc, #124]	; (800aa88 <xTaskIncrementTick+0x16c>)
 800aa0a:	441a      	add	r2, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f7ff ff34 	bl	800a880 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1c:	4b1b      	ldr	r3, [pc, #108]	; (800aa8c <xTaskIncrementTick+0x170>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d3b3      	bcc.n	800a98e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800aa26:	2301      	movs	r3, #1
 800aa28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa2a:	e7b0      	b.n	800a98e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa2c:	4b17      	ldr	r3, [pc, #92]	; (800aa8c <xTaskIncrementTick+0x170>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa32:	4915      	ldr	r1, [pc, #84]	; (800aa88 <xTaskIncrementTick+0x16c>)
 800aa34:	4613      	mov	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d907      	bls.n	800aa54 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800aa44:	2301      	movs	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e004      	b.n	800aa54 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa4a:	4b11      	ldr	r3, [pc, #68]	; (800aa90 <xTaskIncrementTick+0x174>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	4a0f      	ldr	r2, [pc, #60]	; (800aa90 <xTaskIncrementTick+0x174>)
 800aa52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa54:	4b0f      	ldr	r3, [pc, #60]	; (800aa94 <xTaskIncrementTick+0x178>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa60:	697b      	ldr	r3, [r7, #20]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	200004d0 	.word	0x200004d0
 800aa70:	200004b8 	.word	0x200004b8
 800aa74:	200004b0 	.word	0x200004b0
 800aa78:	200004b4 	.word	0x200004b4
 800aa7c:	200004c8 	.word	0x200004c8
 800aa80:	200004cc 	.word	0x200004cc
 800aa84:	200004bc 	.word	0x200004bc
 800aa88:	20000050 	.word	0x20000050
 800aa8c:	2000004c 	.word	0x2000004c
 800aa90:	200004c0 	.word	0x200004c0
 800aa94:	200004c4 	.word	0x200004c4

0800aa98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa9e:	4b27      	ldr	r3, [pc, #156]	; (800ab3c <vTaskSwitchContext+0xa4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aaa6:	4b26      	ldr	r3, [pc, #152]	; (800ab40 <vTaskSwitchContext+0xa8>)
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aaac:	e040      	b.n	800ab30 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800aaae:	4b24      	ldr	r3, [pc, #144]	; (800ab40 <vTaskSwitchContext+0xa8>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800aab4:	4b23      	ldr	r3, [pc, #140]	; (800ab44 <vTaskSwitchContext+0xac>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	e00f      	b.n	800aadc <vTaskSwitchContext+0x44>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <vTaskSwitchContext+0x3e>
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	607b      	str	r3, [r7, #4]
 800aad4:	e7fe      	b.n	800aad4 <vTaskSwitchContext+0x3c>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3b01      	subs	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	491a      	ldr	r1, [pc, #104]	; (800ab48 <vTaskSwitchContext+0xb0>)
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	440b      	add	r3, r1
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0e5      	beq.n	800aabc <vTaskSwitchContext+0x24>
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4a13      	ldr	r2, [pc, #76]	; (800ab48 <vTaskSwitchContext+0xb0>)
 800aafc:	4413      	add	r3, r2
 800aafe:	60bb      	str	r3, [r7, #8]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	605a      	str	r2, [r3, #4]
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3308      	adds	r3, #8
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d104      	bne.n	800ab20 <vTaskSwitchContext+0x88>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	605a      	str	r2, [r3, #4]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <vTaskSwitchContext+0xb4>)
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	4a06      	ldr	r2, [pc, #24]	; (800ab44 <vTaskSwitchContext+0xac>)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6013      	str	r3, [r2, #0]
}
 800ab30:	bf00      	nop
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	200004d0 	.word	0x200004d0
 800ab40:	200004c4 	.word	0x200004c4
 800ab44:	200004bc 	.word	0x200004bc
 800ab48:	20000050 	.word	0x20000050
 800ab4c:	2000004c 	.word	0x2000004c

0800ab50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab56:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <prvResetNextTaskUnblockTime+0x44>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <prvResetNextTaskUnblockTime+0x14>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <prvResetNextTaskUnblockTime+0x16>
 800ab64:	2300      	movs	r3, #0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab6a:	4b0b      	ldr	r3, [pc, #44]	; (800ab98 <prvResetNextTaskUnblockTime+0x48>)
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab72:	e008      	b.n	800ab86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <prvResetNextTaskUnblockTime+0x44>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	4a05      	ldr	r2, [pc, #20]	; (800ab98 <prvResetNextTaskUnblockTime+0x48>)
 800ab84:	6013      	str	r3, [r2, #0]
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	200004b0 	.word	0x200004b0
 800ab98:	200004cc 	.word	0x200004cc
 800ab9c:	00000000 	.word	0x00000000

0800aba0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <pxCurrentTCBConst2>)
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	6808      	ldr	r0, [r1, #0]
 800aba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abaa:	f380 8809 	msr	PSP, r0
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8811 	msr	BASEPRI, r0
 800abba:	4770      	bx	lr
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst2>:
 800abc0:	2000004c 	.word	0x2000004c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop
	...

0800abd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abd0:	f3ef 8009 	mrs	r0, PSP
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <pxCurrentTCBConst>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	f01e 0f10 	tst.w	lr, #16
 800abe0:	bf08      	it	eq
 800abe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abea:	6010      	str	r0, [r2, #0]
 800abec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abf4:	f380 8811 	msr	BASEPRI, r0
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f7ff ff4a 	bl	800aa98 <vTaskSwitchContext>
 800ac04:	f04f 0000 	mov.w	r0, #0
 800ac08:	f380 8811 	msr	BASEPRI, r0
 800ac0c:	bc09      	pop	{r0, r3}
 800ac0e:	6819      	ldr	r1, [r3, #0]
 800ac10:	6808      	ldr	r0, [r1, #0]
 800ac12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac16:	f01e 0f10 	tst.w	lr, #16
 800ac1a:	bf08      	it	eq
 800ac1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac20:	f380 8809 	msr	PSP, r0
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	f3af 8000 	nop.w

0800ac30 <pxCurrentTCBConst>:
 800ac30:	2000004c 	.word	0x2000004c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop

0800ac38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac50:	f7ff fe64 	bl	800a91c <xTaskIncrementTick>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac5a:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <SysTick_Handler+0x3c>)
 800ac5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f7fe fe68 	bl	8009964 <USBD_LL_SetupStage>
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800acae:	78fb      	ldrb	r3, [r7, #3]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	015b      	lsls	r3, r3, #5
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f7fe fe9b 	bl	80099fa <USBD_LL_DataOutStage>
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	015b      	lsls	r3, r3, #5
 800ace4:	4413      	add	r3, r2
 800ace6:	333c      	adds	r3, #60	; 0x3c
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	4619      	mov	r1, r3
 800acee:	f7fe fef5 	bl	8009adc <USBD_LL_DataInStage>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7ff f808 	bl	8009d1e <USBD_LL_SOF>
}
 800ad0e:	bf00      	nop
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d001      	beq.n	800ad2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad2a:	f7f6 fc5f 	bl	80015ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ad34:	7bfa      	ldrb	r2, [r7, #15]
 800ad36:	4611      	mov	r1, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe ffb5 	bl	8009ca8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fe ff6e 	bl	8009c26 <USBD_LL_Reset>
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe ffb0 	bl	8009cc8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad70:	4b04      	ldr	r3, [pc, #16]	; (800ad84 <HAL_PCD_SuspendCallback+0x30>)
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	4a03      	ldr	r2, [pc, #12]	; (800ad84 <HAL_PCD_SuspendCallback+0x30>)
 800ad76:	f043 0306 	orr.w	r3, r3, #6
 800ad7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	e000ed00 	.word	0xe000ed00

0800ad88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe ffab 	bl	8009cf2 <USBD_LL_Resume>
}
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	461a      	mov	r2, r3
 800adb2:	4603      	mov	r3, r0
 800adb4:	70fb      	strb	r3, [r7, #3]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70bb      	strb	r3, [r7, #2]
 800adba:	4613      	mov	r3, r2
 800adbc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adcc:	78bb      	ldrb	r3, [r7, #2]
 800adce:	883a      	ldrh	r2, [r7, #0]
 800add0:	78f9      	ldrb	r1, [r7, #3]
 800add2:	f7f9 fef1 	bl	8004bb8 <HAL_PCD_EP_Open>
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	4618      	mov	r0, r3
 800adde:	f000 f8d1 	bl	800af84 <USBD_Get_USB_Status>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f9 ffa5 	bl	8004d5e <HAL_PCD_EP_SetStall>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 f8b2 	bl	800af84 <USBD_Get_USB_Status>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae48:	78fa      	ldrb	r2, [r7, #3]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7f9 ffe0 	bl	8004e12 <HAL_PCD_EP_ClrStall>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f893 	bl	800af84 <USBD_Get_USB_Status>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da08      	bge.n	800ae9a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	015b      	lsls	r3, r3, #5
 800ae92:	4413      	add	r3, r2
 800ae94:	332a      	adds	r3, #42	; 0x2a
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	e008      	b.n	800aeac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	015b      	lsls	r3, r3, #5
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800aeaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f9 fe49 	bl	8004b6e <HAL_PCD_SetAddress>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 f84e 	bl	800af84 <USBD_Get_USB_Status>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	461a      	mov	r2, r3
 800af02:	460b      	mov	r3, r1
 800af04:	72fb      	strb	r3, [r7, #11]
 800af06:	4613      	mov	r3, r2
 800af08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af18:	893b      	ldrh	r3, [r7, #8]
 800af1a:	7af9      	ldrb	r1, [r7, #11]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	f7f9 fee5 	bl	8004cec <HAL_PCD_EP_Transmit>
 800af22:	4603      	mov	r3, r0
 800af24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 f82b 	bl	800af84 <USBD_Get_USB_Status>
 800af2e:	4603      	mov	r3, r0
 800af30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af32:	7dbb      	ldrb	r3, [r7, #22]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	607a      	str	r2, [r7, #4]
 800af46:	461a      	mov	r2, r3
 800af48:	460b      	mov	r3, r1
 800af4a:	72fb      	strb	r3, [r7, #11]
 800af4c:	4613      	mov	r3, r2
 800af4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af5e:	893b      	ldrh	r3, [r7, #8]
 800af60:	7af9      	ldrb	r1, [r7, #11]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	f7f9 fe88 	bl	8004c78 <HAL_PCD_EP_Receive>
 800af68:	4603      	mov	r3, r0
 800af6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 f808 	bl	800af84 <USBD_Get_USB_Status>
 800af74:	4603      	mov	r3, r0
 800af76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af78:	7dbb      	ldrb	r3, [r7, #22]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d817      	bhi.n	800afc8 <USBD_Get_USB_Status+0x44>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <USBD_Get_USB_Status+0x1c>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800afb1 	.word	0x0800afb1
 800afa4:	0800afb7 	.word	0x0800afb7
 800afa8:	0800afbd 	.word	0x0800afbd
 800afac:	0800afc3 	.word	0x0800afc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
    break;
 800afb4:	e00b      	b.n	800afce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afb6:	2302      	movs	r3, #2
 800afb8:	73fb      	strb	r3, [r7, #15]
    break;
 800afba:	e008      	b.n	800afce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afbc:	2301      	movs	r3, #1
 800afbe:	73fb      	strb	r3, [r7, #15]
    break;
 800afc0:	e005      	b.n	800afce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afc2:	2302      	movs	r3, #2
 800afc4:	73fb      	strb	r3, [r7, #15]
    break;
 800afc6:	e002      	b.n	800afce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afc8:	2302      	movs	r3, #2
 800afca:	73fb      	strb	r3, [r7, #15]
    break;
 800afcc:	bf00      	nop
  }
  return usb_status;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <__libc_init_array>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4e0d      	ldr	r6, [pc, #52]	; (800b014 <__libc_init_array+0x38>)
 800afe0:	4c0d      	ldr	r4, [pc, #52]	; (800b018 <__libc_init_array+0x3c>)
 800afe2:	1ba4      	subs	r4, r4, r6
 800afe4:	10a4      	asrs	r4, r4, #2
 800afe6:	2500      	movs	r5, #0
 800afe8:	42a5      	cmp	r5, r4
 800afea:	d109      	bne.n	800b000 <__libc_init_array+0x24>
 800afec:	4e0b      	ldr	r6, [pc, #44]	; (800b01c <__libc_init_array+0x40>)
 800afee:	4c0c      	ldr	r4, [pc, #48]	; (800b020 <__libc_init_array+0x44>)
 800aff0:	f000 f820 	bl	800b034 <_init>
 800aff4:	1ba4      	subs	r4, r4, r6
 800aff6:	10a4      	asrs	r4, r4, #2
 800aff8:	2500      	movs	r5, #0
 800affa:	42a5      	cmp	r5, r4
 800affc:	d105      	bne.n	800b00a <__libc_init_array+0x2e>
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b004:	4798      	blx	r3
 800b006:	3501      	adds	r5, #1
 800b008:	e7ee      	b.n	800afe8 <__libc_init_array+0xc>
 800b00a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b00e:	4798      	blx	r3
 800b010:	3501      	adds	r5, #1
 800b012:	e7f2      	b.n	800affa <__libc_init_array+0x1e>
 800b014:	0800b084 	.word	0x0800b084
 800b018:	0800b084 	.word	0x0800b084
 800b01c:	0800b084 	.word	0x0800b084
 800b020:	0800b088 	.word	0x0800b088

0800b024 <memset>:
 800b024:	4402      	add	r2, r0
 800b026:	4603      	mov	r3, r0
 800b028:	4293      	cmp	r3, r2
 800b02a:	d100      	bne.n	800b02e <memset+0xa>
 800b02c:	4770      	bx	lr
 800b02e:	f803 1b01 	strb.w	r1, [r3], #1
 800b032:	e7f9      	b.n	800b028 <memset+0x4>

0800b034 <_init>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	bf00      	nop
 800b038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03a:	bc08      	pop	{r3}
 800b03c:	469e      	mov	lr, r3
 800b03e:	4770      	bx	lr

0800b040 <_fini>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr
