
MESC_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d55c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800d6ec  0800d6ec  0001d6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d84c  0800d84c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800d84c  0800d84c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d84c  0800d84c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d84c  0800d84c  0001d84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800d854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003094  20000180  0800d9d4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003214  0800d9d4  00023214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cc83  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054d0  00000000  00000000  0004ce33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002118  00000000  00000000  00052308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001eb0  00000000  00000000  00054420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007f7b  00000000  00000000  000562d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ec55  00000000  00000000  0005e24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bcd5c  00000000  00000000  0007cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139bfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b44  00000000  00000000  00139c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6d4 	.word	0x0800d6d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000184 	.word	0x20000184
 80001cc:	0800d6d4 	.word	0x0800d6d4

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f001 fc56 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f860 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fe12 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 fdb6 	bl	8000d50 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e4:	f000 f8c4 	bl	8000370 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e8:	f000 f950 	bl	800048c <MX_ADC2_Init>
  MX_ADC3_Init();
 80001ec:	f000 f9ca 	bl	8000584 <MX_ADC3_Init>
  MX_COMP1_Init();
 80001f0:	f000 fa3a 	bl	8000668 <MX_COMP1_Init>
  MX_COMP2_Init();
 80001f4:	f000 fa68 	bl	80006c8 <MX_COMP2_Init>
  MX_COMP4_Init();
 80001f8:	f000 fa96 	bl	8000728 <MX_COMP4_Init>
  MX_COMP7_Init();
 80001fc:	f000 fac4 	bl	8000788 <MX_COMP7_Init>
  MX_I2C1_Init();
 8000200:	f000 faf2 	bl	80007e8 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8000204:	f000 fb2e 	bl	8000864 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000208:	f000 fb52 	bl	80008b0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800020c:	f000 fb76 	bl	80008fc <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000210:	f000 fb9a 	bl	8000948 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000214:	f000 fc50 	bl	8000ab8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000218:	f000 fcd4 	bl	8000bc4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800021c:	f000 fd68 	bl	8000cf0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000220:	f00a f888 	bl	800a334 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <main+0x9c>)
 8000226:	2100      	movs	r1, #0
 8000228:	4811      	ldr	r0, [pc, #68]	; (8000270 <main+0xa0>)
 800022a:	f00a f8eb 	bl	800a404 <osThreadNew>
 800022e:	4602      	mov	r2, r0
 8000230:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0xa4>)
 8000232:	601a      	str	r2, [r3, #0]

  /* creation of SlowLoopTask */
  SlowLoopTaskHandle = osThreadNew(SlowLoopEntry, NULL, &SlowLoopTask_attributes);
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <main+0xa8>)
 8000236:	2100      	movs	r1, #0
 8000238:	4810      	ldr	r0, [pc, #64]	; (800027c <main+0xac>)
 800023a:	f00a f8e3 	bl	800a404 <osThreadNew>
 800023e:	4602      	mov	r2, r0
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0xb0>)
 8000242:	601a      	str	r2, [r3, #0]

  /* creation of ComsTask */
  ComsTaskHandle = osThreadNew(ComsTaskEntry, NULL, &ComsTask_attributes);
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0xb4>)
 8000246:	2100      	movs	r1, #0
 8000248:	480f      	ldr	r0, [pc, #60]	; (8000288 <main+0xb8>)
 800024a:	f00a f8db 	bl	800a404 <osThreadNew>
 800024e:	4602      	mov	r2, r0
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <main+0xbc>)
 8000252:	601a      	str	r2, [r3, #0]

  /* creation of BatCheckTask */
  BatCheckTaskHandle = osThreadNew(BatCheck, NULL, &BatCheckTask_attributes);
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <main+0xc0>)
 8000256:	2100      	movs	r1, #0
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0xc4>)
 800025a:	f00a f8d3 	bl	800a404 <osThreadNew>
 800025e:	4602      	mov	r2, r0
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <main+0xc8>)
 8000262:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000264:	f00a f89a 	bl	800a39c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000268:	e7fe      	b.n	8000268 <main+0x98>
 800026a:	bf00      	nop
 800026c:	0800d784 	.word	0x0800d784
 8000270:	08000e65 	.word	0x08000e65
 8000274:	20001ccc 	.word	0x20001ccc
 8000278:	0800d7a8 	.word	0x0800d7a8
 800027c:	08000e79 	.word	0x08000e79
 8000280:	200021d4 	.word	0x200021d4
 8000284:	0800d7cc 	.word	0x0800d7cc
 8000288:	08000e89 	.word	0x08000e89
 800028c:	2000218c 	.word	0x2000218c
 8000290:	0800d7f0 	.word	0x0800d7f0
 8000294:	08000e99 	.word	0x08000e99
 8000298:	20002190 	.word	0x20002190

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09e      	sub	sp, #120	; 0x78
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f00d fa09 	bl	800d6c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	223c      	movs	r2, #60	; 0x3c
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f00d f9fb 	bl	800d6c2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002cc:	2303      	movs	r3, #3
 80002ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2310      	movs	r3, #16
 80002e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002f6:	4618      	mov	r0, r3
 80002f8:	f004 f9e8 	bl	80046cc <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000302:	f000 fde3 	bl	8000ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2302      	movs	r3, #2
 800030c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f005 f8da 	bl	80054dc <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800032e:	f000 fdcd 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <SystemClock_Config+0xd0>)
 8000334:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800033a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000344:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000346:	2300      	movs	r3, #0
 8000348:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800034a:	2300      	movs	r3, #0
 800034c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800034e:	2300      	movs	r3, #0
 8000350:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	463b      	mov	r3, r7
 8000354:	4618      	mov	r0, r3
 8000356:	f005 fb29 	bl	80059ac <HAL_RCCEx_PeriphCLKConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000360:	f000 fdb4 	bl	8000ecc <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3778      	adds	r7, #120	; 0x78
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	000211a4 	.word	0x000211a4

08000370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000376:	f107 031c 	add.w	r3, r7, #28
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
 8000390:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000392:	4b3d      	ldr	r3, [pc, #244]	; (8000488 <MX_ADC1_Init+0x118>)
 8000394:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800039a:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <MX_ADC1_Init+0x118>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <MX_ADC1_Init+0x118>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003a6:	4b38      	ldr	r3, [pc, #224]	; (8000488 <MX_ADC1_Init+0x118>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <MX_ADC1_Init+0x118>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <MX_ADC1_Init+0x118>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80003ba:	4b33      	ldr	r3, [pc, #204]	; (8000488 <MX_ADC1_Init+0x118>)
 80003bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80003c2:	4b31      	ldr	r3, [pc, #196]	; (8000488 <MX_ADC1_Init+0x118>)
 80003c4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ca:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <MX_ADC1_Init+0x118>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <MX_ADC1_Init+0x118>)
 80003d2:	2203      	movs	r2, #3
 80003d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003d6:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <MX_ADC1_Init+0x118>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003de:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <MX_ADC1_Init+0x118>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e4:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_ADC1_Init+0x118>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ea:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_ADC1_Init+0x118>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f0:	4825      	ldr	r0, [pc, #148]	; (8000488 <MX_ADC1_Init+0x118>)
 80003f2:	f001 fb9b 	bl	8001b2c <HAL_ADC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80003fc:	f000 fd66 	bl	8000ecc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000404:	f107 031c 	add.w	r3, r7, #28
 8000408:	4619      	mov	r1, r3
 800040a:	481f      	ldr	r0, [pc, #124]	; (8000488 <MX_ADC1_Init+0x118>)
 800040c:	f002 fb8e 	bl	8002b2c <HAL_ADCEx_MultiModeConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000416:	f000 fd59 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 800041a:	230f      	movs	r3, #15
 800041c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041e:	2301      	movs	r3, #1
 8000420:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000422:	2300      	movs	r3, #0
 8000424:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000426:	2302      	movs	r3, #2
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <MX_ADC1_Init+0x118>)
 8000438:	f002 f88c 	bl	8002554 <HAL_ADC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000442:	f000 fd43 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000446:	2301      	movs	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_ADC1_Init+0x118>)
 8000454:	f002 f87e 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800045e:	f000 fd35 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000462:	2304      	movs	r3, #4
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000466:	2303      	movs	r3, #3
 8000468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_ADC1_Init+0x118>)
 8000470:	f002 f870 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800047a:	f000 fd27 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	; 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20002078 	.word	0x20002078

0800048c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000492:	463b      	mov	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
 80004a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80004a2:	4b36      	ldr	r3, [pc, #216]	; (800057c <MX_ADC2_Init+0xf0>)
 80004a4:	4a36      	ldr	r2, [pc, #216]	; (8000580 <MX_ADC2_Init+0xf4>)
 80004a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_ADC2_Init+0xf0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004ae:	4b33      	ldr	r3, [pc, #204]	; (800057c <MX_ADC2_Init+0xf0>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_ADC2_Init+0xf0>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004ba:	4b30      	ldr	r3, [pc, #192]	; (800057c <MX_ADC2_Init+0xf0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004c0:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_ADC2_Init+0xf0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <MX_ADC2_Init+0xf0>)
 80004ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80004d0:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_ADC2_Init+0xf0>)
 80004d2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <MX_ADC2_Init+0xf0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_ADC2_Init+0xf0>)
 80004e0:	2203      	movs	r2, #3
 80004e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_ADC2_Init+0xf0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <MX_ADC2_Init+0xf0>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_ADC2_Init+0xf0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <MX_ADC2_Init+0xf0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004fe:	481f      	ldr	r0, [pc, #124]	; (800057c <MX_ADC2_Init+0xf0>)
 8000500:	f001 fb14 	bl	8001b2c <HAL_ADC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 800050a:	f000 fcdf 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 800050e:	2311      	movs	r3, #17
 8000510:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000512:	2301      	movs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800051a:	2302      	movs	r3, #2
 800051c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000526:	463b      	mov	r3, r7
 8000528:	4619      	mov	r1, r3
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <MX_ADC2_Init+0xf0>)
 800052c:	f002 f812 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000536:	f000 fcc9 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053a:	2301      	movs	r3, #1
 800053c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800053e:	2302      	movs	r3, #2
 8000540:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000542:	463b      	mov	r3, r7
 8000544:	4619      	mov	r1, r3
 8000546:	480d      	ldr	r0, [pc, #52]	; (800057c <MX_ADC2_Init+0xf0>)
 8000548:	f002 f804 	bl	8002554 <HAL_ADC_ConfigChannel>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 8000552:	f000 fcbb 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000556:	2302      	movs	r3, #2
 8000558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800055a:	2303      	movs	r3, #3
 800055c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <MX_ADC2_Init+0xf0>)
 8000564:	f001 fff6 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 800056e:	f000 fcad 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20001e08 	.word	0x20001e08
 8000580:	50000100 	.word	0x50000100

08000584 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005a8:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <MX_ADC3_Init+0xe0>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC3_Init+0xdc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000602:	4817      	ldr	r0, [pc, #92]	; (8000660 <MX_ADC3_Init+0xdc>)
 8000604:	f001 fa92 	bl	8001b2c <HAL_ADC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800060e:	f000 fc5d 	bl	8000ecc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <MX_ADC3_Init+0xdc>)
 800061e:	f002 fa85 	bl	8002b2c <HAL_ADCEx_MultiModeConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000628:	f000 fc50 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3;
 800062c:	2311      	movs	r3, #17
 800062e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000630:	2301      	movs	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC3_Init+0xdc>)
 800064a:	f001 ff83 	bl	8002554 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000654:	f000 fc3a 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200020c8 	.word	0x200020c8
 8000664:	50000400 	.word	0x50000400

08000668 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_COMP1_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MX_COMP1_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_COMP1_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_COMP1_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_COMP1_Init+0x58>)
 8000680:	f640 027f 	movw	r2, #2175	; 0x87f
 8000684:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_COMP1_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_COMP1_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_COMP1_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_COMP1_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_COMP1_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_COMP1_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_COMP1_Init+0x58>)
 80006ac:	f002 fb90 	bl	8002dd0 <HAL_COMP_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 80006b6:	f000 fc09 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20001fa4 	.word	0x20001fa4
 80006c4:	4001001c 	.word	0x4001001c

080006c8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_COMP2_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_COMP2_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_COMP2_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_COMP2_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_COMP2_Init+0x58>)
 80006e0:	f640 027f 	movw	r2, #2175	; 0x87f
 80006e4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_COMP2_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_COMP2_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_COMP2_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_COMP2_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_COMP2_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_COMP2_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_COMP2_Init+0x58>)
 800070c:	f002 fb60 	bl	8002dd0 <HAL_COMP_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 fbd9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000221c 	.word	0x2000221c
 8000724:	40010020 	.word	0x40010020

08000728 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_COMP4_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_COMP4_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_COMP4_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_COMP4_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_COMP4_Init+0x58>)
 8000740:	f640 027f 	movw	r2, #2175	; 0x87f
 8000744:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_COMP4_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_COMP4_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_COMP4_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_COMP4_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_COMP4_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_COMP4_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_COMP4_Init+0x58>)
 800076c:	f002 fb30 	bl	8002dd0 <HAL_COMP_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 fba9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20002048 	.word	0x20002048
 8000784:	40010028 	.word	0x40010028

08000788 <MX_COMP7_Init>:
  * @brief COMP7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP7_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP7_Init 0 */

  /* USER CODE BEGIN COMP7_Init 1 */

  /* USER CODE END COMP7_Init 1 */
  hcomp7.Instance = COMP7;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_COMP7_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_COMP7_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  hcomp7.Init.InvertingInput = COMP_INVERTINGINPUT_3_4VREFINT;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_COMP7_Init+0x58>)
 8000794:	2220      	movs	r2, #32
 8000796:	605a      	str	r2, [r3, #4]
  hcomp7.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_COMP7_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcomp7.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007a0:	f640 027f 	movw	r2, #2175	; 0x87f
 80007a4:	60da      	str	r2, [r3, #12]
  hcomp7.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hcomp7.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hcomp7.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hcomp7.Init.Mode = COMP_MODE_HIGHSPEED;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hcomp7.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hcomp7.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp7) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_COMP7_Init+0x58>)
 80007cc:	f002 fb00 	bl	8002dd0 <HAL_COMP_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_COMP7_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 fb79 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN COMP7_Init 2 */

  /* USER CODE END COMP7_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20002118 	.word	0x20002118
 80007e4:	40010034 	.word	0x40010034

080007e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_I2C1_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_I2C1_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_I2C1_Init+0x74>)
 80007f4:	f240 220b 	movw	r2, #523	; 0x20b
 80007f8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_I2C1_Init+0x74>)
 8000802:	2201      	movs	r2, #1
 8000804:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_I2C1_Init+0x74>)
 8000826:	f002 fed5 	bl	80035d4 <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 fb4c 	bl	8000ecc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_I2C1_Init+0x74>)
 8000838:	f002 ff5b 	bl	80036f2 <HAL_I2CEx_ConfigAnalogFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000842:	f000 fb43 	bl	8000ecc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_I2C1_Init+0x74>)
 800084a:	f002 ff9d 	bl	8003788 <HAL_I2CEx_ConfigDigitalFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 fb3a 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20001e9c 	.word	0x20001e9c
 8000860:	40005400 	.word	0x40005400

08000864 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <MX_OPAMP1_Init+0x48>)
 800086c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 8000870:	2240      	movs	r2, #64	; 0x40
 8000872:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 8000876:	220c      	movs	r2, #12
 8000878:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 8000888:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800088c:	621a      	str	r2, [r3, #32]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_OPAMP1_Init+0x44>)
 8000896:	f002 ffc3 	bl	8003820 <HAL_OPAMP_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 80008a0:	f000 fb14 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20002014 	.word	0x20002014
 80008ac:	40010038 	.word	0x40010038

080008b0 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_OPAMP2_Init+0x48>)
 80008b8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008bc:	2240      	movs	r2, #64	; 0x40
 80008be:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80008d8:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_OPAMP2_Init+0x44>)
 80008e2:	f002 ff9d 	bl	8003820 <HAL_OPAMP_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 80008ec:	f000 faee 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20001cd0 	.word	0x20001cd0
 80008f8:	4001003c 	.word	0x4001003c

080008fc <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_OPAMP3_Init+0x44>)
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_OPAMP3_Init+0x48>)
 8000904:	601a      	str	r2, [r3, #0]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_OPAMP3_Init+0x44>)
 8000908:	2240      	movs	r2, #64	; 0x40
 800090a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_OPAMP3_Init+0x44>)
 800090e:	220c      	movs	r2, #12
 8000910:	60da      	str	r2, [r3, #12]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_OPAMP3_Init+0x44>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_OPAMP3_Init+0x44>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_OPAMP3_Init+0x44>)
 8000920:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000924:	621a      	str	r2, [r3, #32]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_OPAMP3_Init+0x44>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_OPAMP3_Init+0x44>)
 800092e:	f002 ff77 	bl	8003820 <HAL_OPAMP_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_OPAMP3_Init+0x40>
  {
    Error_Handler();
 8000938:	f000 fac8 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20001f70 	.word	0x20001f70
 8000944:	40010040 	.word	0x40010040

08000948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b096      	sub	sp, #88	; 0x58
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	222c      	movs	r2, #44	; 0x2c
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00c fea4 	bl	800d6c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097a:	4b4d      	ldr	r3, [pc, #308]	; (8000ab0 <MX_TIM1_Init+0x168>)
 800097c:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <MX_TIM1_Init+0x16c>)
 800097e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000980:	4b4b      	ldr	r3, [pc, #300]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000986:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000988:	2220      	movs	r2, #32
 800098a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800098c:	4b48      	ldr	r3, [pc, #288]	; (8000ab0 <MX_TIM1_Init+0x168>)
 800098e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000992:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099a:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <MX_TIM1_Init+0x168>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_TIM1_Init+0x168>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a6:	4842      	ldr	r0, [pc, #264]	; (8000ab0 <MX_TIM1_Init+0x168>)
 80009a8:	f005 fa06 	bl	8005db8 <HAL_TIM_PWM_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 fa8b 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009b6:	2370      	movs	r3, #112	; 0x70
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009c6:	4619      	mov	r1, r3
 80009c8:	4839      	ldr	r0, [pc, #228]	; (8000ab0 <MX_TIM1_Init+0x168>)
 80009ca:	f006 fb3b 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009d4:	f000 fa7a 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2360      	movs	r3, #96	; 0x60
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 512;
 80009dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80009e6:	2308      	movs	r3, #8
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	482c      	ldr	r0, [pc, #176]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000a00:	f005 fbf6 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a0a:	f000 fa5f 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a12:	2204      	movs	r2, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4826      	ldr	r0, [pc, #152]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000a18:	f005 fbea 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000a22:	f000 fa53 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000a30:	f005 fbde 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a3a:	f000 fa47 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a46:	220c      	movs	r2, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000a4c:	f005 fbd0 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000a56:	f000 fa39 	bl	8000ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000a92:	f006 fb57 	bl	8007144 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000a9c:	f000 fa16 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM1_Init+0x168>)
 8000aa2:	f000 fdcb 	bl	800163c <HAL_TIM_MspPostInit>

}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	; 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20002194 	.word	0x20002194
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000ae8:	4a35      	ldr	r2, [pc, #212]	; (8000bc0 <MX_TIM3_Init+0x108>)
 8000aea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000aee:	2247      	movs	r2, #71	; 0x47
 8000af0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b0c:	482b      	ldr	r0, [pc, #172]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b0e:	f005 f8fd 	bl	8005d0c <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000b18:	f000 f9d8 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b1c:	4827      	ldr	r0, [pc, #156]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b1e:	f005 f976 	bl	8005e0e <HAL_TIM_IC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000b28:	f000 f9d0 	bl	8000ecc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b30:	2350      	movs	r3, #80	; 0x50
 8000b32:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b44:	f005 fc88 	bl	8006458 <HAL_TIM_SlaveConfigSynchro>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b4e:	f000 f9bd 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4816      	ldr	r0, [pc, #88]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b62:	f006 fa6f 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b6c:	f000 f9ae 	bl	8000ecc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b74:	2301      	movs	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000b88:	f005 fa95 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000b92:	f000 f99b 	bl	8000ecc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b96:	2302      	movs	r3, #2
 8000b98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_TIM3_Init+0x104>)
 8000ba6:	f005 fa86 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000bb0:	f000 f98c 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3730      	adds	r7, #48	; 0x30
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20001fd4 	.word	0x20001fd4
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	; 0x30
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000bf4:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <MX_TIM4_Init+0x128>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 109;
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000bfa:	226d      	movs	r2, #109	; 0x6d
 8000bfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c18:	4833      	ldr	r0, [pc, #204]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c1a:	f005 f877 	bl	8005d0c <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000c24:	f000 f952 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c28:	482f      	ldr	r0, [pc, #188]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c2a:	f005 f8f0 	bl	8005e0e <HAL_TIM_IC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000c34:	f000 f94a 	bl	8000ecc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c50:	f005 fc02 	bl	8006458 <HAL_TIM_SlaveConfigSynchro>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c5a:	f000 f937 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c6e:	f006 f9e9 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000c78:	f000 f928 	bl	8000ecc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	4815      	ldr	r0, [pc, #84]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000c94:	f005 fa0f 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000c9e:	f000 f915 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000caa:	f005 fa04 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000cb4:	f000 f90a 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000cc0:	f005 f9f9 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 8000cca:	f000 f8ff 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim4, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_TIM4_Init+0x124>)
 8000cd2:	f005 fba5 	bl	8006420 <HAL_TIM_ConfigTI1Input>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8000cdc:	f000 f8f6 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20001d04 	.word	0x20001d04
 8000cec:	40000800 	.word	0x40000800

08000cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <MX_USART3_UART_Init+0x5c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART3_UART_Init+0x58>)
 8000d34:	f006 faa2 	bl	800727c <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f8c5 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20001d88 	.word	0x20001d88
 8000d4c:	40004800 	.word	0x40004800

08000d50 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_DMA_Init+0xb0>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <MX_DMA_Init+0xb0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <MX_DMA_Init+0xb0>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <MX_DMA_Init+0xb0>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <MX_DMA_Init+0xb0>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6153      	str	r3, [r2, #20]
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_DMA_Init+0xb0>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2105      	movs	r1, #5
 8000d8a:	200b      	movs	r0, #11
 8000d8c:	f002 f958 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d90:	200b      	movs	r0, #11
 8000d92:	f002 f971 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2105      	movs	r1, #5
 8000d9a:	200c      	movs	r0, #12
 8000d9c:	f002 f950 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000da0:	200c      	movs	r0, #12
 8000da2:	f002 f969 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2105      	movs	r1, #5
 8000daa:	200d      	movs	r0, #13
 8000dac:	f002 f948 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000db0:	200d      	movs	r0, #13
 8000db2:	f002 f961 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f002 f940 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000dc0:	2010      	movs	r0, #16
 8000dc2:	f002 f959 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2011      	movs	r0, #17
 8000dcc:	f002 f938 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f002 f951 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2105      	movs	r1, #5
 8000dda:	2038      	movs	r0, #56	; 0x38
 8000ddc:	f002 f930 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000de0:	2038      	movs	r0, #56	; 0x38
 8000de2:	f002 f949 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	203c      	movs	r0, #60	; 0x3c
 8000dec:	f002 f928 	bl	8003040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000df0:	203c      	movs	r0, #60	; 0x3c
 8000df2:	f002 f941 	bl	8003078 <HAL_NVIC_EnableIRQ>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_GPIO_Init+0x5c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e6c:	f00b ff66 	bl	800cd3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f009 fb71 	bl	800a558 <osDelay>
 8000e76:	e7fb      	b.n	8000e70 <StartDefaultTask+0xc>

08000e78 <SlowLoopEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SlowLoopEntry */
void SlowLoopEntry(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SlowLoopEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f009 fb69 	bl	800a558 <osDelay>
 8000e86:	e7fb      	b.n	8000e80 <SlowLoopEntry+0x8>

08000e88 <ComsTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ComsTaskEntry */
void ComsTaskEntry(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ComsTaskEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f009 fb61 	bl	800a558 <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <ComsTaskEntry+0x8>

08000e98 <BatCheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BatCheck */
void BatCheck(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BatCheck */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f009 fb59 	bl	800a558 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <BatCheck+0x8>

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eba:	f000 fdf9 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40001400 	.word	0x40001400

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_MspInit+0x4c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	210f      	movs	r1, #15
 8000f16:	f06f 0001 	mvn.w	r0, #1
 8000f1a:	f002 f891 	bl	8003040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f4c:	d15f      	bne.n	800100e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f4e:	4b81      	ldr	r3, [pc, #516]	; (8001154 <HAL_ADC_MspInit+0x228>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a7f      	ldr	r2, [pc, #508]	; (8001154 <HAL_ADC_MspInit+0x228>)
 8000f56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f58:	4b7e      	ldr	r3, [pc, #504]	; (8001154 <HAL_ADC_MspInit+0x228>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10b      	bne.n	8000f78 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f60:	4b7d      	ldr	r3, [pc, #500]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4a7c      	ldr	r2, [pc, #496]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6153      	str	r3, [r2, #20]
 8000f6c:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b77      	ldr	r3, [pc, #476]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a76      	ldr	r2, [pc, #472]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f82:	6153      	str	r3, [r2, #20]
 8000f84:	4b74      	ldr	r3, [pc, #464]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f90:	2309      	movs	r3, #9
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f002 f99b 	bl	80032e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000faa:	4b6c      	ldr	r3, [pc, #432]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fac:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <HAL_ADC_MspInit+0x234>)
 8000fae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb6:	4b69      	ldr	r3, [pc, #420]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fbc:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc2:	4b66      	ldr	r3, [pc, #408]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fca:	4b64      	ldr	r3, [pc, #400]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000fd2:	4b62      	ldr	r3, [pc, #392]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000fd8:	4b60      	ldr	r3, [pc, #384]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe0:	485e      	ldr	r0, [pc, #376]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000fe2:	f002 f857 	bl	8003094 <HAL_DMA_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000fec:	f7ff ff6e 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff6:	4a59      	ldr	r2, [pc, #356]	; (800115c <HAL_ADC_MspInit+0x230>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2105      	movs	r1, #5
 8001000:	2012      	movs	r0, #18
 8001002:	f002 f81d 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001006:	2012      	movs	r0, #18
 8001008:	f002 f836 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800100c:	e09e      	b.n	800114c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a54      	ldr	r2, [pc, #336]	; (8001164 <HAL_ADC_MspInit+0x238>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d15f      	bne.n	80010d8 <HAL_ADC_MspInit+0x1ac>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <HAL_ADC_MspInit+0x228>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_ADC_MspInit+0x228>)
 8001020:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <HAL_ADC_MspInit+0x228>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10b      	bne.n	8001042 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800102a:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b48      	ldr	r3, [pc, #288]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b45      	ldr	r3, [pc, #276]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a44      	ldr	r2, [pc, #272]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800105a:	2330      	movs	r3, #48	; 0x30
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f002 f936 	bl	80032e0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 8001076:	4a3d      	ldr	r2, [pc, #244]	; (800116c <HAL_ADC_MspInit+0x240>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b39      	ldr	r3, [pc, #228]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 800108e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001092:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 8001096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 80010a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80010aa:	482f      	ldr	r0, [pc, #188]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 80010ac:	f001 fff2 	bl	8003094 <HAL_DMA_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 80010b6:	f7ff ff09 	bl	8000ecc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <HAL_ADC_MspInit+0x23c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2105      	movs	r1, #5
 80010ca:	2012      	movs	r0, #18
 80010cc:	f001 ffb8 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010d0:	2012      	movs	r0, #18
 80010d2:	f001 ffd1 	bl	8003078 <HAL_NVIC_EnableIRQ>
}
 80010d6:	e039      	b.n	800114c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a24      	ldr	r2, [pc, #144]	; (8001170 <HAL_ADC_MspInit+0x244>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d134      	bne.n	800114c <HAL_ADC_MspInit+0x220>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 80010e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_ADC_MspInit+0x22c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA2_Channel5;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_ADC_MspInit+0x248>)
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <HAL_ADC_MspInit+0x24c>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0x248>)
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x248>)
 800111c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0x248>)
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001132:	f001 ffaf 	bl	8003094 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 800113c:	f7ff fec6 	bl	8000ecc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_ADC_MspInit+0x248>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000019c 	.word	0x2000019c
 8001158:	40021000 	.word	0x40021000
 800115c:	20002148 	.word	0x20002148
 8001160:	40020008 	.word	0x40020008
 8001164:	50000100 	.word	0x50000100
 8001168:	2000224c 	.word	0x2000224c
 800116c:	40020408 	.word	0x40020408
 8001170:	50000400 	.word	0x50000400
 8001174:	20001ee8 	.word	0x20001ee8
 8001178:	40020458 	.word	0x40020458

0800117c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	; 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <HAL_COMP_MspInit+0x114>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d119      	bne.n	80011d2 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_COMP_MspInit+0x118>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <HAL_COMP_MspInit+0x118>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <HAL_COMP_MspInit+0x118>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f002 f888 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80011d0:	e05a      	b.n	8001288 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a30      	ldr	r2, [pc, #192]	; (8001298 <HAL_COMP_MspInit+0x11c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d119      	bne.n	8001210 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_COMP_MspInit+0x118>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <HAL_COMP_MspInit+0x118>)
 80011e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e6:	6153      	str	r3, [r2, #20]
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_COMP_MspInit+0x118>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f002 f869 	bl	80032e0 <HAL_GPIO_Init>
}
 800120e:	e03b      	b.n	8001288 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <HAL_COMP_MspInit+0x120>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d118      	bne.n	800124c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_COMP_MspInit+0x118>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_COMP_MspInit+0x118>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6153      	str	r3, [r2, #20]
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_COMP_MspInit+0x118>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001232:	2301      	movs	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <HAL_COMP_MspInit+0x124>)
 8001246:	f002 f84b 	bl	80032e0 <HAL_GPIO_Init>
}
 800124a:	e01d      	b.n	8001288 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_COMP_MspInit+0x128>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d118      	bne.n	8001288 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_COMP_MspInit+0x118>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_COMP_MspInit+0x118>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_COMP_MspInit+0x118>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126e:	2301      	movs	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f002 f82c 	bl	80032e0 <HAL_GPIO_Init>
}
 8001288:	bf00      	nop
 800128a:	3730      	adds	r7, #48	; 0x30
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	4001001c 	.word	0x4001001c
 8001294:	40021000 	.word	0x40021000
 8001298:	40010020 	.word	0x40010020
 800129c:	40010028 	.word	0x40010028
 80012a0:	48000400 	.word	0x48000400
 80012a4:	40010034 	.word	0x40010034

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <HAL_I2C_MspInit+0x154>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	f040 8093 	bne.w	80013f2 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <HAL_I2C_MspInit+0x158>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_I2C_MspInit+0x158>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d6:	6153      	str	r3, [r2, #20]
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <HAL_I2C_MspInit+0x158>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_I2C_MspInit+0x158>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <HAL_I2C_MspInit+0x158>)
 80012ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ee:	6153      	str	r3, [r2, #20]
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_I2C_MspInit+0x158>)
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001302:	2312      	movs	r3, #18
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130e:	2304      	movs	r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f001 ffe0 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001332:	2304      	movs	r3, #4
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4831      	ldr	r0, [pc, #196]	; (8001404 <HAL_I2C_MspInit+0x15c>)
 800133e:	f001 ffcf 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_I2C_MspInit+0x158>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <HAL_I2C_MspInit+0x158>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <HAL_I2C_MspInit+0x158>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_I2C_MspInit+0x160>)
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <HAL_I2C_MspInit+0x164>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_I2C_MspInit+0x160>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_I2C_MspInit+0x160>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800136c:	4b26      	ldr	r3, [pc, #152]	; (8001408 <HAL_I2C_MspInit+0x160>)
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_I2C_MspInit+0x160>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_I2C_MspInit+0x160>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_I2C_MspInit+0x160>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_I2C_MspInit+0x160>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800138a:	481f      	ldr	r0, [pc, #124]	; (8001408 <HAL_I2C_MspInit+0x160>)
 800138c:	f001 fe82 	bl	8003094 <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_MspInit+0xf2>
    {
      Error_Handler();
 8001396:	f7ff fd99 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_I2C_MspInit+0x160>)
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_I2C_MspInit+0x160>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013a8:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_I2C_MspInit+0x16c>)
 80013aa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013ae:	2210      	movs	r2, #16
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013d6:	480e      	ldr	r0, [pc, #56]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013d8:	f001 fe5c 	bl	8003094 <HAL_DMA_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 80013e2:	f7ff fd73 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_I2C_MspInit+0x168>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40005400 	.word	0x40005400
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400
 8001408:	200021d8 	.word	0x200021d8
 800140c:	40020080 	.word	0x40020080
 8001410:	20001e58 	.word	0x20001e58
 8001414:	4002006c 	.word	0x4002006c

08001418 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <HAL_OPAMP_MspInit+0xd8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d119      	bne.n	800146e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a2d      	ldr	r2, [pc, #180]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001452:	2306      	movs	r3, #6
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f001 ff3a 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 800146c:	e03b      	b.n	80014e6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <HAL_OPAMP_MspInit+0xe0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d119      	bne.n	80014ac <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 800147e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001482:	6153      	str	r3, [r2, #20]
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f001 ff1b 	bl	80032e0 <HAL_GPIO_Init>
}
 80014aa:	e01c      	b.n	80014e6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_OPAMP_MspInit+0xe4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d117      	bne.n	80014e6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_OPAMP_MspInit+0xdc>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ce:	2303      	movs	r3, #3
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d2:	2303      	movs	r3, #3
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <HAL_OPAMP_MspInit+0xe8>)
 80014e2:	f001 fefd 	bl	80032e0 <HAL_GPIO_Init>
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40010038 	.word	0x40010038
 80014f4:	40021000 	.word	0x40021000
 80014f8:	4001003c 	.word	0x4001003c
 80014fc:	40010040 	.word	0x40010040
 8001500:	48000400 	.word	0x48000400

08001504 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_TIM_PWM_MspInit+0x38>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10b      	bne.n	800152e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_TIM_PWM_MspInit+0x3c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_TIM_PWM_MspInit+0x3c>)
 800151c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_TIM_PWM_MspInit+0x3c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40012c00 	.word	0x40012c00
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a32      	ldr	r2, [pc, #200]	; (800162c <HAL_TIM_Base_MspInit+0xe8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d130      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a31      	ldr	r2, [pc, #196]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a2b      	ldr	r2, [pc, #172]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001596:	2310      	movs	r3, #16
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4820      	ldr	r0, [pc, #128]	; (8001634 <HAL_TIM_Base_MspInit+0xf0>)
 80015b2:	f001 fe95 	bl	80032e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	201d      	movs	r0, #29
 80015bc:	f001 fd40 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c0:	201d      	movs	r0, #29
 80015c2:	f001 fd59 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015c6:	e02d      	b.n	8001624 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <HAL_TIM_Base_MspInit+0xf4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d128      	bne.n	8001624 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_TIM_Base_MspInit+0xec>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001602:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001614:	2302      	movs	r3, #2
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_TIM_Base_MspInit+0xf0>)
 8001620:	f001 fe5e 	bl	80032e0 <HAL_GPIO_Init>
}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	; 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40000400 	.word	0x40000400
 8001630:	40021000 	.word	0x40021000
 8001634:	48000400 	.word	0x48000400
 8001638:	40000800 	.word	0x40000800

0800163c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a29      	ldr	r2, [pc, #164]	; (8001700 <HAL_TIM_MspPostInit+0xc4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d14b      	bne.n	80016f6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6153      	str	r3, [r2, #20]
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_TIM_MspPostInit+0xc8>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800168e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016a0:	2306      	movs	r3, #6
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4817      	ldr	r0, [pc, #92]	; (8001708 <HAL_TIM_MspPostInit+0xcc>)
 80016ac:	f001 fe18 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80016c2:	2304      	movs	r3, #4
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <HAL_TIM_MspPostInit+0xcc>)
 80016ce:	f001 fe07 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80016d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016e4:	2306      	movs	r3, #6
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f001 fdf5 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40012c00 	.word	0x40012c00
 8001704:	40021000 	.word	0x40021000
 8001708:	48000400 	.word	0x48000400

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <HAL_UART_MspInit+0x114>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d174      	bne.n	8001818 <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_UART_MspInit+0x118>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a3c      	ldr	r2, [pc, #240]	; (8001824 <HAL_UART_MspInit+0x118>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_UART_MspInit+0x118>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_UART_MspInit+0x118>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a36      	ldr	r2, [pc, #216]	; (8001824 <HAL_UART_MspInit+0x118>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_UART_MspInit+0x118>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800175e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001770:	2307      	movs	r3, #7
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	482b      	ldr	r0, [pc, #172]	; (8001828 <HAL_UART_MspInit+0x11c>)
 800177c:	f001 fdb0 	bl	80032e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_UART_MspInit+0x120>)
 8001782:	4a2b      	ldr	r2, [pc, #172]	; (8001830 <HAL_UART_MspInit+0x124>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_UART_MspInit+0x120>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_UART_MspInit+0x120>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_UART_MspInit+0x120>)
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_UART_MspInit+0x120>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_UART_MspInit+0x120>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_UART_MspInit+0x120>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_UART_MspInit+0x120>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017b0:	481e      	ldr	r0, [pc, #120]	; (800182c <HAL_UART_MspInit+0x120>)
 80017b2:	f001 fc6f 	bl	8003094 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80017bc:	f7ff fb86 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_UART_MspInit+0x120>)
 80017c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_UART_MspInit+0x120>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_UART_MspInit+0x12c>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017d4:	2210      	movs	r2, #16
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <HAL_UART_MspInit+0x128>)
 80017fe:	f001 fc49 	bl	8003094 <HAL_DMA_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001808:	f7ff fb60 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_UART_MspInit+0x128>)
 8001810:	669a      	str	r2, [r3, #104]	; 0x68
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_UART_MspInit+0x128>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004800 	.word	0x40004800
 8001824:	40021000 	.word	0x40021000
 8001828:	48000400 	.word	0x48000400
 800182c:	20001d44 	.word	0x20001d44
 8001830:	40020030 	.word	0x40020030
 8001834:	20001f2c 	.word	0x20001f2c
 8001838:	4002001c 	.word	0x4002001c

0800183c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	2037      	movs	r0, #55	; 0x37
 8001852:	f001 fbf5 	bl	8003040 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8001856:	2037      	movs	r0, #55	; 0x37
 8001858:	f001 fc0e 	bl	8003078 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_InitTick+0xa0>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_InitTick+0xa0>)
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	61d3      	str	r3, [r2, #28]
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_InitTick+0xa0>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f004 f862 	bl	8005948 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001884:	f004 f81c 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_InitTick+0xa4>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	3b01      	subs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_InitTick+0xa8>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_InitTick+0xac>)
 80018a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_InitTick+0xa8>)
 80018a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_InitTick+0xa8>)
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_InitTick+0xa8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_InitTick+0xa8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <HAL_InitTick+0xa8>)
 80018be:	f004 fa25 	bl	8005d0c <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <HAL_InitTick+0xa8>)
 80018ca:	f004 fa4b 	bl	8005d64 <HAL_TIM_Base_Start_IT>
 80018ce:	4603      	mov	r3, r0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3730      	adds	r7, #48	; 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	20002290 	.word	0x20002290
 80018e8:	40001400 	.word	0x40001400

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Channel1_IRQHandler+0x10>)
 8001926:	f001 fbfc 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20002148 	.word	0x20002148

08001934 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA1_Channel2_IRQHandler+0x10>)
 800193a:	f001 fbf2 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20001f2c 	.word	0x20001f2c

08001948 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Channel3_IRQHandler+0x10>)
 800194e:	f001 fbe8 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20001d44 	.word	0x20001d44

0800195c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <DMA1_Channel6_IRQHandler+0x10>)
 8001962:	f001 fbde 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20001e58 	.word	0x20001e58

08001970 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA1_Channel7_IRQHandler+0x10>)
 8001976:	f001 fbd4 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200021d8 	.word	0x200021d8

08001984 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <ADC1_2_IRQHandler+0x14>)
 800198a:	f000 faaf 	bl	8001eec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <ADC1_2_IRQHandler+0x18>)
 8001990:	f000 faac 	bl	8001eec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20002078 	.word	0x20002078
 800199c:	20001e08 	.word	0x20001e08

080019a0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80019a6:	f002 f8bb 	bl	8003b20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20002fa8 	.word	0x20002fa8

080019b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM3_IRQHandler+0x10>)
 80019ba:	f004 fa5d 	bl	8005e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20001fd4 	.word	0x20001fd4

080019c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM7_IRQHandler+0x10>)
 80019ce:	f004 fa53 	bl	8005e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20002290 	.word	0x20002290

080019dc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA2_Channel1_IRQHandler+0x10>)
 80019e2:	f001 fb9e 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000224c 	.word	0x2000224c

080019f0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA2_Channel5_IRQHandler+0x10>)
 80019f6:	f001 fb94 	bl	8003122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20001ee8 	.word	0x20001ee8

08001a04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <SystemInit+0x28>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <SystemInit+0x28>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SystemInit+0x28>)
 8001a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a36:	e003      	b.n	8001a40 <LoopCopyDataInit>

08001a38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a3e:	3104      	adds	r1, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a48:	d3f6      	bcc.n	8001a38 <CopyDataInit>
	ldr	r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a4c:	e002      	b.n	8001a54 <LoopFillZerobss>

08001a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a50:	f842 3b04 	str.w	r3, [r2], #4

08001a54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <LoopForever+0x16>)
	cmp	r2, r3
 8001a56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a58:	d3f9      	bcc.n	8001a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a5a:	f7ff ffd3 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f00b fe01 	bl	800d664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7fe fbb5 	bl	80001d0 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a68:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001a6c:	0800d854 	.word	0x0800d854
	ldr	r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a74:	20000180 	.word	0x20000180
	ldr	r2, =_sbss
 8001a78:	20000180 	.word	0x20000180
	ldr	r3, = _ebss
 8001a7c:	20003214 	.word	0x20003214

08001a80 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC3_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f001 fac8 	bl	800302a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fece 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fa1c 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	200022d0 	.word	0x200022d0

08001ad8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;  
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200022d0 	.word	0x200022d0

08001af0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b09a      	sub	sp, #104	; 0x68
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e1c9      	b.n	8001ee0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d176      	bne.n	8001c4c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d152      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff f9d3 	bl	8000f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d13b      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f001 f8bb 	bl	8002d10 <ADC_Disable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d12f      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
 8001bac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d12b      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bbc:	f023 0302 	bic.w	r3, r3, #2
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001be8:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <HAL_ADC_Init+0x2d8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a86      	ldr	r2, [pc, #536]	; (8001e08 <HAL_ADC_Init+0x2dc>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9a      	lsrs	r2, r3, #18
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c28:	d110      	bne.n	8001c4c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f023 0312 	bic.w	r3, r3, #18
 8001c32:	f043 0210 	orr.w	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 8136 	bne.w	8001ec6 <HAL_ADC_Init+0x39a>
 8001c5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8131 	bne.w	8001ec6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8129 	bne.w	8001ec6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c7c:	f043 0202 	orr.w	r2, r3, #2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8c:	d004      	beq.n	8001c98 <HAL_ADC_Init+0x16c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5e      	ldr	r2, [pc, #376]	; (8001e0c <HAL_ADC_Init+0x2e0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_Init+0x170>
 8001c98:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_ADC_Init+0x2e4>)
 8001c9a:	e000      	b.n	8001c9e <HAL_ADC_Init+0x172>
 8001c9c:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_ADC_Init+0x2e8>)
 8001c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca8:	d102      	bne.n	8001cb0 <HAL_ADC_Init+0x184>
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <HAL_ADC_Init+0x2e0>)
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e01a      	b.n	8001ce6 <HAL_ADC_Init+0x1ba>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_ADC_Init+0x2e0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d103      	bne.n	8001cc2 <HAL_ADC_Init+0x196>
 8001cba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e011      	b.n	8001ce6 <HAL_ADC_Init+0x1ba>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a54      	ldr	r2, [pc, #336]	; (8001e18 <HAL_ADC_Init+0x2ec>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d102      	bne.n	8001cd2 <HAL_ADC_Init+0x1a6>
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_ADC_Init+0x2f0>)
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	e009      	b.n	8001ce6 <HAL_ADC_Init+0x1ba>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_ADC_Init+0x2f0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <HAL_ADC_Init+0x1b6>
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <HAL_ADC_Init+0x2ec>)
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e001      	b.n	8001ce6 <HAL_ADC_Init+0x1ba>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_ADC_Init+0x1da>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x1da>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_ADC_Init+0x1dc>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11c      	bne.n	8001d46 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d010      	beq.n	8001d34 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_ADC_Init+0x202>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Init+0x202>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_Init+0x204>
 8001d2e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d44:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7e5b      	ldrb	r3, [r3, #25]
 8001d4a:	035b      	lsls	r3, r3, #13
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d50:	2a01      	cmp	r2, #1
 8001d52:	d002      	beq.n	8001d5a <HAL_ADC_Init+0x22e>
 8001d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d58:	e000      	b.n	8001d5c <HAL_ADC_Init+0x230>
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d11b      	bne.n	8001db2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7e5b      	ldrb	r3, [r3, #25]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	045a      	lsls	r2, r3, #17
 8001d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
 8001d94:	e00d      	b.n	8001db2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d03a      	beq.n	8001e30 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_ADC_Init+0x2ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Init+0x2a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_ADC_Init+0x2f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d128      	bne.n	8001e20 <HAL_ADC_Init+0x2f4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001dd6:	d012      	beq.n	8001dfe <HAL_ADC_Init+0x2d2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de0:	d00a      	beq.n	8001df8 <HAL_ADC_Init+0x2cc>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Init+0x2c6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	e018      	b.n	8001e24 <HAL_ADC_Init+0x2f8>
 8001df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df6:	e015      	b.n	8001e24 <HAL_ADC_Init+0x2f8>
 8001df8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001dfc:	e012      	b.n	8001e24 <HAL_ADC_Init+0x2f8>
 8001dfe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e02:	e00f      	b.n	8001e24 <HAL_ADC_Init+0x2f8>
 8001e04:	20000000 	.word	0x20000000
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	50000100 	.word	0x50000100
 8001e10:	50000300 	.word	0x50000300
 8001e14:	50000700 	.word	0x50000700
 8001e18:	50000400 	.word	0x50000400
 8001e1c:	50000500 	.word	0x50000500
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d114      	bne.n	8001e68 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e4c:	f023 0302 	bic.w	r3, r3, #2
 8001e50:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e1b      	ldrb	r3, [r3, #24]
 8001e56:	039a      	lsls	r2, r3, #14
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4313      	orrs	r3, r2
 8001e62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e64:	4313      	orrs	r3, r2
 8001e66:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_ADC_Init+0x3bc>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10c      	bne.n	8001e9e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f023 010f 	bic.w	r1, r3, #15
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	1e5a      	subs	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9c:	e007      	b.n	8001eae <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 020f 	bic.w	r2, r2, #15
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f023 0303 	bic.w	r3, r3, #3
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec4:	e00a      	b.n	8001edc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f023 0312 	bic.w	r3, r3, #18
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001edc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3768      	adds	r7, #104	; 0x68
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	fff0c007 	.word	0xfff0c007

08001eec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d106      	bne.n	8001f1c <HAL_ADC_IRQHandler+0x30>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00f      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	f040 80c0 	bne.w	80020ac <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	f040 80b8 	bne.w	80020ac <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f5c:	d004      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x7c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a95      	ldr	r2, [pc, #596]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x8a>
 8001f68:	4b94      	ldr	r3, [pc, #592]	; (80021bc <HAL_ADC_IRQHandler+0x2d0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03e      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001f74:	e005      	b.n	8001f82 <HAL_ADC_IRQHandler+0x96>
 8001f76:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <HAL_ADC_IRQHandler+0x2d4>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d037      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8a:	d004      	beq.n	8001f96 <HAL_ADC_IRQHandler+0xaa>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a89      	ldr	r2, [pc, #548]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0xb8>
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_ADC_IRQHandler+0x2d0>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d027      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001fa2:	e005      	b.n	8001fb0 <HAL_ADC_IRQHandler+0xc4>
 8001fa4:	4b86      	ldr	r3, [pc, #536]	; (80021c0 <HAL_ADC_IRQHandler+0x2d4>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d020      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb8:	d004      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0xd8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7e      	ldr	r2, [pc, #504]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d106      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0xe6>
 8001fc4:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_ADC_IRQHandler+0x2d0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d010      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001fd0:	e005      	b.n	8001fde <HAL_ADC_IRQHandler+0xf2>
 8001fd2:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <HAL_ADC_IRQHandler+0x2d4>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d009      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x106>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a75      	ldr	r2, [pc, #468]	; (80021c4 <HAL_ADC_IRQHandler+0x2d8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d104      	bne.n	8001ffc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e00f      	b.n	800201c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002004:	d004      	beq.n	8002010 <HAL_ADC_IRQHandler+0x124>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6b      	ldr	r2, [pc, #428]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <HAL_ADC_IRQHandler+0x12a>
 8002010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002014:	e000      	b.n	8002018 <HAL_ADC_IRQHandler+0x12c>
 8002016:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <HAL_ADC_IRQHandler+0x2d8>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002026:	2b00      	cmp	r3, #0
 8002028:	d139      	bne.n	800209e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002030:	2b00      	cmp	r3, #0
 8002032:	d134      	bne.n	800209e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b08      	cmp	r3, #8
 8002040:	d12d      	bne.n	800209e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11a      	bne.n	8002086 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020c 	bic.w	r2, r2, #12
 800205e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
 8002084:	e00b      	b.n	800209e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0210 	orr.w	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fd26 	bl	8001af0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	220c      	movs	r2, #12
 80020aa:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d106      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x1dc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d00f      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	f040 813c 	bne.w	8002350 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	f040 8134 	bne.w	8002350 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_IRQHandler+0x21c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d106      	bne.n	8002116 <HAL_ADC_IRQHandler+0x22a>
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_ADC_IRQHandler+0x2d0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03e      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 8002114:	e005      	b.n	8002122 <HAL_ADC_IRQHandler+0x236>
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_ADC_IRQHandler+0x2d4>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2b00      	cmp	r3, #0
 8002120:	d037      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800212a:	d004      	beq.n	8002136 <HAL_ADC_IRQHandler+0x24a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d106      	bne.n	8002144 <HAL_ADC_IRQHandler+0x258>
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_ADC_IRQHandler+0x2d0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b05      	cmp	r3, #5
 8002140:	d027      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 8002142:	e005      	b.n	8002150 <HAL_ADC_IRQHandler+0x264>
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_ADC_IRQHandler+0x2d4>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2b05      	cmp	r3, #5
 800214e:	d020      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002158:	d004      	beq.n	8002164 <HAL_ADC_IRQHandler+0x278>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d106      	bne.n	8002172 <HAL_ADC_IRQHandler+0x286>
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_ADC_IRQHandler+0x2d0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	2b09      	cmp	r3, #9
 800216e:	d010      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 8002170:	e005      	b.n	800217e <HAL_ADC_IRQHandler+0x292>
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_ADC_IRQHandler+0x2d4>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2b09      	cmp	r3, #9
 800217c:	d009      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002186:	d004      	beq.n	8002192 <HAL_ADC_IRQHandler+0x2a6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_ADC_IRQHandler+0x2d8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d104      	bne.n	800219c <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	e018      	b.n	80021ce <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_IRQHandler+0x2c4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <HAL_ADC_IRQHandler+0x2cc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d10b      	bne.n	80021c8 <HAL_ADC_IRQHandler+0x2dc>
 80021b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021b4:	e009      	b.n	80021ca <HAL_ADC_IRQHandler+0x2de>
 80021b6:	bf00      	nop
 80021b8:	50000100 	.word	0x50000100
 80021bc:	50000300 	.word	0x50000300
 80021c0:	50000700 	.word	0x50000700
 80021c4:	50000400 	.word	0x50000400
 80021c8:	4b9d      	ldr	r3, [pc, #628]	; (8002440 <HAL_ADC_IRQHandler+0x554>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80ad 	bne.w	8002342 <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80a5 	bne.w	8002342 <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 809f 	bne.w	8002342 <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	f040 8097 	bne.w	8002342 <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800221c:	d004      	beq.n	8002228 <HAL_ADC_IRQHandler+0x33c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a88      	ldr	r2, [pc, #544]	; (8002444 <HAL_ADC_IRQHandler+0x558>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d106      	bne.n	8002236 <HAL_ADC_IRQHandler+0x34a>
 8002228:	4b87      	ldr	r3, [pc, #540]	; (8002448 <HAL_ADC_IRQHandler+0x55c>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03e      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 8002234:	e005      	b.n	8002242 <HAL_ADC_IRQHandler+0x356>
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <HAL_ADC_IRQHandler+0x560>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2b00      	cmp	r3, #0
 8002240:	d037      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224a:	d004      	beq.n	8002256 <HAL_ADC_IRQHandler+0x36a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_ADC_IRQHandler+0x558>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d106      	bne.n	8002264 <HAL_ADC_IRQHandler+0x378>
 8002256:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <HAL_ADC_IRQHandler+0x55c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2b06      	cmp	r3, #6
 8002260:	d027      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 8002262:	e005      	b.n	8002270 <HAL_ADC_IRQHandler+0x384>
 8002264:	4b79      	ldr	r3, [pc, #484]	; (800244c <HAL_ADC_IRQHandler+0x560>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2b06      	cmp	r3, #6
 800226e:	d020      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_IRQHandler+0x398>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_ADC_IRQHandler+0x558>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d106      	bne.n	8002292 <HAL_ADC_IRQHandler+0x3a6>
 8002284:	4b70      	ldr	r3, [pc, #448]	; (8002448 <HAL_ADC_IRQHandler+0x55c>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2b07      	cmp	r3, #7
 800228e:	d010      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 8002290:	e005      	b.n	800229e <HAL_ADC_IRQHandler+0x3b2>
 8002292:	4b6e      	ldr	r3, [pc, #440]	; (800244c <HAL_ADC_IRQHandler+0x560>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b07      	cmp	r3, #7
 800229c:	d009      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x3c6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a64      	ldr	r2, [pc, #400]	; (8002440 <HAL_ADC_IRQHandler+0x554>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d104      	bne.n	80022bc <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e00f      	b.n	80022dc <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_IRQHandler+0x3e4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_ADC_IRQHandler+0x558>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d102      	bne.n	80022d6 <HAL_ADC_IRQHandler+0x3ea>
 80022d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_IRQHandler+0x3ec>
 80022d6:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <HAL_ADC_IRQHandler+0x554>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12d      	bne.n	8002342 <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11a      	bne.n	800232a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002302:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d112      	bne.n	8002342 <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
 8002328:	e00b      	b.n	8002342 <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f8de 	bl	8002504 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2260      	movs	r2, #96	; 0x60
 800234e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d113      	bne.n	8002386 <HAL_ADC_IRQHandler+0x49a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d10c      	bne.n	8002386 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fbc3 	bl	8001b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	d115      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x4d6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d10d      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8ba 	bl	800252c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d115      	bne.n	80023fe <HAL_ADC_IRQHandler+0x512>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d10d      	bne.n	80023fe <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8a6 	bl	8002540 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	d151      	bne.n	80024b0 <HAL_ADC_IRQHandler+0x5c4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b10      	cmp	r3, #16
 8002418:	d14a      	bne.n	80024b0 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002422:	2301      	movs	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e02d      	b.n	8002484 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002430:	d004      	beq.n	800243c <HAL_ADC_IRQHandler+0x550>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a03      	ldr	r2, [pc, #12]	; (8002444 <HAL_ADC_IRQHandler+0x558>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d109      	bne.n	8002450 <HAL_ADC_IRQHandler+0x564>
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <HAL_ADC_IRQHandler+0x55c>)
 800243e:	e008      	b.n	8002452 <HAL_ADC_IRQHandler+0x566>
 8002440:	50000400 	.word	0x50000400
 8002444:	50000100 	.word	0x50000100
 8002448:	50000300 	.word	0x50000300
 800244c:	50000700 	.word	0x50000700
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_ADC_IRQHandler+0x614>)
 8002452:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e007      	b.n	8002484 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002480:	2301      	movs	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10e      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fb38 	bl	8001b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024be:	d11b      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x60c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d113      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0208 	orr.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f810 	bl	8002518 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	50000700 	.word	0x50000700

08002504 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b09b      	sub	sp, #108	; 0x6c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x22>
 8002572:	2302      	movs	r3, #2
 8002574:	e2cb      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x5ba>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 82af 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d81c      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	461a      	mov	r2, r3
 80025aa:	231f      	movs	r3, #31
 80025ac:	4093      	lsls	r3, r2
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4019      	ands	r1, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
 80025ce:	e063      	b.n	8002698 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d81e      	bhi.n	8002616 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	221f      	movs	r2, #31
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4019      	ands	r1, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	3b1e      	subs	r3, #30
 8002608:	fa00 f203 	lsl.w	r2, r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	; 0x34
 8002614:	e040      	b.n	8002698 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b0e      	cmp	r3, #14
 800261c:	d81e      	bhi.n	800265c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	3b3c      	subs	r3, #60	; 0x3c
 8002632:	221f      	movs	r2, #31
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4019      	ands	r1, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	3b3c      	subs	r3, #60	; 0x3c
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
 800265a:	e01d      	b.n	8002698 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	3b5a      	subs	r3, #90	; 0x5a
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	4019      	ands	r1, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	3b5a      	subs	r3, #90	; 0x5a
 800268c:	fa00 f203 	lsl.w	r2, r0, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80e5 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d91c      	bls.n	80026ea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	3b1e      	subs	r3, #30
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
 80026e8:	e019      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6959      	ldr	r1, [r3, #20]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	2207      	movs	r2, #7
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	4019      	ands	r1, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6898      	ldr	r0, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	3b01      	subs	r3, #1
 800273c:	2b03      	cmp	r3, #3
 800273e:	d84f      	bhi.n	80027e0 <HAL_ADC_ConfigChannel+0x28c>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <HAL_ADC_ConfigChannel+0x1f4>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	0800277b 	.word	0x0800277b
 8002750:	0800279d 	.word	0x0800279d
 8002754:	080027bf 	.word	0x080027bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275e:	4b9f      	ldr	r3, [pc, #636]	; (80029dc <HAL_ADC_ConfigChannel+0x488>)
 8002760:	4013      	ands	r3, r2
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	0691      	lsls	r1, r2, #26
 8002768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800276a:	430a      	orrs	r2, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002776:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002778:	e07e      	b.n	8002878 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002780:	4b96      	ldr	r3, [pc, #600]	; (80029dc <HAL_ADC_ConfigChannel+0x488>)
 8002782:	4013      	ands	r3, r2
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	0691      	lsls	r1, r2, #26
 800278a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800278c:	430a      	orrs	r2, r1
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002798:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800279a:	e06d      	b.n	8002878 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027a2:	4b8e      	ldr	r3, [pc, #568]	; (80029dc <HAL_ADC_ConfigChannel+0x488>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	0691      	lsls	r1, r2, #26
 80027ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ae:	430a      	orrs	r2, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027ba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027bc:	e05c      	b.n	8002878 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027c4:	4b85      	ldr	r3, [pc, #532]	; (80029dc <HAL_ADC_ConfigChannel+0x488>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	0691      	lsls	r1, r2, #26
 80027ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027d0:	430a      	orrs	r2, r1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027dc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027de:	e04b      	b.n	8002878 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002802:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002826:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800284a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	069b      	lsls	r3, r3, #26
 800285c:	429a      	cmp	r2, r3
 800285e:	d10a      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800286e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002870:	e001      	b.n	8002876 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002876:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d108      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x344>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x344>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_ADC_ConfigChannel+0x346>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8131 	bne.w	8002b02 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d00f      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	400a      	ands	r2, r1
 80028c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028c6:	e049      	b.n	800295c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	d91c      	bls.n	8002924 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6999      	ldr	r1, [r3, #24]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	3b1b      	subs	r3, #27
 80028fc:	2207      	movs	r2, #7
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	4019      	ands	r1, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6898      	ldr	r0, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	3b1b      	subs	r3, #27
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	e01b      	b.n	800295c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6959      	ldr	r1, [r3, #20]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	2207      	movs	r2, #7
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6898      	ldr	r0, [r3, #8]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002964:	d004      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x41c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_ADC_ConfigChannel+0x48c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x420>
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_ADC_ConfigChannel+0x490>)
 8002972:	e000      	b.n	8002976 <HAL_ADC_ConfigChannel+0x422>
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_ADC_ConfigChannel+0x494>)
 8002976:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b10      	cmp	r3, #16
 800297e:	d105      	bne.n	800298c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002990:	2b11      	cmp	r3, #17
 8002992:	d105      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029a4:	2b12      	cmp	r3, #18
 80029a6:	f040 80ac 	bne.w	8002b02 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80a5 	bne.w	8002b02 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c0:	d102      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x474>
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_ADC_ConfigChannel+0x48c>)
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e023      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4bc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_ADC_ConfigChannel+0x48c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10c      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x498>
 80029d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e01a      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4bc>
 80029da:	bf00      	nop
 80029dc:	83fff000 	.word	0x83fff000
 80029e0:	50000100 	.word	0x50000100
 80029e4:	50000300 	.word	0x50000300
 80029e8:	50000700 	.word	0x50000700
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4a      	ldr	r2, [pc, #296]	; (8002b1c <HAL_ADC_ConfigChannel+0x5c8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d102      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x4a8>
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_ADC_ConfigChannel+0x5cc>)
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e009      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4bc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d102      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x4b8>
 8002a06:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e001      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4bc>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x4dc>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x4dc>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x4de>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d150      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x504>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x504>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x506>
 8002a58:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d13c      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d11d      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x54e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6e:	d118      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <HAL_ADC_ConfigChannel+0x5d4>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9a      	lsrs	r2, r3, #18
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a92:	e002      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002aa0:	e02e      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b11      	cmp	r3, #17
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x56e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ac0:	e01e      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b12      	cmp	r3, #18
 8002ac8:	d11a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ad6:	e013      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002aea:	e00a      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b00:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	376c      	adds	r7, #108	; 0x6c
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	50000400 	.word	0x50000400
 8002b20:	50000500 	.word	0x50000500
 8002b24:	20000000 	.word	0x20000000
 8002b28:	431bde83 	.word	0x431bde83

08002b2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b099      	sub	sp, #100	; 0x64
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b44:	d102      	bne.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	e01a      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a6a      	ldr	r2, [pc, #424]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d103      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	e011      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d102      	bne.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	e009      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	e001      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b0      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0a9      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 808d 	bne.w	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8086 	bne.w	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002bda:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d040      	beq.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bf6:	035b      	lsls	r3, r3, #13
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bfe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d108      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d15c      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c42:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d14b      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c50:	f023 030f 	bic.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	6892      	ldr	r2, [r2, #8]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c64:	e03c      	b.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d123      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002cb4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d112      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cc2:	f023 030f 	bic.w	r3, r3, #15
 8002cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cca:	e009      	b.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cde:	e000      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3764      	adds	r7, #100	; 0x64
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	50000100 	.word	0x50000100
 8002d00:	50000400 	.word	0x50000400
 8002d04:	50000500 	.word	0x50000500
 8002d08:	50000300 	.word	0x50000300
 8002d0c:	50000700 	.word	0x50000700

08002d10 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <ADC_Disable+0x2c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <ADC_Disable+0x2c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <ADC_Disable+0x2e>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d040      	beq.n	8002dc4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030d 	and.w	r3, r3, #13
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10f      	bne.n	8002d70 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0202 	orr.w	r2, r2, #2
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2203      	movs	r2, #3
 8002d66:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d68:	f7fe feb6 	bl	8001ad8 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d6e:	e022      	b.n	8002db6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0210 	orr.w	r2, r3, #16
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e01c      	b.n	8002dc6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d8c:	f7fe fea4 	bl	8001ad8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d90d      	bls.n	8002db6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e007      	b.n	8002dc6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d0e3      	beq.n	8002d8c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_COMP_Init+0x22>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
 8002df6:	e064      	b.n	8002ec2 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_COMP_Init+0xfc>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <HAL_COMP_Init+0xfc>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_COMP_Init+0xfc>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fe f9b3 	bl	800117c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 020c 	bic.w	r2, r3, #12
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff4c 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003052:	f7ff ff61 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 8003056:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	6978      	ldr	r0, [r7, #20]
 800305e:	f7ff ffb1 	bl	8002fc4 <NVIC_EncodePriority>
 8003062:	4602      	mov	r2, r0
 8003064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff80 	bl	8002f70 <__NVIC_SetPriority>
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff54 	bl	8002f34 <__NVIC_EnableIRQ>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e037      	b.n	800311a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f8b3 	bl	8003268 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}  
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2204      	movs	r2, #4
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d024      	beq.n	8003194 <HAL_DMA_IRQHandler+0x72>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01f      	beq.n	8003194 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0204 	bic.w	r2, r2, #4
 8003170:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2104      	movs	r1, #4
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d06a      	beq.n	8003260 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003192:	e065      	b.n	8003260 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2202      	movs	r2, #2
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_IRQHandler+0xdc>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020a 	bic.w	r2, r2, #10
 80031ca:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2102      	movs	r1, #2
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d035      	beq.n	8003260 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80031fc:	e030      	b.n	8003260 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2208      	movs	r2, #8
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d028      	beq.n	8003260 <HAL_DMA_IRQHandler+0x13e>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d023      	beq.n	8003260 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 020e 	bic.w	r2, r2, #14
 8003226:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
    }
  }
}  
 800325e:	e7ff      	b.n	8003260 <HAL_DMA_IRQHandler+0x13e>
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <DMA_CalcBaseAndBitshift+0x60>)
 8003278:	429a      	cmp	r2, r3
 800327a:	d80f      	bhi.n	800329c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <DMA_CalcBaseAndBitshift+0x64>)
 8003284:	4413      	add	r3, r2
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <DMA_CalcBaseAndBitshift+0x6c>)
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800329a:	e00e      	b.n	80032ba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <DMA_CalcBaseAndBitshift+0x70>)
 80032a4:	4413      	add	r3, r2
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <DMA_CalcBaseAndBitshift+0x68>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <DMA_CalcBaseAndBitshift+0x74>)
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40020407 	.word	0x40020407
 80032cc:	bffdfff8 	.word	0xbffdfff8
 80032d0:	cccccccd 	.word	0xcccccccd
 80032d4:	40020000 	.word	0x40020000
 80032d8:	bffdfbf8 	.word	0xbffdfbf8
 80032dc:	40020400 	.word	0x40020400

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ee:	e154      	b.n	800359a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	2101      	movs	r1, #1
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8146 	beq.w	8003594 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x38>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b12      	cmp	r3, #18
 8003316:	d123      	bne.n	8003360 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	6939      	ldr	r1, [r7, #16]
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d00b      	beq.n	80033b4 <HAL_GPIO_Init+0xd4>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d007      	beq.n	80033b4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033a8:	2b11      	cmp	r3, #17
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b12      	cmp	r3, #18
 80033b2:	d130      	bne.n	8003416 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ea:	2201      	movs	r2, #1
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0201 	and.w	r2, r3, #1
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80a0 	beq.w	8003594 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003454:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <HAL_GPIO_Init+0x2d8>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_GPIO_Init+0x2d8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6193      	str	r3, [r2, #24]
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_GPIO_Init+0x2d8>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800346c:	4a53      	ldr	r2, [pc, #332]	; (80035bc <HAL_GPIO_Init+0x2dc>)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	3302      	adds	r3, #2
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	220f      	movs	r2, #15
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003496:	d019      	beq.n	80034cc <HAL_GPIO_Init+0x1ec>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a49      	ldr	r2, [pc, #292]	; (80035c0 <HAL_GPIO_Init+0x2e0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_GPIO_Init+0x1e8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a48      	ldr	r2, [pc, #288]	; (80035c4 <HAL_GPIO_Init+0x2e4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00d      	beq.n	80034c4 <HAL_GPIO_Init+0x1e4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a47      	ldr	r2, [pc, #284]	; (80035c8 <HAL_GPIO_Init+0x2e8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <HAL_GPIO_Init+0x1e0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a46      	ldr	r2, [pc, #280]	; (80035cc <HAL_GPIO_Init+0x2ec>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_GPIO_Init+0x1dc>
 80034b8:	2304      	movs	r3, #4
 80034ba:	e008      	b.n	80034ce <HAL_GPIO_Init+0x1ee>
 80034bc:	2305      	movs	r3, #5
 80034be:	e006      	b.n	80034ce <HAL_GPIO_Init+0x1ee>
 80034c0:	2303      	movs	r3, #3
 80034c2:	e004      	b.n	80034ce <HAL_GPIO_Init+0x1ee>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e002      	b.n	80034ce <HAL_GPIO_Init+0x1ee>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_GPIO_Init+0x1ee>
 80034cc:	2300      	movs	r3, #0
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	f002 0203 	and.w	r2, r2, #3
 80034d4:	0092      	lsls	r2, r2, #2
 80034d6:	4093      	lsls	r3, r2
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034de:	4937      	ldr	r1, [pc, #220]	; (80035bc <HAL_GPIO_Init+0x2dc>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ec:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003510:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800353a:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003564:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800358e:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <HAL_GPIO_Init+0x2f0>)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3301      	adds	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f47f aea3 	bne.w	80032f0 <HAL_GPIO_Init+0x10>
  }
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40010000 	.word	0x40010000
 80035c0:	48000400 	.word	0x48000400
 80035c4:	48000800 	.word	0x48000800
 80035c8:	48000c00 	.word	0x48000c00
 80035cc:	48001000 	.word	0x48001000
 80035d0:	40010400 	.word	0x40010400

080035d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e081      	b.n	80036ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fe54 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	e006      	b.n	800365c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800365a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d104      	bne.n	800366e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800366c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800367c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003680:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003690:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	ea42 0103 	orr.w	r1, r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69d9      	ldr	r1, [r3, #28]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	d138      	bne.n	800377a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003712:	2302      	movs	r3, #2
 8003714:	e032      	b.n	800377c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2224      	movs	r2, #36	; 0x24
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003744:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6819      	ldr	r1, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	d139      	bne.n	8003812 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e033      	b.n	8003814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e092      	b.n	800395c <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b05      	cmp	r3, #5
 8003840:	d101      	bne.n	8003846 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e08a      	b.n	800395c <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d101      	bne.n	8003856 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e082      	b.n	800395c <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_OPAMP_Init+0x144>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4a3f      	ldr	r2, [pc, #252]	; (8003964 <HAL_OPAMP_Init+0x144>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6193      	str	r3, [r2, #24]
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_OPAMP_Init+0x144>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fdc2 	bl	8001418 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d003      	beq.n	80038a4 <HAL_OPAMP_Init+0x84>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d125      	bne.n	80038f0 <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <HAL_OPAMP_Init+0x148>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6851      	ldr	r1, [r2, #4]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6912      	ldr	r2, [r2, #16]
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6992      	ldr	r2, [r2, #24]
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	69d2      	ldr	r2, [r2, #28]
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6a12      	ldr	r2, [r2, #32]
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038da:	04d2      	lsls	r2, r2, #19
 80038dc:	4311      	orrs	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038e2:	0612      	lsls	r2, r2, #24
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	430b      	orrs	r3, r1
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e02a      	b.n	8003946 <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_OPAMP_Init+0x148>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6851      	ldr	r1, [r2, #4]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6892      	ldr	r2, [r2, #8]
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6912      	ldr	r2, [r2, #16]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6952      	ldr	r2, [r2, #20]
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6992      	ldr	r2, [r2, #24]
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	69d2      	ldr	r2, [r2, #28]
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6a12      	ldr	r2, [r2, #32]
 8003926:	4311      	orrs	r1, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003932:	04d2      	lsls	r2, r2, #19
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800393a:	0612      	lsls	r2, r2, #24
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	430b      	orrs	r3, r1
 8003944:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	e0003811 	.word	0xe0003811

0800396c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396e:	b08b      	sub	sp, #44	; 0x2c
 8003970:	af06      	add	r7, sp, #24
 8003972:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0a6      	b.n	8003acc <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f009 fb9e 	bl	800d0d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f004 f84b 	bl	8007a40 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	e035      	b.n	8003a1c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	015b      	lsls	r3, r3, #5
 80039b6:	4413      	add	r3, r2
 80039b8:	3329      	adds	r3, #41	; 0x29
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	015b      	lsls	r3, r3, #5
 80039c4:	4413      	add	r3, r2
 80039c6:	3328      	adds	r3, #40	; 0x28
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	b291      	uxth	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	4413      	add	r3, r2
 80039d8:	3336      	adds	r3, #54	; 0x36
 80039da:	460a      	mov	r2, r1
 80039dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	4413      	add	r3, r2
 80039e6:	332b      	adds	r3, #43	; 0x2b
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	4413      	add	r3, r2
 80039f4:	3338      	adds	r3, #56	; 0x38
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	015b      	lsls	r3, r3, #5
 8003a00:	4413      	add	r3, r2
 8003a02:	333c      	adds	r3, #60	; 0x3c
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	015b      	lsls	r3, r3, #5
 8003a10:	4413      	add	r3, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3c4      	bcc.n	80039b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
 8003a2a:	e031      	b.n	8003a90 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	015b      	lsls	r3, r3, #5
 8003a32:	4413      	add	r3, r2
 8003a34:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	015b      	lsls	r3, r3, #5
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	015b      	lsls	r3, r3, #5
 8003a52:	4413      	add	r3, r2
 8003a54:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	015b      	lsls	r3, r3, #5
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	330a      	adds	r3, #10
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	4413      	add	r3, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3c8      	bcc.n	8003a2c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	687e      	ldr	r6, [r7, #4]
 8003aa2:	466d      	mov	r5, sp
 8003aa4:	f106 0410 	add.w	r4, r6, #16
 8003aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	1d33      	adds	r3, r6, #4
 8003ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab4:	6838      	ldr	r0, [r7, #0]
 8003ab6:	f003 ffe0 	bl	8007a7a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_PCD_Start+0x16>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e016      	b.n	8003b18 <HAL_PCD_Start+0x44>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003af2:	2101      	movs	r1, #1
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f009 fd7d 	bl	800d5f4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f005 f826 	bl	8008b50 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 ff81 	bl	8007a10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f005 f81a 	bl	8008b66 <USB_ReadInterrupts>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d102      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fae8 	bl	8004114 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f005 f80c 	bl	8008b66 <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b58:	d112      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f009 fb49 	bl	800d20a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8d2 	bl	8003d24 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 ffee 	bl	8008b66 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b94:	d10b      	bne.n	8003bae <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 ffd7 	bl	8008b66 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	d10b      	bne.n	8003bdc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f004 ffc0 	bl	8008b66 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d126      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0204 	bic.w	r2, r2, #4
 8003c04:	b292      	uxth	r2, r2
 8003c06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0208 	bic.w	r2, r2, #8
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f009 fb2a 	bl	800d27c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 ff8e 	bl	8008b66 <USB_ReadInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c54:	d131      	bne.n	8003cba <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0208 	orr.w	r2, r2, #8
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c80:	b292      	uxth	r2, r2
 8003c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0204 	orr.w	r2, r2, #4
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 ff5f 	bl	8008b66 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	d002      	beq.n	8003cba <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f009 fac7 	bl	800d248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f004 ff51 	bl	8008b66 <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cce:	d10e      	bne.n	8003cee <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f009 fa80 	bl	800d1ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f004 ff37 	bl	8008b66 <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d10b      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d16:	b292      	uxth	r2, r2
 8003d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_PCD_SetAddress+0x1a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e013      	b.n	8003d66 <HAL_PCD_SetAddress+0x42>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 fee6 	bl	8008b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	70fb      	strb	r3, [r7, #3]
 8003d80:	460b      	mov	r3, r1
 8003d82:	803b      	strh	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da0b      	bge.n	8003dac <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	015b      	lsls	r3, r3, #5
 8003d9c:	3328      	adds	r3, #40	; 0x28
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	705a      	strb	r2, [r3, #1]
 8003daa:	e00b      	b.n	8003dc4 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	015b      	lsls	r3, r3, #5
 8003db4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dd0:	883a      	ldrh	r2, [r7, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	78ba      	ldrb	r2, [r7, #2]
 8003dda:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dee:	78bb      	ldrb	r3, [r7, #2]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d102      	bne.n	8003dfa <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_PCD_EP_Open+0x9a>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e00e      	b.n	8003e26 <HAL_PCD_EP_Open+0xb8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 fe54 	bl	8007ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003e24:	7afb      	ldrb	r3, [r7, #11]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da0b      	bge.n	8003e5a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	015b      	lsls	r3, r3, #5
 8003e4a:	3328      	adds	r3, #40	; 0x28
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	705a      	strb	r2, [r3, #1]
 8003e58:	e00b      	b.n	8003e72 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	015b      	lsls	r3, r3, #5
 8003e62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_PCD_EP_Close+0x5e>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e00e      	b.n	8003eaa <HAL_PCD_EP_Close+0x7c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 f906 	bl	80080ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eec:	7afb      	ldrb	r3, [r7, #11]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6979      	ldr	r1, [r7, #20]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fa65 	bl	80083d8 <USB_EPStartXfer>
 8003f0e:	e005      	b.n	8003f1c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f004 fa5e 	bl	80083d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	330a      	adds	r3, #10
 8003f3c:	015b      	lsls	r3, r3, #5
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	015b      	lsls	r3, r3, #5
 8003f68:	3328      	adds	r3, #40	; 0x28
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2201      	movs	r2, #1
 8003f86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6979      	ldr	r1, [r7, #20]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 fa17 	bl	80083d8 <USB_EPStartXfer>
 8003faa:	e005      	b.n	8003fb8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6979      	ldr	r1, [r7, #20]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 fa10 	bl	80083d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 0207 	and.w	r2, r3, #7
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d901      	bls.n	8003fe0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e046      	b.n	800406e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da0b      	bge.n	8004000 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	015b      	lsls	r3, r3, #5
 8003ff0:	3328      	adds	r3, #40	; 0x28
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	705a      	strb	r2, [r3, #1]
 8003ffe:	e009      	b.n	8004014 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	015b      	lsls	r3, r3, #5
 8004004:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4413      	add	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_PCD_EP_SetStall+0x72>
 8004030:	2302      	movs	r3, #2
 8004032:	e01c      	b.n	800406e <HAL_PCD_EP_SetStall+0xac>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68f9      	ldr	r1, [r7, #12]
 8004042:	4618      	mov	r0, r3
 8004044:	f004 fc9a 	bl	800897c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f004 fd91 	bl	8008b86 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d901      	bls.n	8004094 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e03a      	b.n	800410a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da0b      	bge.n	80040b4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	015b      	lsls	r3, r3, #5
 80040a4:	3328      	adds	r3, #40	; 0x28
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	705a      	strb	r2, [r3, #1]
 80040b2:	e00b      	b.n	80040cc <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	015b      	lsls	r3, r3, #5
 80040bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_EP_ClrStall+0x76>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e00e      	b.n	800410a <HAL_PCD_EP_ClrStall+0x94>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f004 fc80 	bl	8008a00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800411c:	e286      	b.n	800462c <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004126:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004128:	8afb      	ldrh	r3, [r7, #22]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004132:	7d7b      	ldrb	r3, [r7, #21]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 8146 	bne.w	80043c6 <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800413a:	8afb      	ldrh	r3, [r7, #22]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d151      	bne.n	80041e8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	b29c      	uxth	r4, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800415e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004162:	b29b      	uxth	r3, r3
 8004164:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3328      	adds	r3, #40	; 0x28
 800416a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004174:	b29b      	uxth	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	3302      	adds	r3, #2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041a6:	2100      	movs	r1, #0
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f009 f809 	bl	800d1c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8238 	beq.w	800462c <PCD_EP_ISR_Handler+0x518>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8233 	bne.w	800462c <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b292      	uxth	r2, r2
 80041da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041e6:	e221      	b.n	800462c <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041ee:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041f8:	8a7b      	ldrh	r3, [r7, #18]
 80041fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d033      	beq.n	800426a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	3306      	adds	r3, #6
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004240:	b29b      	uxth	r3, r3
 8004242:	f004 fcf1 	bl	8008c28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29a      	uxth	r2, r3
 800424e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004252:	4013      	ands	r3, r2
 8004254:	b29c      	uxth	r4, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800425e:	b292      	uxth	r2, r2
 8004260:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f008 ff82 	bl	800d16c <HAL_PCD_SetupStageCallback>
 8004268:	e1e0      	b.n	800462c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800426a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f280 81dc 	bge.w	800462c <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29a      	uxth	r2, r3
 800427c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004280:	4013      	ands	r3, r2
 8004282:	b29c      	uxth	r4, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800428c:	b292      	uxth	r2, r2
 800428e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	3306      	adds	r3, #6
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d019      	beq.n	80042f8 <PCD_EP_ISR_Handler+0x1e4>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6959      	ldr	r1, [r3, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f004 fca3 	bl	8008c28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	441a      	add	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f008 ff4c 	bl	800d190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461c      	mov	r4, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	441c      	add	r4, r3
 800430a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d110      	bne.n	800433a <PCD_EP_ISR_Handler+0x226>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004320:	b29a      	uxth	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004332:	b29a      	uxth	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	e02f      	b.n	800439a <PCD_EP_ISR_Handler+0x286>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b3e      	cmp	r3, #62	; 0x3e
 8004340:	d813      	bhi.n	800436a <PCD_EP_ISR_Handler+0x256>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <PCD_EP_ISR_Handler+0x248>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	3301      	adds	r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	b29b      	uxth	r3, r3
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	b29a      	uxth	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	e017      	b.n	800439a <PCD_EP_ISR_Handler+0x286>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <PCD_EP_ISR_Handler+0x270>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3b01      	subs	r3, #1
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	b29b      	uxth	r3, r3
 8004388:	029b      	lsls	r3, r3, #10
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	b29c      	uxth	r4, r3
 80043ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80043b0:	b29c      	uxth	r4, r3
 80043b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80043b6:	b29c      	uxth	r4, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4ba2      	ldr	r3, [pc, #648]	; (8004648 <PCD_EP_ISR_Handler+0x534>)
 80043be:	4323      	orrs	r3, r4
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
 80043c4:	e132      	b.n	800462c <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	7d7b      	ldrb	r3, [r7, #21]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f280 80d1 	bge.w	8004582 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	7d7b      	ldrb	r3, [r7, #21]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043f4:	4013      	ands	r3, r2
 80043f6:	b29c      	uxth	r4, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	7d7b      	ldrb	r3, [r7, #21]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004408:	b292      	uxth	r2, r2
 800440a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800440c:	7d7b      	ldrb	r3, [r7, #21]
 800440e:	015b      	lsls	r3, r3, #5
 8004410:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	7b1b      	ldrb	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d121      	bne.n	8004466 <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	3306      	adds	r3, #6
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800444c:	8bfb      	ldrh	r3, [r7, #30]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d072      	beq.n	8004538 <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6959      	ldr	r1, [r3, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88da      	ldrh	r2, [r3, #6]
 800445e:	8bfb      	ldrh	r3, [r7, #30]
 8004460:	f004 fbe2 	bl	8008c28 <USB_ReadPMA>
 8004464:	e068      	b.n	8004538 <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d021      	beq.n	80044c4 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004488:	b29b      	uxth	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	3302      	adds	r3, #2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80044aa:	8bfb      	ldrh	r3, [r7, #30]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02a      	beq.n	8004506 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6959      	ldr	r1, [r3, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	891a      	ldrh	r2, [r3, #8]
 80044bc:	8bfb      	ldrh	r3, [r7, #30]
 80044be:	f004 fbb3 	bl	8008c28 <USB_ReadPMA>
 80044c2:	e020      	b.n	8004506 <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	3306      	adds	r3, #6
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ec:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80044ee:	8bfb      	ldrh	r3, [r7, #30]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6959      	ldr	r1, [r3, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	895a      	ldrh	r2, [r3, #10]
 8004500:	8bfb      	ldrh	r3, [r7, #30]
 8004502:	f004 fb91 	bl	8008c28 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	b29c      	uxth	r4, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <PCD_EP_ISR_Handler+0x538>)
 8004532:	4323      	orrs	r3, r4
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	441a      	add	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	8bfb      	ldrh	r3, [r7, #30]
 800454a:	441a      	add	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <PCD_EP_ISR_Handler+0x44e>
 8004558:	8bfa      	ldrh	r2, [r7, #30]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d206      	bcs.n	8004570 <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f008 fe11 	bl	800d190 <HAL_PCD_DataOutStageCallback>
 800456e:	e008      	b.n	8004582 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	7819      	ldrb	r1, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fc98 	bl	8003eb2 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004582:	8a7b      	ldrh	r3, [r7, #18]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d04f      	beq.n	800462c <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 800458c:	7d7b      	ldrb	r3, [r7, #21]
 800458e:	015b      	lsls	r3, r3, #5
 8004590:	3328      	adds	r3, #40	; 0x28
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	7d7b      	ldrb	r3, [r7, #21]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	b29c      	uxth	r4, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	7d7b      	ldrb	r3, [r7, #21]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80045c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	3302      	adds	r3, #2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	441a      	add	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f008 fdd4 	bl	800d1c0 <HAL_PCD_DataInStageCallback>
 8004618:	e008      	b.n	800462c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	7819      	ldrb	r1, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fc92 	bl	8003f50 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004634:	b29b      	uxth	r3, r3
 8004636:	b21b      	sxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	f6ff ad70 	blt.w	800411e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3724      	adds	r7, #36	; 0x24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}
 8004648:	ffff8080 	.word	0xffff8080
 800464c:	ffff80c0 	.word	0xffff80c0

08004650 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	817b      	strh	r3, [r7, #10]
 800465e:	4613      	mov	r3, r2
 8004660:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	015b      	lsls	r3, r3, #5
 8004676:	3328      	adds	r3, #40	; 0x28
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e006      	b.n	800468e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	015b      	lsls	r3, r3, #5
 8004684:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800468e:	893b      	ldrh	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	b29a      	uxth	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	80da      	strh	r2, [r3, #6]
 80046a2:	e00b      	b.n	80046bc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2201      	movs	r2, #1
 80046a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	1d3b      	adds	r3, r7, #4
 80046d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f000 bef4 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 816a 	beq.w	80049ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046f6:	4bb3      	ldr	r3, [pc, #716]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00c      	beq.n	800471c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004702:	4bb0      	ldr	r3, [pc, #704]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b08      	cmp	r3, #8
 800470c:	d159      	bne.n	80047c2 <HAL_RCC_OscConfig+0xf6>
 800470e:	4bad      	ldr	r3, [pc, #692]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471a:	d152      	bne.n	80047c2 <HAL_RCC_OscConfig+0xf6>
 800471c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004720:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004730:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	fab3 f383 	clz	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d102      	bne.n	800474e <HAL_RCC_OscConfig+0x82>
 8004748:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	e015      	b.n	800477a <HAL_RCC_OscConfig+0xae>
 800474e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004752:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004766:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800476a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004776:	4b93      	ldr	r3, [pc, #588]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800477e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004782:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004786:	fa92 f2a2 	rbit	r2, r2
 800478a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800478e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f042 0220 	orr.w	r2, r2, #32
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f002 021f 	and.w	r2, r2, #31
 80047a2:	2101      	movs	r1, #1
 80047a4:	fa01 f202 	lsl.w	r2, r1, r2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 810c 	beq.w	80049c8 <HAL_RCC_OscConfig+0x2fc>
 80047b0:	1d3b      	adds	r3, r7, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 8106 	bne.w	80049c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f000 be86 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d106      	bne.n	80047dc <HAL_RCC_OscConfig+0x110>
 80047ce:	4b7d      	ldr	r3, [pc, #500]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7c      	ldr	r2, [pc, #496]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e030      	b.n	800483e <HAL_RCC_OscConfig+0x172>
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x134>
 80047e6:	4b77      	ldr	r3, [pc, #476]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a76      	ldr	r2, [pc, #472]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80047ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b74      	ldr	r3, [pc, #464]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a73      	ldr	r2, [pc, #460]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80047f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e01e      	b.n	800483e <HAL_RCC_OscConfig+0x172>
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480a:	d10c      	bne.n	8004826 <HAL_RCC_OscConfig+0x15a>
 800480c:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6c      	ldr	r2, [pc, #432]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a69      	ldr	r2, [pc, #420]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e00b      	b.n	800483e <HAL_RCC_OscConfig+0x172>
 8004826:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a66      	ldr	r2, [pc, #408]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800482c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a63      	ldr	r2, [pc, #396]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800483e:	4b61      	ldr	r3, [pc, #388]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f023 020f 	bic.w	r2, r3, #15
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	495d      	ldr	r1, [pc, #372]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d059      	beq.n	8004910 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd f93c 	bl	8001ad8 <HAL_GetTick>
 8004860:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004866:	f7fd f937 	bl	8001ad8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d902      	bls.n	800487c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	f000 be29 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>
 800487c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004880:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004890:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0x1e2>
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	e015      	b.n	80048da <HAL_RCC_OscConfig+0x20e>
 80048ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80048c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80048ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80048e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80048e6:	fa92 f2a2 	rbit	r2, r2
 80048ea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80048ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80048f2:	fab2 f282 	clz	r2, r2
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	f042 0220 	orr.w	r2, r2, #32
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	f002 021f 	and.w	r2, r2, #31
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f202 	lsl.w	r2, r1, r2
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ab      	beq.n	8004866 <HAL_RCC_OscConfig+0x19a>
 800490e:	e05c      	b.n	80049ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd f8e2 	bl	8001ad8 <HAL_GetTick>
 8004914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800491a:	f7fd f8dd 	bl	8001ad8 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d902      	bls.n	8004930 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	f000 bdcf 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>
 8004930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004934:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004944:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <HAL_RCC_OscConfig+0x296>
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x2c2>
 8004962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004966:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800497e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004992:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004996:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800499a:	fa92 f2a2 	rbit	r2, r2
 800499e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80049a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80049a6:	fab2 f282 	clz	r2, r2
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	f042 0220 	orr.w	r2, r2, #32
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	f002 021f 	and.w	r2, r2, #31
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f202 	lsl.w	r2, r1, r2
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1ab      	bne.n	800491a <HAL_RCC_OscConfig+0x24e>
 80049c2:	e002      	b.n	80049ca <HAL_RCC_OscConfig+0x2fe>
 80049c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 816f 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80049da:	4bd0      	ldr	r3, [pc, #832]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049e6:	4bcd      	ldr	r3, [pc, #820]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d16c      	bne.n	8004acc <HAL_RCC_OscConfig+0x400>
 80049f2:	4bca      	ldr	r3, [pc, #808]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d166      	bne.n	8004acc <HAL_RCC_OscConfig+0x400>
 80049fe:	2302      	movs	r3, #2
 8004a00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a14:	fab3 f383 	clz	r3, r3
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d102      	bne.n	8004a2e <HAL_RCC_OscConfig+0x362>
 8004a28:	4bbc      	ldr	r3, [pc, #752]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	e013      	b.n	8004a56 <HAL_RCC_OscConfig+0x38a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004a40:	2302      	movs	r3, #2
 8004a42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a52:	4bb2      	ldr	r3, [pc, #712]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2202      	movs	r2, #2
 8004a58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004a5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004a60:	fa92 f2a2 	rbit	r2, r2
 8004a64:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004a68:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a6c:	fab2 f282 	clz	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f042 0220 	orr.w	r2, r2, #32
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	f002 021f 	and.w	r2, r2, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_RCC_OscConfig+0x3cc>
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f000 bd1b 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4ba0      	ldr	r3, [pc, #640]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	21f8      	movs	r1, #248	; 0xf8
 8004aa8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ab0:	fa91 f1a1 	rbit	r1, r1
 8004ab4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004ab8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004abc:	fab1 f181 	clz	r1, r1
 8004ac0:	b2c9      	uxtb	r1, r1
 8004ac2:	408b      	lsls	r3, r1
 8004ac4:	4995      	ldr	r1, [pc, #596]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aca:	e0f5      	b.n	8004cb8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8085 	beq.w	8004be2 <HAL_RCC_OscConfig+0x516>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004aea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	461a      	mov	r2, r3
 8004b00:	2301      	movs	r3, #1
 8004b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fc ffe8 	bl	8001ad8 <HAL_GetTick>
 8004b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fc ffe3 	bl	8001ad8 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d902      	bls.n	8004b24 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	f000 bcd5 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004b36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3a:	fab3 f383 	clz	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d102      	bne.n	8004b54 <HAL_RCC_OscConfig+0x488>
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	e013      	b.n	8004b7c <HAL_RCC_OscConfig+0x4b0>
 8004b54:	2302      	movs	r3, #2
 8004b56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b66:	2302      	movs	r3, #2
 8004b68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b78:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b86:	fa92 f2a2 	rbit	r2, r2
 8004b8a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b92:	fab2 f282 	clz	r2, r2
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	f042 0220 	orr.w	r2, r2, #32
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	f002 021f 	and.w	r2, r2, #31
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0af      	beq.n	8004b0e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bae:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	21f8      	movs	r1, #248	; 0xf8
 8004bbe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004bc6:	fa91 f1a1 	rbit	r1, r1
 8004bca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004bce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004bd2:	fab1 f181 	clz	r1, r1
 8004bd6:	b2c9      	uxtb	r1, r1
 8004bd8:	408b      	lsls	r3, r1
 8004bda:	4950      	ldr	r1, [pc, #320]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]
 8004be0:	e06a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x5ec>
 8004be2:	2301      	movs	r3, #1
 8004be4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fc ff63 	bl	8001ad8 <HAL_GetTick>
 8004c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c18:	f7fc ff5e 	bl	8001ad8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d902      	bls.n	8004c2e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	f000 bc50 	b.w	80054ce <HAL_RCC_OscConfig+0xe02>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d102      	bne.n	8004c5e <HAL_RCC_OscConfig+0x592>
 8004c58:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	e013      	b.n	8004c86 <HAL_RCC_OscConfig+0x5ba>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c70:	2302      	movs	r3, #2
 8004c72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <HAL_RCC_OscConfig+0x650>)
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2202      	movs	r2, #2
 8004c88:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c8c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c90:	fa92 f2a2 	rbit	r2, r2
 8004c94:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c9c:	fab2 f282 	clz	r2, r2
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	f042 0220 	orr.w	r2, r2, #32
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	f002 021f 	and.w	r2, r2, #31
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1af      	bne.n	8004c18 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80da 	beq.w	8004e7c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc8:	1d3b      	adds	r3, r7, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d069      	beq.n	8004da6 <HAL_RCC_OscConfig+0x6da>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce8:	fab3 f383 	clz	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_OscConfig+0x654>)
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfc:	f7fc feec 	bl	8001ad8 <HAL_GetTick>
 8004d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d04:	e00e      	b.n	8004d24 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d06:	f7fc fee7 	bl	8001ad8 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d906      	bls.n	8004d24 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e3d9      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	10908120 	.word	0x10908120
 8004d24:	2302      	movs	r3, #2
 8004d26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d2e:	fa93 f3a3 	rbit	r3, r3
 8004d32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	fa93 f2a3 	rbit	r2, r3
 8004d48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d52:	2202      	movs	r2, #2
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	fa93 f2a3 	rbit	r2, r3
 8004d60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	4ba5      	ldr	r3, [pc, #660]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d6e:	2102      	movs	r1, #2
 8004d70:	6019      	str	r1, [r3, #0]
 8004d72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f1a3 	rbit	r1, r3
 8004d7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d80:	6019      	str	r1, [r3, #0]
  return result;
 8004d82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0b0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x63a>
 8004da4:	e06a      	b.n	8004e7c <HAL_RCC_OscConfig+0x7b0>
 8004da6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	fa93 f2a3 	rbit	r2, r3
 8004db8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004dbc:	601a      	str	r2, [r3, #0]
  return result;
 8004dbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004dc2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc4:	fab3 f383 	clz	r3, r3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b8c      	ldr	r3, [pc, #560]	; (8005000 <HAL_RCC_OscConfig+0x934>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd8:	f7fc fe7e 	bl	8001ad8 <HAL_GetTick>
 8004ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de0:	e009      	b.n	8004df6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de2:	f7fc fe79 	bl	8001ad8 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e36b      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 8004df6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	fa93 f2a3 	rbit	r2, r3
 8004e08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004e12:	2202      	movs	r2, #2
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	fa93 f2a3 	rbit	r2, r3
 8004e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	fa93 f2a3 	rbit	r2, r3
 8004e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004e3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3e:	4b6f      	ldr	r3, [pc, #444]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e46:	2102      	movs	r1, #2
 8004e48:	6019      	str	r1, [r3, #0]
 8004e4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	fa93 f1a3 	rbit	r1, r3
 8004e54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e58:	6019      	str	r1, [r3, #0]
  return result;
 8004e5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	fab3 f383 	clz	r3, r3
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1b2      	bne.n	8004de2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8158 	beq.w	800513c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e92:	4b5a      	ldr	r3, [pc, #360]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d112      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	4b57      	ldr	r3, [pc, #348]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4a56      	ldr	r2, [pc, #344]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	61d3      	str	r3, [r2, #28]
 8004eaa:	4b54      	ldr	r3, [pc, #336]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004eb2:	f107 0308 	add.w	r3, r7, #8
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f107 0308 	add.w	r3, r7, #8
 8004ebc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec4:	4b4f      	ldr	r3, [pc, #316]	; (8005004 <HAL_RCC_OscConfig+0x938>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11a      	bne.n	8004f06 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed0:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <HAL_RCC_OscConfig+0x938>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a4b      	ldr	r2, [pc, #300]	; (8005004 <HAL_RCC_OscConfig+0x938>)
 8004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eda:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004edc:	f7fc fdfc 	bl	8001ad8 <HAL_GetTick>
 8004ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e009      	b.n	8004efa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fc fdf7 	bl	8001ad8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e2e9      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b42      	ldr	r3, [pc, #264]	; (8005004 <HAL_RCC_OscConfig+0x938>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ef      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x852>
 8004f10:	4b3a      	ldr	r3, [pc, #232]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	4a39      	ldr	r2, [pc, #228]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6213      	str	r3, [r2, #32]
 8004f1c:	e02f      	b.n	8004f7e <HAL_RCC_OscConfig+0x8b2>
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCC_OscConfig+0x876>
 8004f28:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4a33      	ldr	r2, [pc, #204]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6213      	str	r3, [r2, #32]
 8004f34:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a30      	ldr	r2, [pc, #192]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	6213      	str	r3, [r2, #32]
 8004f40:	e01d      	b.n	8004f7e <HAL_RCC_OscConfig+0x8b2>
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d10c      	bne.n	8004f66 <HAL_RCC_OscConfig+0x89a>
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	6213      	str	r3, [r2, #32]
 8004f58:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6213      	str	r3, [r2, #32]
 8004f64:	e00b      	b.n	8004f7e <HAL_RCC_OscConfig+0x8b2>
 8004f66:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	6213      	str	r3, [r2, #32]
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d06b      	beq.n	8005060 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fc fda6 	bl	8001ad8 <HAL_GetTick>
 8004f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f90:	e00b      	b.n	8004faa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f92:	f7fc fda1 	bl	8001ad8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e291      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 8004faa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fae:	2202      	movs	r2, #2
 8004fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f2a3 	rbit	r2, r3
 8004fbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004fd8:	601a      	str	r2, [r3, #0]
  return result;
 8004fda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004fde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	fab3 f383 	clz	r3, r3
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d109      	bne.n	8005008 <HAL_RCC_OscConfig+0x93c>
 8004ff4:	4b01      	ldr	r3, [pc, #4]	; (8004ffc <HAL_RCC_OscConfig+0x930>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	e014      	b.n	8005024 <HAL_RCC_OscConfig+0x958>
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000
 8005000:	10908120 	.word	0x10908120
 8005004:	40007000 	.word	0x40007000
 8005008:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800500c:	2202      	movs	r2, #2
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	fa93 f2a3 	rbit	r2, r3
 800501a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	4bbb      	ldr	r3, [pc, #748]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005028:	2102      	movs	r1, #2
 800502a:	6011      	str	r1, [r2, #0]
 800502c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	fa92 f1a2 	rbit	r1, r2
 8005036:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800503a:	6011      	str	r1, [r2, #0]
  return result;
 800503c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	fab2 f282 	clz	r2, r2
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	f002 021f 	and.w	r2, r2, #31
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f202 	lsl.w	r2, r1, r2
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d099      	beq.n	8004f92 <HAL_RCC_OscConfig+0x8c6>
 800505e:	e063      	b.n	8005128 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005060:	f7fc fd3a 	bl	8001ad8 <HAL_GetTick>
 8005064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005068:	e00b      	b.n	8005082 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fc fd35 	bl	8001ad8 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e225      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 8005082:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005086:	2202      	movs	r2, #2
 8005088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fa93 f2a3 	rbit	r2, r3
 8005094:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800509e:	2202      	movs	r2, #2
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	fa93 f2a3 	rbit	r2, r3
 80050ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050b0:	601a      	str	r2, [r3, #0]
  return result;
 80050b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b8:	fab3 f383 	clz	r3, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f043 0302 	orr.w	r3, r3, #2
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d102      	bne.n	80050d2 <HAL_RCC_OscConfig+0xa06>
 80050cc:	4b90      	ldr	r3, [pc, #576]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	e00d      	b.n	80050ee <HAL_RCC_OscConfig+0xa22>
 80050d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80050d6:	2202      	movs	r2, #2
 80050d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fa93 f2a3 	rbit	r2, r3
 80050e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	4b89      	ldr	r3, [pc, #548]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80050f2:	2102      	movs	r1, #2
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	fa92 f1a2 	rbit	r1, r2
 8005100:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005104:	6011      	str	r1, [r2, #0]
  return result;
 8005106:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	fab2 f282 	clz	r2, r2
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	f002 021f 	and.w	r2, r2, #31
 800511c:	2101      	movs	r1, #1
 800511e:	fa01 f202 	lsl.w	r2, r1, r2
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1a0      	bne.n	800506a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005128:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b77      	ldr	r3, [pc, #476]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4a76      	ldr	r2, [pc, #472]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 8005136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 81c2 	beq.w	80054cc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005148:	4b71      	ldr	r3, [pc, #452]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	f000 819c 	beq.w	800548e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	2b02      	cmp	r3, #2
 800515e:	f040 8114 	bne.w	800538a <HAL_RCC_OscConfig+0xcbe>
 8005162:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005166:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800516a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	fa93 f2a3 	rbit	r2, r3
 8005176:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800517a:	601a      	str	r2, [r3, #0]
  return result;
 800517c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005180:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800518c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fc fc9e 	bl	8001ad8 <HAL_GetTick>
 800519c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a0:	e009      	b.n	80051b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fc fc99 	bl	8001ad8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e18b      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 80051b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80051ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	fa93 f2a3 	rbit	r2, r3
 80051ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051ce:	601a      	str	r2, [r3, #0]
  return result;
 80051d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HAL_RCC_OscConfig+0xb24>
 80051ea:	4b49      	ldr	r3, [pc, #292]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	e01b      	b.n	8005228 <HAL_RCC_OscConfig+0xb5c>
 80051f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	fa93 f2a3 	rbit	r2, r3
 8005204:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800520e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	fa93 f2a3 	rbit	r2, r3
 800521e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800522c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	fa92 f1a2 	rbit	r1, r2
 800523c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005240:	6011      	str	r1, [r2, #0]
  return result;
 8005242:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	fab2 f282 	clz	r2, r2
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	f042 0220 	orr.w	r2, r2, #32
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	f002 021f 	and.w	r2, r2, #31
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f202 	lsl.w	r2, r1, r2
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d19e      	bne.n	80051a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	430b      	orrs	r3, r1
 800527a:	4925      	ldr	r1, [pc, #148]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
 8005280:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	fa93 f2a3 	rbit	r2, r3
 8005294:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005298:	601a      	str	r2, [r3, #0]
  return result;
 800529a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800529e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a0:	fab3 f383 	clz	r3, r3
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	461a      	mov	r2, r3
 80052b2:	2301      	movs	r3, #1
 80052b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b6:	f7fc fc0f 	bl	8001ad8 <HAL_GetTick>
 80052ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052be:	e009      	b.n	80052d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fc fc0a 	bl	8001ad8 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0fc      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 80052d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	fa93 f2a3 	rbit	r2, r3
 80052e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80052ec:	601a      	str	r2, [r3, #0]
  return result;
 80052ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80052f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052f4:	fab3 f383 	clz	r3, r3
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d105      	bne.n	8005314 <HAL_RCC_OscConfig+0xc48>
 8005308:	4b01      	ldr	r3, [pc, #4]	; (8005310 <HAL_RCC_OscConfig+0xc44>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	e01e      	b.n	800534c <HAL_RCC_OscConfig+0xc80>
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800531c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	fa93 f2a3 	rbit	r2, r3
 8005328:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	fa93 f2a3 	rbit	r2, r3
 8005342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_OscConfig+0xe0c>)
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	fa92 f1a2 	rbit	r1, r2
 8005360:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005364:	6011      	str	r1, [r2, #0]
  return result;
 8005366:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	fab2 f282 	clz	r2, r2
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	f042 0220 	orr.w	r2, r2, #32
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	f002 021f 	and.w	r2, r2, #31
 800537c:	2101      	movs	r1, #1
 800537e:	fa01 f202 	lsl.w	r2, r1, r2
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d09b      	beq.n	80052c0 <HAL_RCC_OscConfig+0xbf4>
 8005388:	e0a0      	b.n	80054cc <HAL_RCC_OscConfig+0xe00>
 800538a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800538e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	fa93 f2a3 	rbit	r2, r3
 800539e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a2:	601a      	str	r2, [r3, #0]
  return result;
 80053a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	2300      	movs	r3, #0
 80053be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fc fb8a 	bl	8001ad8 <HAL_GetTick>
 80053c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c8:	e009      	b.n	80053de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ca:	f7fc fb85 	bl	8001ad8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e077      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
 80053de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	fa93 f2a3 	rbit	r2, r3
 80053f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053f6:	601a      	str	r2, [r3, #0]
  return result;
 80053f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d102      	bne.n	8005418 <HAL_RCC_OscConfig+0xd4c>
 8005412:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_RCC_OscConfig+0xe0c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	e01b      	b.n	8005450 <HAL_RCC_OscConfig+0xd84>
 8005418:	f107 0320 	add.w	r3, r7, #32
 800541c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	f107 0320 	add.w	r3, r7, #32
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	fa93 f2a3 	rbit	r2, r3
 800542c:	f107 031c 	add.w	r3, r7, #28
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f107 0318 	add.w	r3, r7, #24
 8005436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f107 0318 	add.w	r3, r7, #24
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	fa93 f2a3 	rbit	r2, r3
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCC_OscConfig+0xe0c>)
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f107 0210 	add.w	r2, r7, #16
 8005454:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	f107 0210 	add.w	r2, r7, #16
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	fa92 f1a2 	rbit	r1, r2
 8005464:	f107 020c 	add.w	r2, r7, #12
 8005468:	6011      	str	r1, [r2, #0]
  return result;
 800546a:	f107 020c 	add.w	r2, r7, #12
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	fab2 f282 	clz	r2, r2
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	f042 0220 	orr.w	r2, r2, #32
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	f002 021f 	and.w	r2, r2, #31
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f202 	lsl.w	r2, r1, r2
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d19e      	bne.n	80053ca <HAL_RCC_OscConfig+0xcfe>
 800548c:	e01e      	b.n	80054cc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e018      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCC_OscConfig+0xe0c>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80054a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d108      	bne.n	80054c8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80054b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80054ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000

080054dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b09e      	sub	sp, #120	; 0x78
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e162      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054f4:	4b90      	ldr	r3, [pc, #576]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d910      	bls.n	8005524 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b8d      	ldr	r3, [pc, #564]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 0207 	bic.w	r2, r3, #7
 800550a:	498b      	ldr	r1, [pc, #556]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b89      	ldr	r3, [pc, #548]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d001      	beq.n	8005524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e14a      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b82      	ldr	r3, [pc, #520]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	497f      	ldr	r1, [pc, #508]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80dc 	beq.w	8005708 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d13c      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xf6>
 8005558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800555c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005560:	fa93 f3a3 	rbit	r3, r3
 8005564:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005568:	fab3 f383 	clz	r3, r3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d102      	bne.n	8005582 <HAL_RCC_ClockConfig+0xa6>
 800557c:	4b6f      	ldr	r3, [pc, #444]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	e00f      	b.n	80055a2 <HAL_RCC_ClockConfig+0xc6>
 8005582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005586:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	667b      	str	r3, [r7, #100]	; 0x64
 8005590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005594:	663b      	str	r3, [r7, #96]	; 0x60
 8005596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005598:	fa93 f3a3 	rbit	r3, r3
 800559c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800559e:	4b67      	ldr	r3, [pc, #412]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80055a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055aa:	fa92 f2a2 	rbit	r2, r2
 80055ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80055b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055b2:	fab2 f282 	clz	r2, r2
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	f042 0220 	orr.w	r2, r2, #32
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	f002 021f 	and.w	r2, r2, #31
 80055c2:	2101      	movs	r1, #1
 80055c4:	fa01 f202 	lsl.w	r2, r1, r2
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d17b      	bne.n	80056c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0f3      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d13c      	bne.n	8005654 <HAL_RCC_ClockConfig+0x178>
 80055da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ea:	fab3 f383 	clz	r3, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <HAL_RCC_ClockConfig+0x128>
 80055fe:	4b4f      	ldr	r3, [pc, #316]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	e00f      	b.n	8005624 <HAL_RCC_ClockConfig+0x148>
 8005604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005608:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	647b      	str	r3, [r7, #68]	; 0x44
 8005612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005616:	643b      	str	r3, [r7, #64]	; 0x40
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005620:	4b46      	ldr	r3, [pc, #280]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005628:	63ba      	str	r2, [r7, #56]	; 0x38
 800562a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562c:	fa92 f2a2 	rbit	r2, r2
 8005630:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005634:	fab2 f282 	clz	r2, r2
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	f042 0220 	orr.w	r2, r2, #32
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	f002 021f 	and.w	r2, r2, #31
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f202 	lsl.w	r2, r1, r2
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d13a      	bne.n	80056c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0b2      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
 8005654:	2302      	movs	r3, #2
 8005656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d102      	bne.n	800567c <HAL_RCC_ClockConfig+0x1a0>
 8005676:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	e00d      	b.n	8005698 <HAL_RCC_ClockConfig+0x1bc>
 800567c:	2302      	movs	r3, #2
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	2302      	movs	r3, #2
 800568a:	623b      	str	r3, [r7, #32]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	4b29      	ldr	r3, [pc, #164]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2202      	movs	r2, #2
 800569a:	61ba      	str	r2, [r7, #24]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	fa92 f2a2 	rbit	r2, r2
 80056a2:	617a      	str	r2, [r7, #20]
  return result;
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	fab2 f282 	clz	r2, r2
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	f042 0220 	orr.w	r2, r2, #32
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	f002 021f 	and.w	r2, r2, #31
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f202 	lsl.w	r2, r1, r2
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e079      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f023 0203 	bic.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	491a      	ldr	r1, [pc, #104]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d8:	f7fc f9fe 	bl	8001ad8 <HAL_GetTick>
 80056dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e0:	f7fc f9fa 	bl	8001ad8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e061      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 020c 	and.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	429a      	cmp	r2, r3
 8005706:	d1eb      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d214      	bcs.n	8005740 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 0207 	bic.w	r2, r3, #7
 800571e:	4906      	ldr	r1, [pc, #24]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d005      	beq.n	8005740 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e040      	b.n	80057ba <HAL_RCC_ClockConfig+0x2de>
 8005738:	40022000 	.word	0x40022000
 800573c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800574c:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <HAL_RCC_ClockConfig+0x2e8>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	491a      	ldr	r1, [pc, #104]	; (80057c4 <HAL_RCC_ClockConfig+0x2e8>)
 800575a:	4313      	orrs	r3, r2
 800575c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800576a:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <HAL_RCC_ClockConfig+0x2e8>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4912      	ldr	r1, [pc, #72]	; (80057c4 <HAL_RCC_ClockConfig+0x2e8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800577e:	f000 f829 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8005782:	4601      	mov	r1, r0
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <HAL_RCC_ClockConfig+0x2e8>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578c:	22f0      	movs	r2, #240	; 0xf0
 800578e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	fa92 f2a2 	rbit	r2, r2
 8005796:	60fa      	str	r2, [r7, #12]
  return result;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	fab2 f282 	clz	r2, r2
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	40d3      	lsrs	r3, r2
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <HAL_RCC_ClockConfig+0x2ec>)
 80057a4:	5cd3      	ldrb	r3, [r2, r3]
 80057a6:	fa21 f303 	lsr.w	r3, r1, r3
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <HAL_RCC_ClockConfig+0x2f0>)
 80057ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <HAL_RCC_ClockConfig+0x2f4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fc f842 	bl	800183c <HAL_InitTick>
  
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3778      	adds	r7, #120	; 0x78
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
 80057c8:	0800d814 	.word	0x0800d814
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004

080057d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b08b      	sub	sp, #44	; 0x2c
 80057d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	2300      	movs	r3, #0
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d002      	beq.n	8005804 <HAL_RCC_GetSysClockFreq+0x30>
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d003      	beq.n	800580a <HAL_RCC_GetSysClockFreq+0x36>
 8005802:	e03c      	b.n	800587e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005804:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005806:	623b      	str	r3, [r7, #32]
      break;
 8005808:	e03c      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005810:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005814:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	fa92 f2a2 	rbit	r2, r2
 800581c:	607a      	str	r2, [r7, #4]
  return result;
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	fab2 f282 	clz	r2, r2
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	40d3      	lsrs	r3, r2
 8005828:	4a1c      	ldr	r2, [pc, #112]	; (800589c <HAL_RCC_GetSysClockFreq+0xc8>)
 800582a:	5cd3      	ldrb	r3, [r2, r3]
 800582c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800582e:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	220f      	movs	r2, #15
 8005838:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	fa92 f2a2 	rbit	r2, r2
 8005840:	60fa      	str	r2, [r7, #12]
  return result;
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	fab2 f282 	clz	r2, r2
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	40d3      	lsrs	r3, r2
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800584e:	5cd3      	ldrb	r3, [r2, r3]
 8005850:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800585c:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <HAL_RCC_GetSysClockFreq+0xc4>)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	fbb2 f2f3 	udiv	r2, r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	e004      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	623b      	str	r3, [r7, #32]
      break;
 800587c:	e002      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005880:	623b      	str	r3, [r7, #32]
      break;
 8005882:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005884:	6a3b      	ldr	r3, [r7, #32]
}
 8005886:	4618      	mov	r0, r3
 8005888:	372c      	adds	r7, #44	; 0x2c
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	007a1200 	.word	0x007a1200
 800589c:	0800d82c 	.word	0x0800d82c
 80058a0:	0800d83c 	.word	0x0800d83c
 80058a4:	003d0900 	.word	0x003d0900

080058a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80058c6:	f7ff ffef 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058ca:	4601      	mov	r1, r0
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80058d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	fa92 f2a2 	rbit	r2, r2
 80058e0:	603a      	str	r2, [r7, #0]
  return result;
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	fab2 f282 	clz	r2, r2
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	40d3      	lsrs	r3, r2
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <HAL_RCC_GetPCLK1Freq+0x40>)
 80058ee:	5cd3      	ldrb	r3, [r2, r3]
 80058f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40021000 	.word	0x40021000
 8005900:	0800d824 	.word	0x0800d824

08005904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800590a:	f7ff ffcd 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 800590e:	4601      	mov	r1, r0
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005918:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800591c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	fa92 f2a2 	rbit	r2, r2
 8005924:	603a      	str	r2, [r7, #0]
  return result;
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	fab2 f282 	clz	r2, r2
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	40d3      	lsrs	r3, r2
 8005930:	4a04      	ldr	r2, [pc, #16]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005932:	5cd3      	ldrb	r3, [r2, r3]
 8005934:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	0800d824 	.word	0x0800d824

08005948 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	220f      	movs	r2, #15
 8005956:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005958:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <HAL_RCC_GetClockConfig+0x5c>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0203 	and.w	r2, r3, #3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCC_GetClockConfig+0x5c>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	08db      	lsrs	r3, r3, #3
 8005982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <HAL_RCC_GetClockConfig+0x60>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0207 	and.w	r2, r3, #7
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	601a      	str	r2, [r3, #0]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40022000 	.word	0x40022000

080059ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b092      	sub	sp, #72	; 0x48
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80d7 	beq.w	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d0:	4b4e      	ldr	r3, [pc, #312]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10e      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059dc:	4b4b      	ldr	r3, [pc, #300]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4a4a      	ldr	r2, [pc, #296]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e6:	61d3      	str	r3, [r2, #28]
 80059e8:	4b48      	ldr	r3, [pc, #288]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fa:	4b45      	ldr	r3, [pc, #276]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d118      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a06:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a41      	ldr	r2, [pc, #260]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a12:	f7fc f861 	bl	8001ad8 <HAL_GetTick>
 8005a16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a18:	e008      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1a:	f7fc f85d 	bl	8001ad8 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b64      	cmp	r3, #100	; 0x64
 8005a26:	d901      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e169      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a38:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8084 	beq.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d07c      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a58:	4b2c      	ldr	r3, [pc, #176]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	fa93 f3a3 	rbit	r3, r3
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	461a      	mov	r2, r3
 8005a82:	2301      	movs	r3, #1
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	fa93 f3a3 	rbit	r3, r3
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a96:	fab3 f383 	clz	r3, r3
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04b      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fc f80d 	bl	8001ad8 <HAL_GetTick>
 8005abe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc f809 	bl	8001ad8 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e113      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	fa93 f3a3 	rbit	r3, r3
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	fa93 f3a3 	rbit	r3, r3
 8005aee:	61fb      	str	r3, [r7, #28]
  return result;
 8005af0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af2:	fab3 f383 	clz	r3, r3
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f043 0302 	orr.w	r3, r3, #2
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d108      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b06:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	e00d      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40007000 	.word	0x40007000
 8005b14:	10908100 	.word	0x10908100
 8005b18:	2302      	movs	r3, #2
 8005b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	4b78      	ldr	r3, [pc, #480]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2202      	movs	r2, #2
 8005b2a:	613a      	str	r2, [r7, #16]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	fa92 f2a2 	rbit	r2, r2
 8005b32:	60fa      	str	r2, [r7, #12]
  return result;
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	fab2 f282 	clz	r2, r2
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	f002 021f 	and.w	r2, r2, #31
 8005b46:	2101      	movs	r1, #1
 8005b48:	fa01 f202 	lsl.w	r2, r1, r2
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0b7      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005b52:	4b6d      	ldr	r3, [pc, #436]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	496a      	ldr	r1, [pc, #424]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6c:	4b66      	ldr	r3, [pc, #408]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4a65      	ldr	r2, [pc, #404]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b84:	4b60      	ldr	r3, [pc, #384]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	f023 0203 	bic.w	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	495d      	ldr	r1, [pc, #372]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba2:	4b59      	ldr	r3, [pc, #356]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4956      	ldr	r1, [pc, #344]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bc0:	4b51      	ldr	r3, [pc, #324]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	494e      	ldr	r1, [pc, #312]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d008      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bde:	4b4a      	ldr	r3, [pc, #296]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f023 0210 	bic.w	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	4947      	ldr	r1, [pc, #284]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005bfc:	4b42      	ldr	r3, [pc, #264]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	493f      	ldr	r1, [pc, #252]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c1a:	4b3b      	ldr	r3, [pc, #236]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f023 0220 	bic.w	r2, r3, #32
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4938      	ldr	r1, [pc, #224]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c38:	4b33      	ldr	r3, [pc, #204]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	4930      	ldr	r1, [pc, #192]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c56:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	4929      	ldr	r1, [pc, #164]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c74:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	4921      	ldr	r1, [pc, #132]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c92:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	491a      	ldr	r1, [pc, #104]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005cb0:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	4912      	ldr	r1, [pc, #72]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	490b      	ldr	r1, [pc, #44]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3748      	adds	r7, #72	; 0x48
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40021000 	.word	0x40021000

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e01d      	b.n	8005d5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fb fc06 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 fbee 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <HAL_TIM_Base_Start_IT+0x50>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d00b      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x42>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d007      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	00010007 	.word	0x00010007

08005db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e01d      	b.n	8005e06 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb fb90 	bl	8001504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 fb98 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e01d      	b.n	8005e5c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f815 	bl	8005e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f000 fb6d 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d122      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0202 	mvn.w	r2, #2
 8005ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fb18 	bl	80064f0 <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fb0a 	bl	80064dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fb1b 	bl	8006504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d122      	bne.n	8005f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d11b      	bne.n	8005f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0204 	mvn.w	r2, #4
 8005ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 faee 	bl	80064f0 <HAL_TIM_IC_CaptureCallback>
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fae0 	bl	80064dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 faf1 	bl	8006504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d122      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0208 	mvn.w	r2, #8
 8005f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2204      	movs	r2, #4
 8005f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fac4 	bl	80064f0 <HAL_TIM_IC_CaptureCallback>
 8005f68:	e005      	b.n	8005f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fab6 	bl	80064dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fac7 	bl	8006504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d122      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d11b      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0210 	mvn.w	r2, #16
 8005fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa9a 	bl	80064f0 <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa8c 	bl	80064dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa9d 	bl	8006504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d10e      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d107      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0201 	mvn.w	r2, #1
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fa ff56 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d10e      	bne.n	8006028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d107      	bne.n	8006028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f916 	bl	8007254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006036:	d10e      	bne.n	8006056 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d107      	bne.n	8006056 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800604e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f909 	bl	8007268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d10e      	bne.n	8006082 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d107      	bne.n	8006082 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa4b 	bl	8006518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d10e      	bne.n	80060ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b20      	cmp	r3, #32
 800609c:	d107      	bne.n	80060ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0220 	mvn.w	r2, #32
 80060a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 f8c9 	bl	8007240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e08a      	b.n	80061e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11b      	bne.n	800611e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6819      	ldr	r1, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f000 fe07 	bl	8006d08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 020c 	bic.w	r2, r2, #12
 8006108:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6999      	ldr	r1, [r3, #24]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	619a      	str	r2, [r3, #24]
 800611c:	e05a      	b.n	80061d4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d11c      	bne.n	800615e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f000 fe7f 	bl	8006e36 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006146:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6999      	ldr	r1, [r3, #24]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	619a      	str	r2, [r3, #24]
 800615c:	e03a      	b.n	80061d4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b08      	cmp	r3, #8
 8006162:	d11b      	bne.n	800619c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6819      	ldr	r1, [r3, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f000 fecc 	bl	8006f10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 020c 	bic.w	r2, r2, #12
 8006186:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69d9      	ldr	r1, [r3, #28]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	61da      	str	r2, [r3, #28]
 800619a:	e01b      	b.n	80061d4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f000 feec 	bl	8006f88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69da      	ldr	r2, [r3, #28]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69d9      	ldr	r1, [r3, #28]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006206:	2302      	movs	r3, #2
 8006208:	e105      	b.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x226>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b14      	cmp	r3, #20
 800621e:	f200 80f0 	bhi.w	8006402 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	0800627d 	.word	0x0800627d
 800622c:	08006403 	.word	0x08006403
 8006230:	08006403 	.word	0x08006403
 8006234:	08006403 	.word	0x08006403
 8006238:	080062bd 	.word	0x080062bd
 800623c:	08006403 	.word	0x08006403
 8006240:	08006403 	.word	0x08006403
 8006244:	08006403 	.word	0x08006403
 8006248:	080062ff 	.word	0x080062ff
 800624c:	08006403 	.word	0x08006403
 8006250:	08006403 	.word	0x08006403
 8006254:	08006403 	.word	0x08006403
 8006258:	0800633f 	.word	0x0800633f
 800625c:	08006403 	.word	0x08006403
 8006260:	08006403 	.word	0x08006403
 8006264:	08006403 	.word	0x08006403
 8006268:	08006381 	.word	0x08006381
 800626c:	08006403 	.word	0x08006403
 8006270:	08006403 	.word	0x08006403
 8006274:	08006403 	.word	0x08006403
 8006278:	080063c1 	.word	0x080063c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f9e2 	bl	800664c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0208 	orr.w	r2, r2, #8
 8006296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0204 	bic.w	r2, r2, #4
 80062a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6999      	ldr	r1, [r3, #24]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	619a      	str	r2, [r3, #24]
      break;
 80062ba:	e0a3      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fa52 	bl	800676c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6999      	ldr	r1, [r3, #24]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	021a      	lsls	r2, r3, #8
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	619a      	str	r2, [r3, #24]
      break;
 80062fc:	e082      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fabb 	bl	8006880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0208 	orr.w	r2, r2, #8
 8006318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0204 	bic.w	r2, r2, #4
 8006328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69d9      	ldr	r1, [r3, #28]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	61da      	str	r2, [r3, #28]
      break;
 800633c:	e062      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fb23 	bl	8006990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69d9      	ldr	r1, [r3, #28]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	021a      	lsls	r2, r3, #8
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	61da      	str	r2, [r3, #28]
      break;
 800637e:	e041      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fb6c 	bl	8006a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0204 	bic.w	r2, r2, #4
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063be:	e021      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fbb0 	bl	8006b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006402:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop

08006420 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006438:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_SlaveConfigSynchro+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e031      	b.n	80064d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fbb8 	bl	8006bf8 <TIM_SlaveTimer_SetConfig>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e018      	b.n	80064d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3c      	ldr	r2, [pc, #240]	; (8006630 <TIM_Base_SetConfig+0x104>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00f      	beq.n	8006564 <TIM_Base_SetConfig+0x38>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654a:	d00b      	beq.n	8006564 <TIM_Base_SetConfig+0x38>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a39      	ldr	r2, [pc, #228]	; (8006634 <TIM_Base_SetConfig+0x108>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_Base_SetConfig+0x38>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a38      	ldr	r2, [pc, #224]	; (8006638 <TIM_Base_SetConfig+0x10c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0x38>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a37      	ldr	r2, [pc, #220]	; (800663c <TIM_Base_SetConfig+0x110>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d108      	bne.n	8006576 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <TIM_Base_SetConfig+0x104>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01b      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006584:	d017      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2a      	ldr	r2, [pc, #168]	; (8006634 <TIM_Base_SetConfig+0x108>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a29      	ldr	r2, [pc, #164]	; (8006638 <TIM_Base_SetConfig+0x10c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a28      	ldr	r2, [pc, #160]	; (800663c <TIM_Base_SetConfig+0x110>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a27      	ldr	r2, [pc, #156]	; (8006640 <TIM_Base_SetConfig+0x114>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a26      	ldr	r2, [pc, #152]	; (8006644 <TIM_Base_SetConfig+0x118>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_Base_SetConfig+0x8a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a25      	ldr	r2, [pc, #148]	; (8006648 <TIM_Base_SetConfig+0x11c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d108      	bne.n	80065c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a10      	ldr	r2, [pc, #64]	; (8006630 <TIM_Base_SetConfig+0x104>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00f      	beq.n	8006614 <TIM_Base_SetConfig+0xe8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a11      	ldr	r2, [pc, #68]	; (800663c <TIM_Base_SetConfig+0x110>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00b      	beq.n	8006614 <TIM_Base_SetConfig+0xe8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a10      	ldr	r2, [pc, #64]	; (8006640 <TIM_Base_SetConfig+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_Base_SetConfig+0xe8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a0f      	ldr	r2, [pc, #60]	; (8006644 <TIM_Base_SetConfig+0x118>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0xe8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <TIM_Base_SetConfig+0x11c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d103      	bne.n	800661c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	615a      	str	r2, [r3, #20]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40013400 	.word	0x40013400
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800

0800664c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 0302 	bic.w	r3, r3, #2
 8006698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <TIM_OC1_SetConfig+0x10c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00f      	beq.n	80066cc <TIM_OC1_SetConfig+0x80>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2b      	ldr	r2, [pc, #172]	; (800675c <TIM_OC1_SetConfig+0x110>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00b      	beq.n	80066cc <TIM_OC1_SetConfig+0x80>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <TIM_OC1_SetConfig+0x114>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d007      	beq.n	80066cc <TIM_OC1_SetConfig+0x80>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a29      	ldr	r2, [pc, #164]	; (8006764 <TIM_OC1_SetConfig+0x118>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_OC1_SetConfig+0x80>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a28      	ldr	r2, [pc, #160]	; (8006768 <TIM_OC1_SetConfig+0x11c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d10c      	bne.n	80066e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0308 	bic.w	r3, r3, #8
 80066d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0304 	bic.w	r3, r3, #4
 80066e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1b      	ldr	r2, [pc, #108]	; (8006758 <TIM_OC1_SetConfig+0x10c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00f      	beq.n	800670e <TIM_OC1_SetConfig+0xc2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	; (800675c <TIM_OC1_SetConfig+0x110>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00b      	beq.n	800670e <TIM_OC1_SetConfig+0xc2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a19      	ldr	r2, [pc, #100]	; (8006760 <TIM_OC1_SetConfig+0x114>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d007      	beq.n	800670e <TIM_OC1_SetConfig+0xc2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a18      	ldr	r2, [pc, #96]	; (8006764 <TIM_OC1_SetConfig+0x118>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_OC1_SetConfig+0xc2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <TIM_OC1_SetConfig+0x11c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800671c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	621a      	str	r2, [r3, #32]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800

0800676c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f023 0210 	bic.w	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0320 	bic.w	r3, r3, #32
 80067ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a28      	ldr	r2, [pc, #160]	; (800686c <TIM_OC2_SetConfig+0x100>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_OC2_SetConfig+0x6c>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a27      	ldr	r2, [pc, #156]	; (8006870 <TIM_OC2_SetConfig+0x104>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10d      	bne.n	80067f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a1d      	ldr	r2, [pc, #116]	; (800686c <TIM_OC2_SetConfig+0x100>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00f      	beq.n	800681c <TIM_OC2_SetConfig+0xb0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <TIM_OC2_SetConfig+0x104>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00b      	beq.n	800681c <TIM_OC2_SetConfig+0xb0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <TIM_OC2_SetConfig+0x108>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d007      	beq.n	800681c <TIM_OC2_SetConfig+0xb0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a1a      	ldr	r2, [pc, #104]	; (8006878 <TIM_OC2_SetConfig+0x10c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_OC2_SetConfig+0xb0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a19      	ldr	r2, [pc, #100]	; (800687c <TIM_OC2_SetConfig+0x110>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d113      	bne.n	8006844 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006822:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800682a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	621a      	str	r2, [r3, #32]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40013400 	.word	0x40013400
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800

08006880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a27      	ldr	r2, [pc, #156]	; (800697c <TIM_OC3_SetConfig+0xfc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_OC3_SetConfig+0x6a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <TIM_OC3_SetConfig+0x100>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d10d      	bne.n	8006906 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006904:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1c      	ldr	r2, [pc, #112]	; (800697c <TIM_OC3_SetConfig+0xfc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00f      	beq.n	800692e <TIM_OC3_SetConfig+0xae>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <TIM_OC3_SetConfig+0x100>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00b      	beq.n	800692e <TIM_OC3_SetConfig+0xae>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <TIM_OC3_SetConfig+0x104>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d007      	beq.n	800692e <TIM_OC3_SetConfig+0xae>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a19      	ldr	r2, [pc, #100]	; (8006988 <TIM_OC3_SetConfig+0x108>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_OC3_SetConfig+0xae>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a18      	ldr	r2, [pc, #96]	; (800698c <TIM_OC3_SetConfig+0x10c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d113      	bne.n	8006956 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800

08006990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	031b      	lsls	r3, r3, #12
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <TIM_OC4_SetConfig+0xc0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00f      	beq.n	8006a14 <TIM_OC4_SetConfig+0x84>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <TIM_OC4_SetConfig+0xc4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <TIM_OC4_SetConfig+0x84>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a16      	ldr	r2, [pc, #88]	; (8006a58 <TIM_OC4_SetConfig+0xc8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <TIM_OC4_SetConfig+0x84>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <TIM_OC4_SetConfig+0xcc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC4_SetConfig+0x84>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <TIM_OC4_SetConfig+0xd0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	019b      	lsls	r3, r3, #6
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40013400 	.word	0x40013400
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40014800 	.word	0x40014800

08006a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <TIM_OC5_SetConfig+0xb4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00f      	beq.n	8006ade <TIM_OC5_SetConfig+0x7a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a16      	ldr	r2, [pc, #88]	; (8006b1c <TIM_OC5_SetConfig+0xb8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00b      	beq.n	8006ade <TIM_OC5_SetConfig+0x7a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a15      	ldr	r2, [pc, #84]	; (8006b20 <TIM_OC5_SetConfig+0xbc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d007      	beq.n	8006ade <TIM_OC5_SetConfig+0x7a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <TIM_OC5_SetConfig+0xc0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_OC5_SetConfig+0x7a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <TIM_OC5_SetConfig+0xc4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d109      	bne.n	8006af2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	621a      	str	r2, [r3, #32]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40013400 	.word	0x40013400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400
 8006b28:	40014800 	.word	0x40014800

08006b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <TIM_OC6_SetConfig+0xb8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00f      	beq.n	8006ba8 <TIM_OC6_SetConfig+0x7c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <TIM_OC6_SetConfig+0xbc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00b      	beq.n	8006ba8 <TIM_OC6_SetConfig+0x7c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a16      	ldr	r2, [pc, #88]	; (8006bec <TIM_OC6_SetConfig+0xc0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <TIM_OC6_SetConfig+0x7c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a15      	ldr	r2, [pc, #84]	; (8006bf0 <TIM_OC6_SetConfig+0xc4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_OC6_SetConfig+0x7c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <TIM_OC6_SetConfig+0xc8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d109      	bne.n	8006bbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	029b      	lsls	r3, r3, #10
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40012c00 	.word	0x40012c00
 8006be8:	40013400 	.word	0x40013400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800

08006bf8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	f023 0307 	bic.w	r3, r3, #7
 8006c26:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b30      	cmp	r3, #48	; 0x30
 8006c40:	d05c      	beq.n	8006cfc <TIM_SlaveTimer_SetConfig+0x104>
 8006c42:	2b30      	cmp	r3, #48	; 0x30
 8006c44:	d806      	bhi.n	8006c54 <TIM_SlaveTimer_SetConfig+0x5c>
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d058      	beq.n	8006cfc <TIM_SlaveTimer_SetConfig+0x104>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d056      	beq.n	8006cfc <TIM_SlaveTimer_SetConfig+0x104>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d054      	beq.n	8006cfc <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006c52:	e054      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006c54:	2b50      	cmp	r3, #80	; 0x50
 8006c56:	d03d      	beq.n	8006cd4 <TIM_SlaveTimer_SetConfig+0xdc>
 8006c58:	2b50      	cmp	r3, #80	; 0x50
 8006c5a:	d802      	bhi.n	8006c62 <TIM_SlaveTimer_SetConfig+0x6a>
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d010      	beq.n	8006c82 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8006c60:	e04d      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006c62:	2b60      	cmp	r3, #96	; 0x60
 8006c64:	d040      	beq.n	8006ce8 <TIM_SlaveTimer_SetConfig+0xf0>
 8006c66:	2b70      	cmp	r3, #112	; 0x70
 8006c68:	d000      	beq.n	8006c6c <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8006c6a:	e048      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68d9      	ldr	r1, [r3, #12]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f000 f9c1 	bl	8007002 <TIM_ETR_SetConfig>
      break;
 8006c80:	e03d      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d101      	bne.n	8006c8e <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e038      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6a1a      	ldr	r2, [r3, #32]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
      break;
 8006cd2:	e014      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	6899      	ldr	r1, [r3, #8]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f000 f879 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
      break;
 8006ce6:	e00a      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6899      	ldr	r1, [r3, #8]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f000 f8db 	bl	8006eb0 <TIM_TI2_ConfigInputStage>
      break;
 8006cfa:	e000      	b.n	8006cfe <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8006cfc:	bf00      	nop
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a24      	ldr	r2, [pc, #144]	; (8006dc4 <TIM_TI1_SetConfig+0xbc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <TIM_TI1_SetConfig+0x56>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3c:	d00f      	beq.n	8006d5e <TIM_TI1_SetConfig+0x56>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_TI1_SetConfig+0xc0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <TIM_TI1_SetConfig+0x56>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_TI1_SetConfig+0xc4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d007      	beq.n	8006d5e <TIM_TI1_SetConfig+0x56>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <TIM_TI1_SetConfig+0xc8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_TI1_SetConfig+0x56>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <TIM_TI1_SetConfig+0xcc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d101      	bne.n	8006d62 <TIM_TI1_SetConfig+0x5a>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <TIM_TI1_SetConfig+0x5c>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e003      	b.n	8006d82 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f023 030a 	bic.w	r3, r3, #10
 8006d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f003 030a 	and.w	r3, r3, #10
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40014000 	.word	0x40014000

08006dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 030a 	bic.w	r3, r3, #10
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	f023 0210 	bic.w	r2, r3, #16
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	621a      	str	r2, [r3, #32]
}
 8006ea4:	bf00      	nop
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f023 0210 	bic.w	r2, r3, #16
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	031b      	lsls	r3, r3, #12
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	621a      	str	r2, [r3, #32]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 0303 	bic.w	r3, r3, #3
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006f60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	621a      	str	r2, [r3, #32]
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	031b      	lsls	r3, r3, #12
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006fda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	031b      	lsls	r3, r3, #12
 8006fe0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800701c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	021a      	lsls	r2, r3, #8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	431a      	orrs	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4313      	orrs	r3, r2
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	609a      	str	r2, [r3, #8]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e063      	b.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a2b      	ldr	r2, [pc, #172]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2a      	ldr	r2, [pc, #168]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d108      	bne.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007096:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1b      	ldr	r2, [pc, #108]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d018      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ce:	d013      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a18      	ldr	r2, [pc, #96]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a17      	ldr	r2, [pc, #92]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d009      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a12      	ldr	r2, [pc, #72]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a13      	ldr	r2, [pc, #76]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d10c      	bne.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4313      	orrs	r3, r2
 8007108:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40013400 	.word	0x40013400
 8007138:	40000400 	.word	0x40000400
 800713c:	40000800 	.word	0x40000800
 8007140:	40014000 	.word	0x40014000

08007144 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800715c:	2302      	movs	r3, #2
 800715e:	e065      	b.n	800722c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a16      	ldr	r2, [pc, #88]	; (8007238 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a14      	ldr	r2, [pc, #80]	; (800723c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d115      	bne.n	800721a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	40012c00 	.word	0x40012c00
 800723c:	40013400 	.word	0x40013400

08007240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e040      	b.n	8007310 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fa fa34 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2224      	movs	r2, #36	; 0x24
 80072a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0201 	bic.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f82c 	bl	8007318 <UART_SetConfig>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e022      	b.n	8007310 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa3a 	bl	800774c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0201 	orr.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fac1 	bl	8007890 <UART_CheckIdleState>
 800730e:	4603      	mov	r3, r0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800734a:	f023 030c 	bic.w	r3, r3, #12
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6939      	ldr	r1, [r7, #16]
 8007354:	430b      	orrs	r3, r1
 8007356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	430a      	orrs	r2, r1
 8007390:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4aa9      	ldr	r2, [pc, #676]	; (800763c <UART_SetConfig+0x324>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d121      	bne.n	80073e0 <UART_SetConfig+0xc8>
 800739c:	4ba8      	ldr	r3, [pc, #672]	; (8007640 <UART_SetConfig+0x328>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d817      	bhi.n	80073d8 <UART_SetConfig+0xc0>
 80073a8:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0x98>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	080073d3 	.word	0x080073d3
 80073bc:	080073c7 	.word	0x080073c7
 80073c0:	2301      	movs	r3, #1
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e0b2      	b.n	800752c <UART_SetConfig+0x214>
 80073c6:	2302      	movs	r3, #2
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e0af      	b.n	800752c <UART_SetConfig+0x214>
 80073cc:	2304      	movs	r3, #4
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e0ac      	b.n	800752c <UART_SetConfig+0x214>
 80073d2:	2308      	movs	r3, #8
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e0a9      	b.n	800752c <UART_SetConfig+0x214>
 80073d8:	2310      	movs	r3, #16
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	bf00      	nop
 80073de:	e0a5      	b.n	800752c <UART_SetConfig+0x214>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a97      	ldr	r2, [pc, #604]	; (8007644 <UART_SetConfig+0x32c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d123      	bne.n	8007432 <UART_SetConfig+0x11a>
 80073ea:	4b95      	ldr	r3, [pc, #596]	; (8007640 <UART_SetConfig+0x328>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f6:	d012      	beq.n	800741e <UART_SetConfig+0x106>
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fc:	d802      	bhi.n	8007404 <UART_SetConfig+0xec>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <UART_SetConfig+0xfa>
 8007402:	e012      	b.n	800742a <UART_SetConfig+0x112>
 8007404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007408:	d00c      	beq.n	8007424 <UART_SetConfig+0x10c>
 800740a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800740e:	d003      	beq.n	8007418 <UART_SetConfig+0x100>
 8007410:	e00b      	b.n	800742a <UART_SetConfig+0x112>
 8007412:	2300      	movs	r3, #0
 8007414:	77fb      	strb	r3, [r7, #31]
 8007416:	e089      	b.n	800752c <UART_SetConfig+0x214>
 8007418:	2302      	movs	r3, #2
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e086      	b.n	800752c <UART_SetConfig+0x214>
 800741e:	2304      	movs	r3, #4
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e083      	b.n	800752c <UART_SetConfig+0x214>
 8007424:	2308      	movs	r3, #8
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e080      	b.n	800752c <UART_SetConfig+0x214>
 800742a:	2310      	movs	r3, #16
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	bf00      	nop
 8007430:	e07c      	b.n	800752c <UART_SetConfig+0x214>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a84      	ldr	r2, [pc, #528]	; (8007648 <UART_SetConfig+0x330>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d123      	bne.n	8007484 <UART_SetConfig+0x16c>
 800743c:	4b80      	ldr	r3, [pc, #512]	; (8007640 <UART_SetConfig+0x328>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007448:	d012      	beq.n	8007470 <UART_SetConfig+0x158>
 800744a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800744e:	d802      	bhi.n	8007456 <UART_SetConfig+0x13e>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <UART_SetConfig+0x14c>
 8007454:	e012      	b.n	800747c <UART_SetConfig+0x164>
 8007456:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800745a:	d00c      	beq.n	8007476 <UART_SetConfig+0x15e>
 800745c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007460:	d003      	beq.n	800746a <UART_SetConfig+0x152>
 8007462:	e00b      	b.n	800747c <UART_SetConfig+0x164>
 8007464:	2300      	movs	r3, #0
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e060      	b.n	800752c <UART_SetConfig+0x214>
 800746a:	2302      	movs	r3, #2
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e05d      	b.n	800752c <UART_SetConfig+0x214>
 8007470:	2304      	movs	r3, #4
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e05a      	b.n	800752c <UART_SetConfig+0x214>
 8007476:	2308      	movs	r3, #8
 8007478:	77fb      	strb	r3, [r7, #31]
 800747a:	e057      	b.n	800752c <UART_SetConfig+0x214>
 800747c:	2310      	movs	r3, #16
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	bf00      	nop
 8007482:	e053      	b.n	800752c <UART_SetConfig+0x214>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a70      	ldr	r2, [pc, #448]	; (800764c <UART_SetConfig+0x334>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d123      	bne.n	80074d6 <UART_SetConfig+0x1be>
 800748e:	4b6c      	ldr	r3, [pc, #432]	; (8007640 <UART_SetConfig+0x328>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749a:	d012      	beq.n	80074c2 <UART_SetConfig+0x1aa>
 800749c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a0:	d802      	bhi.n	80074a8 <UART_SetConfig+0x190>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <UART_SetConfig+0x19e>
 80074a6:	e012      	b.n	80074ce <UART_SetConfig+0x1b6>
 80074a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ac:	d00c      	beq.n	80074c8 <UART_SetConfig+0x1b0>
 80074ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x1a4>
 80074b4:	e00b      	b.n	80074ce <UART_SetConfig+0x1b6>
 80074b6:	2300      	movs	r3, #0
 80074b8:	77fb      	strb	r3, [r7, #31]
 80074ba:	e037      	b.n	800752c <UART_SetConfig+0x214>
 80074bc:	2302      	movs	r3, #2
 80074be:	77fb      	strb	r3, [r7, #31]
 80074c0:	e034      	b.n	800752c <UART_SetConfig+0x214>
 80074c2:	2304      	movs	r3, #4
 80074c4:	77fb      	strb	r3, [r7, #31]
 80074c6:	e031      	b.n	800752c <UART_SetConfig+0x214>
 80074c8:	2308      	movs	r3, #8
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e02e      	b.n	800752c <UART_SetConfig+0x214>
 80074ce:	2310      	movs	r3, #16
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	bf00      	nop
 80074d4:	e02a      	b.n	800752c <UART_SetConfig+0x214>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a5d      	ldr	r2, [pc, #372]	; (8007650 <UART_SetConfig+0x338>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d123      	bne.n	8007528 <UART_SetConfig+0x210>
 80074e0:	4b57      	ldr	r3, [pc, #348]	; (8007640 <UART_SetConfig+0x328>)
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80074e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ec:	d012      	beq.n	8007514 <UART_SetConfig+0x1fc>
 80074ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f2:	d802      	bhi.n	80074fa <UART_SetConfig+0x1e2>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <UART_SetConfig+0x1f0>
 80074f8:	e012      	b.n	8007520 <UART_SetConfig+0x208>
 80074fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074fe:	d00c      	beq.n	800751a <UART_SetConfig+0x202>
 8007500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007504:	d003      	beq.n	800750e <UART_SetConfig+0x1f6>
 8007506:	e00b      	b.n	8007520 <UART_SetConfig+0x208>
 8007508:	2300      	movs	r3, #0
 800750a:	77fb      	strb	r3, [r7, #31]
 800750c:	e00e      	b.n	800752c <UART_SetConfig+0x214>
 800750e:	2302      	movs	r3, #2
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e00b      	b.n	800752c <UART_SetConfig+0x214>
 8007514:	2304      	movs	r3, #4
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	e008      	b.n	800752c <UART_SetConfig+0x214>
 800751a:	2308      	movs	r3, #8
 800751c:	77fb      	strb	r3, [r7, #31]
 800751e:	e005      	b.n	800752c <UART_SetConfig+0x214>
 8007520:	2310      	movs	r3, #16
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	bf00      	nop
 8007526:	e001      	b.n	800752c <UART_SetConfig+0x214>
 8007528:	2310      	movs	r3, #16
 800752a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007534:	f040 808e 	bne.w	8007654 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8007538:	7ffb      	ldrb	r3, [r7, #31]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d85e      	bhi.n	80075fc <UART_SetConfig+0x2e4>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x22c>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007569 	.word	0x08007569
 8007548:	08007589 	.word	0x08007589
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075fd 	.word	0x080075fd
 8007554:	080075c5 	.word	0x080075c5
 8007558:	080075fd 	.word	0x080075fd
 800755c:	080075fd 	.word	0x080075fd
 8007560:	080075fd 	.word	0x080075fd
 8007564:	080075e5 	.word	0x080075e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fe f9aa 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 800756c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	005a      	lsls	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	441a      	add	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	61bb      	str	r3, [r7, #24]
        break;
 8007586:	e03c      	b.n	8007602 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007588:	f7fe f9bc 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 800758c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	005a      	lsls	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	441a      	add	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	61bb      	str	r3, [r7, #24]
        break;
 80075a6:	e02c      	b.n	8007602 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80075b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6852      	ldr	r2, [r2, #4]
 80075ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	61bb      	str	r3, [r7, #24]
        break;
 80075c2:	e01e      	b.n	8007602 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c4:	f7fe f906 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 80075c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	b29b      	uxth	r3, r3
 80075e0:	61bb      	str	r3, [r7, #24]
        break;
 80075e2:	e00e      	b.n	8007602 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	61bb      	str	r3, [r7, #24]
        break;
 80075fa:	e002      	b.n	8007602 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	75fb      	strb	r3, [r7, #23]
        break;
 8007600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d916      	bls.n	8007636 <UART_SetConfig+0x31e>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760e:	d212      	bcs.n	8007636 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f023 030f 	bic.w	r3, r3, #15
 8007618:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	b29a      	uxth	r2, r3
 8007626:	897b      	ldrh	r3, [r7, #10]
 8007628:	4313      	orrs	r3, r2
 800762a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	897a      	ldrh	r2, [r7, #10]
 8007632:	60da      	str	r2, [r3, #12]
 8007634:	e07e      	b.n	8007734 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
 800763a:	e07b      	b.n	8007734 <UART_SetConfig+0x41c>
 800763c:	40013800 	.word	0x40013800
 8007640:	40021000 	.word	0x40021000
 8007644:	40004400 	.word	0x40004400
 8007648:	40004800 	.word	0x40004800
 800764c:	40004c00 	.word	0x40004c00
 8007650:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8007654:	7ffb      	ldrb	r3, [r7, #31]
 8007656:	2b08      	cmp	r3, #8
 8007658:	d85b      	bhi.n	8007712 <UART_SetConfig+0x3fa>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <UART_SetConfig+0x348>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007685 	.word	0x08007685
 8007664:	080076a3 	.word	0x080076a3
 8007668:	080076c1 	.word	0x080076c1
 800766c:	08007713 	.word	0x08007713
 8007670:	080076dd 	.word	0x080076dd
 8007674:	08007713 	.word	0x08007713
 8007678:	08007713 	.word	0x08007713
 800767c:	08007713 	.word	0x08007713
 8007680:	080076fb 	.word	0x080076fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007684:	f7fe f91c 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8007688:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	085a      	lsrs	r2, r3, #1
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	441a      	add	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	fbb2 f3f3 	udiv	r3, r2, r3
 800769c:	b29b      	uxth	r3, r3
 800769e:	61bb      	str	r3, [r7, #24]
        break;
 80076a0:	e03a      	b.n	8007718 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a2:	f7fe f92f 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 80076a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	085a      	lsrs	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	441a      	add	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	61bb      	str	r3, [r7, #24]
        break;
 80076be:	e02b      	b.n	8007718 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80076ca:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6852      	ldr	r2, [r2, #4]
 80076d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	61bb      	str	r3, [r7, #24]
        break;
 80076da:	e01d      	b.n	8007718 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076dc:	f7fe f87a 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 80076e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	085a      	lsrs	r2, r3, #1
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	441a      	add	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	61bb      	str	r3, [r7, #24]
        break;
 80076f8:	e00e      	b.n	8007718 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	b29b      	uxth	r3, r3
 800770e:	61bb      	str	r3, [r7, #24]
        break;
 8007710:	e002      	b.n	8007718 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
        break;
 8007716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b0f      	cmp	r3, #15
 800771c:	d908      	bls.n	8007730 <UART_SetConfig+0x418>
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d204      	bcs.n	8007730 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	60da      	str	r2, [r3, #12]
 800772e:	e001      	b.n	8007734 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01a      	beq.n	8007862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784a:	d10a      	bne.n	8007862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
  }
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af02      	add	r7, sp, #8
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800789e:	f7fa f91b 	bl	8001ad8 <HAL_GetTick>
 80078a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d10e      	bne.n	80078d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f82a 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e020      	b.n	8007912 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0304 	and.w	r3, r3, #4
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d10e      	bne.n	80078fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f814 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e00a      	b.n	8007912 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792a:	e05d      	b.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d059      	beq.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007934:	f7fa f8d0 	bl	8001ad8 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	429a      	cmp	r2, r3
 8007942:	d302      	bcc.n	800794a <UART_WaitOnFlagUntilTimeout+0x30>
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d11b      	bne.n	8007982 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007958:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0201 	bic.w	r2, r2, #1
 8007968:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e042      	b.n	8007a08 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d02b      	beq.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799e:	d123      	bne.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079a8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2220      	movs	r2, #32
 80079da:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e00f      	b.n	8007a08 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69da      	ldr	r2, [r3, #28]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	4013      	ands	r3, r2
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	bf0c      	ite	eq
 80079f8:	2301      	moveq	r3, #1
 80079fa:	2300      	movne	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d092      	beq.n	800792c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007a1c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	89fb      	ldrh	r3, [r7, #14]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007a4c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b21a      	sxth	r2, r3
 8007a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	b21b      	sxth	r3, r3
 8007a60:	4013      	ands	r3, r2
 8007a62:	b21b      	sxth	r3, r3
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	f107 0014 	add.w	r0, r7, #20
 8007a88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ffaf 	bl	8007a10 <USB_EnableGlobalInt>

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007abe:	b004      	add	sp, #16
 8007ac0:	4770      	bx	lr
	...

08007ac4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ac4:	b490      	push	{r4, r7}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae8:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	78db      	ldrb	r3, [r3, #3]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d819      	bhi.n	8007b26 <USB_ActivateEndpoint+0x62>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USB_ActivateEndpoint+0x34>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b1d 	.word	0x08007b1d
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	08007b13 	.word	0x08007b13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b08:	8abb      	ldrh	r3, [r7, #20]
 8007b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b0e:	82bb      	strh	r3, [r7, #20]
      break;
 8007b10:	e00d      	b.n	8007b2e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b12:	8abb      	ldrh	r3, [r7, #20]
 8007b14:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007b18:	82bb      	strh	r3, [r7, #20]
      break;
 8007b1a:	e008      	b.n	8007b2e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b1c:	8abb      	ldrh	r3, [r7, #20]
 8007b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b22:	82bb      	strh	r3, [r7, #20]
      break;
 8007b24:	e003      	b.n	8007b2e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2a:	e000      	b.n	8007b2e <USB_ActivateEndpoint+0x6a>
      break;
 8007b2c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	8abb      	ldrh	r3, [r7, #20]
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	b21b      	sxth	r3, r3
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b66:	b21a      	sxth	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b21b      	sxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b21b      	sxth	r3, r3
 8007b72:	b29c      	uxth	r4, r3
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	441a      	add	r2, r3
 8007b7e:	4b8c      	ldr	r3, [pc, #560]	; (8007db0 <USB_ActivateEndpoint+0x2ec>)
 8007b80:	4323      	orrs	r3, r4
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	7b1b      	ldrb	r3, [r3, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 8116 	bne.w	8007dbc <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d067      	beq.n	8007c68 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b98:	687c      	ldr	r4, [r7, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	441c      	add	r4, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	4423      	add	r3, r4
 8007bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb0:	461c      	mov	r4, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	88db      	ldrh	r3, [r3, #6]
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29c      	uxth	r4, r3
 8007bce:	4623      	mov	r3, r4
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d014      	beq.n	8007c02 <USB_ActivateEndpoint+0x13e>
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bee:	b29c      	uxth	r4, r3
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	441a      	add	r2, r3
 8007bfa:	4b6e      	ldr	r3, [pc, #440]	; (8007db4 <USB_ActivateEndpoint+0x2f0>)
 8007bfc:	4323      	orrs	r3, r4
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d018      	beq.n	8007c3c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c20:	b29c      	uxth	r4, r3
 8007c22:	f084 0320 	eor.w	r3, r4, #32
 8007c26:	b29c      	uxth	r4, r3
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	4b5f      	ldr	r3, [pc, #380]	; (8007db0 <USB_ActivateEndpoint+0x2ec>)
 8007c34:	4323      	orrs	r3, r4
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]
 8007c3a:	e22f      	b.n	800809c <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c52:	b29c      	uxth	r4, r3
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	441a      	add	r2, r3
 8007c5e:	4b54      	ldr	r3, [pc, #336]	; (8007db0 <USB_ActivateEndpoint+0x2ec>)
 8007c60:	4323      	orrs	r3, r4
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]
 8007c66:	e219      	b.n	800809c <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c68:	687c      	ldr	r4, [r7, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	441c      	add	r4, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	4423      	add	r3, r4
 8007c7c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007c80:	461c      	mov	r4, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	88db      	ldrh	r3, [r3, #6]
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007c90:	687c      	ldr	r4, [r7, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	441c      	add	r4, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	4423      	add	r3, r4
 8007ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d110      	bne.n	8007cd4 <USB_ActivateEndpoint+0x210>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e02f      	b.n	8007d34 <USB_ActivateEndpoint+0x270>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cda:	d813      	bhi.n	8007d04 <USB_ActivateEndpoint+0x240>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <USB_ActivateEndpoint+0x232>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	029b      	lsls	r3, r3, #10
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	e017      	b.n	8007d34 <USB_ActivateEndpoint+0x270>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <USB_ActivateEndpoint+0x25a>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	029b      	lsls	r3, r3, #10
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29c      	uxth	r4, r3
 8007d42:	4623      	mov	r3, r4
 8007d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d014      	beq.n	8007d76 <USB_ActivateEndpoint+0x2b2>
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	b29c      	uxth	r4, r3
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <USB_ActivateEndpoint+0x2f4>)
 8007d70:	4323      	orrs	r3, r4
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8c:	b29c      	uxth	r4, r3
 8007d8e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007d92:	b29c      	uxth	r4, r3
 8007d94:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007d98:	b29c      	uxth	r4, r3
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	441a      	add	r2, r3
 8007da4:	4b02      	ldr	r3, [pc, #8]	; (8007db0 <USB_ActivateEndpoint+0x2ec>)
 8007da6:	4323      	orrs	r3, r4
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	8013      	strh	r3, [r2, #0]
 8007dac:	e176      	b.n	800809c <USB_ActivateEndpoint+0x5d8>
 8007dae:	bf00      	nop
 8007db0:	ffff8080 	.word	0xffff8080
 8007db4:	ffff80c0 	.word	0xffff80c0
 8007db8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	b29c      	uxth	r4, r3
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	4b96      	ldr	r3, [pc, #600]	; (8008038 <USB_ActivateEndpoint+0x574>)
 8007de0:	4323      	orrs	r3, r4
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007de6:	687c      	ldr	r4, [r7, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	441c      	add	r4, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	4423      	add	r3, r4
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfe:	461c      	mov	r4, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	891b      	ldrh	r3, [r3, #8]
 8007e04:	085b      	lsrs	r3, r3, #1
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8023      	strh	r3, [r4, #0]
 8007e0e:	687c      	ldr	r4, [r7, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	441c      	add	r4, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	4423      	add	r3, r4
 8007e22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007e26:	461c      	mov	r4, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	895b      	ldrh	r3, [r3, #10]
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 8088 	bne.w	8007f50 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29c      	uxth	r4, r3
 8007e4e:	4623      	mov	r3, r4
 8007e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d014      	beq.n	8007e82 <USB_ActivateEndpoint+0x3be>
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	b29c      	uxth	r4, r3
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	441a      	add	r2, r3
 8007e7a:	4b70      	ldr	r3, [pc, #448]	; (800803c <USB_ActivateEndpoint+0x578>)
 8007e7c:	4323      	orrs	r3, r4
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29c      	uxth	r4, r3
 8007e90:	4623      	mov	r3, r4
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d014      	beq.n	8007ec4 <USB_ActivateEndpoint+0x400>
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb0:	b29c      	uxth	r4, r3
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	4b60      	ldr	r3, [pc, #384]	; (8008040 <USB_ActivateEndpoint+0x57c>)
 8007ebe:	4323      	orrs	r3, r4
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	b29c      	uxth	r4, r3
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	4b56      	ldr	r3, [pc, #344]	; (8008040 <USB_ActivateEndpoint+0x57c>)
 8007ee8:	4323      	orrs	r3, r4
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f04:	b29c      	uxth	r4, r3
 8007f06:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007f0a:	b29c      	uxth	r4, r3
 8007f0c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007f10:	b29c      	uxth	r4, r3
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	441a      	add	r2, r3
 8007f1c:	4b49      	ldr	r3, [pc, #292]	; (8008044 <USB_ActivateEndpoint+0x580>)
 8007f1e:	4323      	orrs	r3, r4
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f3a:	b29c      	uxth	r4, r3
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	441a      	add	r2, r3
 8007f46:	4b3f      	ldr	r3, [pc, #252]	; (8008044 <USB_ActivateEndpoint+0x580>)
 8007f48:	4323      	orrs	r3, r4
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
 8007f4e:	e0a5      	b.n	800809c <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29c      	uxth	r4, r3
 8007f5e:	4623      	mov	r3, r4
 8007f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d014      	beq.n	8007f92 <USB_ActivateEndpoint+0x4ce>
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7e:	b29c      	uxth	r4, r3
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	441a      	add	r2, r3
 8007f8a:	4b2c      	ldr	r3, [pc, #176]	; (800803c <USB_ActivateEndpoint+0x578>)
 8007f8c:	4323      	orrs	r3, r4
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29c      	uxth	r4, r3
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d014      	beq.n	8007fd4 <USB_ActivateEndpoint+0x510>
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	b29c      	uxth	r4, r3
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	4b1c      	ldr	r3, [pc, #112]	; (8008040 <USB_ActivateEndpoint+0x57c>)
 8007fce:	4323      	orrs	r3, r4
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fea:	b29c      	uxth	r4, r3
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	441a      	add	r2, r3
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <USB_ActivateEndpoint+0x578>)
 8007ff8:	4323      	orrs	r3, r4
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	78db      	ldrb	r3, [r3, #3]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d020      	beq.n	8008048 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801c:	b29c      	uxth	r4, r3
 800801e:	f084 0320 	eor.w	r3, r4, #32
 8008022:	b29c      	uxth	r4, r3
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	441a      	add	r2, r3
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <USB_ActivateEndpoint+0x580>)
 8008030:	4323      	orrs	r3, r4
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]
 8008036:	e01c      	b.n	8008072 <USB_ActivateEndpoint+0x5ae>
 8008038:	ffff8180 	.word	0xffff8180
 800803c:	ffffc080 	.word	0xffffc080
 8008040:	ffff80c0 	.word	0xffff80c0
 8008044:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805e:	b29c      	uxth	r4, r3
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <USB_ActivateEndpoint+0x5e4>)
 800806c:	4323      	orrs	r3, r4
 800806e:	b29b      	uxth	r3, r3
 8008070:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008088:	b29c      	uxth	r4, r3
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	441a      	add	r2, r3
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <USB_ActivateEndpoint+0x5e4>)
 8008096:	4323      	orrs	r3, r4
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc90      	pop	{r4, r7}
 80080a6:	4770      	bx	lr
 80080a8:	ffff8080 	.word	0xffff8080

080080ac <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080ac:	b490      	push	{r4, r7}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	7b1b      	ldrb	r3, [r3, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d171      	bne.n	80081a2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d036      	beq.n	8008134 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29c      	uxth	r4, r3
 80080d4:	4623      	mov	r3, r4
 80080d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d014      	beq.n	8008108 <USB_DeactivateEndpoint+0x5c>
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f4:	b29c      	uxth	r4, r3
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	441a      	add	r2, r3
 8008100:	4b6b      	ldr	r3, [pc, #428]	; (80082b0 <USB_DeactivateEndpoint+0x204>)
 8008102:	4323      	orrs	r3, r4
 8008104:	b29b      	uxth	r3, r3
 8008106:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811e:	b29c      	uxth	r4, r3
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	4b62      	ldr	r3, [pc, #392]	; (80082b4 <USB_DeactivateEndpoint+0x208>)
 800812c:	4323      	orrs	r3, r4
 800812e:	b29b      	uxth	r3, r3
 8008130:	8013      	strh	r3, [r2, #0]
 8008132:	e144      	b.n	80083be <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29c      	uxth	r4, r3
 8008142:	4623      	mov	r3, r4
 8008144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d014      	beq.n	8008176 <USB_DeactivateEndpoint+0xca>
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008162:	b29c      	uxth	r4, r3
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	441a      	add	r2, r3
 800816e:	4b52      	ldr	r3, [pc, #328]	; (80082b8 <USB_DeactivateEndpoint+0x20c>)
 8008170:	4323      	orrs	r3, r4
 8008172:	b29b      	uxth	r3, r3
 8008174:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818c:	b29c      	uxth	r4, r3
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	441a      	add	r2, r3
 8008198:	4b46      	ldr	r3, [pc, #280]	; (80082b4 <USB_DeactivateEndpoint+0x208>)
 800819a:	4323      	orrs	r3, r4
 800819c:	b29b      	uxth	r3, r3
 800819e:	8013      	strh	r3, [r2, #0]
 80081a0:	e10d      	b.n	80083be <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 8088 	bne.w	80082bc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29c      	uxth	r4, r3
 80081ba:	4623      	mov	r3, r4
 80081bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d014      	beq.n	80081ee <USB_DeactivateEndpoint+0x142>
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	b29c      	uxth	r4, r3
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	4b34      	ldr	r3, [pc, #208]	; (80082b8 <USB_DeactivateEndpoint+0x20c>)
 80081e8:	4323      	orrs	r3, r4
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29c      	uxth	r4, r3
 80081fc:	4623      	mov	r3, r4
 80081fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d014      	beq.n	8008230 <USB_DeactivateEndpoint+0x184>
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821c:	b29c      	uxth	r4, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <USB_DeactivateEndpoint+0x204>)
 800822a:	4323      	orrs	r3, r4
 800822c:	b29b      	uxth	r3, r3
 800822e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008246:	b29c      	uxth	r4, r3
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <USB_DeactivateEndpoint+0x204>)
 8008254:	4323      	orrs	r3, r4
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800826c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008270:	b29c      	uxth	r4, r3
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <USB_DeactivateEndpoint+0x208>)
 800827e:	4323      	orrs	r3, r4
 8008280:	b29b      	uxth	r3, r3
 8008282:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800829a:	b29c      	uxth	r4, r3
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	441a      	add	r2, r3
 80082a6:	4b03      	ldr	r3, [pc, #12]	; (80082b4 <USB_DeactivateEndpoint+0x208>)
 80082a8:	4323      	orrs	r3, r4
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8013      	strh	r3, [r2, #0]
 80082ae:	e086      	b.n	80083be <USB_DeactivateEndpoint+0x312>
 80082b0:	ffff80c0 	.word	0xffff80c0
 80082b4:	ffff8080 	.word	0xffff8080
 80082b8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29c      	uxth	r4, r3
 80082ca:	4623      	mov	r3, r4
 80082cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d014      	beq.n	80082fe <USB_DeactivateEndpoint+0x252>
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	b29c      	uxth	r4, r3
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	441a      	add	r2, r3
 80082f6:	4b35      	ldr	r3, [pc, #212]	; (80083cc <USB_DeactivateEndpoint+0x320>)
 80082f8:	4323      	orrs	r3, r4
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29c      	uxth	r4, r3
 800830c:	4623      	mov	r3, r4
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d014      	beq.n	8008340 <USB_DeactivateEndpoint+0x294>
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832c:	b29c      	uxth	r4, r3
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	441a      	add	r2, r3
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <USB_DeactivateEndpoint+0x324>)
 800833a:	4323      	orrs	r3, r4
 800833c:	b29b      	uxth	r3, r3
 800833e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	b29c      	uxth	r4, r3
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <USB_DeactivateEndpoint+0x320>)
 8008364:	4323      	orrs	r3, r4
 8008366:	b29b      	uxth	r3, r3
 8008368:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008380:	b29c      	uxth	r4, r3
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	441a      	add	r2, r3
 800838c:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <USB_DeactivateEndpoint+0x328>)
 800838e:	4323      	orrs	r3, r4
 8008390:	b29b      	uxth	r3, r3
 8008392:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083aa:	b29c      	uxth	r4, r3
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	441a      	add	r2, r3
 80083b6:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <USB_DeactivateEndpoint+0x328>)
 80083b8:	4323      	orrs	r3, r4
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc90      	pop	{r4, r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	ffffc080 	.word	0xffffc080
 80083d0:	ffff80c0 	.word	0xffff80c0
 80083d4:	ffff8080 	.word	0xffff8080

080083d8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083d8:	b590      	push	{r4, r7, lr}
 80083da:	b095      	sub	sp, #84	; 0x54
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	f040 816d 	bne.w	80086c6 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d909      	bls.n	800840c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	619a      	str	r2, [r3, #24]
 800840a:	e005      	b.n	8008418 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	7b1b      	ldrb	r3, [r3, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11a      	bne.n	8008456 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6959      	ldr	r1, [r3, #20]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	88da      	ldrh	r2, [r3, #6]
 8008428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800842a:	b29b      	uxth	r3, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fbb6 	bl	8008b9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008432:	687c      	ldr	r4, [r7, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843a:	b29b      	uxth	r3, r3
 800843c:	441c      	add	r4, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	4423      	add	r3, r4
 8008446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844e:	b29a      	uxth	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e11b      	b.n	800868e <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d06a      	beq.n	8008542 <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800846c:	687c      	ldr	r4, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d14c      	bne.n	8008510 <USB_EPStartXfer+0x138>
 8008476:	687c      	ldr	r4, [r7, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800847e:	b29b      	uxth	r3, r3
 8008480:	441c      	add	r4, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	4423      	add	r3, r4
 800848a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008492:	2b00      	cmp	r3, #0
 8008494:	d110      	bne.n	80084b8 <USB_EPStartXfer+0xe0>
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800849e:	b29a      	uxth	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e03f      	b.n	8008538 <USB_EPStartXfer+0x160>
 80084b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ba:	2b3e      	cmp	r3, #62	; 0x3e
 80084bc:	d811      	bhi.n	80084e2 <USB_EPStartXfer+0x10a>
 80084be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c0:	085b      	lsrs	r3, r3, #1
 80084c2:	647b      	str	r3, [r7, #68]	; 0x44
 80084c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <USB_EPStartXfer+0xfc>
 80084ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d0:	3301      	adds	r3, #1
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	029b      	lsls	r3, r3, #10
 80084da:	b29a      	uxth	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	e02a      	b.n	8008538 <USB_EPStartXfer+0x160>
 80084e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
 80084e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <USB_EPStartXfer+0x120>
 80084f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f4:	3b01      	subs	r3, #1
 80084f6:	647b      	str	r3, [r7, #68]	; 0x44
 80084f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	029b      	lsls	r3, r3, #10
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008508:	b29a      	uxth	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	e013      	b.n	8008538 <USB_EPStartXfer+0x160>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	785b      	ldrb	r3, [r3, #1]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d10f      	bne.n	8008538 <USB_EPStartXfer+0x160>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851e:	b29b      	uxth	r3, r3
 8008520:	441c      	add	r4, r3
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	4423      	add	r3, r4
 800852a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008532:	b29a      	uxth	r2, r3
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	895b      	ldrh	r3, [r3, #10]
 800853c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008540:	e069      	b.n	8008616 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d14c      	bne.n	80085e4 <USB_EPStartXfer+0x20c>
 800854a:	687c      	ldr	r4, [r7, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008552:	b29b      	uxth	r3, r3
 8008554:	441c      	add	r4, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	4423      	add	r3, r4
 800855e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008566:	2b00      	cmp	r3, #0
 8008568:	d110      	bne.n	800858c <USB_EPStartXfer+0x1b4>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008572:	b29a      	uxth	r2, r3
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008584:	b29a      	uxth	r2, r3
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	e040      	b.n	800860e <USB_EPStartXfer+0x236>
 800858c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800858e:	2b3e      	cmp	r3, #62	; 0x3e
 8008590:	d811      	bhi.n	80085b6 <USB_EPStartXfer+0x1de>
 8008592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	643b      	str	r3, [r7, #64]	; 0x40
 8008598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <USB_EPStartXfer+0x1d0>
 80085a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a4:	3301      	adds	r3, #1
 80085a6:	643b      	str	r3, [r7, #64]	; 0x40
 80085a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	029b      	lsls	r3, r3, #10
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	e02b      	b.n	800860e <USB_EPStartXfer+0x236>
 80085b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	643b      	str	r3, [r7, #64]	; 0x40
 80085bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <USB_EPStartXfer+0x1f4>
 80085c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c8:	3b01      	subs	r3, #1
 80085ca:	643b      	str	r3, [r7, #64]	; 0x40
 80085cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	029b      	lsls	r3, r3, #10
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085dc:	b29a      	uxth	r2, r3
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	801a      	strh	r2, [r3, #0]
 80085e2:	e014      	b.n	800860e <USB_EPStartXfer+0x236>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d110      	bne.n	800860e <USB_EPStartXfer+0x236>
 80085ec:	687c      	ldr	r4, [r7, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	441c      	add	r4, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	4423      	add	r3, r4
 8008600:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008608:	b29a      	uxth	r2, r3
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	891b      	ldrh	r3, [r3, #8]
 8008612:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6959      	ldr	r1, [r3, #20]
 800861a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800861c:	b29b      	uxth	r3, r3
 800861e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fabb 	bl	8008b9e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d115      	bne.n	800865c <USB_EPStartXfer+0x284>
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	b29b      	uxth	r3, r3
 800863e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008646:	b29c      	uxth	r4, r3
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	4b96      	ldr	r3, [pc, #600]	; (80088ac <USB_EPStartXfer+0x4d4>)
 8008654:	4323      	orrs	r3, r4
 8008656:	b29b      	uxth	r3, r3
 8008658:	8013      	strh	r3, [r2, #0]
 800865a:	e018      	b.n	800868e <USB_EPStartXfer+0x2b6>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d114      	bne.n	800868e <USB_EPStartXfer+0x2b6>
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867a:	b29c      	uxth	r4, r3
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	441a      	add	r2, r3
 8008686:	4b8a      	ldr	r3, [pc, #552]	; (80088b0 <USB_EPStartXfer+0x4d8>)
 8008688:	4323      	orrs	r3, r4
 800868a:	b29b      	uxth	r3, r3
 800868c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a4:	b29c      	uxth	r4, r3
 80086a6:	f084 0310 	eor.w	r3, r4, #16
 80086aa:	b29c      	uxth	r4, r3
 80086ac:	f084 0320 	eor.w	r3, r4, #32
 80086b0:	b29c      	uxth	r4, r3
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	441a      	add	r2, r3
 80086bc:	4b7d      	ldr	r3, [pc, #500]	; (80088b4 <USB_EPStartXfer+0x4dc>)
 80086be:	4323      	orrs	r3, r4
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	8013      	strh	r3, [r2, #0]
 80086c4:	e153      	b.n	800896e <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d909      	bls.n	80086e6 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	619a      	str	r2, [r3, #24]
 80086e4:	e005      	b.n	80086f2 <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	7b1b      	ldrb	r3, [r3, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d14c      	bne.n	8008794 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80086fa:	687c      	ldr	r4, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008702:	b29b      	uxth	r3, r3
 8008704:	441c      	add	r4, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	4423      	add	r3, r4
 800870e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008712:	623b      	str	r3, [r7, #32]
 8008714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008716:	2b00      	cmp	r3, #0
 8008718:	d110      	bne.n	800873c <USB_EPStartXfer+0x364>
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008722:	b29a      	uxth	r2, r3
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008734:	b29a      	uxth	r2, r3
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	801a      	strh	r2, [r3, #0]
 800873a:	e0fd      	b.n	8008938 <USB_EPStartXfer+0x560>
 800873c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800873e:	2b3e      	cmp	r3, #62	; 0x3e
 8008740:	d811      	bhi.n	8008766 <USB_EPStartXfer+0x38e>
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <USB_EPStartXfer+0x380>
 8008752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008754:	3301      	adds	r3, #1
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875a:	b29b      	uxth	r3, r3
 800875c:	029b      	lsls	r3, r3, #10
 800875e:	b29a      	uxth	r2, r3
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	e0e8      	b.n	8008938 <USB_EPStartXfer+0x560>
 8008766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008768:	095b      	lsrs	r3, r3, #5
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800876e:	f003 031f 	and.w	r3, r3, #31
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <USB_EPStartXfer+0x3a4>
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	3b01      	subs	r3, #1
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877e:	b29b      	uxth	r3, r3
 8008780:	029b      	lsls	r3, r3, #10
 8008782:	b29b      	uxth	r3, r3
 8008784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800878c:	b29a      	uxth	r2, r3
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	e0d1      	b.n	8008938 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d14c      	bne.n	8008836 <USB_EPStartXfer+0x45e>
 800879c:	687c      	ldr	r4, [r7, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	441c      	add	r4, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	4423      	add	r3, r4
 80087b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d110      	bne.n	80087de <USB_EPStartXfer+0x406>
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	e040      	b.n	8008860 <USB_EPStartXfer+0x488>
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	2b3e      	cmp	r3, #62	; 0x3e
 80087e2:	d811      	bhi.n	8008808 <USB_EPStartXfer+0x430>
 80087e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e6:	085b      	lsrs	r3, r3, #1
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80087ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <USB_EPStartXfer+0x422>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	3301      	adds	r3, #1
 80087f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	029b      	lsls	r3, r3, #10
 8008800:	b29a      	uxth	r2, r3
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	e02b      	b.n	8008860 <USB_EPStartXfer+0x488>
 8008808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880a:	095b      	lsrs	r3, r3, #5
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38
 800880e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008810:	f003 031f 	and.w	r3, r3, #31
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <USB_EPStartXfer+0x446>
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	3b01      	subs	r3, #1
 800881c:	63bb      	str	r3, [r7, #56]	; 0x38
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	b29b      	uxth	r3, r3
 8008822:	029b      	lsls	r3, r3, #10
 8008824:	b29b      	uxth	r3, r3
 8008826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800882e:	b29a      	uxth	r2, r3
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	e014      	b.n	8008860 <USB_EPStartXfer+0x488>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d110      	bne.n	8008860 <USB_EPStartXfer+0x488>
 800883e:	687c      	ldr	r4, [r7, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008846:	b29b      	uxth	r3, r3
 8008848:	441c      	add	r4, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	4423      	add	r3, r4
 8008852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008856:	633b      	str	r3, [r7, #48]	; 0x30
 8008858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885a:	b29a      	uxth	r2, r3
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	687c      	ldr	r4, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d152      	bne.n	8008910 <USB_EPStartXfer+0x538>
 800886a:	687c      	ldr	r4, [r7, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008872:	b29b      	uxth	r3, r3
 8008874:	441c      	add	r4, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	4423      	add	r3, r4
 800887e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
 8008884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008886:	2b00      	cmp	r3, #0
 8008888:	d116      	bne.n	80088b8 <USB_EPStartXfer+0x4e0>
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008892:	b29a      	uxth	r2, r3
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	e045      	b.n	8008938 <USB_EPStartXfer+0x560>
 80088ac:	ffff80c0 	.word	0xffff80c0
 80088b0:	ffffc080 	.word	0xffffc080
 80088b4:	ffff8080 	.word	0xffff8080
 80088b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ba:	2b3e      	cmp	r3, #62	; 0x3e
 80088bc:	d811      	bhi.n	80088e2 <USB_EPStartXfer+0x50a>
 80088be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
 80088c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <USB_EPStartXfer+0x4fc>
 80088ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d0:	3301      	adds	r3, #1
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	029b      	lsls	r3, r3, #10
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e02a      	b.n	8008938 <USB_EPStartXfer+0x560>
 80088e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e4:	095b      	lsrs	r3, r3, #5
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
 80088e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <USB_EPStartXfer+0x520>
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	3b01      	subs	r3, #1
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	029b      	lsls	r3, r3, #10
 80088fe:	b29b      	uxth	r3, r3
 8008900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008908:	b29a      	uxth	r2, r3
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	e013      	b.n	8008938 <USB_EPStartXfer+0x560>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d10f      	bne.n	8008938 <USB_EPStartXfer+0x560>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800891e:	b29b      	uxth	r3, r3
 8008920:	441c      	add	r4, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	4423      	add	r3, r4
 800892a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008932:	b29a      	uxth	r2, r3
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800894a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894e:	b29c      	uxth	r4, r3
 8008950:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008954:	b29c      	uxth	r4, r3
 8008956:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800895a:	b29c      	uxth	r4, r3
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	4b04      	ldr	r3, [pc, #16]	; (8008978 <USB_EPStartXfer+0x5a0>)
 8008968:	4323      	orrs	r3, r4
 800896a:	b29b      	uxth	r3, r3
 800896c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3754      	adds	r7, #84	; 0x54
 8008974:	46bd      	mov	sp, r7
 8008976:	bd90      	pop	{r4, r7, pc}
 8008978:	ffff8080 	.word	0xffff8080

0800897c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800897c:	b490      	push	{r4, r7}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d018      	beq.n	80089c0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a4:	b29c      	uxth	r4, r3
 80089a6:	f084 0310 	eor.w	r3, r4, #16
 80089aa:	b29c      	uxth	r4, r3
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	441a      	add	r2, r3
 80089b6:	4b11      	ldr	r3, [pc, #68]	; (80089fc <USB_EPSetStall+0x80>)
 80089b8:	4323      	orrs	r3, r4
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	8013      	strh	r3, [r2, #0]
 80089be:	e017      	b.n	80089f0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d6:	b29c      	uxth	r4, r3
 80089d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80089dc:	b29c      	uxth	r4, r3
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	441a      	add	r2, r3
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <USB_EPSetStall+0x80>)
 80089ea:	4323      	orrs	r3, r4
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc90      	pop	{r4, r7}
 80089fa:	4770      	bx	lr
 80089fc:	ffff8080 	.word	0xffff8080

08008a00 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a00:	b490      	push	{r4, r7}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	7b1b      	ldrb	r3, [r3, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d17d      	bne.n	8008b0e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d03d      	beq.n	8008a96 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29c      	uxth	r4, r3
 8008a28:	4623      	mov	r3, r4
 8008a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d014      	beq.n	8008a5c <USB_EPClearStall+0x5c>
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a48:	b29c      	uxth	r4, r3
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	441a      	add	r2, r3
 8008a54:	4b31      	ldr	r3, [pc, #196]	; (8008b1c <USB_EPClearStall+0x11c>)
 8008a56:	4323      	orrs	r3, r4
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	78db      	ldrb	r3, [r3, #3]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d054      	beq.n	8008b0e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a7a:	b29c      	uxth	r4, r3
 8008a7c:	f084 0320 	eor.w	r3, r4, #32
 8008a80:	b29c      	uxth	r4, r3
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	441a      	add	r2, r3
 8008a8c:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <USB_EPClearStall+0x120>)
 8008a8e:	4323      	orrs	r3, r4
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	8013      	strh	r3, [r2, #0]
 8008a94:	e03b      	b.n	8008b0e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29c      	uxth	r4, r3
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d014      	beq.n	8008ad8 <USB_EPClearStall+0xd8>
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac4:	b29c      	uxth	r4, r3
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <USB_EPClearStall+0x124>)
 8008ad2:	4323      	orrs	r3, r4
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	b29c      	uxth	r4, r3
 8008af0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008af4:	b29c      	uxth	r4, r3
 8008af6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008afa:	b29c      	uxth	r4, r3
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	441a      	add	r2, r3
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <USB_EPClearStall+0x120>)
 8008b08:	4323      	orrs	r3, r4
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc90      	pop	{r4, r7}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	ffff80c0 	.word	0xffff80c0
 8008b20:	ffff8080 	.word	0xffff8080
 8008b24:	ffffc080 	.word	0xffffc080

08008b28 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2280      	movs	r2, #128	; 0x80
 8008b3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b78:	68fb      	ldr	r3, [r7, #12]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b08d      	sub	sp, #52	; 0x34
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	461a      	mov	r2, r3
 8008bac:	460b      	mov	r3, r1
 8008bae:	80fb      	strh	r3, [r7, #6]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bb4:	88bb      	ldrh	r3, [r7, #4]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	085b      	lsrs	r3, r3, #1
 8008bba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	005a      	lsls	r2, r3, #1
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd6:	e01e      	b.n	8008c16 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	3301      	adds	r3, #1
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	461a      	mov	r2, r3
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	3302      	adds	r3, #2
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	3302      	adds	r3, #2
 8008c08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	3b01      	subs	r3, #1
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1dd      	bne.n	8008bd8 <USB_WritePMA+0x3a>
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3734      	adds	r7, #52	; 0x34
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b08b      	sub	sp, #44	; 0x2c
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4611      	mov	r1, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	460b      	mov	r3, r1
 8008c38:	80fb      	strh	r3, [r7, #6]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c3e:	88bb      	ldrh	r3, [r7, #4]
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	005a      	lsls	r2, r3, #1
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c5a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c60:	e01b      	b.n	8008c9a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	3302      	adds	r3, #2
 8008c92:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	3b01      	subs	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e0      	bne.n	8008c62 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ca0:	88bb      	ldrh	r3, [r7, #4]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	701a      	strb	r2, [r3, #0]
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	372c      	adds	r7, #44	; 0x2c
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7c1b      	ldrb	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d115      	bne.n	8008d0c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	2181      	movs	r1, #129	; 0x81
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f004 fb4a 	bl	800d382 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f004 fb40 	bl	800d382 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008d0a:	e012      	b.n	8008d32 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	2202      	movs	r2, #2
 8008d10:	2181      	movs	r1, #129	; 0x81
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f004 fb35 	bl	800d382 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d1e:	2340      	movs	r3, #64	; 0x40
 8008d20:	2202      	movs	r2, #2
 8008d22:	2101      	movs	r1, #1
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f004 fb2c 	bl	800d382 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d32:	2308      	movs	r3, #8
 8008d34:	2203      	movs	r2, #3
 8008d36:	2182      	movs	r1, #130	; 0x82
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f004 fb22 	bl	800d382 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d48:	f004 fc3c 	bl	800d5c4 <USBD_static_malloc>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	73fb      	strb	r3, [r7, #15]
 8008d62:	e026      	b.n	8008db2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7c1b      	ldrb	r3, [r3, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d98:	2101      	movs	r1, #1
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f004 fbdc 	bl	800d558 <USBD_LL_PrepareReceive>
 8008da0:	e007      	b.n	8008db2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008da8:	2340      	movs	r3, #64	; 0x40
 8008daa:	2101      	movs	r1, #1
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f004 fbd3 	bl	800d558 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dcc:	2181      	movs	r1, #129	; 0x81
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f004 fafd 	bl	800d3ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dda:	2101      	movs	r1, #1
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f004 faf6 	bl	800d3ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dea:	2182      	movs	r1, #130	; 0x82
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f004 faee 	bl	800d3ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e12:	4618      	mov	r0, r3
 8008e14:	f004 fbe4 	bl	800d5e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d039      	beq.n	8008ec8 <USBD_CDC_Setup+0x9e>
 8008e54:	2b20      	cmp	r3, #32
 8008e56:	d17c      	bne.n	8008f52 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	88db      	ldrh	r3, [r3, #6]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d029      	beq.n	8008eb4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da11      	bge.n	8008e8e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	88d2      	ldrh	r2, [r2, #6]
 8008e7c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e7e:	6939      	ldr	r1, [r7, #16]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	88db      	ldrh	r3, [r3, #6]
 8008e84:	461a      	mov	r2, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 f9d0 	bl	800a22c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e8c:	e068      	b.n	8008f60 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785a      	ldrb	r2, [r3, #1]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ea4:	6939      	ldr	r1, [r7, #16]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f9eb 	bl	800a288 <USBD_CtlPrepareRx>
      break;
 8008eb2:	e055      	b.n	8008f60 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	7850      	ldrb	r0, [r2, #1]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	4798      	blx	r3
      break;
 8008ec6:	e04b      	b.n	8008f60 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	2b0a      	cmp	r3, #10
 8008ece:	d017      	beq.n	8008f00 <USBD_CDC_Setup+0xd6>
 8008ed0:	2b0b      	cmp	r3, #11
 8008ed2:	d029      	beq.n	8008f28 <USBD_CDC_Setup+0xfe>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d133      	bne.n	8008f40 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d107      	bne.n	8008ef2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ee2:	f107 030c 	add.w	r3, r7, #12
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f99e 	bl	800a22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ef0:	e02e      	b.n	8008f50 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 f92e 	bl	800a156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008efa:	2302      	movs	r3, #2
 8008efc:	75fb      	strb	r3, [r7, #23]
          break;
 8008efe:	e027      	b.n	8008f50 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d107      	bne.n	8008f1a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f0a:	f107 030f 	add.w	r3, r7, #15
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f98a 	bl	800a22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f18:	e01a      	b.n	8008f50 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f91a 	bl	800a156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	75fb      	strb	r3, [r7, #23]
          break;
 8008f26:	e013      	b.n	8008f50 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d00d      	beq.n	8008f4e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f90e 	bl	800a156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f3e:	e006      	b.n	8008f4e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f907 	bl	800a156 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f4c:	e000      	b.n	8008f50 <USBD_CDC_Setup+0x126>
          break;
 8008f4e:	bf00      	nop
      }
      break;
 8008f50:	e006      	b.n	8008f60 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f8fe 	bl	800a156 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5e:	bf00      	nop
  }

  return ret;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f84:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d037      	beq.n	8009000 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	331c      	adds	r3, #28
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d026      	beq.n	8008ff4 <USBD_CDC_DataIn+0x8a>
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	331c      	adds	r3, #28
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	0152      	lsls	r2, r2, #5
 8008fbe:	440a      	add	r2, r1
 8008fc0:	3238      	adds	r2, #56	; 0x38
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fc8:	fb02 f201 	mul.w	r2, r2, r1
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d110      	bne.n	8008ff4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	331c      	adds	r3, #28
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fe6:	78f9      	ldrb	r1, [r7, #3]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f004 fa90 	bl	800d512 <USBD_LL_Transmit>
 8008ff2:	e003      	b.n	8008ffc <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e000      	b.n	8009002 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009000:	2302      	movs	r3, #2
  }
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f004 fabb 	bl	800d59e <USBD_LL_GetRxDataSize>
 8009028:	4602      	mov	r2, r0
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800904e:	4611      	mov	r1, r2
 8009050:	4798      	blx	r3

    return USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009056:	2302      	movs	r3, #2
  }
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009076:	2b00      	cmp	r3, #0
 8009078:	d015      	beq.n	80090a6 <USBD_CDC_EP0_RxReady+0x46>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009080:	2bff      	cmp	r3, #255	; 0xff
 8009082:	d010      	beq.n	80090a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009092:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800909a:	b292      	uxth	r2, r2
 800909c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2243      	movs	r2, #67	; 0x43
 80090bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20000094 	.word	0x20000094

080090d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2243      	movs	r2, #67	; 0x43
 80090dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20000050 	.word	0x20000050

080090f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2243      	movs	r2, #67	; 0x43
 80090fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090fe:	4b03      	ldr	r3, [pc, #12]	; (800910c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	200000d8 	.word	0x200000d8

08009110 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	220a      	movs	r2, #10
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800911e:	4b03      	ldr	r3, [pc, #12]	; (800912c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	2000000c 	.word	0x2000000c

08009130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800915e:	b480      	push	{r7}
 8009160:	b087      	sub	sp, #28
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	4613      	mov	r3, r2
 800916a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009172:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800917c:	88fa      	ldrh	r2, [r7, #6]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d017      	beq.n	8009204 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7c1b      	ldrb	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d109      	bne.n	80091f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091e6:	2101      	movs	r1, #1
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f004 f9b5 	bl	800d558 <USBD_LL_PrepareReceive>
 80091ee:	e007      	b.n	8009200 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091f6:	2340      	movs	r3, #64	; 0x40
 80091f8:	2101      	movs	r1, #1
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f004 f9ac 	bl	800d558 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	e000      	b.n	8009206 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009204:	2302      	movs	r3, #2
  }
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	4613      	mov	r3, r2
 800921a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009222:	2302      	movs	r3, #2
 8009224:	e01a      	b.n	800925c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	79fa      	ldrb	r2, [r7, #7]
 8009252:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f004 f81f 	bl	800d298 <USBD_LL_Init>

  return USBD_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d006      	beq.n	8009286 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e001      	b.n	800928a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009286:	2302      	movs	r3, #2
 8009288:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f004 f853 	bl	800d34c <USBD_LL_Start>

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092d2:	2302      	movs	r3, #2
 80092d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	4611      	mov	r1, r2
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	4611      	mov	r1, r2
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	4798      	blx	r3

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fecd 	bl	800a0dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	2b01      	cmp	r3, #1
 8009364:	d00c      	beq.n	8009380 <USBD_LL_SetupStage+0x56>
 8009366:	2b01      	cmp	r3, #1
 8009368:	d302      	bcc.n	8009370 <USBD_LL_SetupStage+0x46>
 800936a:	2b02      	cmp	r3, #2
 800936c:	d010      	beq.n	8009390 <USBD_LL_SetupStage+0x66>
 800936e:	e017      	b.n	80093a0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f9cd 	bl	8009718 <USBD_StdDevReq>
      break;
 800937e:	e01a      	b.n	80093b6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa2f 	bl	80097ec <USBD_StdItfReq>
      break;
 800938e:	e012      	b.n	80093b6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fa6d 	bl	8009878 <USBD_StdEPReq>
      break;
 800939e:	e00a      	b.n	80093b6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f004 f82c 	bl	800d40c <USBD_LL_StallEP>
      break;
 80093b4:	bf00      	nop
  }

  return USBD_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	460b      	mov	r3, r1
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093ce:	7afb      	ldrb	r3, [r7, #11]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d14b      	bne.n	800946c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d134      	bne.n	8009450 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d919      	bls.n	8009426 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	1ad2      	subs	r2, r2, r3
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009408:	429a      	cmp	r2, r3
 800940a:	d203      	bcs.n	8009414 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009410:	b29b      	uxth	r3, r3
 8009412:	e002      	b.n	800941a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009418:	b29b      	uxth	r3, r3
 800941a:	461a      	mov	r2, r3
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 ff50 	bl	800a2c4 <USBD_CtlContinueRx>
 8009424:	e038      	b.n	8009498 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009438:	2b03      	cmp	r3, #3
 800943a:	d105      	bne.n	8009448 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 ff4d 	bl	800a2e8 <USBD_CtlSendStatus>
 800944e:	e023      	b.n	8009498 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009456:	2b05      	cmp	r3, #5
 8009458:	d11e      	bne.n	8009498 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009462:	2100      	movs	r1, #0
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f003 ffd1 	bl	800d40c <USBD_LL_StallEP>
 800946a:	e015      	b.n	8009498 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00d      	beq.n	8009494 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800947e:	2b03      	cmp	r3, #3
 8009480:	d108      	bne.n	8009494 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	7afa      	ldrb	r2, [r7, #11]
 800948c:	4611      	mov	r1, r2
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	4798      	blx	r3
 8009492:	e001      	b.n	8009498 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009494:	2302      	movs	r3, #2
 8009496:	e000      	b.n	800949a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b086      	sub	sp, #24
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	460b      	mov	r3, r1
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d17f      	bne.n	80095b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3314      	adds	r3, #20
 80094ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d15c      	bne.n	8009580 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d915      	bls.n	80094fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 feba 	bl	800a264 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094f0:	2300      	movs	r3, #0
 80094f2:	2200      	movs	r2, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f004 f82e 	bl	800d558 <USBD_LL_PrepareReceive>
 80094fc:	e04e      	b.n	800959c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	6912      	ldr	r2, [r2, #16]
 8009506:	fbb3 f1f2 	udiv	r1, r3, r2
 800950a:	fb02 f201 	mul.w	r2, r2, r1
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d11c      	bne.n	800954e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800951c:	429a      	cmp	r2, r3
 800951e:	d316      	bcc.n	800954e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800952a:	429a      	cmp	r2, r3
 800952c:	d20f      	bcs.n	800954e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fe96 	bl	800a264 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009540:	2300      	movs	r3, #0
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f004 f806 	bl	800d558 <USBD_LL_PrepareReceive>
 800954c:	e026      	b.n	800959c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009560:	2b03      	cmp	r3, #3
 8009562:	d105      	bne.n	8009570 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009570:	2180      	movs	r1, #128	; 0x80
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f003 ff4a 	bl	800d40c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fec8 	bl	800a30e <USBD_CtlReceiveStatus>
 800957e:	e00d      	b.n	800959c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009586:	2b04      	cmp	r3, #4
 8009588:	d004      	beq.n	8009594 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009590:	2b00      	cmp	r3, #0
 8009592:	d103      	bne.n	800959c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009594:	2180      	movs	r1, #128	; 0x80
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f003 ff38 	bl	800d40c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d11d      	bne.n	80095e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff fe82 	bl	80092b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095b4:	e015      	b.n	80095e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00d      	beq.n	80095de <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d108      	bne.n	80095de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	7afa      	ldrb	r2, [r7, #11]
 80095d6:	4611      	mov	r1, r2
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	4798      	blx	r3
 80095dc:	e001      	b.n	80095e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095de:	2302      	movs	r3, #2
 80095e0:	e000      	b.n	80095e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	2200      	movs	r2, #0
 80095f8:	2100      	movs	r1, #0
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f003 fec1 	bl	800d382 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2240      	movs	r2, #64	; 0x40
 800960c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009610:	2340      	movs	r3, #64	; 0x40
 8009612:	2200      	movs	r2, #0
 8009614:	2180      	movs	r1, #128	; 0x80
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f003 feb3 	bl	800d382 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2240      	movs	r2, #64	; 0x40
 8009626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6852      	ldr	r2, [r2, #4]
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	4611      	mov	r1, r2
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
  }

  return USBD_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	78fa      	ldrb	r2, [r7, #3]
 800967e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2204      	movs	r2, #4
 80096a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d105      	bne.n	80096d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d10b      	bne.n	800970e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800972e:	2b20      	cmp	r3, #32
 8009730:	d004      	beq.n	800973c <USBD_StdDevReq+0x24>
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d002      	beq.n	800973c <USBD_StdDevReq+0x24>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <USBD_StdDevReq+0x34>
 800973a:	e04c      	b.n	80097d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
      break;
 800974a:	e049      	b.n	80097e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b09      	cmp	r3, #9
 8009752:	d83a      	bhi.n	80097ca <USBD_StdDevReq+0xb2>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <USBD_StdDevReq+0x44>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	080097ad 	.word	0x080097ad
 8009760:	080097c1 	.word	0x080097c1
 8009764:	080097cb 	.word	0x080097cb
 8009768:	080097b7 	.word	0x080097b7
 800976c:	080097cb 	.word	0x080097cb
 8009770:	0800978f 	.word	0x0800978f
 8009774:	08009785 	.word	0x08009785
 8009778:	080097cb 	.word	0x080097cb
 800977c:	080097a3 	.word	0x080097a3
 8009780:	08009799 	.word	0x08009799
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f9d4 	bl	8009b34 <USBD_GetDescriptor>
          break;
 800978c:	e022      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fb37 	bl	8009e04 <USBD_SetAddress>
          break;
 8009796:	e01d      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fb74 	bl	8009e88 <USBD_SetConfig>
          break;
 80097a0:	e018      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fbfd 	bl	8009fa4 <USBD_GetConfig>
          break;
 80097aa:	e013      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc2c 	bl	800a00c <USBD_GetStatus>
          break;
 80097b4:	e00e      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fc5a 	bl	800a072 <USBD_SetFeature>
          break;
 80097be:	e009      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fc69 	bl	800a09a <USBD_ClrFeature>
          break;
 80097c8:	e004      	b.n	80097d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fcc2 	bl	800a156 <USBD_CtlError>
          break;
 80097d2:	bf00      	nop
      }
      break;
 80097d4:	e004      	b.n	80097e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fcbc 	bl	800a156 <USBD_CtlError>
      break;
 80097de:	bf00      	nop
  }

  return ret;
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop

080097ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009802:	2b20      	cmp	r3, #32
 8009804:	d003      	beq.n	800980e <USBD_StdItfReq+0x22>
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	d001      	beq.n	800980e <USBD_StdItfReq+0x22>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d12a      	bne.n	8009864 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009814:	3b01      	subs	r3, #1
 8009816:	2b02      	cmp	r3, #2
 8009818:	d81d      	bhi.n	8009856 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	889b      	ldrh	r3, [r3, #4]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b01      	cmp	r3, #1
 8009822:	d813      	bhi.n	800984c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	88db      	ldrh	r3, [r3, #6]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d110      	bne.n	8009860 <USBD_StdItfReq+0x74>
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10d      	bne.n	8009860 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fd4f 	bl	800a2e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800984a:	e009      	b.n	8009860 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fc81 	bl	800a156 <USBD_CtlError>
          break;
 8009854:	e004      	b.n	8009860 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fc7c 	bl	800a156 <USBD_CtlError>
          break;
 800985e:	e000      	b.n	8009862 <USBD_StdItfReq+0x76>
          break;
 8009860:	bf00      	nop
      }
      break;
 8009862:	e004      	b.n	800986e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fc75 	bl	800a156 <USBD_CtlError>
      break;
 800986c:	bf00      	nop
  }

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	889b      	ldrh	r3, [r3, #4]
 800988a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009894:	2b20      	cmp	r3, #32
 8009896:	d004      	beq.n	80098a2 <USBD_StdEPReq+0x2a>
 8009898:	2b40      	cmp	r3, #64	; 0x40
 800989a:	d002      	beq.n	80098a2 <USBD_StdEPReq+0x2a>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <USBD_StdEPReq+0x3a>
 80098a0:	e13d      	b.n	8009b1e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
      break;
 80098b0:	e13a      	b.n	8009b28 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	d10a      	bne.n	80098d4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4798      	blx	r3
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	e12a      	b.n	8009b2a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	785b      	ldrb	r3, [r3, #1]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d03e      	beq.n	800995a <USBD_StdEPReq+0xe2>
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d002      	beq.n	80098e6 <USBD_StdEPReq+0x6e>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d070      	beq.n	80099c6 <USBD_StdEPReq+0x14e>
 80098e4:	e115      	b.n	8009b12 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d002      	beq.n	80098f6 <USBD_StdEPReq+0x7e>
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d015      	beq.n	8009920 <USBD_StdEPReq+0xa8>
 80098f4:	e02b      	b.n	800994e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00c      	beq.n	8009916 <USBD_StdEPReq+0x9e>
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b80      	cmp	r3, #128	; 0x80
 8009900:	d009      	beq.n	8009916 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f003 fd80 	bl	800d40c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800990c:	2180      	movs	r1, #128	; 0x80
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f003 fd7c 	bl	800d40c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009914:	e020      	b.n	8009958 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fc1c 	bl	800a156 <USBD_CtlError>
              break;
 800991e:	e01b      	b.n	8009958 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	885b      	ldrh	r3, [r3, #2]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10e      	bne.n	8009946 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <USBD_StdEPReq+0xce>
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b80      	cmp	r3, #128	; 0x80
 8009932:	d008      	beq.n	8009946 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	88db      	ldrh	r3, [r3, #6]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f003 fd63 	bl	800d40c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fcce 	bl	800a2e8 <USBD_CtlSendStatus>

              break;
 800994c:	e004      	b.n	8009958 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fc00 	bl	800a156 <USBD_CtlError>
              break;
 8009956:	bf00      	nop
          }
          break;
 8009958:	e0e0      	b.n	8009b1c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009960:	2b02      	cmp	r3, #2
 8009962:	d002      	beq.n	800996a <USBD_StdEPReq+0xf2>
 8009964:	2b03      	cmp	r3, #3
 8009966:	d015      	beq.n	8009994 <USBD_StdEPReq+0x11c>
 8009968:	e026      	b.n	80099b8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00c      	beq.n	800998a <USBD_StdEPReq+0x112>
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d009      	beq.n	800998a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f003 fd46 	bl	800d40c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009980:	2180      	movs	r1, #128	; 0x80
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f003 fd42 	bl	800d40c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009988:	e01c      	b.n	80099c4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fbe2 	bl	800a156 <USBD_CtlError>
              break;
 8009992:	e017      	b.n	80099c4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	885b      	ldrh	r3, [r3, #2]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d112      	bne.n	80099c2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f003 fd4d 	bl	800d44a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fc99 	bl	800a2e8 <USBD_CtlSendStatus>
              }
              break;
 80099b6:	e004      	b.n	80099c2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fbcb 	bl	800a156 <USBD_CtlError>
              break;
 80099c0:	e000      	b.n	80099c4 <USBD_StdEPReq+0x14c>
              break;
 80099c2:	bf00      	nop
          }
          break;
 80099c4:	e0aa      	b.n	8009b1c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d002      	beq.n	80099d6 <USBD_StdEPReq+0x15e>
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d032      	beq.n	8009a3a <USBD_StdEPReq+0x1c2>
 80099d4:	e097      	b.n	8009b06 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <USBD_StdEPReq+0x174>
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	2b80      	cmp	r3, #128	; 0x80
 80099e0:	d004      	beq.n	80099ec <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fbb6 	bl	800a156 <USBD_CtlError>
                break;
 80099ea:	e091      	b.n	8009b10 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	da0b      	bge.n	8009a0c <USBD_StdEPReq+0x194>
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	3310      	adds	r3, #16
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4413      	add	r3, r2
 8009a08:	3304      	adds	r3, #4
 8009a0a:	e00b      	b.n	8009a24 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4413      	add	r3, r2
 8009a22:	3304      	adds	r3, #4
 8009a24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fbfa 	bl	800a22c <USBD_CtlSendData>
              break;
 8009a38:	e06a      	b.n	8009b10 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	da11      	bge.n	8009a66 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	f003 020f 	and.w	r2, r3, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	3318      	adds	r3, #24
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d117      	bne.n	8009a8c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb79 	bl	800a156 <USBD_CtlError>
                  break;
 8009a64:	e054      	b.n	8009b10 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	f003 020f 	and.w	r2, r3, #15
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d104      	bne.n	8009a8c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb66 	bl	800a156 <USBD_CtlError>
                  break;
 8009a8a:	e041      	b.n	8009b10 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da0b      	bge.n	8009aac <USBD_StdEPReq+0x234>
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	3310      	adds	r3, #16
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	e00b      	b.n	8009ac4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <USBD_StdEPReq+0x25a>
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	2b80      	cmp	r3, #128	; 0x80
 8009ad0:	d103      	bne.n	8009ada <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e00e      	b.n	8009af8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f003 fcd2 	bl	800d488 <USBD_LL_IsStallEP>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2201      	movs	r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	e002      	b.n	8009af8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2202      	movs	r2, #2
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fb94 	bl	800a22c <USBD_CtlSendData>
              break;
 8009b04:	e004      	b.n	8009b10 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fb24 	bl	800a156 <USBD_CtlError>
              break;
 8009b0e:	bf00      	nop
          }
          break;
 8009b10:	e004      	b.n	8009b1c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fb1e 	bl	800a156 <USBD_CtlError>
          break;
 8009b1a:	bf00      	nop
      }
      break;
 8009b1c:	e004      	b.n	8009b28 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fb18 	bl	800a156 <USBD_CtlError>
      break;
 8009b26:	bf00      	nop
  }

  return ret;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	2b06      	cmp	r3, #6
 8009b56:	f200 8128 	bhi.w	8009daa <USBD_GetDescriptor+0x276>
 8009b5a:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <USBD_GetDescriptor+0x2c>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b95 	.word	0x08009b95
 8009b68:	08009bd5 	.word	0x08009bd5
 8009b6c:	08009dab 	.word	0x08009dab
 8009b70:	08009dab 	.word	0x08009dab
 8009b74:	08009d4b 	.word	0x08009d4b
 8009b78:	08009d77 	.word	0x08009d77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
      break;
 8009b92:	e112      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7c1b      	ldrb	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10d      	bne.n	8009bb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	f107 0208 	add.w	r2, r7, #8
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4798      	blx	r3
 8009bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bb6:	e100      	b.n	8009dba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	f107 0208 	add.w	r2, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	2202      	movs	r2, #2
 8009bd0:	701a      	strb	r2, [r3, #0]
      break;
 8009bd2:	e0f2      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	885b      	ldrh	r3, [r3, #2]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	f200 80ac 	bhi.w	8009d38 <USBD_GetDescriptor+0x204>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <USBD_GetDescriptor+0xb4>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009c35 	.word	0x08009c35
 8009bf0:	08009c69 	.word	0x08009c69
 8009bf4:	08009c9d 	.word	0x08009c9d
 8009bf8:	08009cd1 	.word	0x08009cd1
 8009bfc:	08009d05 	.word	0x08009d05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e091      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa95 	bl	800a156 <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e089      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e077      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa7b 	bl	800a156 <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e06f      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8a:	e05d      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa61 	bl	800a156 <USBD_CtlError>
            err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9a:	e055      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	7c12      	ldrb	r2, [r2, #16]
 8009cb4:	f107 0108 	add.w	r1, r7, #8
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cbe:	e043      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa47 	bl	800a156 <USBD_CtlError>
            err++;
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cce:	e03b      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	7c12      	ldrb	r2, [r2, #16]
 8009ce8:	f107 0108 	add.w	r1, r7, #8
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf2:	e029      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa2d 	bl	800a156 <USBD_CtlError>
            err++;
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	72fb      	strb	r3, [r7, #11]
          break;
 8009d02:	e021      	b.n	8009d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7c12      	ldrb	r2, [r2, #16]
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d26:	e00f      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa13 	bl	800a156 <USBD_CtlError>
            err++;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3301      	adds	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]
          break;
 8009d36:	e007      	b.n	8009d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa0b 	bl	800a156 <USBD_CtlError>
          err++;
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	3301      	adds	r3, #1
 8009d44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d46:	e038      	b.n	8009dba <USBD_GetDescriptor+0x286>
 8009d48:	e037      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7c1b      	ldrb	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5a:	f107 0208 	add.w	r2, r7, #8
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4798      	blx	r3
 8009d62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d64:	e029      	b.n	8009dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f9f4 	bl	800a156 <USBD_CtlError>
        err++;
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	3301      	adds	r3, #1
 8009d72:	72fb      	strb	r3, [r7, #11]
      break;
 8009d74:	e021      	b.n	8009dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7c1b      	ldrb	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10d      	bne.n	8009d9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
 8009d8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	2207      	movs	r2, #7
 8009d96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d98:	e00f      	b.n	8009dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f9da 	bl	800a156 <USBD_CtlError>
        err++;
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	3301      	adds	r3, #1
 8009da6:	72fb      	strb	r3, [r7, #11]
      break;
 8009da8:	e007      	b.n	8009dba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f9d2 	bl	800a156 <USBD_CtlError>
      err++;
 8009db2:	7afb      	ldrb	r3, [r7, #11]
 8009db4:	3301      	adds	r3, #1
 8009db6:	72fb      	strb	r3, [r7, #11]
      break;
 8009db8:	bf00      	nop
  }

  if (err != 0U)
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d11c      	bne.n	8009dfa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009dc0:	893b      	ldrh	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d011      	beq.n	8009dea <USBD_GetDescriptor+0x2b6>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	88db      	ldrh	r3, [r3, #6]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00d      	beq.n	8009dea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	88da      	ldrh	r2, [r3, #6]
 8009dd2:	893b      	ldrh	r3, [r7, #8]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	bf28      	it	cs
 8009dd8:	4613      	movcs	r3, r2
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dde:	893b      	ldrh	r3, [r7, #8]
 8009de0:	461a      	mov	r2, r3
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fa21 	bl	800a22c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d104      	bne.n	8009dfc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fa78 	bl	800a2e8 <USBD_CtlSendStatus>
 8009df8:	e000      	b.n	8009dfc <USBD_GetDescriptor+0x2c8>
    return;
 8009dfa:	bf00      	nop
    }
  }
}
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop

08009e04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	889b      	ldrh	r3, [r3, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d130      	bne.n	8009e78 <USBD_SetAddress+0x74>
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	88db      	ldrh	r3, [r3, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d12c      	bne.n	8009e78 <USBD_SetAddress+0x74>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	885b      	ldrh	r3, [r3, #2]
 8009e22:	2b7f      	cmp	r3, #127	; 0x7f
 8009e24:	d828      	bhi.n	8009e78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	885b      	ldrh	r3, [r3, #2]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d104      	bne.n	8009e46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f989 	bl	800a156 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e44:	e01c      	b.n	8009e80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7bfa      	ldrb	r2, [r7, #15]
 8009e4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f003 fb3e 	bl	800d4d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fa45 	bl	800a2e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6c:	e008      	b.n	8009e80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	e003      	b.n	8009e80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f96b 	bl	800a156 <USBD_CtlError>
  }
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	4b41      	ldr	r3, [pc, #260]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009e9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e9c:	4b40      	ldr	r3, [pc, #256]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d904      	bls.n	8009eae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f955 	bl	800a156 <USBD_CtlError>
 8009eac:	e075      	b.n	8009f9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d002      	beq.n	8009ebe <USBD_SetConfig+0x36>
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d023      	beq.n	8009f04 <USBD_SetConfig+0x7c>
 8009ebc:	e062      	b.n	8009f84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ebe:	4b38      	ldr	r3, [pc, #224]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01a      	beq.n	8009efc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ec6:	4b36      	ldr	r3, [pc, #216]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ed8:	4b31      	ldr	r3, [pc, #196]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff f9f1 	bl	80092c6 <USBD_SetClassConfig>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d104      	bne.n	8009ef4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f932 	bl	800a156 <USBD_CtlError>
            return;
 8009ef2:	e052      	b.n	8009f9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9f7 	bl	800a2e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009efa:	e04e      	b.n	8009f9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f9f3 	bl	800a2e8 <USBD_CtlSendStatus>
        break;
 8009f02:	e04a      	b.n	8009f9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f04:	4b26      	ldr	r3, [pc, #152]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d112      	bne.n	8009f32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009f14:	4b22      	ldr	r3, [pc, #136]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f1e:	4b20      	ldr	r3, [pc, #128]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff f9ed 	bl	8009304 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f9dc 	bl	800a2e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f30:	e033      	b.n	8009f9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f32:	4b1b      	ldr	r3, [pc, #108]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d01d      	beq.n	8009f7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff f9db 	bl	8009304 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f4e:	4b14      	ldr	r3, [pc, #80]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f58:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff f9b1 	bl	80092c6 <USBD_SetClassConfig>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d104      	bne.n	8009f74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f8f2 	bl	800a156 <USBD_CtlError>
            return;
 8009f72:	e012      	b.n	8009f9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f9b7 	bl	800a2e8 <USBD_CtlSendStatus>
        break;
 8009f7a:	e00e      	b.n	8009f9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9b3 	bl	800a2e8 <USBD_CtlSendStatus>
        break;
 8009f82:	e00a      	b.n	8009f9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f8e5 	bl	800a156 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f8c:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <USBD_SetConfig+0x118>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff f9b6 	bl	8009304 <USBD_ClrClassConfig>
        break;
 8009f98:	bf00      	nop
    }
  }
}
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	200001a0 	.word	0x200001a0

08009fa4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	88db      	ldrh	r3, [r3, #6]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d004      	beq.n	8009fc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f8cc 	bl	800a156 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fbe:	e021      	b.n	800a004 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	db17      	blt.n	8009ffa <USBD_GetConfig+0x56>
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	dd02      	ble.n	8009fd4 <USBD_GetConfig+0x30>
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d00b      	beq.n	8009fea <USBD_GetConfig+0x46>
 8009fd2:	e012      	b.n	8009ffa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f922 	bl	800a22c <USBD_CtlSendData>
        break;
 8009fe8:	e00c      	b.n	800a004 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3304      	adds	r3, #4
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f91a 	bl	800a22c <USBD_CtlSendData>
        break;
 8009ff8:	e004      	b.n	800a004 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f8aa 	bl	800a156 <USBD_CtlError>
        break;
 800a002:	bf00      	nop
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01c:	3b01      	subs	r3, #1
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d81e      	bhi.n	800a060 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	88db      	ldrh	r3, [r3, #6]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d004      	beq.n	800a034 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f892 	bl	800a156 <USBD_CtlError>
        break;
 800a032:	e01a      	b.n	800a06a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f043 0202 	orr.w	r2, r3, #2
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	330c      	adds	r3, #12
 800a054:	2202      	movs	r2, #2
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f8e7 	bl	800a22c <USBD_CtlSendData>
      break;
 800a05e:	e004      	b.n	800a06a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f877 	bl	800a156 <USBD_CtlError>
      break;
 800a068:	bf00      	nop
  }
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	885b      	ldrh	r3, [r3, #2]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d106      	bne.n	800a092 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f92b 	bl	800a2e8 <USBD_CtlSendStatus>
  }
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d80b      	bhi.n	800a0c8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	885b      	ldrh	r3, [r3, #2]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d10c      	bne.n	800a0d2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f911 	bl	800a2e8 <USBD_CtlSendStatus>
      }
      break;
 800a0c6:	e004      	b.n	800a0d2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f843 	bl	800a156 <USBD_CtlError>
      break;
 800a0d0:	e000      	b.n	800a0d4 <USBD_ClrFeature+0x3a>
      break;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781a      	ldrb	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	785a      	ldrb	r2, [r3, #1]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	3303      	adds	r3, #3
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	b29b      	uxth	r3, r3
 800a10a:	4413      	add	r3, r2
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3304      	adds	r3, #4
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	b29a      	uxth	r2, r3
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	3305      	adds	r3, #5
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	021b      	lsls	r3, r3, #8
 800a124:	b29b      	uxth	r3, r3
 800a126:	4413      	add	r3, r2
 800a128:	b29a      	uxth	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	3306      	adds	r3, #6
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	b29a      	uxth	r2, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	3307      	adds	r3, #7
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	b29b      	uxth	r3, r3
 800a142:	4413      	add	r3, r2
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	80da      	strh	r2, [r3, #6]

}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a160:	2180      	movs	r1, #128	; 0x80
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f003 f952 	bl	800d40c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a168:	2100      	movs	r1, #0
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f003 f94e 	bl	800d40c <USBD_LL_StallEP>
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d032      	beq.n	800a1f4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f834 	bl	800a1fc <USBD_GetLen>
 800a194:	4603      	mov	r3, r0
 800a196:	3301      	adds	r3, #1
 800a198:	b29b      	uxth	r3, r3
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	75fa      	strb	r2, [r7, #23]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	7812      	ldrb	r2, [r2, #0]
 800a1b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	75fa      	strb	r2, [r7, #23]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4413      	add	r3, r2
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1c4:	e012      	b.n	800a1ec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	60fa      	str	r2, [r7, #12]
 800a1cc:	7dfa      	ldrb	r2, [r7, #23]
 800a1ce:	1c51      	adds	r1, r2, #1
 800a1d0:	75f9      	strb	r1, [r7, #23]
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	440a      	add	r2, r1
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	75fa      	strb	r2, [r7, #23]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1e8      	bne.n	800a1c6 <USBD_GetString+0x4e>
    }
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a208:	e005      	b.n	800a216 <USBD_GetLen+0x1a>
  {
    len++;
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	3301      	adds	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3301      	adds	r3, #1
 800a214:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1f5      	bne.n	800a20a <USBD_GetLen+0xe>
  }

  return len;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2202      	movs	r2, #2
 800a23e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a242:	88fa      	ldrh	r2, [r7, #6]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a248:	88fa      	ldrh	r2, [r7, #6]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	2100      	movs	r1, #0
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f003 f95c 	bl	800d512 <USBD_LL_Transmit>

  return USBD_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	2100      	movs	r1, #0
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f003 f94a 	bl	800d512 <USBD_LL_Transmit>

  return USBD_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2203      	movs	r2, #3
 800a29a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2a6:	88fa      	ldrh	r2, [r7, #6]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2ae:	88fb      	ldrh	r3, [r7, #6]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f003 f94f 	bl	800d558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f003 f93d 	bl	800d558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f003 f907 	bl	800d512 <USBD_LL_Transmit>

  return USBD_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2205      	movs	r2, #5
 800a31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a31e:	2300      	movs	r3, #0
 800a320:	2200      	movs	r2, #0
 800a322:	2100      	movs	r1, #0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 f917 	bl	800d558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a33a:	f3ef 8305 	mrs	r3, IPSR
 800a33e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a340:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10f      	bne.n	800a366 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a346:	f3ef 8310 	mrs	r3, PRIMASK
 800a34a:	607b      	str	r3, [r7, #4]
  return(result);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <osKernelInitialize+0x32>
 800a352:	4b11      	ldr	r3, [pc, #68]	; (800a398 <osKernelInitialize+0x64>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d109      	bne.n	800a36e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a35a:	f3ef 8311 	mrs	r3, BASEPRI
 800a35e:	603b      	str	r3, [r7, #0]
  return(result);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a366:	f06f 0305 	mvn.w	r3, #5
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	e00c      	b.n	800a388 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a36e:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <osKernelInitialize+0x64>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d105      	bne.n	800a382 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a376:	4b08      	ldr	r3, [pc, #32]	; (800a398 <osKernelInitialize+0x64>)
 800a378:	2201      	movs	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	e002      	b.n	800a388 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a382:	f04f 33ff 	mov.w	r3, #4294967295
 800a386:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a388:	68fb      	ldr	r3, [r7, #12]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	200001a4 	.word	0x200001a4

0800a39c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3a2:	f3ef 8305 	mrs	r3, IPSR
 800a3a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10f      	bne.n	800a3ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b2:	607b      	str	r3, [r7, #4]
  return(result);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d109      	bne.n	800a3ce <osKernelStart+0x32>
 800a3ba:	4b11      	ldr	r3, [pc, #68]	; (800a400 <osKernelStart+0x64>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d109      	bne.n	800a3d6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3c2:	f3ef 8311 	mrs	r3, BASEPRI
 800a3c6:	603b      	str	r3, [r7, #0]
  return(result);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e00e      	b.n	800a3f4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3d6:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <osKernelStart+0x64>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d107      	bne.n	800a3ee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <osKernelStart+0x64>)
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a3e4:	f001 f86a 	bl	800b4bc <vTaskStartScheduler>
      stat = osOK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	e002      	b.n	800a3f4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200001a4 	.word	0x200001a4

0800a404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b092      	sub	sp, #72	; 0x48
 800a408:	af04      	add	r7, sp, #16
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a414:	f3ef 8305 	mrs	r3, IPSR
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f040 8094 	bne.w	800a54a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a422:	f3ef 8310 	mrs	r3, PRIMASK
 800a426:	623b      	str	r3, [r7, #32]
  return(result);
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f040 808d 	bne.w	800a54a <osThreadNew+0x146>
 800a430:	4b48      	ldr	r3, [pc, #288]	; (800a554 <osThreadNew+0x150>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b02      	cmp	r3, #2
 800a436:	d106      	bne.n	800a446 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a438:	f3ef 8311 	mrs	r3, BASEPRI
 800a43c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	2b00      	cmp	r3, #0
 800a442:	f040 8082 	bne.w	800a54a <osThreadNew+0x146>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d07e      	beq.n	800a54a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a44c:	2380      	movs	r3, #128	; 0x80
 800a44e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a450:	2318      	movs	r3, #24
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a454:	2300      	movs	r3, #0
 800a456:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a458:	f107 031b 	add.w	r3, r7, #27
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a45e:	f04f 33ff 	mov.w	r3, #4294967295
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d045      	beq.n	800a4f6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <osThreadNew+0x74>
        name = attr->name;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d008      	beq.n	800a49e <osThreadNew+0x9a>
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	2b38      	cmp	r3, #56	; 0x38
 800a490:	d805      	bhi.n	800a49e <osThreadNew+0x9a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <osThreadNew+0x9e>
        return (NULL);
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e054      	b.n	800a54c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	089b      	lsrs	r3, r3, #2
 800a4b0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00e      	beq.n	800a4d8 <osThreadNew+0xd4>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b5b      	cmp	r3, #91	; 0x5b
 800a4c0:	d90a      	bls.n	800a4d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d006      	beq.n	800a4d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <osThreadNew+0xd4>
        mem = 1;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4d6:	e010      	b.n	800a4fa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10c      	bne.n	800a4fa <osThreadNew+0xf6>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d108      	bne.n	800a4fa <osThreadNew+0xf6>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <osThreadNew+0xf6>
          mem = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f4:	e001      	b.n	800a4fa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d110      	bne.n	800a522 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a508:	9202      	str	r2, [sp, #8]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fe08 	bl	800b12c <xTaskCreateStatic>
 800a51c:	4603      	mov	r3, r0
 800a51e:	617b      	str	r3, [r7, #20]
 800a520:	e013      	b.n	800a54a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d110      	bne.n	800a54a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	f107 0314 	add.w	r3, r7, #20
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fe4f 	bl	800b1de <xTaskCreate>
 800a540:	4603      	mov	r3, r0
 800a542:	2b01      	cmp	r3, #1
 800a544:	d001      	beq.n	800a54a <osThreadNew+0x146>
          hTask = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a54a:	697b      	ldr	r3, [r7, #20]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3738      	adds	r7, #56	; 0x38
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	200001a4 	.word	0x200001a4

0800a558 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a560:	f3ef 8305 	mrs	r3, IPSR
 800a564:	613b      	str	r3, [r7, #16]
  return(result);
 800a566:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10f      	bne.n	800a58c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56c:	f3ef 8310 	mrs	r3, PRIMASK
 800a570:	60fb      	str	r3, [r7, #12]
  return(result);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d109      	bne.n	800a58c <osDelay+0x34>
 800a578:	4b0d      	ldr	r3, [pc, #52]	; (800a5b0 <osDelay+0x58>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d109      	bne.n	800a594 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a580:	f3ef 8311 	mrs	r3, BASEPRI
 800a584:	60bb      	str	r3, [r7, #8]
  return(result);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <osDelay+0x3c>
    stat = osErrorISR;
 800a58c:	f06f 0305 	mvn.w	r3, #5
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	e007      	b.n	800a5a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a594:	2300      	movs	r3, #0
 800a596:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 ff58 	bl	800b454 <vTaskDelay>
    }
  }

  return (stat);
 800a5a4:	697b      	ldr	r3, [r7, #20]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	200001a4 	.word	0x200001a4

0800a5b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a07      	ldr	r2, [pc, #28]	; (800a5e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a5c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	4a06      	ldr	r2, [pc, #24]	; (800a5e4 <vApplicationGetIdleTaskMemory+0x30>)
 800a5ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2280      	movs	r2, #128	; 0x80
 800a5d0:	601a      	str	r2, [r3, #0]
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	200001a8 	.word	0x200001a8
 800a5e4:	20000204 	.word	0x20000204

0800a5e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4a07      	ldr	r2, [pc, #28]	; (800a614 <vApplicationGetTimerTaskMemory+0x2c>)
 800a5f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4a06      	ldr	r2, [pc, #24]	; (800a618 <vApplicationGetTimerTaskMemory+0x30>)
 800a5fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a606:	601a      	str	r2, [r3, #0]
}
 800a608:	bf00      	nop
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	20000404 	.word	0x20000404
 800a618:	20000460 	.word	0x20000460

0800a61c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f103 0208 	add.w	r2, r3, #8
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f04f 32ff 	mov.w	r2, #4294967295
 800a634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f103 0208 	add.w	r2, r3, #8
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f103 0208 	add.w	r2, r3, #8
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a676:	b480      	push	{r7}
 800a678:	b085      	sub	sp, #20
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	601a      	str	r2, [r3, #0]
}
 800a6b2:	bf00      	nop
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d103      	bne.n	800a6de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	e00c      	b.n	800a6f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e002      	b.n	800a6ec <vListInsert+0x2e>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d2f6      	bcs.n	800a6e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	601a      	str	r2, [r3, #0]
}
 800a724:	bf00      	nop
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6892      	ldr	r2, [r2, #8]
 800a746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6852      	ldr	r2, [r2, #4]
 800a750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d103      	bne.n	800a764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	1e5a      	subs	r2, r3, #1
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d109      	bne.n	800a7ac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	60bb      	str	r3, [r7, #8]
 800a7aa:	e7fe      	b.n	800a7aa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a7ac:	f001 ffd6 	bl	800c75c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b8:	68f9      	ldr	r1, [r7, #12]
 800a7ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7bc:	fb01 f303 	mul.w	r3, r1, r3
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	68f9      	ldr	r1, [r7, #12]
 800a7e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7e2:	fb01 f303 	mul.w	r3, r1, r3
 800a7e6:	441a      	add	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	22ff      	movs	r2, #255	; 0xff
 800a7f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	22ff      	movs	r2, #255	; 0xff
 800a7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d114      	bne.n	800a82c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d01a      	beq.n	800a840 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3310      	adds	r3, #16
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 f8da 	bl	800b9c8 <xTaskRemoveFromEventList>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d012      	beq.n	800a840 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a81a:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <xQueueGenericReset+0xcc>)
 800a81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	e009      	b.n	800a840 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	3310      	adds	r3, #16
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff fef3 	bl	800a61c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3324      	adds	r3, #36	; 0x24
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff feee 	bl	800a61c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a840:	f001 ffba 	bl	800c7b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a844:	2301      	movs	r3, #1
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	e000ed04 	.word	0xe000ed04

0800a854 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08e      	sub	sp, #56	; 0x38
 800a858:	af02      	add	r7, sp, #8
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d109      	bne.n	800a87c <xQueueGenericCreateStatic+0x28>
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
 800a87a:	e7fe      	b.n	800a87a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d109      	bne.n	800a896 <xQueueGenericCreateStatic+0x42>
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
 800a894:	e7fe      	b.n	800a894 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <xQueueGenericCreateStatic+0x4e>
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <xQueueGenericCreateStatic+0x52>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <xQueueGenericCreateStatic+0x54>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <xQueueGenericCreateStatic+0x6c>
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	e7fe      	b.n	800a8be <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <xQueueGenericCreateStatic+0x78>
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <xQueueGenericCreateStatic+0x7c>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e000      	b.n	800a8d2 <xQueueGenericCreateStatic+0x7e>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d109      	bne.n	800a8ea <xQueueGenericCreateStatic+0x96>
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e7fe      	b.n	800a8e8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8ea:	2350      	movs	r3, #80	; 0x50
 800a8ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b50      	cmp	r3, #80	; 0x50
 800a8f2:	d009      	beq.n	800a908 <xQueueGenericCreateStatic+0xb4>
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	e7fe      	b.n	800a906 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00d      	beq.n	800a92e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a91a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	4613      	mov	r3, r2
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f805 	bl	800a938 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a930:	4618      	mov	r0, r3
 800a932:	3730      	adds	r7, #48	; 0x30
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e002      	b.n	800a95a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a966:	2101      	movs	r1, #1
 800a968:	69b8      	ldr	r0, [r7, #24]
 800a96a:	f7ff ff0b 	bl	800a784 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	78fa      	ldrb	r2, [r7, #3]
 800a972:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08e      	sub	sp, #56	; 0x38
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a98e:	2300      	movs	r3, #0
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d109      	bne.n	800a9b0 <xQueueGenericSend+0x30>
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ae:	e7fe      	b.n	800a9ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d103      	bne.n	800a9be <xQueueGenericSend+0x3e>
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <xQueueGenericSend+0x42>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <xQueueGenericSend+0x44>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d109      	bne.n	800a9dc <xQueueGenericSend+0x5c>
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a9da:	e7fe      	b.n	800a9da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d103      	bne.n	800a9ea <xQueueGenericSend+0x6a>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d101      	bne.n	800a9ee <xQueueGenericSend+0x6e>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <xQueueGenericSend+0x70>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d109      	bne.n	800aa08 <xQueueGenericSend+0x88>
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	623b      	str	r3, [r7, #32]
 800aa06:	e7fe      	b.n	800aa06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa08:	f001 f99a 	bl	800bd40 <xTaskGetSchedulerState>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <xQueueGenericSend+0x98>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <xQueueGenericSend+0x9c>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e000      	b.n	800aa1e <xQueueGenericSend+0x9e>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <xQueueGenericSend+0xb6>
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	61fb      	str	r3, [r7, #28]
 800aa34:	e7fe      	b.n	800aa34 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa36:	f001 fe91 	bl	800c75c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d302      	bcc.n	800aa4c <xQueueGenericSend+0xcc>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d129      	bne.n	800aaa0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa52:	f000 f9ff 	bl	800ae54 <prvCopyDataToQueue>
 800aa56:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d010      	beq.n	800aa82 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	3324      	adds	r3, #36	; 0x24
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 ffaf 	bl	800b9c8 <xTaskRemoveFromEventList>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d013      	beq.n	800aa98 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa70:	4b3f      	ldr	r3, [pc, #252]	; (800ab70 <xQueueGenericSend+0x1f0>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	e00a      	b.n	800aa98 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa88:	4b39      	ldr	r3, [pc, #228]	; (800ab70 <xQueueGenericSend+0x1f0>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa98:	f001 fe8e 	bl	800c7b8 <vPortExitCritical>
				return pdPASS;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e063      	b.n	800ab68 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d103      	bne.n	800aaae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaa6:	f001 fe87 	bl	800c7b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e05c      	b.n	800ab68 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d106      	bne.n	800aac2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 ffe7 	bl	800ba8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aabe:	2301      	movs	r3, #1
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aac2:	f001 fe79 	bl	800c7b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac6:	f000 fd5d 	bl	800b584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaca:	f001 fe47 	bl	800c75c <vPortEnterCritical>
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad4:	b25b      	sxtb	r3, r3
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d103      	bne.n	800aae4 <xQueueGenericSend+0x164>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaea:	b25b      	sxtb	r3, r3
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf0:	d103      	bne.n	800aafa <xQueueGenericSend+0x17a>
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aafa:	f001 fe5d 	bl	800c7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aafe:	1d3a      	adds	r2, r7, #4
 800ab00:	f107 0314 	add.w	r3, r7, #20
 800ab04:	4611      	mov	r1, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 ffd6 	bl	800bab8 <xTaskCheckForTimeOut>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d124      	bne.n	800ab5c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab14:	f000 fa96 	bl	800b044 <prvIsQueueFull>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d018      	beq.n	800ab50 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	3310      	adds	r3, #16
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	4611      	mov	r1, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 ff00 	bl	800b92c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2e:	f000 fa21 	bl	800af74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab32:	f000 fd35 	bl	800b5a0 <xTaskResumeAll>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f47f af7c 	bne.w	800aa36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <xQueueGenericSend+0x1f0>)
 800ab40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	e772      	b.n	800aa36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab52:	f000 fa0f 	bl	800af74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab56:	f000 fd23 	bl	800b5a0 <xTaskResumeAll>
 800ab5a:	e76c      	b.n	800aa36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab5e:	f000 fa09 	bl	800af74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab62:	f000 fd1d 	bl	800b5a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab66:	2300      	movs	r3, #0
		}
	}
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3738      	adds	r7, #56	; 0x38
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	; 0x38
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d109      	bne.n	800aba0 <xQueueGenericSendFromISR+0x2c>
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab9e:	e7fe      	b.n	800ab9e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <xQueueGenericSendFromISR+0x3a>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <xQueueGenericSendFromISR+0x3e>
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <xQueueGenericSendFromISR+0x40>
 800abb2:	2300      	movs	r3, #0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <xQueueGenericSendFromISR+0x58>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	623b      	str	r3, [r7, #32]
 800abca:	e7fe      	b.n	800abca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d103      	bne.n	800abda <xQueueGenericSendFromISR+0x66>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d101      	bne.n	800abde <xQueueGenericSendFromISR+0x6a>
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <xQueueGenericSendFromISR+0x6c>
 800abde:	2300      	movs	r3, #0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <xQueueGenericSendFromISR+0x84>
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	61fb      	str	r3, [r7, #28]
 800abf6:	e7fe      	b.n	800abf6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abf8:	f001 fe8c 	bl	800c914 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abfc:	f3ef 8211 	mrs	r2, BASEPRI
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	61ba      	str	r2, [r7, #24]
 800ac12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d302      	bcc.n	800ac2a <xQueueGenericSendFromISR+0xb6>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d12c      	bne.n	800ac84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac3a:	f000 f90b 	bl	800ae54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d112      	bne.n	800ac6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d016      	beq.n	800ac7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	3324      	adds	r3, #36	; 0x24
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 feb7 	bl	800b9c8 <xTaskRemoveFromEventList>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00b      	beq.n	800ac7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	e007      	b.n	800ac7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac72:	3301      	adds	r3, #1
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	b25a      	sxtb	r2, r3
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ac82:	e001      	b.n	800ac88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34
 800ac88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3738      	adds	r7, #56	; 0x38
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08c      	sub	sp, #48	; 0x30
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aca8:	2300      	movs	r3, #0
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d109      	bne.n	800acca <xQueueReceive+0x2e>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	623b      	str	r3, [r7, #32]
 800acc8:	e7fe      	b.n	800acc8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <xQueueReceive+0x3c>
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <xQueueReceive+0x40>
 800acd8:	2301      	movs	r3, #1
 800acda:	e000      	b.n	800acde <xQueueReceive+0x42>
 800acdc:	2300      	movs	r3, #0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <xQueueReceive+0x5a>
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	61fb      	str	r3, [r7, #28]
 800acf4:	e7fe      	b.n	800acf4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acf6:	f001 f823 	bl	800bd40 <xTaskGetSchedulerState>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d102      	bne.n	800ad06 <xQueueReceive+0x6a>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <xQueueReceive+0x6e>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e000      	b.n	800ad0c <xQueueReceive+0x70>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <xQueueReceive+0x88>
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	e7fe      	b.n	800ad22 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad24:	f001 fd1a 	bl	800c75c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d01f      	beq.n	800ad74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad38:	f000 f8f6 	bl	800af28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	1e5a      	subs	r2, r3, #1
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00f      	beq.n	800ad6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4e:	3310      	adds	r3, #16
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fe39 	bl	800b9c8 <xTaskRemoveFromEventList>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad5c:	4b3c      	ldr	r3, [pc, #240]	; (800ae50 <xQueueReceive+0x1b4>)
 800ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad6c:	f001 fd24 	bl	800c7b8 <vPortExitCritical>
				return pdPASS;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e069      	b.n	800ae48 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d103      	bne.n	800ad82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad7a:	f001 fd1d 	bl	800c7b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e062      	b.n	800ae48 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad88:	f107 0310 	add.w	r3, r7, #16
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fe7d 	bl	800ba8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad92:	2301      	movs	r3, #1
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad96:	f001 fd0f 	bl	800c7b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad9a:	f000 fbf3 	bl	800b584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad9e:	f001 fcdd 	bl	800c75c <vPortEnterCritical>
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada8:	b25b      	sxtb	r3, r3
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d103      	bne.n	800adb8 <xQueueReceive+0x11c>
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adbe:	b25b      	sxtb	r3, r3
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d103      	bne.n	800adce <xQueueReceive+0x132>
 800adc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adce:	f001 fcf3 	bl	800c7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add2:	1d3a      	adds	r2, r7, #4
 800add4:	f107 0310 	add.w	r3, r7, #16
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fe6c 	bl	800bab8 <xTaskCheckForTimeOut>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d123      	bne.n	800ae2e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade8:	f000 f916 	bl	800b018 <prvIsQueueEmpty>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d017      	beq.n	800ae22 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	3324      	adds	r3, #36	; 0x24
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fd96 	bl	800b92c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae02:	f000 f8b7 	bl	800af74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae06:	f000 fbcb 	bl	800b5a0 <xTaskResumeAll>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d189      	bne.n	800ad24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ae10:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <xQueueReceive+0x1b4>)
 800ae12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	e780      	b.n	800ad24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae24:	f000 f8a6 	bl	800af74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae28:	f000 fbba 	bl	800b5a0 <xTaskResumeAll>
 800ae2c:	e77a      	b.n	800ad24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae30:	f000 f8a0 	bl	800af74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae34:	f000 fbb4 	bl	800b5a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae3a:	f000 f8ed 	bl	800b018 <prvIsQueueEmpty>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f43f af6f 	beq.w	800ad24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3730      	adds	r7, #48	; 0x30
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10d      	bne.n	800ae8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d14d      	bne.n	800af16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 ff7c 	bl	800bd7c <xTaskPriorityDisinherit>
 800ae84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	605a      	str	r2, [r3, #4]
 800ae8c:	e043      	b.n	800af16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d119      	bne.n	800aec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6898      	ldr	r0, [r3, #8]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	f002 fc04 	bl	800d6ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeac:	441a      	add	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689a      	ldr	r2, [r3, #8]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d32b      	bcc.n	800af16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	609a      	str	r2, [r3, #8]
 800aec6:	e026      	b.n	800af16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68d8      	ldr	r0, [r3, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed0:	461a      	mov	r2, r3
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	f002 fbea 	bl	800d6ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee0:	425b      	negs	r3, r3
 800aee2:	441a      	add	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d207      	bcs.n	800af04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	425b      	negs	r3, r3
 800aefe:	441a      	add	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b02      	cmp	r3, #2
 800af08:	d105      	bne.n	800af16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	3b01      	subs	r3, #1
 800af14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af1e:	697b      	ldr	r3, [r7, #20]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	d018      	beq.n	800af6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	441a      	add	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d303      	bcc.n	800af5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68d9      	ldr	r1, [r3, #12]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af64:	461a      	mov	r2, r3
 800af66:	6838      	ldr	r0, [r7, #0]
 800af68:	f002 fba0 	bl	800d6ac <memcpy>
	}
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af7c:	f001 fbee 	bl	800c75c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af88:	e011      	b.n	800afae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d012      	beq.n	800afb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3324      	adds	r3, #36	; 0x24
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fd16 	bl	800b9c8 <xTaskRemoveFromEventList>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afa2:	f000 fde9 	bl	800bb78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dce9      	bgt.n	800af8a <prvUnlockQueue+0x16>
 800afb6:	e000      	b.n	800afba <prvUnlockQueue+0x46>
					break;
 800afb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	22ff      	movs	r2, #255	; 0xff
 800afbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afc2:	f001 fbf9 	bl	800c7b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afc6:	f001 fbc9 	bl	800c75c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afd2:	e011      	b.n	800aff8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d012      	beq.n	800b002 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3310      	adds	r3, #16
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fcf1 	bl	800b9c8 <xTaskRemoveFromEventList>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afec:	f000 fdc4 	bl	800bb78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800affc:	2b00      	cmp	r3, #0
 800affe:	dce9      	bgt.n	800afd4 <prvUnlockQueue+0x60>
 800b000:	e000      	b.n	800b004 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b002:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	22ff      	movs	r2, #255	; 0xff
 800b008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b00c:	f001 fbd4 	bl	800c7b8 <vPortExitCritical>
}
 800b010:	bf00      	nop
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b020:	f001 fb9c 	bl	800c75c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e001      	b.n	800b036 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b032:	2300      	movs	r3, #0
 800b034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b036:	f001 fbbf 	bl	800c7b8 <vPortExitCritical>

	return xReturn;
 800b03a:	68fb      	ldr	r3, [r7, #12]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b04c:	f001 fb86 	bl	800c75c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b058:	429a      	cmp	r2, r3
 800b05a:	d102      	bne.n	800b062 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b05c:	2301      	movs	r3, #1
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	e001      	b.n	800b066 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b066:	f001 fba7 	bl	800c7b8 <vPortExitCritical>

	return xReturn;
 800b06a:	68fb      	ldr	r3, [r7, #12]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	e014      	b.n	800b0ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b084:	4a0e      	ldr	r2, [pc, #56]	; (800b0c0 <vQueueAddToRegistry+0x4c>)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10b      	bne.n	800b0a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b090:	490b      	ldr	r1, [pc, #44]	; (800b0c0 <vQueueAddToRegistry+0x4c>)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b09a:	4a09      	ldr	r2, [pc, #36]	; (800b0c0 <vQueueAddToRegistry+0x4c>)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	4413      	add	r3, r2
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0a6:	e005      	b.n	800b0b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b07      	cmp	r3, #7
 800b0b2:	d9e7      	bls.n	800b084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	200022d4 	.word	0x200022d4

0800b0c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0d4:	f001 fb42 	bl	800c75c <vPortEnterCritical>
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0de:	b25b      	sxtb	r3, r3
 800b0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e4:	d103      	bne.n	800b0ee <vQueueWaitForMessageRestricted+0x2a>
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0f4:	b25b      	sxtb	r3, r3
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d103      	bne.n	800b104 <vQueueWaitForMessageRestricted+0x40>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b104:	f001 fb58 	bl	800c7b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	3324      	adds	r3, #36	; 0x24
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fc2b 	bl	800b974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b11e:	6978      	ldr	r0, [r7, #20]
 800b120:	f7ff ff28 	bl	800af74 <prvUnlockQueue>
	}
 800b124:	bf00      	nop
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08e      	sub	sp, #56	; 0x38
 800b130:	af04      	add	r7, sp, #16
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d109      	bne.n	800b154 <xTaskCreateStatic+0x28>
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
 800b152:	e7fe      	b.n	800b152 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	2b00      	cmp	r3, #0
 800b158:	d109      	bne.n	800b16e <xTaskCreateStatic+0x42>
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	61fb      	str	r3, [r7, #28]
 800b16c:	e7fe      	b.n	800b16c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b16e:	235c      	movs	r3, #92	; 0x5c
 800b170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2b5c      	cmp	r3, #92	; 0x5c
 800b176:	d009      	beq.n	800b18c <xTaskCreateStatic+0x60>
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	e7fe      	b.n	800b18a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01e      	beq.n	800b1d0 <xTaskCreateStatic+0xa4>
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01b      	beq.n	800b1d0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	2202      	movs	r2, #2
 800b1a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9303      	str	r3, [sp, #12]
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	9302      	str	r3, [sp, #8]
 800b1b2:	f107 0314 	add.w	r3, r7, #20
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 f850 	bl	800b268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ca:	f000 f8d3 	bl	800b374 <prvAddNewTaskToReadyList>
 800b1ce:	e001      	b.n	800b1d4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1d4:	697b      	ldr	r3, [r7, #20]
	}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3728      	adds	r7, #40	; 0x28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b08c      	sub	sp, #48	; 0x30
 800b1e2:	af04      	add	r7, sp, #16
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	603b      	str	r3, [r7, #0]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ee:	88fb      	ldrh	r3, [r7, #6]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 fbcc 	bl	800c990 <pvPortMalloc>
 800b1f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00e      	beq.n	800b21e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b200:	205c      	movs	r0, #92	; 0x5c
 800b202:	f001 fbc5 	bl	800c990 <pvPortMalloc>
 800b206:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	631a      	str	r2, [r3, #48]	; 0x30
 800b214:	e005      	b.n	800b222 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b216:	6978      	ldr	r0, [r7, #20]
 800b218:	f001 fc7c 	bl	800cb14 <vPortFree>
 800b21c:	e001      	b.n	800b222 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d017      	beq.n	800b258 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b230:	88fa      	ldrh	r2, [r7, #6]
 800b232:	2300      	movs	r3, #0
 800b234:	9303      	str	r3, [sp, #12]
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	9302      	str	r3, [sp, #8]
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 f80e 	bl	800b268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b24c:	69f8      	ldr	r0, [r7, #28]
 800b24e:	f000 f891 	bl	800b374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b252:	2301      	movs	r3, #1
 800b254:	61bb      	str	r3, [r7, #24]
 800b256:	e002      	b.n	800b25e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b25e:	69bb      	ldr	r3, [r7, #24]
	}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	461a      	mov	r2, r3
 800b280:	21a5      	movs	r1, #165	; 0xa5
 800b282:	f002 fa1e 	bl	800d6c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b290:	3b01      	subs	r3, #1
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	f023 0307 	bic.w	r3, r3, #7
 800b29e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <prvInitialiseNewTask+0x56>
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	e7fe      	b.n	800b2bc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2be:	2300      	movs	r3, #0
 800b2c0:	61fb      	str	r3, [r7, #28]
 800b2c2:	e012      	b.n	800b2ea <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	7819      	ldrb	r1, [r3, #0]
 800b2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	3334      	adds	r3, #52	; 0x34
 800b2d4:	460a      	mov	r2, r1
 800b2d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d006      	beq.n	800b2f2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	61fb      	str	r3, [r7, #28]
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b0f      	cmp	r3, #15
 800b2ee:	d9e9      	bls.n	800b2c4 <prvInitialiseNewTask+0x5c>
 800b2f0:	e000      	b.n	800b2f4 <prvInitialiseNewTask+0x8c>
		{
			break;
 800b2f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	2b37      	cmp	r3, #55	; 0x37
 800b300:	d901      	bls.n	800b306 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b302:	2337      	movs	r3, #55	; 0x37
 800b304:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b310:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	2200      	movs	r2, #0
 800b316:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	3304      	adds	r3, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff f99d 	bl	800a65c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	3318      	adds	r3, #24
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff f998 	bl	800a65c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b330:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b340:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	2200      	movs	r2, #0
 800b346:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	68f9      	ldr	r1, [r7, #12]
 800b354:	69b8      	ldr	r0, [r7, #24]
 800b356:	f001 f8db 	bl	800c510 <pxPortInitialiseStack>
 800b35a:	4602      	mov	r2, r0
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d002      	beq.n	800b36c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b36c:	bf00      	nop
 800b36e:	3720      	adds	r7, #32
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b37c:	f001 f9ee 	bl	800c75c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b380:	4b2d      	ldr	r3, [pc, #180]	; (800b438 <prvAddNewTaskToReadyList+0xc4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	4a2c      	ldr	r2, [pc, #176]	; (800b438 <prvAddNewTaskToReadyList+0xc4>)
 800b388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b38a:	4b2c      	ldr	r3, [pc, #176]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d109      	bne.n	800b3a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b392:	4a2a      	ldr	r2, [pc, #168]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b398:	4b27      	ldr	r3, [pc, #156]	; (800b438 <prvAddNewTaskToReadyList+0xc4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d110      	bne.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3a0:	f000 fc0e 	bl	800bbc0 <prvInitialiseTaskLists>
 800b3a4:	e00d      	b.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3a6:	4b26      	ldr	r3, [pc, #152]	; (800b440 <prvAddNewTaskToReadyList+0xcc>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ae:	4b23      	ldr	r3, [pc, #140]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d802      	bhi.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3bc:	4a1f      	ldr	r2, [pc, #124]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3c2:	4b20      	ldr	r3, [pc, #128]	; (800b444 <prvAddNewTaskToReadyList+0xd0>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	4a1e      	ldr	r2, [pc, #120]	; (800b444 <prvAddNewTaskToReadyList+0xd0>)
 800b3ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3cc:	4b1d      	ldr	r3, [pc, #116]	; (800b444 <prvAddNewTaskToReadyList+0xd0>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b1b      	ldr	r3, [pc, #108]	; (800b448 <prvAddNewTaskToReadyList+0xd4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <prvAddNewTaskToReadyList+0x74>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a18      	ldr	r2, [pc, #96]	; (800b448 <prvAddNewTaskToReadyList+0xd4>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a15      	ldr	r2, [pc, #84]	; (800b44c <prvAddNewTaskToReadyList+0xd8>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7ff f939 	bl	800a676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b404:	f001 f9d8 	bl	800c7b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b408:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <prvAddNewTaskToReadyList+0xcc>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00e      	beq.n	800b42e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d207      	bcs.n	800b42e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b41e:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <prvAddNewTaskToReadyList+0xdc>)
 800b420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20000d34 	.word	0x20000d34
 800b43c:	20000860 	.word	0x20000860
 800b440:	20000d40 	.word	0x20000d40
 800b444:	20000d50 	.word	0x20000d50
 800b448:	20000d3c 	.word	0x20000d3c
 800b44c:	20000864 	.word	0x20000864
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b45c:	2300      	movs	r3, #0
 800b45e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d016      	beq.n	800b494 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b466:	4b13      	ldr	r3, [pc, #76]	; (800b4b4 <vTaskDelay+0x60>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <vTaskDelay+0x2e>
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	60bb      	str	r3, [r7, #8]
 800b480:	e7fe      	b.n	800b480 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b482:	f000 f87f 	bl	800b584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b486:	2100      	movs	r1, #0
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fce3 	bl	800be54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b48e:	f000 f887 	bl	800b5a0 <xTaskResumeAll>
 800b492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d107      	bne.n	800b4aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <vTaskDelay+0x64>)
 800b49c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000d5c 	.word	0x20000d5c
 800b4b8:	e000ed04 	.word	0xe000ed04

0800b4bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08a      	sub	sp, #40	; 0x28
 800b4c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4ca:	463a      	mov	r2, r7
 800b4cc:	1d39      	adds	r1, r7, #4
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff f86e 	bl	800a5b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	9202      	str	r2, [sp, #8]
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	460a      	mov	r2, r1
 800b4ea:	4920      	ldr	r1, [pc, #128]	; (800b56c <vTaskStartScheduler+0xb0>)
 800b4ec:	4820      	ldr	r0, [pc, #128]	; (800b570 <vTaskStartScheduler+0xb4>)
 800b4ee:	f7ff fe1d 	bl	800b12c <xTaskCreateStatic>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	4b1f      	ldr	r3, [pc, #124]	; (800b574 <vTaskStartScheduler+0xb8>)
 800b4f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4f8:	4b1e      	ldr	r3, [pc, #120]	; (800b574 <vTaskStartScheduler+0xb8>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b500:	2301      	movs	r3, #1
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	e001      	b.n	800b50a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d102      	bne.n	800b516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b510:	f000 fcf4 	bl	800befc <xTimerCreateTimerTask>
 800b514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d115      	bne.n	800b548 <vTaskStartScheduler+0x8c>
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b52e:	4b12      	ldr	r3, [pc, #72]	; (800b578 <vTaskStartScheduler+0xbc>)
 800b530:	f04f 32ff 	mov.w	r2, #4294967295
 800b534:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <vTaskStartScheduler+0xc0>)
 800b538:	2201      	movs	r2, #1
 800b53a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b53c:	4b10      	ldr	r3, [pc, #64]	; (800b580 <vTaskStartScheduler+0xc4>)
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b542:	f001 f86d 	bl	800c620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b546:	e00d      	b.n	800b564 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54e:	d109      	bne.n	800b564 <vTaskStartScheduler+0xa8>
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e7fe      	b.n	800b562 <vTaskStartScheduler+0xa6>
}
 800b564:	bf00      	nop
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	0800d724 	.word	0x0800d724
 800b570:	0800bb91 	.word	0x0800bb91
 800b574:	20000d58 	.word	0x20000d58
 800b578:	20000d54 	.word	0x20000d54
 800b57c:	20000d40 	.word	0x20000d40
 800b580:	20000d38 	.word	0x20000d38

0800b584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b588:	4b04      	ldr	r3, [pc, #16]	; (800b59c <vTaskSuspendAll+0x18>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	4a03      	ldr	r2, [pc, #12]	; (800b59c <vTaskSuspendAll+0x18>)
 800b590:	6013      	str	r3, [r2, #0]
}
 800b592:	bf00      	nop
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	20000d5c 	.word	0x20000d5c

0800b5a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5ae:	4b41      	ldr	r3, [pc, #260]	; (800b6b4 <xTaskResumeAll+0x114>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d109      	bne.n	800b5ca <xTaskResumeAll+0x2a>
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5ca:	f001 f8c7 	bl	800c75c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5ce:	4b39      	ldr	r3, [pc, #228]	; (800b6b4 <xTaskResumeAll+0x114>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	4a37      	ldr	r2, [pc, #220]	; (800b6b4 <xTaskResumeAll+0x114>)
 800b5d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5d8:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <xTaskResumeAll+0x114>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d162      	bne.n	800b6a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5e0:	4b35      	ldr	r3, [pc, #212]	; (800b6b8 <xTaskResumeAll+0x118>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d05e      	beq.n	800b6a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e8:	e02f      	b.n	800b64a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b5ea:	4b34      	ldr	r3, [pc, #208]	; (800b6bc <xTaskResumeAll+0x11c>)
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3318      	adds	r3, #24
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff f89a 	bl	800a730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff f895 	bl	800a730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60a:	4b2d      	ldr	r3, [pc, #180]	; (800b6c0 <xTaskResumeAll+0x120>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d903      	bls.n	800b61a <xTaskResumeAll+0x7a>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	4a2a      	ldr	r2, [pc, #168]	; (800b6c0 <xTaskResumeAll+0x120>)
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61e:	4613      	mov	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	4413      	add	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4a27      	ldr	r2, [pc, #156]	; (800b6c4 <xTaskResumeAll+0x124>)
 800b628:	441a      	add	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3304      	adds	r3, #4
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f7ff f820 	bl	800a676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63a:	4b23      	ldr	r3, [pc, #140]	; (800b6c8 <xTaskResumeAll+0x128>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	429a      	cmp	r2, r3
 800b642:	d302      	bcc.n	800b64a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b644:	4b21      	ldr	r3, [pc, #132]	; (800b6cc <xTaskResumeAll+0x12c>)
 800b646:	2201      	movs	r2, #1
 800b648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b64a:	4b1c      	ldr	r3, [pc, #112]	; (800b6bc <xTaskResumeAll+0x11c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1cb      	bne.n	800b5ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b658:	f000 fb4c 	bl	800bcf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b65c:	4b1c      	ldr	r3, [pc, #112]	; (800b6d0 <xTaskResumeAll+0x130>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d010      	beq.n	800b68a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b668:	f000 f846 	bl	800b6f8 <xTaskIncrementTick>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b672:	4b16      	ldr	r3, [pc, #88]	; (800b6cc <xTaskResumeAll+0x12c>)
 800b674:	2201      	movs	r2, #1
 800b676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1f1      	bne.n	800b668 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b684:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <xTaskResumeAll+0x130>)
 800b686:	2200      	movs	r2, #0
 800b688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b68a:	4b10      	ldr	r3, [pc, #64]	; (800b6cc <xTaskResumeAll+0x12c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d009      	beq.n	800b6a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b692:	2301      	movs	r3, #1
 800b694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b696:	4b0f      	ldr	r3, [pc, #60]	; (800b6d4 <xTaskResumeAll+0x134>)
 800b698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6a6:	f001 f887 	bl	800c7b8 <vPortExitCritical>

	return xAlreadyYielded;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20000d5c 	.word	0x20000d5c
 800b6b8:	20000d34 	.word	0x20000d34
 800b6bc:	20000cf4 	.word	0x20000cf4
 800b6c0:	20000d3c 	.word	0x20000d3c
 800b6c4:	20000864 	.word	0x20000864
 800b6c8:	20000860 	.word	0x20000860
 800b6cc:	20000d48 	.word	0x20000d48
 800b6d0:	20000d44 	.word	0x20000d44
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6de:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <xTaskGetTickCount+0x1c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6e4:	687b      	ldr	r3, [r7, #4]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20000d38 	.word	0x20000d38

0800b6f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b702:	4b51      	ldr	r3, [pc, #324]	; (800b848 <xTaskIncrementTick+0x150>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f040 808d 	bne.w	800b826 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b70c:	4b4f      	ldr	r3, [pc, #316]	; (800b84c <xTaskIncrementTick+0x154>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b714:	4a4d      	ldr	r2, [pc, #308]	; (800b84c <xTaskIncrementTick+0x154>)
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d11f      	bne.n	800b760 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b720:	4b4b      	ldr	r3, [pc, #300]	; (800b850 <xTaskIncrementTick+0x158>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <xTaskIncrementTick+0x46>
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	e7fe      	b.n	800b73c <xTaskIncrementTick+0x44>
 800b73e:	4b44      	ldr	r3, [pc, #272]	; (800b850 <xTaskIncrementTick+0x158>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	4b43      	ldr	r3, [pc, #268]	; (800b854 <xTaskIncrementTick+0x15c>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a41      	ldr	r2, [pc, #260]	; (800b850 <xTaskIncrementTick+0x158>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	4a41      	ldr	r2, [pc, #260]	; (800b854 <xTaskIncrementTick+0x15c>)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6013      	str	r3, [r2, #0]
 800b752:	4b41      	ldr	r3, [pc, #260]	; (800b858 <xTaskIncrementTick+0x160>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	4a3f      	ldr	r2, [pc, #252]	; (800b858 <xTaskIncrementTick+0x160>)
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	f000 faca 	bl	800bcf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b760:	4b3e      	ldr	r3, [pc, #248]	; (800b85c <xTaskIncrementTick+0x164>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	429a      	cmp	r2, r3
 800b768:	d34e      	bcc.n	800b808 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76a:	4b39      	ldr	r3, [pc, #228]	; (800b850 <xTaskIncrementTick+0x158>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <xTaskIncrementTick+0x80>
 800b774:	2301      	movs	r3, #1
 800b776:	e000      	b.n	800b77a <xTaskIncrementTick+0x82>
 800b778:	2300      	movs	r3, #0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d004      	beq.n	800b788 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77e:	4b37      	ldr	r3, [pc, #220]	; (800b85c <xTaskIncrementTick+0x164>)
 800b780:	f04f 32ff 	mov.w	r2, #4294967295
 800b784:	601a      	str	r2, [r3, #0]
					break;
 800b786:	e03f      	b.n	800b808 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b788:	4b31      	ldr	r3, [pc, #196]	; (800b850 <xTaskIncrementTick+0x158>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d203      	bcs.n	800b7a8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7a0:	4a2e      	ldr	r2, [pc, #184]	; (800b85c <xTaskIncrementTick+0x164>)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6013      	str	r3, [r2, #0]
						break;
 800b7a6:	e02f      	b.n	800b808 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe ffbf 	bl	800a730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d004      	beq.n	800b7c4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	3318      	adds	r3, #24
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe ffb6 	bl	800a730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c8:	4b25      	ldr	r3, [pc, #148]	; (800b860 <xTaskIncrementTick+0x168>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d903      	bls.n	800b7d8 <xTaskIncrementTick+0xe0>
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4a22      	ldr	r2, [pc, #136]	; (800b860 <xTaskIncrementTick+0x168>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4a1f      	ldr	r2, [pc, #124]	; (800b864 <xTaskIncrementTick+0x16c>)
 800b7e6:	441a      	add	r2, r3
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f7fe ff41 	bl	800a676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f8:	4b1b      	ldr	r3, [pc, #108]	; (800b868 <xTaskIncrementTick+0x170>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d3b3      	bcc.n	800b76a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b802:	2301      	movs	r3, #1
 800b804:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b806:	e7b0      	b.n	800b76a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b808:	4b17      	ldr	r3, [pc, #92]	; (800b868 <xTaskIncrementTick+0x170>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80e:	4915      	ldr	r1, [pc, #84]	; (800b864 <xTaskIncrementTick+0x16c>)
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	440b      	add	r3, r1
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d907      	bls.n	800b830 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b820:	2301      	movs	r3, #1
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	e004      	b.n	800b830 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b826:	4b11      	ldr	r3, [pc, #68]	; (800b86c <xTaskIncrementTick+0x174>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3301      	adds	r3, #1
 800b82c:	4a0f      	ldr	r2, [pc, #60]	; (800b86c <xTaskIncrementTick+0x174>)
 800b82e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b830:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <xTaskIncrementTick+0x178>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b838:	2301      	movs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b83c:	697b      	ldr	r3, [r7, #20]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000d5c 	.word	0x20000d5c
 800b84c:	20000d38 	.word	0x20000d38
 800b850:	20000cec 	.word	0x20000cec
 800b854:	20000cf0 	.word	0x20000cf0
 800b858:	20000d4c 	.word	0x20000d4c
 800b85c:	20000d54 	.word	0x20000d54
 800b860:	20000d3c 	.word	0x20000d3c
 800b864:	20000864 	.word	0x20000864
 800b868:	20000860 	.word	0x20000860
 800b86c:	20000d44 	.word	0x20000d44
 800b870:	20000d48 	.word	0x20000d48

0800b874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b87a:	4b27      	ldr	r3, [pc, #156]	; (800b918 <vTaskSwitchContext+0xa4>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b882:	4b26      	ldr	r3, [pc, #152]	; (800b91c <vTaskSwitchContext+0xa8>)
 800b884:	2201      	movs	r2, #1
 800b886:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b888:	e040      	b.n	800b90c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b88a:	4b24      	ldr	r3, [pc, #144]	; (800b91c <vTaskSwitchContext+0xa8>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b890:	4b23      	ldr	r3, [pc, #140]	; (800b920 <vTaskSwitchContext+0xac>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	e00f      	b.n	800b8b8 <vTaskSwitchContext+0x44>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d109      	bne.n	800b8b2 <vTaskSwitchContext+0x3e>
 800b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	607b      	str	r3, [r7, #4]
 800b8b0:	e7fe      	b.n	800b8b0 <vTaskSwitchContext+0x3c>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	491a      	ldr	r1, [pc, #104]	; (800b924 <vTaskSwitchContext+0xb0>)
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0e5      	beq.n	800b898 <vTaskSwitchContext+0x24>
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4a13      	ldr	r2, [pc, #76]	; (800b924 <vTaskSwitchContext+0xb0>)
 800b8d8:	4413      	add	r3, r2
 800b8da:	60bb      	str	r3, [r7, #8]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	605a      	str	r2, [r3, #4]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d104      	bne.n	800b8fc <vTaskSwitchContext+0x88>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	605a      	str	r2, [r3, #4]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	4a09      	ldr	r2, [pc, #36]	; (800b928 <vTaskSwitchContext+0xb4>)
 800b904:	6013      	str	r3, [r2, #0]
 800b906:	4a06      	ldr	r2, [pc, #24]	; (800b920 <vTaskSwitchContext+0xac>)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6013      	str	r3, [r2, #0]
}
 800b90c:	bf00      	nop
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	20000d5c 	.word	0x20000d5c
 800b91c:	20000d48 	.word	0x20000d48
 800b920:	20000d3c 	.word	0x20000d3c
 800b924:	20000864 	.word	0x20000864
 800b928:	20000860 	.word	0x20000860

0800b92c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <vTaskPlaceOnEventList+0x24>
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	e7fe      	b.n	800b94e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b950:	4b07      	ldr	r3, [pc, #28]	; (800b970 <vTaskPlaceOnEventList+0x44>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3318      	adds	r3, #24
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7fe feb0 	bl	800a6be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b95e:	2101      	movs	r1, #1
 800b960:	6838      	ldr	r0, [r7, #0]
 800b962:	f000 fa77 	bl	800be54 <prvAddCurrentTaskToDelayedList>
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000860 	.word	0x20000860

0800b974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d109      	bne.n	800b99a <vTaskPlaceOnEventListRestricted+0x26>
 800b986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	617b      	str	r3, [r7, #20]
 800b998:	e7fe      	b.n	800b998 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b99a:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3318      	adds	r3, #24
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7fe fe67 	bl	800a676 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	68b8      	ldr	r0, [r7, #8]
 800b9b8:	f000 fa4c 	bl	800be54 <prvAddCurrentTaskToDelayedList>
	}
 800b9bc:	bf00      	nop
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20000860 	.word	0x20000860

0800b9c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <xTaskRemoveFromEventList+0x2a>
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e7fe      	b.n	800b9f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3318      	adds	r3, #24
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe fe9a 	bl	800a730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fc:	4b1d      	ldr	r3, [pc, #116]	; (800ba74 <xTaskRemoveFromEventList+0xac>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d11d      	bne.n	800ba40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe fe91 	bl	800a730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba12:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <xTaskRemoveFromEventList+0xb0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d903      	bls.n	800ba22 <xTaskRemoveFromEventList+0x5a>
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1e:	4a16      	ldr	r2, [pc, #88]	; (800ba78 <xTaskRemoveFromEventList+0xb0>)
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba26:	4613      	mov	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4a13      	ldr	r2, [pc, #76]	; (800ba7c <xTaskRemoveFromEventList+0xb4>)
 800ba30:	441a      	add	r2, r3
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fe fe1c 	bl	800a676 <vListInsertEnd>
 800ba3e:	e005      	b.n	800ba4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	3318      	adds	r3, #24
 800ba44:	4619      	mov	r1, r3
 800ba46:	480e      	ldr	r0, [pc, #56]	; (800ba80 <xTaskRemoveFromEventList+0xb8>)
 800ba48:	f7fe fe15 	bl	800a676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba50:	4b0c      	ldr	r3, [pc, #48]	; (800ba84 <xTaskRemoveFromEventList+0xbc>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d905      	bls.n	800ba66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <xTaskRemoveFromEventList+0xc0>)
 800ba60:	2201      	movs	r2, #1
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e001      	b.n	800ba6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ba6a:	697b      	ldr	r3, [r7, #20]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20000d5c 	.word	0x20000d5c
 800ba78:	20000d3c 	.word	0x20000d3c
 800ba7c:	20000864 	.word	0x20000864
 800ba80:	20000cf4 	.word	0x20000cf4
 800ba84:	20000860 	.word	0x20000860
 800ba88:	20000d48 	.word	0x20000d48

0800ba8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba94:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <vTaskInternalSetTimeOutState+0x24>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <vTaskInternalSetTimeOutState+0x28>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	605a      	str	r2, [r3, #4]
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	20000d4c 	.word	0x20000d4c
 800bab4:	20000d38 	.word	0x20000d38

0800bab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <xTaskCheckForTimeOut+0x24>
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	613b      	str	r3, [r7, #16]
 800bada:	e7fe      	b.n	800bada <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <xTaskCheckForTimeOut+0x3e>
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	e7fe      	b.n	800baf4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800baf6:	f000 fe31 	bl	800c75c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bafa:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <xTaskCheckForTimeOut+0xb8>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	69ba      	ldr	r2, [r7, #24]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb12:	d102      	bne.n	800bb1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e023      	b.n	800bb62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <xTaskCheckForTimeOut+0xbc>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d007      	beq.n	800bb36 <xTaskCheckForTimeOut+0x7e>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d302      	bcc.n	800bb36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb30:	2301      	movs	r3, #1
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	e015      	b.n	800bb62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d20b      	bcs.n	800bb58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	1ad2      	subs	r2, r2, r3
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff ff9d 	bl	800ba8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	61fb      	str	r3, [r7, #28]
 800bb56:	e004      	b.n	800bb62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb62:	f000 fe29 	bl	800c7b8 <vPortExitCritical>

	return xReturn;
 800bb66:	69fb      	ldr	r3, [r7, #28]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20000d38 	.word	0x20000d38
 800bb74:	20000d4c 	.word	0x20000d4c

0800bb78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb7c:	4b03      	ldr	r3, [pc, #12]	; (800bb8c <vTaskMissedYield+0x14>)
 800bb7e:	2201      	movs	r2, #1
 800bb80:	601a      	str	r2, [r3, #0]
}
 800bb82:	bf00      	nop
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20000d48 	.word	0x20000d48

0800bb90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb98:	f000 f852 	bl	800bc40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb9c:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <prvIdleTask+0x28>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d9f9      	bls.n	800bb98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <prvIdleTask+0x2c>)
 800bba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbb4:	e7f0      	b.n	800bb98 <prvIdleTask+0x8>
 800bbb6:	bf00      	nop
 800bbb8:	20000864 	.word	0x20000864
 800bbbc:	e000ed04 	.word	0xe000ed04

0800bbc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	607b      	str	r3, [r7, #4]
 800bbca:	e00c      	b.n	800bbe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4a12      	ldr	r2, [pc, #72]	; (800bc20 <prvInitialiseTaskLists+0x60>)
 800bbd8:	4413      	add	r3, r2
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe fd1e 	bl	800a61c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	607b      	str	r3, [r7, #4]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b37      	cmp	r3, #55	; 0x37
 800bbea:	d9ef      	bls.n	800bbcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbec:	480d      	ldr	r0, [pc, #52]	; (800bc24 <prvInitialiseTaskLists+0x64>)
 800bbee:	f7fe fd15 	bl	800a61c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbf2:	480d      	ldr	r0, [pc, #52]	; (800bc28 <prvInitialiseTaskLists+0x68>)
 800bbf4:	f7fe fd12 	bl	800a61c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbf8:	480c      	ldr	r0, [pc, #48]	; (800bc2c <prvInitialiseTaskLists+0x6c>)
 800bbfa:	f7fe fd0f 	bl	800a61c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbfe:	480c      	ldr	r0, [pc, #48]	; (800bc30 <prvInitialiseTaskLists+0x70>)
 800bc00:	f7fe fd0c 	bl	800a61c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc04:	480b      	ldr	r0, [pc, #44]	; (800bc34 <prvInitialiseTaskLists+0x74>)
 800bc06:	f7fe fd09 	bl	800a61c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc0a:	4b0b      	ldr	r3, [pc, #44]	; (800bc38 <prvInitialiseTaskLists+0x78>)
 800bc0c:	4a05      	ldr	r2, [pc, #20]	; (800bc24 <prvInitialiseTaskLists+0x64>)
 800bc0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <prvInitialiseTaskLists+0x7c>)
 800bc12:	4a05      	ldr	r2, [pc, #20]	; (800bc28 <prvInitialiseTaskLists+0x68>)
 800bc14:	601a      	str	r2, [r3, #0]
}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20000864 	.word	0x20000864
 800bc24:	20000cc4 	.word	0x20000cc4
 800bc28:	20000cd8 	.word	0x20000cd8
 800bc2c:	20000cf4 	.word	0x20000cf4
 800bc30:	20000d08 	.word	0x20000d08
 800bc34:	20000d20 	.word	0x20000d20
 800bc38:	20000cec 	.word	0x20000cec
 800bc3c:	20000cf0 	.word	0x20000cf0

0800bc40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc46:	e019      	b.n	800bc7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc48:	f000 fd88 	bl	800c75c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bc4c:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <prvCheckTasksWaitingTermination+0x4c>)
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fd69 	bl	800a730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <prvCheckTasksWaitingTermination+0x50>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	4a0a      	ldr	r2, [pc, #40]	; (800bc90 <prvCheckTasksWaitingTermination+0x50>)
 800bc66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <prvCheckTasksWaitingTermination+0x54>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4a09      	ldr	r2, [pc, #36]	; (800bc94 <prvCheckTasksWaitingTermination+0x54>)
 800bc70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc72:	f000 fda1 	bl	800c7b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f80e 	bl	800bc98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <prvCheckTasksWaitingTermination+0x54>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1e1      	bne.n	800bc48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20000d08 	.word	0x20000d08
 800bc90:	20000d34 	.word	0x20000d34
 800bc94:	20000d1c 	.word	0x20000d1c

0800bc98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d108      	bne.n	800bcbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 ff30 	bl	800cb14 <vPortFree>
				vPortFree( pxTCB );
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 ff2d 	bl	800cb14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcba:	e017      	b.n	800bcec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d103      	bne.n	800bcce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 ff24 	bl	800cb14 <vPortFree>
	}
 800bccc:	e00e      	b.n	800bcec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d009      	beq.n	800bcec <prvDeleteTCB+0x54>
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	e7fe      	b.n	800bcea <prvDeleteTCB+0x52>
	}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcfa:	4b0f      	ldr	r3, [pc, #60]	; (800bd38 <prvResetNextTaskUnblockTime+0x44>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <prvResetNextTaskUnblockTime+0x14>
 800bd04:	2301      	movs	r3, #1
 800bd06:	e000      	b.n	800bd0a <prvResetNextTaskUnblockTime+0x16>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd0e:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <prvResetNextTaskUnblockTime+0x48>)
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd16:	e008      	b.n	800bd2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bd18:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <prvResetNextTaskUnblockTime+0x44>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	4a05      	ldr	r2, [pc, #20]	; (800bd3c <prvResetNextTaskUnblockTime+0x48>)
 800bd28:	6013      	str	r3, [r2, #0]
}
 800bd2a:	bf00      	nop
 800bd2c:	370c      	adds	r7, #12
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	20000cec 	.word	0x20000cec
 800bd3c:	20000d54 	.word	0x20000d54

0800bd40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd46:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <xTaskGetSchedulerState+0x34>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d102      	bne.n	800bd54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	607b      	str	r3, [r7, #4]
 800bd52:	e008      	b.n	800bd66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd54:	4b08      	ldr	r3, [pc, #32]	; (800bd78 <xTaskGetSchedulerState+0x38>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d102      	bne.n	800bd62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	607b      	str	r3, [r7, #4]
 800bd60:	e001      	b.n	800bd66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd62:	2300      	movs	r3, #0
 800bd64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd66:	687b      	ldr	r3, [r7, #4]
	}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	20000d40 	.word	0x20000d40
 800bd78:	20000d5c 	.word	0x20000d5c

0800bd7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d054      	beq.n	800be3c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd92:	4b2d      	ldr	r3, [pc, #180]	; (800be48 <xTaskPriorityDisinherit+0xcc>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d009      	beq.n	800bdb0 <xTaskPriorityDisinherit+0x34>
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	e7fe      	b.n	800bdae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d109      	bne.n	800bdcc <xTaskPriorityDisinherit+0x50>
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60bb      	str	r3, [r7, #8]
 800bdca:	e7fe      	b.n	800bdca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd0:	1e5a      	subs	r2, r3, #1
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d02c      	beq.n	800be3c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d128      	bne.n	800be3c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	3304      	adds	r3, #4
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fe fc9e 	bl	800a730 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0c:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <xTaskPriorityDisinherit+0xd0>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d903      	bls.n	800be1c <xTaskPriorityDisinherit+0xa0>
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be18:	4a0c      	ldr	r2, [pc, #48]	; (800be4c <xTaskPriorityDisinherit+0xd0>)
 800be1a:	6013      	str	r3, [r2, #0]
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	4613      	mov	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4a09      	ldr	r2, [pc, #36]	; (800be50 <xTaskPriorityDisinherit+0xd4>)
 800be2a:	441a      	add	r2, r3
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fe fc1f 	bl	800a676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be38:	2301      	movs	r3, #1
 800be3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be3c:	697b      	ldr	r3, [r7, #20]
	}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	20000860 	.word	0x20000860
 800be4c:	20000d3c 	.word	0x20000d3c
 800be50:	20000864 	.word	0x20000864

0800be54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be5e:	4b21      	ldr	r3, [pc, #132]	; (800bee4 <prvAddCurrentTaskToDelayedList+0x90>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be64:	4b20      	ldr	r3, [pc, #128]	; (800bee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3304      	adds	r3, #4
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fc60 	bl	800a730 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d10a      	bne.n	800be8e <prvAddCurrentTaskToDelayedList+0x3a>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d007      	beq.n	800be8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be7e:	4b1a      	ldr	r3, [pc, #104]	; (800bee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3304      	adds	r3, #4
 800be84:	4619      	mov	r1, r3
 800be86:	4819      	ldr	r0, [pc, #100]	; (800beec <prvAddCurrentTaskToDelayedList+0x98>)
 800be88:	f7fe fbf5 	bl	800a676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be8c:	e026      	b.n	800bedc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4413      	add	r3, r2
 800be94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be96:	4b14      	ldr	r3, [pc, #80]	; (800bee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d209      	bcs.n	800beba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bea6:	4b12      	ldr	r3, [pc, #72]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3304      	adds	r3, #4
 800beb0:	4619      	mov	r1, r3
 800beb2:	4610      	mov	r0, r2
 800beb4:	f7fe fc03 	bl	800a6be <vListInsert>
}
 800beb8:	e010      	b.n	800bedc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beba:	4b0e      	ldr	r3, [pc, #56]	; (800bef4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4b0a      	ldr	r3, [pc, #40]	; (800bee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3304      	adds	r3, #4
 800bec4:	4619      	mov	r1, r3
 800bec6:	4610      	mov	r0, r2
 800bec8:	f7fe fbf9 	bl	800a6be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d202      	bcs.n	800bedc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bed6:	4a08      	ldr	r2, [pc, #32]	; (800bef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	6013      	str	r3, [r2, #0]
}
 800bedc:	bf00      	nop
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	20000d38 	.word	0x20000d38
 800bee8:	20000860 	.word	0x20000860
 800beec:	20000d20 	.word	0x20000d20
 800bef0:	20000cf0 	.word	0x20000cf0
 800bef4:	20000cec 	.word	0x20000cec
 800bef8:	20000d54 	.word	0x20000d54

0800befc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08a      	sub	sp, #40	; 0x28
 800bf00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf02:	2300      	movs	r3, #0
 800bf04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf06:	f000 fac3 	bl	800c490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf0a:	4b1c      	ldr	r3, [pc, #112]	; (800bf7c <xTimerCreateTimerTask+0x80>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d021      	beq.n	800bf56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf1a:	1d3a      	adds	r2, r7, #4
 800bf1c:	f107 0108 	add.w	r1, r7, #8
 800bf20:	f107 030c 	add.w	r3, r7, #12
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fb5f 	bl	800a5e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	9202      	str	r2, [sp, #8]
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	2302      	movs	r3, #2
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	460a      	mov	r2, r1
 800bf3c:	4910      	ldr	r1, [pc, #64]	; (800bf80 <xTimerCreateTimerTask+0x84>)
 800bf3e:	4811      	ldr	r0, [pc, #68]	; (800bf84 <xTimerCreateTimerTask+0x88>)
 800bf40:	f7ff f8f4 	bl	800b12c <xTaskCreateStatic>
 800bf44:	4602      	mov	r2, r0
 800bf46:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <xTimerCreateTimerTask+0x8c>)
 800bf48:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf4a:	4b0f      	ldr	r3, [pc, #60]	; (800bf88 <xTimerCreateTimerTask+0x8c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf52:	2301      	movs	r3, #1
 800bf54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d109      	bne.n	800bf70 <xTimerCreateTimerTask+0x74>
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	613b      	str	r3, [r7, #16]
 800bf6e:	e7fe      	b.n	800bf6e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bf70:	697b      	ldr	r3, [r7, #20]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000d90 	.word	0x20000d90
 800bf80:	0800d72c 	.word	0x0800d72c
 800bf84:	0800c0a5 	.word	0x0800c0a5
 800bf88:	20000d94 	.word	0x20000d94

0800bf8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	; 0x28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
 800bf98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d109      	bne.n	800bfb8 <xTimerGenericCommand+0x2c>
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	623b      	str	r3, [r7, #32]
 800bfb6:	e7fe      	b.n	800bfb6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfb8:	4b19      	ldr	r3, [pc, #100]	; (800c020 <xTimerGenericCommand+0x94>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d02a      	beq.n	800c016 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b05      	cmp	r3, #5
 800bfd0:	dc18      	bgt.n	800c004 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfd2:	f7ff feb5 	bl	800bd40 <xTaskGetSchedulerState>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d109      	bne.n	800bff0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfdc:	4b10      	ldr	r3, [pc, #64]	; (800c020 <xTimerGenericCommand+0x94>)
 800bfde:	6818      	ldr	r0, [r3, #0]
 800bfe0:	f107 0110 	add.w	r1, r7, #16
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe8:	f7fe fcca 	bl	800a980 <xQueueGenericSend>
 800bfec:	6278      	str	r0, [r7, #36]	; 0x24
 800bfee:	e012      	b.n	800c016 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bff0:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <xTimerGenericCommand+0x94>)
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	f107 0110 	add.w	r1, r7, #16
 800bff8:	2300      	movs	r3, #0
 800bffa:	2200      	movs	r2, #0
 800bffc:	f7fe fcc0 	bl	800a980 <xQueueGenericSend>
 800c000:	6278      	str	r0, [r7, #36]	; 0x24
 800c002:	e008      	b.n	800c016 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c004:	4b06      	ldr	r3, [pc, #24]	; (800c020 <xTimerGenericCommand+0x94>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	f107 0110 	add.w	r1, r7, #16
 800c00c:	2300      	movs	r3, #0
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	f7fe fdb0 	bl	800ab74 <xQueueGenericSendFromISR>
 800c014:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3728      	adds	r7, #40	; 0x28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20000d90 	.word	0x20000d90

0800c024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af02      	add	r7, sp, #8
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c02e:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <prvProcessExpiredTimer+0x7c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	3304      	adds	r3, #4
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe fb77 	bl	800a730 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	69db      	ldr	r3, [r3, #28]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d121      	bne.n	800c08e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	699a      	ldr	r2, [r3, #24]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	18d1      	adds	r1, r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	6978      	ldr	r0, [r7, #20]
 800c058:	f000 f8c8 	bl	800c1ec <prvInsertTimerInActiveList>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d015      	beq.n	800c08e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c062:	2300      	movs	r3, #0
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	2300      	movs	r3, #0
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	2100      	movs	r1, #0
 800c06c:	6978      	ldr	r0, [r7, #20]
 800c06e:	f7ff ff8d 	bl	800bf8c <xTimerGenericCommand>
 800c072:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d109      	bne.n	800c08e <prvProcessExpiredTimer+0x6a>
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	e7fe      	b.n	800c08c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c092:	6978      	ldr	r0, [r7, #20]
 800c094:	4798      	blx	r3
}
 800c096:	bf00      	nop
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20000d88 	.word	0x20000d88

0800c0a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 f857 	bl	800c164 <prvGetNextExpireTime>
 800c0b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f000 f803 	bl	800c0c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c0c2:	f000 f8d5 	bl	800c270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0c6:	e7f1      	b.n	800c0ac <prvTimerTask+0x8>

0800c0c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0d2:	f7ff fa57 	bl	800b584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0d6:	f107 0308 	add.w	r3, r7, #8
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 f866 	bl	800c1ac <prvSampleTimeNow>
 800c0e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d130      	bne.n	800c14a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <prvProcessTimerOrBlockTask+0x3c>
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d806      	bhi.n	800c104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0f6:	f7ff fa53 	bl	800b5a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0fa:	68f9      	ldr	r1, [r7, #12]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff ff91 	bl	800c024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c102:	e024      	b.n	800c14e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d008      	beq.n	800c11c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c10a:	4b13      	ldr	r3, [pc, #76]	; (800c158 <prvProcessTimerOrBlockTask+0x90>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	bf0c      	ite	eq
 800c114:	2301      	moveq	r3, #1
 800c116:	2300      	movne	r3, #0
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c11c:	4b0f      	ldr	r3, [pc, #60]	; (800c15c <prvProcessTimerOrBlockTask+0x94>)
 800c11e:	6818      	ldr	r0, [r3, #0]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	4619      	mov	r1, r3
 800c12a:	f7fe ffcb 	bl	800b0c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c12e:	f7ff fa37 	bl	800b5a0 <xTaskResumeAll>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c138:	4b09      	ldr	r3, [pc, #36]	; (800c160 <prvProcessTimerOrBlockTask+0x98>)
 800c13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	f3bf 8f6f 	isb	sy
}
 800c148:	e001      	b.n	800c14e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c14a:	f7ff fa29 	bl	800b5a0 <xTaskResumeAll>
}
 800c14e:	bf00      	nop
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20000d8c 	.word	0x20000d8c
 800c15c:	20000d90 	.word	0x20000d90
 800c160:	e000ed04 	.word	0xe000ed04

0800c164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c16c:	4b0e      	ldr	r3, [pc, #56]	; (800c1a8 <prvGetNextExpireTime+0x44>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	bf0c      	ite	eq
 800c176:	2301      	moveq	r3, #1
 800c178:	2300      	movne	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c18a:	4b07      	ldr	r3, [pc, #28]	; (800c1a8 <prvGetNextExpireTime+0x44>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e001      	b.n	800c19a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c19a:	68fb      	ldr	r3, [r7, #12]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	20000d88 	.word	0x20000d88

0800c1ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c1b4:	f7ff fa90 	bl	800b6d8 <xTaskGetTickCount>
 800c1b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <prvSampleTimeNow+0x3c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d205      	bcs.n	800c1d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c1c4:	f000 f904 	bl	800c3d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1d6:	4a04      	ldr	r2, [pc, #16]	; (800c1e8 <prvSampleTimeNow+0x3c>)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000d98 	.word	0x20000d98

0800c1ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d812      	bhi.n	800c238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	1ad2      	subs	r2, r2, r3
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d302      	bcc.n	800c226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c220:	2301      	movs	r3, #1
 800c222:	617b      	str	r3, [r7, #20]
 800c224:	e01b      	b.n	800c25e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c226:	4b10      	ldr	r3, [pc, #64]	; (800c268 <prvInsertTimerInActiveList+0x7c>)
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3304      	adds	r3, #4
 800c22e:	4619      	mov	r1, r3
 800c230:	4610      	mov	r0, r2
 800c232:	f7fe fa44 	bl	800a6be <vListInsert>
 800c236:	e012      	b.n	800c25e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d206      	bcs.n	800c24e <prvInsertTimerInActiveList+0x62>
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d302      	bcc.n	800c24e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c248:	2301      	movs	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	e007      	b.n	800c25e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c24e:	4b07      	ldr	r3, [pc, #28]	; (800c26c <prvInsertTimerInActiveList+0x80>)
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3304      	adds	r3, #4
 800c256:	4619      	mov	r1, r3
 800c258:	4610      	mov	r0, r2
 800c25a:	f7fe fa30 	bl	800a6be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c25e:	697b      	ldr	r3, [r7, #20]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	20000d8c 	.word	0x20000d8c
 800c26c:	20000d88 	.word	0x20000d88

0800c270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08e      	sub	sp, #56	; 0x38
 800c274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c276:	e099      	b.n	800c3ac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	da17      	bge.n	800c2ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c27e:	1d3b      	adds	r3, r7, #4
 800c280:	3304      	adds	r3, #4
 800c282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d109      	bne.n	800c29e <prvProcessReceivedCommands+0x2e>
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	61fb      	str	r3, [r7, #28]
 800c29c:	e7fe      	b.n	800c29c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2a4:	6850      	ldr	r0, [r2, #4]
 800c2a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2a8:	6892      	ldr	r2, [r2, #8]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	db7a      	blt.n	800c3aa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d004      	beq.n	800c2ca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fe fa33 	bl	800a730 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7ff ff6d 	bl	800c1ac <prvSampleTimeNow>
 800c2d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b09      	cmp	r3, #9
 800c2d8:	d868      	bhi.n	800c3ac <prvProcessReceivedCommands+0x13c>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <prvProcessReceivedCommands+0x70>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c309 	.word	0x0800c309
 800c2e4:	0800c309 	.word	0x0800c309
 800c2e8:	0800c309 	.word	0x0800c309
 800c2ec:	0800c3ad 	.word	0x0800c3ad
 800c2f0:	0800c363 	.word	0x0800c363
 800c2f4:	0800c399 	.word	0x0800c399
 800c2f8:	0800c309 	.word	0x0800c309
 800c2fc:	0800c309 	.word	0x0800c309
 800c300:	0800c3ad 	.word	0x0800c3ad
 800c304:	0800c363 	.word	0x0800c363
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	18d1      	adds	r1, r2, r3
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c316:	f7ff ff69 	bl	800c1ec <prvInsertTimerInActiveList>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d045      	beq.n	800c3ac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c326:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d13d      	bne.n	800c3ac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	699b      	ldr	r3, [r3, #24]
 800c336:	441a      	add	r2, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	2300      	movs	r3, #0
 800c33e:	2100      	movs	r1, #0
 800c340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c342:	f7ff fe23 	bl	800bf8c <xTimerGenericCommand>
 800c346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d12e      	bne.n	800c3ac <prvProcessReceivedCommands+0x13c>
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	61bb      	str	r3, [r7, #24]
 800c360:	e7fe      	b.n	800c360 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	699b      	ldr	r3, [r3, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d109      	bne.n	800c384 <prvProcessReceivedCommands+0x114>
 800c370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	617b      	str	r3, [r7, #20]
 800c382:	e7fe      	b.n	800c382 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	699a      	ldr	r2, [r3, #24]
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	18d1      	adds	r1, r2, r3
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c392:	f7ff ff2b 	bl	800c1ec <prvInsertTimerInActiveList>
					break;
 800c396:	e009      	b.n	800c3ac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d104      	bne.n	800c3ac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800c3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a4:	f000 fbb6 	bl	800cb14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3a8:	e000      	b.n	800c3ac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c3aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3ac:	4b07      	ldr	r3, [pc, #28]	; (800c3cc <prvProcessReceivedCommands+0x15c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	1d39      	adds	r1, r7, #4
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fc71 	bl	800ac9c <xQueueReceive>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f47f af5b 	bne.w	800c278 <prvProcessReceivedCommands+0x8>
	}
}
 800c3c2:	bf00      	nop
 800c3c4:	3730      	adds	r7, #48	; 0x30
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20000d90 	.word	0x20000d90

0800c3d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b088      	sub	sp, #32
 800c3d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3d6:	e044      	b.n	800c462 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3d8:	4b2b      	ldr	r3, [pc, #172]	; (800c488 <prvSwitchTimerLists+0xb8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3e2:	4b29      	ldr	r3, [pc, #164]	; (800c488 <prvSwitchTimerLists+0xb8>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe f99d 	bl	800a730 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	69db      	ldr	r3, [r3, #28]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d12d      	bne.n	800c462 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	4413      	add	r3, r2
 800c40e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	429a      	cmp	r2, r3
 800c416:	d90e      	bls.n	800c436 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c424:	4b18      	ldr	r3, [pc, #96]	; (800c488 <prvSwitchTimerLists+0xb8>)
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3304      	adds	r3, #4
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f7fe f945 	bl	800a6be <vListInsert>
 800c434:	e015      	b.n	800c462 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c436:	2300      	movs	r3, #0
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	2300      	movs	r3, #0
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	2100      	movs	r1, #0
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f7ff fda3 	bl	800bf8c <xTimerGenericCommand>
 800c446:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <prvSwitchTimerLists+0x92>
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	e7fe      	b.n	800c460 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c462:	4b09      	ldr	r3, [pc, #36]	; (800c488 <prvSwitchTimerLists+0xb8>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1b5      	bne.n	800c3d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c46c:	4b06      	ldr	r3, [pc, #24]	; (800c488 <prvSwitchTimerLists+0xb8>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c472:	4b06      	ldr	r3, [pc, #24]	; (800c48c <prvSwitchTimerLists+0xbc>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a04      	ldr	r2, [pc, #16]	; (800c488 <prvSwitchTimerLists+0xb8>)
 800c478:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c47a:	4a04      	ldr	r2, [pc, #16]	; (800c48c <prvSwitchTimerLists+0xbc>)
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	6013      	str	r3, [r2, #0]
}
 800c480:	bf00      	nop
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	20000d88 	.word	0x20000d88
 800c48c:	20000d8c 	.word	0x20000d8c

0800c490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c496:	f000 f961 	bl	800c75c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c49a:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d120      	bne.n	800c4e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4a2:	4814      	ldr	r0, [pc, #80]	; (800c4f4 <prvCheckForValidListAndQueue+0x64>)
 800c4a4:	f7fe f8ba 	bl	800a61c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4a8:	4813      	ldr	r0, [pc, #76]	; (800c4f8 <prvCheckForValidListAndQueue+0x68>)
 800c4aa:	f7fe f8b7 	bl	800a61c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4ae:	4b13      	ldr	r3, [pc, #76]	; (800c4fc <prvCheckForValidListAndQueue+0x6c>)
 800c4b0:	4a10      	ldr	r2, [pc, #64]	; (800c4f4 <prvCheckForValidListAndQueue+0x64>)
 800c4b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4b4:	4b12      	ldr	r3, [pc, #72]	; (800c500 <prvCheckForValidListAndQueue+0x70>)
 800c4b6:	4a10      	ldr	r2, [pc, #64]	; (800c4f8 <prvCheckForValidListAndQueue+0x68>)
 800c4b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	4b11      	ldr	r3, [pc, #68]	; (800c504 <prvCheckForValidListAndQueue+0x74>)
 800c4c0:	4a11      	ldr	r2, [pc, #68]	; (800c508 <prvCheckForValidListAndQueue+0x78>)
 800c4c2:	2110      	movs	r1, #16
 800c4c4:	200a      	movs	r0, #10
 800c4c6:	f7fe f9c5 	bl	800a854 <xQueueGenericCreateStatic>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c4ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4d0:	4b07      	ldr	r3, [pc, #28]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d005      	beq.n	800c4e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4d8:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	490b      	ldr	r1, [pc, #44]	; (800c50c <prvCheckForValidListAndQueue+0x7c>)
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe fdc8 	bl	800b074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4e4:	f000 f968 	bl	800c7b8 <vPortExitCritical>
}
 800c4e8:	bf00      	nop
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20000d90 	.word	0x20000d90
 800c4f4:	20000d60 	.word	0x20000d60
 800c4f8:	20000d74 	.word	0x20000d74
 800c4fc:	20000d88 	.word	0x20000d88
 800c500:	20000d8c 	.word	0x20000d8c
 800c504:	20000e3c 	.word	0x20000e3c
 800c508:	20000d9c 	.word	0x20000d9c
 800c50c:	0800d734 	.word	0x0800d734

0800c510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3b04      	subs	r3, #4
 800c520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3b04      	subs	r3, #4
 800c52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f023 0201 	bic.w	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3b04      	subs	r3, #4
 800c53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c540:	4a0c      	ldr	r2, [pc, #48]	; (800c574 <pxPortInitialiseStack+0x64>)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3b14      	subs	r3, #20
 800c54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3b04      	subs	r3, #4
 800c556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f06f 0202 	mvn.w	r2, #2
 800c55e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3b20      	subs	r3, #32
 800c564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c566:	68fb      	ldr	r3, [r7, #12]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	0800c579 	.word	0x0800c579

0800c578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c582:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <prvTaskExitError+0x50>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58a:	d009      	beq.n	800c5a0 <prvTaskExitError+0x28>
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	e7fe      	b.n	800c59e <prvTaskExitError+0x26>
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5b2:	bf00      	nop
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d0fc      	beq.n	800c5b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5ba:	bf00      	nop
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	2000011c 	.word	0x2000011c
 800c5cc:	00000000 	.word	0x00000000

0800c5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5d0:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <pxCurrentTCBConst2>)
 800c5d2:	6819      	ldr	r1, [r3, #0]
 800c5d4:	6808      	ldr	r0, [r1, #0]
 800c5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5da:	f380 8809 	msr	PSP, r0
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f04f 0000 	mov.w	r0, #0
 800c5e6:	f380 8811 	msr	BASEPRI, r0
 800c5ea:	4770      	bx	lr
 800c5ec:	f3af 8000 	nop.w

0800c5f0 <pxCurrentTCBConst2>:
 800c5f0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop

0800c5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5f8:	4808      	ldr	r0, [pc, #32]	; (800c61c <prvPortStartFirstTask+0x24>)
 800c5fa:	6800      	ldr	r0, [r0, #0]
 800c5fc:	6800      	ldr	r0, [r0, #0]
 800c5fe:	f380 8808 	msr	MSP, r0
 800c602:	f04f 0000 	mov.w	r0, #0
 800c606:	f380 8814 	msr	CONTROL, r0
 800c60a:	b662      	cpsie	i
 800c60c:	b661      	cpsie	f
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	df00      	svc	0
 800c618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c61a:	bf00      	nop
 800c61c:	e000ed08 	.word	0xe000ed08

0800c620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c626:	4b44      	ldr	r3, [pc, #272]	; (800c738 <xPortStartScheduler+0x118>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a44      	ldr	r2, [pc, #272]	; (800c73c <xPortStartScheduler+0x11c>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d109      	bne.n	800c644 <xPortStartScheduler+0x24>
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	613b      	str	r3, [r7, #16]
 800c642:	e7fe      	b.n	800c642 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c644:	4b3c      	ldr	r3, [pc, #240]	; (800c738 <xPortStartScheduler+0x118>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a3d      	ldr	r2, [pc, #244]	; (800c740 <xPortStartScheduler+0x120>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d109      	bne.n	800c662 <xPortStartScheduler+0x42>
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	e7fe      	b.n	800c660 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c662:	4b38      	ldr	r3, [pc, #224]	; (800c744 <xPortStartScheduler+0x124>)
 800c664:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	22ff      	movs	r2, #255	; 0xff
 800c672:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c67c:	78fb      	ldrb	r3, [r7, #3]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c684:	b2da      	uxtb	r2, r3
 800c686:	4b30      	ldr	r3, [pc, #192]	; (800c748 <xPortStartScheduler+0x128>)
 800c688:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c68a:	4b30      	ldr	r3, [pc, #192]	; (800c74c <xPortStartScheduler+0x12c>)
 800c68c:	2207      	movs	r2, #7
 800c68e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c690:	e009      	b.n	800c6a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c692:	4b2e      	ldr	r3, [pc, #184]	; (800c74c <xPortStartScheduler+0x12c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3b01      	subs	r3, #1
 800c698:	4a2c      	ldr	r2, [pc, #176]	; (800c74c <xPortStartScheduler+0x12c>)
 800c69a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c69c:	78fb      	ldrb	r3, [r7, #3]
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ae:	2b80      	cmp	r3, #128	; 0x80
 800c6b0:	d0ef      	beq.n	800c692 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6b2:	4b26      	ldr	r3, [pc, #152]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f1c3 0307 	rsb	r3, r3, #7
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d009      	beq.n	800c6d2 <xPortStartScheduler+0xb2>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60bb      	str	r3, [r7, #8]
 800c6d0:	e7fe      	b.n	800c6d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6d2:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	021b      	lsls	r3, r3, #8
 800c6d8:	4a1c      	ldr	r2, [pc, #112]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6dc:	4b1b      	ldr	r3, [pc, #108]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6e4:	4a19      	ldr	r2, [pc, #100]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6f0:	4b17      	ldr	r3, [pc, #92]	; (800c750 <xPortStartScheduler+0x130>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a16      	ldr	r2, [pc, #88]	; (800c750 <xPortStartScheduler+0x130>)
 800c6f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6fc:	4b14      	ldr	r3, [pc, #80]	; (800c750 <xPortStartScheduler+0x130>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a13      	ldr	r2, [pc, #76]	; (800c750 <xPortStartScheduler+0x130>)
 800c702:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c706:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c708:	f000 f8d6 	bl	800c8b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c70c:	4b11      	ldr	r3, [pc, #68]	; (800c754 <xPortStartScheduler+0x134>)
 800c70e:	2200      	movs	r2, #0
 800c710:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c712:	f000 f8f5 	bl	800c900 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c716:	4b10      	ldr	r3, [pc, #64]	; (800c758 <xPortStartScheduler+0x138>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a0f      	ldr	r2, [pc, #60]	; (800c758 <xPortStartScheduler+0x138>)
 800c71c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c720:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c722:	f7ff ff69 	bl	800c5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c726:	f7ff f8a5 	bl	800b874 <vTaskSwitchContext>
	prvTaskExitError();
 800c72a:	f7ff ff25 	bl	800c578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	e000ed00 	.word	0xe000ed00
 800c73c:	410fc271 	.word	0x410fc271
 800c740:	410fc270 	.word	0x410fc270
 800c744:	e000e400 	.word	0xe000e400
 800c748:	20000e8c 	.word	0x20000e8c
 800c74c:	20000e90 	.word	0x20000e90
 800c750:	e000ed20 	.word	0xe000ed20
 800c754:	2000011c 	.word	0x2000011c
 800c758:	e000ef34 	.word	0xe000ef34

0800c75c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c774:	4b0e      	ldr	r3, [pc, #56]	; (800c7b0 <vPortEnterCritical+0x54>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	4a0d      	ldr	r2, [pc, #52]	; (800c7b0 <vPortEnterCritical+0x54>)
 800c77c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <vPortEnterCritical+0x54>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d10e      	bne.n	800c7a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c786:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <vPortEnterCritical+0x58>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d009      	beq.n	800c7a4 <vPortEnterCritical+0x48>
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	603b      	str	r3, [r7, #0]
 800c7a2:	e7fe      	b.n	800c7a2 <vPortEnterCritical+0x46>
	}
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	2000011c 	.word	0x2000011c
 800c7b4:	e000ed04 	.word	0xe000ed04

0800c7b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7be:	4b11      	ldr	r3, [pc, #68]	; (800c804 <vPortExitCritical+0x4c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <vPortExitCritical+0x22>
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	607b      	str	r3, [r7, #4]
 800c7d8:	e7fe      	b.n	800c7d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c7da:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <vPortExitCritical+0x4c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	4a08      	ldr	r2, [pc, #32]	; (800c804 <vPortExitCritical+0x4c>)
 800c7e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7e4:	4b07      	ldr	r3, [pc, #28]	; (800c804 <vPortExitCritical+0x4c>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d104      	bne.n	800c7f6 <vPortExitCritical+0x3e>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7f6:	bf00      	nop
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	2000011c 	.word	0x2000011c
	...

0800c810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c810:	f3ef 8009 	mrs	r0, PSP
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	4b15      	ldr	r3, [pc, #84]	; (800c870 <pxCurrentTCBConst>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	f01e 0f10 	tst.w	lr, #16
 800c820:	bf08      	it	eq
 800c822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82a:	6010      	str	r0, [r2, #0]
 800c82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c834:	f380 8811 	msr	BASEPRI, r0
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f7ff f818 	bl	800b874 <vTaskSwitchContext>
 800c844:	f04f 0000 	mov.w	r0, #0
 800c848:	f380 8811 	msr	BASEPRI, r0
 800c84c:	bc09      	pop	{r0, r3}
 800c84e:	6819      	ldr	r1, [r3, #0]
 800c850:	6808      	ldr	r0, [r1, #0]
 800c852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c856:	f01e 0f10 	tst.w	lr, #16
 800c85a:	bf08      	it	eq
 800c85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c860:	f380 8809 	msr	PSP, r0
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	f3af 8000 	nop.w

0800c870 <pxCurrentTCBConst>:
 800c870:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop

0800c878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c890:	f7fe ff32 	bl	800b6f8 <xTaskIncrementTick>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c89a:	4b06      	ldr	r3, [pc, #24]	; (800c8b4 <SysTick_Handler+0x3c>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8ac:	bf00      	nop
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	e000ed04 	.word	0xe000ed04

0800c8b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8bc:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <vPortSetupTimerInterrupt+0x34>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <vPortSetupTimerInterrupt+0x38>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	; (800c8f4 <vPortSetupTimerInterrupt+0x3c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a0a      	ldr	r2, [pc, #40]	; (800c8f8 <vPortSetupTimerInterrupt+0x40>)
 800c8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d2:	099b      	lsrs	r3, r3, #6
 800c8d4:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <vPortSetupTimerInterrupt+0x44>)
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8da:	4b04      	ldr	r3, [pc, #16]	; (800c8ec <vPortSetupTimerInterrupt+0x34>)
 800c8dc:	2207      	movs	r2, #7
 800c8de:	601a      	str	r2, [r3, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	e000e010 	.word	0xe000e010
 800c8f0:	e000e018 	.word	0xe000e018
 800c8f4:	20000000 	.word	0x20000000
 800c8f8:	10624dd3 	.word	0x10624dd3
 800c8fc:	e000e014 	.word	0xe000e014

0800c900 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c900:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c910 <vPortEnableVFP+0x10>
 800c904:	6801      	ldr	r1, [r0, #0]
 800c906:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c90a:	6001      	str	r1, [r0, #0]
 800c90c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c90e:	bf00      	nop
 800c910:	e000ed88 	.word	0xe000ed88

0800c914 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c91a:	f3ef 8305 	mrs	r3, IPSR
 800c91e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b0f      	cmp	r3, #15
 800c924:	d913      	bls.n	800c94e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c926:	4a16      	ldr	r2, [pc, #88]	; (800c980 <vPortValidateInterruptPriority+0x6c>)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c930:	4b14      	ldr	r3, [pc, #80]	; (800c984 <vPortValidateInterruptPriority+0x70>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	7afa      	ldrb	r2, [r7, #11]
 800c936:	429a      	cmp	r2, r3
 800c938:	d209      	bcs.n	800c94e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	607b      	str	r3, [r7, #4]
 800c94c:	e7fe      	b.n	800c94c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c94e:	4b0e      	ldr	r3, [pc, #56]	; (800c988 <vPortValidateInterruptPriority+0x74>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c956:	4b0d      	ldr	r3, [pc, #52]	; (800c98c <vPortValidateInterruptPriority+0x78>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d909      	bls.n	800c972 <vPortValidateInterruptPriority+0x5e>
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	603b      	str	r3, [r7, #0]
 800c970:	e7fe      	b.n	800c970 <vPortValidateInterruptPriority+0x5c>
	}
 800c972:	bf00      	nop
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	e000e3f0 	.word	0xe000e3f0
 800c984:	20000e8c 	.word	0x20000e8c
 800c988:	e000ed0c 	.word	0xe000ed0c
 800c98c:	20000e90 	.word	0x20000e90

0800c990 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08a      	sub	sp, #40	; 0x28
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c99c:	f7fe fdf2 	bl	800b584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9a0:	4b57      	ldr	r3, [pc, #348]	; (800cb00 <pvPortMalloc+0x170>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9a8:	f000 f90c 	bl	800cbc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9ac:	4b55      	ldr	r3, [pc, #340]	; (800cb04 <pvPortMalloc+0x174>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f040 808c 	bne.w	800cad2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01c      	beq.n	800c9fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c9c0:	2208      	movs	r2, #8
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d013      	beq.n	800c9fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f023 0307 	bic.w	r3, r3, #7
 800c9d8:	3308      	adds	r3, #8
 800c9da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d009      	beq.n	800c9fa <pvPortMalloc+0x6a>
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e7fe      	b.n	800c9f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d068      	beq.n	800cad2 <pvPortMalloc+0x142>
 800ca00:	4b41      	ldr	r3, [pc, #260]	; (800cb08 <pvPortMalloc+0x178>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d863      	bhi.n	800cad2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca0a:	4b40      	ldr	r3, [pc, #256]	; (800cb0c <pvPortMalloc+0x17c>)
 800ca0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca0e:	4b3f      	ldr	r3, [pc, #252]	; (800cb0c <pvPortMalloc+0x17c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca14:	e004      	b.n	800ca20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d903      	bls.n	800ca32 <pvPortMalloc+0xa2>
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1f1      	bne.n	800ca16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca32:	4b33      	ldr	r3, [pc, #204]	; (800cb00 <pvPortMalloc+0x170>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d04a      	beq.n	800cad2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2208      	movs	r2, #8
 800ca42:	4413      	add	r3, r2
 800ca44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	1ad2      	subs	r2, r2, r3
 800ca56:	2308      	movs	r3, #8
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d91e      	bls.n	800ca9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4413      	add	r3, r2
 800ca64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <pvPortMalloc+0xf4>
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	e7fe      	b.n	800ca82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca96:	69b8      	ldr	r0, [r7, #24]
 800ca98:	f000 f8f6 	bl	800cc88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca9c:	4b1a      	ldr	r3, [pc, #104]	; (800cb08 <pvPortMalloc+0x178>)
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	4a18      	ldr	r2, [pc, #96]	; (800cb08 <pvPortMalloc+0x178>)
 800caa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caaa:	4b17      	ldr	r3, [pc, #92]	; (800cb08 <pvPortMalloc+0x178>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4b18      	ldr	r3, [pc, #96]	; (800cb10 <pvPortMalloc+0x180>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d203      	bcs.n	800cabe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cab6:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <pvPortMalloc+0x178>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a15      	ldr	r2, [pc, #84]	; (800cb10 <pvPortMalloc+0x180>)
 800cabc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	4b10      	ldr	r3, [pc, #64]	; (800cb04 <pvPortMalloc+0x174>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	431a      	orrs	r2, r3
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cad2:	f7fe fd65 	bl	800b5a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f003 0307 	and.w	r3, r3, #7
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <pvPortMalloc+0x164>
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e7fe      	b.n	800caf2 <pvPortMalloc+0x162>
	return pvReturn;
 800caf4:	69fb      	ldr	r3, [r7, #28]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3728      	adds	r7, #40	; 0x28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	20001a9c 	.word	0x20001a9c
 800cb04:	20001aa8 	.word	0x20001aa8
 800cb08:	20001aa0 	.word	0x20001aa0
 800cb0c:	20001a94 	.word	0x20001a94
 800cb10:	20001aa4 	.word	0x20001aa4

0800cb14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d046      	beq.n	800cbb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb26:	2308      	movs	r3, #8
 800cb28:	425b      	negs	r3, r3
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	4b20      	ldr	r3, [pc, #128]	; (800cbbc <vPortFree+0xa8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d109      	bne.n	800cb56 <vPortFree+0x42>
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e7fe      	b.n	800cb54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d009      	beq.n	800cb72 <vPortFree+0x5e>
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	60bb      	str	r3, [r7, #8]
 800cb70:	e7fe      	b.n	800cb70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <vPortFree+0xa8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d019      	beq.n	800cbb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d115      	bne.n	800cbb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <vPortFree+0xa8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	43db      	mvns	r3, r3
 800cb92:	401a      	ands	r2, r3
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb98:	f7fe fcf4 	bl	800b584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	4b07      	ldr	r3, [pc, #28]	; (800cbc0 <vPortFree+0xac>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4413      	add	r3, r2
 800cba6:	4a06      	ldr	r2, [pc, #24]	; (800cbc0 <vPortFree+0xac>)
 800cba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbaa:	6938      	ldr	r0, [r7, #16]
 800cbac:	f000 f86c 	bl	800cc88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cbb0:	f7fe fcf6 	bl	800b5a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbb4:	bf00      	nop
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	20001aa8 	.word	0x20001aa8
 800cbc0:	20001aa0 	.word	0x20001aa0

0800cbc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cbce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbd0:	4b27      	ldr	r3, [pc, #156]	; (800cc70 <prvHeapInit+0xac>)
 800cbd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f003 0307 	and.w	r3, r3, #7
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00c      	beq.n	800cbf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3307      	adds	r3, #7
 800cbe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0307 	bic.w	r3, r3, #7
 800cbea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <prvHeapInit+0xac>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	; (800cc74 <prvHeapInit+0xb0>)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <prvHeapInit+0xb0>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc10:	2208      	movs	r2, #8
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	1a9b      	subs	r3, r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f023 0307 	bic.w	r3, r3, #7
 800cc1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4a15      	ldr	r2, [pc, #84]	; (800cc78 <prvHeapInit+0xb4>)
 800cc24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc26:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <prvHeapInit+0xb4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc2e:	4b12      	ldr	r3, [pc, #72]	; (800cc78 <prvHeapInit+0xb4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc44:	4b0c      	ldr	r3, [pc, #48]	; (800cc78 <prvHeapInit+0xb4>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	4a0a      	ldr	r2, [pc, #40]	; (800cc7c <prvHeapInit+0xb8>)
 800cc52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	4a09      	ldr	r2, [pc, #36]	; (800cc80 <prvHeapInit+0xbc>)
 800cc5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc5c:	4b09      	ldr	r3, [pc, #36]	; (800cc84 <prvHeapInit+0xc0>)
 800cc5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc62:	601a      	str	r2, [r3, #0]
}
 800cc64:	bf00      	nop
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20000e94 	.word	0x20000e94
 800cc74:	20001a94 	.word	0x20001a94
 800cc78:	20001a9c 	.word	0x20001a9c
 800cc7c:	20001aa4 	.word	0x20001aa4
 800cc80:	20001aa0 	.word	0x20001aa0
 800cc84:	20001aa8 	.word	0x20001aa8

0800cc88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc90:	4b28      	ldr	r3, [pc, #160]	; (800cd34 <prvInsertBlockIntoFreeList+0xac>)
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	e002      	b.n	800cc9c <prvInsertBlockIntoFreeList+0x14>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d8f7      	bhi.n	800cc96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d108      	bne.n	800ccca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	441a      	add	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	441a      	add	r2, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d118      	bne.n	800cd10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <prvInsertBlockIntoFreeList+0xb0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d00d      	beq.n	800cd06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	441a      	add	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	e008      	b.n	800cd18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd06:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <prvInsertBlockIntoFreeList+0xb0>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	e003      	b.n	800cd18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d002      	beq.n	800cd26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd26:	bf00      	nop
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	20001a94 	.word	0x20001a94
 800cd38:	20001a9c 	.word	0x20001a9c

0800cd3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd40:	2200      	movs	r2, #0
 800cd42:	4912      	ldr	r1, [pc, #72]	; (800cd8c <MX_USB_DEVICE_Init+0x50>)
 800cd44:	4812      	ldr	r0, [pc, #72]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd46:	f7fc fa62 	bl	800920e <USBD_Init>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd50:	f7f4 f8bc 	bl	8000ecc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd54:	490f      	ldr	r1, [pc, #60]	; (800cd94 <MX_USB_DEVICE_Init+0x58>)
 800cd56:	480e      	ldr	r0, [pc, #56]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd58:	f7fc fa84 	bl	8009264 <USBD_RegisterClass>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd62:	f7f4 f8b3 	bl	8000ecc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd66:	490c      	ldr	r1, [pc, #48]	; (800cd98 <MX_USB_DEVICE_Init+0x5c>)
 800cd68:	4809      	ldr	r0, [pc, #36]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd6a:	f7fc f9e1 	bl	8009130 <USBD_CDC_RegisterInterface>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd74:	f7f4 f8aa 	bl	8000ecc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd78:	4805      	ldr	r0, [pc, #20]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd7a:	f7fc fa8d 	bl	8009298 <USBD_Start>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd84:	f7f4 f8a2 	bl	8000ecc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd88:	bf00      	nop
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20000130 	.word	0x20000130
 800cd90:	20002314 	.word	0x20002314
 800cd94:	20000018 	.word	0x20000018
 800cd98:	20000120 	.word	0x20000120

0800cd9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cda0:	2200      	movs	r2, #0
 800cda2:	4905      	ldr	r1, [pc, #20]	; (800cdb8 <CDC_Init_FS+0x1c>)
 800cda4:	4805      	ldr	r0, [pc, #20]	; (800cdbc <CDC_Init_FS+0x20>)
 800cda6:	f7fc f9da 	bl	800915e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cdaa:	4905      	ldr	r1, [pc, #20]	; (800cdc0 <CDC_Init_FS+0x24>)
 800cdac:	4803      	ldr	r0, [pc, #12]	; (800cdbc <CDC_Init_FS+0x20>)
 800cdae:	f7fc f9f0 	bl	8009192 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cdb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	200029c0 	.word	0x200029c0
 800cdbc:	20002314 	.word	0x20002314
 800cdc0:	200025d8 	.word	0x200025d8

0800cdc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cdc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	6039      	str	r1, [r7, #0]
 800cdde:	71fb      	strb	r3, [r7, #7]
 800cde0:	4613      	mov	r3, r2
 800cde2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	2b23      	cmp	r3, #35	; 0x23
 800cde8:	d84a      	bhi.n	800ce80 <CDC_Control_FS+0xac>
 800cdea:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <CDC_Control_FS+0x1c>)
 800cdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf0:	0800ce81 	.word	0x0800ce81
 800cdf4:	0800ce81 	.word	0x0800ce81
 800cdf8:	0800ce81 	.word	0x0800ce81
 800cdfc:	0800ce81 	.word	0x0800ce81
 800ce00:	0800ce81 	.word	0x0800ce81
 800ce04:	0800ce81 	.word	0x0800ce81
 800ce08:	0800ce81 	.word	0x0800ce81
 800ce0c:	0800ce81 	.word	0x0800ce81
 800ce10:	0800ce81 	.word	0x0800ce81
 800ce14:	0800ce81 	.word	0x0800ce81
 800ce18:	0800ce81 	.word	0x0800ce81
 800ce1c:	0800ce81 	.word	0x0800ce81
 800ce20:	0800ce81 	.word	0x0800ce81
 800ce24:	0800ce81 	.word	0x0800ce81
 800ce28:	0800ce81 	.word	0x0800ce81
 800ce2c:	0800ce81 	.word	0x0800ce81
 800ce30:	0800ce81 	.word	0x0800ce81
 800ce34:	0800ce81 	.word	0x0800ce81
 800ce38:	0800ce81 	.word	0x0800ce81
 800ce3c:	0800ce81 	.word	0x0800ce81
 800ce40:	0800ce81 	.word	0x0800ce81
 800ce44:	0800ce81 	.word	0x0800ce81
 800ce48:	0800ce81 	.word	0x0800ce81
 800ce4c:	0800ce81 	.word	0x0800ce81
 800ce50:	0800ce81 	.word	0x0800ce81
 800ce54:	0800ce81 	.word	0x0800ce81
 800ce58:	0800ce81 	.word	0x0800ce81
 800ce5c:	0800ce81 	.word	0x0800ce81
 800ce60:	0800ce81 	.word	0x0800ce81
 800ce64:	0800ce81 	.word	0x0800ce81
 800ce68:	0800ce81 	.word	0x0800ce81
 800ce6c:	0800ce81 	.word	0x0800ce81
 800ce70:	0800ce81 	.word	0x0800ce81
 800ce74:	0800ce81 	.word	0x0800ce81
 800ce78:	0800ce81 	.word	0x0800ce81
 800ce7c:	0800ce81 	.word	0x0800ce81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce80:	bf00      	nop
  }

  return (USBD_OK);
 800ce82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	4805      	ldr	r0, [pc, #20]	; (800ceb4 <CDC_Receive_FS+0x24>)
 800ce9e:	f7fc f978 	bl	8009192 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cea2:	4804      	ldr	r0, [pc, #16]	; (800ceb4 <CDC_Receive_FS+0x24>)
 800cea4:	f7fc f989 	bl	80091ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cea8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20002314 	.word	0x20002314

0800ceb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	2212      	movs	r2, #18
 800cec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ceca:	4b03      	ldr	r3, [pc, #12]	; (800ced8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	2000014c 	.word	0x2000014c

0800cedc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	6039      	str	r1, [r7, #0]
 800cee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2204      	movs	r2, #4
 800ceec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ceee:	4b03      	ldr	r3, [pc, #12]	; (800cefc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	20000160 	.word	0x20000160

0800cf00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	6039      	str	r1, [r7, #0]
 800cf0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	4907      	ldr	r1, [pc, #28]	; (800cf34 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf16:	4808      	ldr	r0, [pc, #32]	; (800cf38 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf18:	f7fd f92e 	bl	800a178 <USBD_GetString>
 800cf1c:	e004      	b.n	800cf28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf1e:	683a      	ldr	r2, [r7, #0]
 800cf20:	4904      	ldr	r1, [pc, #16]	; (800cf34 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf22:	4805      	ldr	r0, [pc, #20]	; (800cf38 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf24:	f7fd f928 	bl	800a178 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20002da8 	.word	0x20002da8
 800cf38:	0800d73c 	.word	0x0800d73c

0800cf3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	6039      	str	r1, [r7, #0]
 800cf46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf48:	683a      	ldr	r2, [r7, #0]
 800cf4a:	4904      	ldr	r1, [pc, #16]	; (800cf5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf4c:	4804      	ldr	r0, [pc, #16]	; (800cf60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf4e:	f7fd f913 	bl	800a178 <USBD_GetString>
  return USBD_StrDesc;
 800cf52:	4b02      	ldr	r3, [pc, #8]	; (800cf5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20002da8 	.word	0x20002da8
 800cf60:	0800d754 	.word	0x0800d754

0800cf64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	221a      	movs	r2, #26
 800cf74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf76:	f000 f843 	bl	800d000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf7a:	4b02      	ldr	r3, [pc, #8]	; (800cf84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	20000164 	.word	0x20000164

0800cf88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	4603      	mov	r3, r0
 800cf90:	6039      	str	r1, [r7, #0]
 800cf92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d105      	bne.n	800cfa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	4907      	ldr	r1, [pc, #28]	; (800cfbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf9e:	4808      	ldr	r0, [pc, #32]	; (800cfc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfa0:	f7fd f8ea 	bl	800a178 <USBD_GetString>
 800cfa4:	e004      	b.n	800cfb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	4904      	ldr	r1, [pc, #16]	; (800cfbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfaa:	4805      	ldr	r0, [pc, #20]	; (800cfc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfac:	f7fd f8e4 	bl	800a178 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfb0:	4b02      	ldr	r3, [pc, #8]	; (800cfbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20002da8 	.word	0x20002da8
 800cfc0:	0800d768 	.word	0x0800d768

0800cfc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	6039      	str	r1, [r7, #0]
 800cfce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d105      	bne.n	800cfe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	4907      	ldr	r1, [pc, #28]	; (800cff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfda:	4808      	ldr	r0, [pc, #32]	; (800cffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfdc:	f7fd f8cc 	bl	800a178 <USBD_GetString>
 800cfe0:	e004      	b.n	800cfec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	4904      	ldr	r1, [pc, #16]	; (800cff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfe6:	4805      	ldr	r0, [pc, #20]	; (800cffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfe8:	f7fd f8c6 	bl	800a178 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20002da8 	.word	0x20002da8
 800cffc:	0800d774 	.word	0x0800d774

0800d000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d006:	4b0f      	ldr	r3, [pc, #60]	; (800d044 <Get_SerialNum+0x44>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d00c:	4b0e      	ldr	r3, [pc, #56]	; (800d048 <Get_SerialNum+0x48>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d012:	4b0e      	ldr	r3, [pc, #56]	; (800d04c <Get_SerialNum+0x4c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4413      	add	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d009      	beq.n	800d03a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d026:	2208      	movs	r2, #8
 800d028:	4909      	ldr	r1, [pc, #36]	; (800d050 <Get_SerialNum+0x50>)
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f000 f814 	bl	800d058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d030:	2204      	movs	r2, #4
 800d032:	4908      	ldr	r1, [pc, #32]	; (800d054 <Get_SerialNum+0x54>)
 800d034:	68b8      	ldr	r0, [r7, #8]
 800d036:	f000 f80f 	bl	800d058 <IntToUnicode>
  }
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	1ffff7ac 	.word	0x1ffff7ac
 800d048:	1ffff7b0 	.word	0x1ffff7b0
 800d04c:	1ffff7b4 	.word	0x1ffff7b4
 800d050:	20000166 	.word	0x20000166
 800d054:	20000176 	.word	0x20000176

0800d058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d058:	b480      	push	{r7}
 800d05a:	b087      	sub	sp, #28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	4613      	mov	r3, r2
 800d064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d06a:	2300      	movs	r3, #0
 800d06c:	75fb      	strb	r3, [r7, #23]
 800d06e:	e027      	b.n	800d0c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	0f1b      	lsrs	r3, r3, #28
 800d074:	2b09      	cmp	r3, #9
 800d076:	d80b      	bhi.n	800d090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	0f1b      	lsrs	r3, r3, #28
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	4619      	mov	r1, r3
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	440b      	add	r3, r1
 800d088:	3230      	adds	r2, #48	; 0x30
 800d08a:	b2d2      	uxtb	r2, r2
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	e00a      	b.n	800d0a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	0f1b      	lsrs	r3, r3, #28
 800d094:	b2da      	uxtb	r2, r3
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	4619      	mov	r1, r3
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	440b      	add	r3, r1
 800d0a0:	3237      	adds	r2, #55	; 0x37
 800d0a2:	b2d2      	uxtb	r2, r2
 800d0a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d0ba:	7dfb      	ldrb	r3, [r7, #23]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	75fb      	strb	r3, [r7, #23]
 800d0c0:	7dfa      	ldrb	r2, [r7, #23]
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d3d3      	bcc.n	800d070 <IntToUnicode+0x18>
  }
}
 800d0c8:	bf00      	nop
 800d0ca:	371c      	adds	r7, #28
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	; 0x28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0dc:	f107 0314 	add.w	r3, r7, #20
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	605a      	str	r2, [r3, #4]
 800d0e6:	609a      	str	r2, [r3, #8]
 800d0e8:	60da      	str	r2, [r3, #12]
 800d0ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a1c      	ldr	r2, [pc, #112]	; (800d164 <HAL_PCD_MspInit+0x90>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d131      	bne.n	800d15a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0f6:	4b1c      	ldr	r3, [pc, #112]	; (800d168 <HAL_PCD_MspInit+0x94>)
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	4a1b      	ldr	r2, [pc, #108]	; (800d168 <HAL_PCD_MspInit+0x94>)
 800d0fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d100:	6153      	str	r3, [r2, #20]
 800d102:	4b19      	ldr	r3, [pc, #100]	; (800d168 <HAL_PCD_MspInit+0x94>)
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d10a:	613b      	str	r3, [r7, #16]
 800d10c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d10e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d114:	2302      	movs	r3, #2
 800d116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d118:	2300      	movs	r3, #0
 800d11a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d11c:	2303      	movs	r3, #3
 800d11e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d120:	230e      	movs	r3, #14
 800d122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d124:	f107 0314 	add.w	r3, r7, #20
 800d128:	4619      	mov	r1, r3
 800d12a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d12e:	f7f6 f8d7 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d132:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <HAL_PCD_MspInit+0x94>)
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	4a0c      	ldr	r2, [pc, #48]	; (800d168 <HAL_PCD_MspInit+0x94>)
 800d138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d13c:	61d3      	str	r3, [r2, #28]
 800d13e:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <HAL_PCD_MspInit+0x94>)
 800d140:	69db      	ldr	r3, [r3, #28]
 800d142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800d14a:	2200      	movs	r2, #0
 800d14c:	2105      	movs	r1, #5
 800d14e:	2014      	movs	r0, #20
 800d150:	f7f5 ff76 	bl	8003040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800d154:	2014      	movs	r0, #20
 800d156:	f7f5 ff8f 	bl	8003078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d15a:	bf00      	nop
 800d15c:	3728      	adds	r7, #40	; 0x28
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	40005c00 	.word	0x40005c00
 800d168:	40021000 	.word	0x40021000

0800d16c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800d180:	4619      	mov	r1, r3
 800d182:	4610      	mov	r0, r2
 800d184:	f7fc f8d1 	bl	800932a <USBD_LL_SetupStage>
}
 800d188:	bf00      	nop
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800d1a2:	78fb      	ldrb	r3, [r7, #3]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	015b      	lsls	r3, r3, #5
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	f7fc f904 	bl	80093c0 <USBD_LL_DataOutStage>
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800d1d2:	78fb      	ldrb	r3, [r7, #3]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	015b      	lsls	r3, r3, #5
 800d1d8:	4413      	add	r3, r2
 800d1da:	333c      	adds	r3, #60	; 0x3c
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	78fb      	ldrb	r3, [r7, #3]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	f7fc f95e 	bl	80094a2 <USBD_LL_DataInStage>
}
 800d1e6:	bf00      	nop
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fc fa71 	bl	80096e4 <USBD_LL_SOF>
}
 800d202:	bf00      	nop
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d212:	2301      	movs	r3, #1
 800d214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d001      	beq.n	800d222 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d21e:	f7f3 fe55 	bl	8000ecc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d228:	7bfa      	ldrb	r2, [r7, #15]
 800d22a:	4611      	mov	r1, r2
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fc fa1e 	bl	800966e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d238:	4618      	mov	r0, r3
 800d23a:	f7fc f9d7 	bl	80095ec <USBD_LL_Reset>
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
	...

0800d248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc fa19 	bl	800968e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d264:	4b04      	ldr	r3, [pc, #16]	; (800d278 <HAL_PCD_SuspendCallback+0x30>)
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	4a03      	ldr	r2, [pc, #12]	; (800d278 <HAL_PCD_SuspendCallback+0x30>)
 800d26a:	f043 0306 	orr.w	r3, r3, #6
 800d26e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed00 	.word	0xe000ed00

0800d27c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fc fa14 	bl	80096b8 <USBD_LL_Resume>
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d2a0:	4a28      	ldr	r2, [pc, #160]	; (800d344 <USBD_LL_Init+0xac>)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a26      	ldr	r2, [pc, #152]	; (800d344 <USBD_LL_Init+0xac>)
 800d2ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d2b0:	4b24      	ldr	r3, [pc, #144]	; (800d344 <USBD_LL_Init+0xac>)
 800d2b2:	4a25      	ldr	r2, [pc, #148]	; (800d348 <USBD_LL_Init+0xb0>)
 800d2b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d2b6:	4b23      	ldr	r3, [pc, #140]	; (800d344 <USBD_LL_Init+0xac>)
 800d2b8:	2208      	movs	r2, #8
 800d2ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d2bc:	4b21      	ldr	r3, [pc, #132]	; (800d344 <USBD_LL_Init+0xac>)
 800d2be:	2202      	movs	r2, #2
 800d2c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2c2:	4b20      	ldr	r3, [pc, #128]	; (800d344 <USBD_LL_Init+0xac>)
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d2c8:	4b1e      	ldr	r3, [pc, #120]	; (800d344 <USBD_LL_Init+0xac>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d2ce:	4b1d      	ldr	r3, [pc, #116]	; (800d344 <USBD_LL_Init+0xac>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d2d4:	481b      	ldr	r0, [pc, #108]	; (800d344 <USBD_LL_Init+0xac>)
 800d2d6:	f7f6 fb49 	bl	800396c <HAL_PCD_Init>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d2e0:	f7f3 fdf4 	bl	8000ecc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2ea:	2318      	movs	r3, #24
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	f7f7 f9ae 	bl	8004650 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2fa:	2358      	movs	r3, #88	; 0x58
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2180      	movs	r1, #128	; 0x80
 800d300:	f7f7 f9a6 	bl	8004650 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d30a:	23c0      	movs	r3, #192	; 0xc0
 800d30c:	2200      	movs	r2, #0
 800d30e:	2181      	movs	r1, #129	; 0x81
 800d310:	f7f7 f99e 	bl	8004650 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d31a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d31e:	2200      	movs	r2, #0
 800d320:	2101      	movs	r1, #1
 800d322:	f7f7 f995 	bl	8004650 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d330:	2200      	movs	r2, #0
 800d332:	2182      	movs	r1, #130	; 0x82
 800d334:	f7f7 f98c 	bl	8004650 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	20002fa8 	.word	0x20002fa8
 800d348:	40005c00 	.word	0x40005c00

0800d34c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d362:	4618      	mov	r0, r3
 800d364:	f7f6 fbb6 	bl	8003ad4 <HAL_PCD_Start>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f94c 	bl	800d60c <USBD_Get_USB_Status>
 800d374:	4603      	mov	r3, r0
 800d376:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d378:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	4608      	mov	r0, r1
 800d38c:	4611      	mov	r1, r2
 800d38e:	461a      	mov	r2, r3
 800d390:	4603      	mov	r3, r0
 800d392:	70fb      	strb	r3, [r7, #3]
 800d394:	460b      	mov	r3, r1
 800d396:	70bb      	strb	r3, [r7, #2]
 800d398:	4613      	mov	r3, r2
 800d39a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3aa:	78bb      	ldrb	r3, [r7, #2]
 800d3ac:	883a      	ldrh	r2, [r7, #0]
 800d3ae:	78f9      	ldrb	r1, [r7, #3]
 800d3b0:	f7f6 fcdd 	bl	8003d6e <HAL_PCD_EP_Open>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 f926 	bl	800d60c <USBD_Get_USB_Status>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800d3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3e8:	78fa      	ldrb	r2, [r7, #3]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f6 fd1e 	bl	8003e2e <HAL_PCD_EP_Close>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 f907 	bl	800d60c <USBD_Get_USB_Status>
 800d3fe:	4603      	mov	r3, r0
 800d400:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800d402:	7bbb      	ldrb	r3, [r7, #14]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f6 fdc9 	bl	8003fc2 <HAL_PCD_EP_SetStall>
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f8e8 	bl	800d60c <USBD_Get_USB_Status>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d440:	7bbb      	ldrb	r3, [r7, #14]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d464:	78fa      	ldrb	r2, [r7, #3]
 800d466:	4611      	mov	r1, r2
 800d468:	4618      	mov	r0, r3
 800d46a:	f7f6 fe04 	bl	8004076 <HAL_PCD_EP_ClrStall>
 800d46e:	4603      	mov	r3, r0
 800d470:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	4618      	mov	r0, r3
 800d476:	f000 f8c9 	bl	800d60c <USBD_Get_USB_Status>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800d47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d49a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d49c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	da08      	bge.n	800d4b6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d4a4:	78fb      	ldrb	r3, [r7, #3]
 800d4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	015b      	lsls	r3, r3, #5
 800d4ae:	4413      	add	r3, r2
 800d4b0:	332a      	adds	r3, #42	; 0x2a
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	e008      	b.n	800d4c8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	015b      	lsls	r3, r3, #5
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d4c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4ee:	78fa      	ldrb	r2, [r7, #3]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7f6 fc16 	bl	8003d24 <HAL_PCD_SetAddress>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 f884 	bl	800d60c <USBD_Get_USB_Status>
 800d504:	4603      	mov	r3, r0
 800d506:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d508:	7bbb      	ldrb	r3, [r7, #14]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	461a      	mov	r2, r3
 800d51e:	460b      	mov	r3, r1
 800d520:	72fb      	strb	r3, [r7, #11]
 800d522:	4613      	mov	r3, r2
 800d524:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d526:	2300      	movs	r3, #0
 800d528:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d52a:	2300      	movs	r3, #0
 800d52c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d534:	893b      	ldrh	r3, [r7, #8]
 800d536:	7af9      	ldrb	r1, [r7, #11]
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	f7f6 fd09 	bl	8003f50 <HAL_PCD_EP_Transmit>
 800d53e:	4603      	mov	r3, r0
 800d540:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	4618      	mov	r0, r3
 800d546:	f000 f861 	bl	800d60c <USBD_Get_USB_Status>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d54e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3718      	adds	r7, #24
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b086      	sub	sp, #24
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	607a      	str	r2, [r7, #4]
 800d562:	461a      	mov	r2, r3
 800d564:	460b      	mov	r3, r1
 800d566:	72fb      	strb	r3, [r7, #11]
 800d568:	4613      	mov	r3, r2
 800d56a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d57a:	893b      	ldrh	r3, [r7, #8]
 800d57c:	7af9      	ldrb	r1, [r7, #11]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	f7f6 fc97 	bl	8003eb2 <HAL_PCD_EP_Receive>
 800d584:	4603      	mov	r3, r0
 800d586:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d588:	7dfb      	ldrb	r3, [r7, #23]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f000 f83e 	bl	800d60c <USBD_Get_USB_Status>
 800d590:	4603      	mov	r3, r0
 800d592:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800d594:	7dbb      	ldrb	r3, [r7, #22]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b082      	sub	sp, #8
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5b0:	78fa      	ldrb	r2, [r7, #3]
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7f6 fcb6 	bl	8003f26 <HAL_PCD_EP_GetRxCount>
 800d5ba:	4603      	mov	r3, r0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5cc:	4b03      	ldr	r3, [pc, #12]	; (800d5dc <USBD_static_malloc+0x18>)
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	20001aac 	.word	0x20001aac

0800d5e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]

}
 800d5e8:	bf00      	nop
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	d817      	bhi.n	800d650 <USBD_Get_USB_Status+0x44>
 800d620:	a201      	add	r2, pc, #4	; (adr r2, 800d628 <USBD_Get_USB_Status+0x1c>)
 800d622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d626:	bf00      	nop
 800d628:	0800d639 	.word	0x0800d639
 800d62c:	0800d63f 	.word	0x0800d63f
 800d630:	0800d645 	.word	0x0800d645
 800d634:	0800d64b 	.word	0x0800d64b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
    break;
 800d63c:	e00b      	b.n	800d656 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d63e:	2302      	movs	r3, #2
 800d640:	73fb      	strb	r3, [r7, #15]
    break;
 800d642:	e008      	b.n	800d656 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d644:	2301      	movs	r3, #1
 800d646:	73fb      	strb	r3, [r7, #15]
    break;
 800d648:	e005      	b.n	800d656 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d64a:	2302      	movs	r3, #2
 800d64c:	73fb      	strb	r3, [r7, #15]
    break;
 800d64e:	e002      	b.n	800d656 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d650:	2302      	movs	r3, #2
 800d652:	73fb      	strb	r3, [r7, #15]
    break;
 800d654:	bf00      	nop
  }
  return usb_status;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <__libc_init_array>:
 800d664:	b570      	push	{r4, r5, r6, lr}
 800d666:	4e0d      	ldr	r6, [pc, #52]	; (800d69c <__libc_init_array+0x38>)
 800d668:	4c0d      	ldr	r4, [pc, #52]	; (800d6a0 <__libc_init_array+0x3c>)
 800d66a:	1ba4      	subs	r4, r4, r6
 800d66c:	10a4      	asrs	r4, r4, #2
 800d66e:	2500      	movs	r5, #0
 800d670:	42a5      	cmp	r5, r4
 800d672:	d109      	bne.n	800d688 <__libc_init_array+0x24>
 800d674:	4e0b      	ldr	r6, [pc, #44]	; (800d6a4 <__libc_init_array+0x40>)
 800d676:	4c0c      	ldr	r4, [pc, #48]	; (800d6a8 <__libc_init_array+0x44>)
 800d678:	f000 f82c 	bl	800d6d4 <_init>
 800d67c:	1ba4      	subs	r4, r4, r6
 800d67e:	10a4      	asrs	r4, r4, #2
 800d680:	2500      	movs	r5, #0
 800d682:	42a5      	cmp	r5, r4
 800d684:	d105      	bne.n	800d692 <__libc_init_array+0x2e>
 800d686:	bd70      	pop	{r4, r5, r6, pc}
 800d688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d68c:	4798      	blx	r3
 800d68e:	3501      	adds	r5, #1
 800d690:	e7ee      	b.n	800d670 <__libc_init_array+0xc>
 800d692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d696:	4798      	blx	r3
 800d698:	3501      	adds	r5, #1
 800d69a:	e7f2      	b.n	800d682 <__libc_init_array+0x1e>
 800d69c:	0800d84c 	.word	0x0800d84c
 800d6a0:	0800d84c 	.word	0x0800d84c
 800d6a4:	0800d84c 	.word	0x0800d84c
 800d6a8:	0800d850 	.word	0x0800d850

0800d6ac <memcpy>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	1e43      	subs	r3, r0, #1
 800d6b0:	440a      	add	r2, r1
 800d6b2:	4291      	cmp	r1, r2
 800d6b4:	d100      	bne.n	800d6b8 <memcpy+0xc>
 800d6b6:	bd10      	pop	{r4, pc}
 800d6b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6c0:	e7f7      	b.n	800d6b2 <memcpy+0x6>

0800d6c2 <memset>:
 800d6c2:	4402      	add	r2, r0
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d100      	bne.n	800d6cc <memset+0xa>
 800d6ca:	4770      	bx	lr
 800d6cc:	f803 1b01 	strb.w	r1, [r3], #1
 800d6d0:	e7f9      	b.n	800d6c6 <memset+0x4>
	...

0800d6d4 <_init>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	bf00      	nop
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr

0800d6e0 <_fini>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	bf00      	nop
 800d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6e6:	bc08      	pop	{r3}
 800d6e8:	469e      	mov	lr, r3
 800d6ea:	4770      	bx	lr
