
MESC_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b94c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800badc  0800badc  0001badc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb58  0800bb58  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb58  0800bb58  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb58  0800bb58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb58  0800bb58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb5c  0800bb5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800bb60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df0  20000010  0800bb70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  0800bb70  00020e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a9a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004232  00000000  00000000  00042ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bd0  00000000  00000000  00046d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019e8  00000000  00000000  000488e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fba6  00000000  00000000  0004a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019173  00000000  00000000  00069e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9e38  00000000  00000000  00082fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ce19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a8  00000000  00000000  0013ce94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bac4 	.word	0x0800bac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800bac4 	.word	0x0800bac4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <BLDCInit>:
#include "MESChw_setup.h"

extern TIM_HandleTypeDef htim1;


void BLDCInit(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	BLDCVars.ReqCurrent=0;					//Start the motor at 0 current
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <BLDCInit+0x58>)
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
	BLDCVars.BLDCduty=0;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <BLDCInit+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	BLDCVars.CurrentChannel=0;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <BLDCInit+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
	BLDCVars.pGain=1023*motor.Rphase/48; 	//wtf should I set the gain as by default... V/Amp error...Perhaps base it on Rphase and the bus voltage (nominally 48V)? But we don;t know the exact bus voltage yet...
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <BLDCInit+0x5c>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000a6c <BLDCInit+0x60>
 8000a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a32:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000a70 <BLDCInit+0x64>
 8000a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3e:	ee17 2a90 	vmov	r2, s15
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <BLDCInit+0x58>)
 8000a44:	611a      	str	r2, [r3, #16]
	BLDCVars.iGain=BLDCVars.pGain;			//Initially, let's just make the iGain the same as the pGain, so after 1 second their contributions will be equal.
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <BLDCInit+0x58>)
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <BLDCInit+0x58>)
 8000a4c:	6153      	str	r3, [r2, #20]
	BLDCVars.BLDCEstate=GetHallState();
 8000a4e:	f000 f9a7 	bl	8000da0 <GetHallState>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <BLDCInit+0x58>)
 8000a56:	609a      	str	r2, [r3, #8]
	BLDCState=BLDC_FORWARDS;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <BLDCInit+0x68>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000538 	.word	0x20000538
 8000a68:	20000554 	.word	0x20000554
 8000a6c:	447fc000 	.word	0x447fc000
 8000a70:	42400000 	.word	0x42400000
 8000a74:	20000551 	.word	0x20000551

08000a78 <BLDCCommuteHall>:


void BLDCCommuteHall(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
int CurrentHallState=GetHallState(); //Borrow the hall state detection from the FOC system
 8000a7e:	f000 f98f 	bl	8000da0 <GetHallState>
 8000a82:	6078      	str	r0, [r7, #4]
static int LastHallState=7;

if(BLDCState==BLDC_FORWARDS){
 8000a84:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <BLDCCommuteHall+0x104>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d110      	bne.n	8000aae <BLDCCommuteHall+0x36>
		BLDCVars.BLDCEstate=(CurrentHallState+2)%6;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1c99      	adds	r1, r3, #2
 8000a90:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <BLDCCommuteHall+0x108>)
 8000a92:	fb83 3201 	smull	r3, r2, r3, r1
 8000a96:	17cb      	asrs	r3, r1, #31
 8000a98:	1ad2      	subs	r2, r2, r3
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	1aca      	subs	r2, r1, r3
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <BLDCCommuteHall+0x10c>)
 8000aa6:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the next state to generate forward torque
 8000aa8:	f000 f8ec 	bl	8000c84 <writeBLDC>
//Disable the drivers, freewheel
phU_Break();
phV_Break();
phW_Break();
}
}
 8000aac:	e062      	b.n	8000b74 <BLDCCommuteHall+0xfc>
else if(BLDCState==BLDC_BACKWARDS){
 8000aae:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <BLDCCommuteHall+0x104>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d110      	bne.n	8000ad8 <BLDCCommuteHall+0x60>
		BLDCVars.BLDCEstate=(CurrentHallState+4)%6;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	1d19      	adds	r1, r3, #4
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <BLDCCommuteHall+0x108>)
 8000abc:	fb83 3201 	smull	r3, r2, r3, r1
 8000ac0:	17cb      	asrs	r3, r1, #31
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	1aca      	subs	r2, r1, r3
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <BLDCCommuteHall+0x10c>)
 8000ad0:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the previous state to generate reverse torque
 8000ad2:	f000 f8d7 	bl	8000c84 <writeBLDC>
}
 8000ad6:	e04d      	b.n	8000b74 <BLDCCommuteHall+0xfc>
else if(BLDCState==BLDC_BRAKE){
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <BLDCCommuteHall+0x104>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d143      	bne.n	8000b68 <BLDCCommuteHall+0xf0>
		if(((CurrentHallState-LastHallState)%6)>1){ //ToDo this does not cope with the rollover, makign for a very jerky brake
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <BLDCCommuteHall+0x110>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	1ad1      	subs	r1, r2, r3
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <BLDCCommuteHall+0x108>)
 8000aea:	fb83 3201 	smull	r3, r2, r3, r1
 8000aee:	17cb      	asrs	r3, r1, #31
 8000af0:	1ad2      	subs	r2, r2, r3
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	1aca      	subs	r2, r1, r3
 8000afc:	2a01      	cmp	r2, #1
 8000afe:	dd0e      	ble.n	8000b1e <BLDCCommuteHall+0xa6>
			BLDCVars.BLDCEstate=(CurrentHallState+5)%6;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1d59      	adds	r1, r3, #5
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <BLDCCommuteHall+0x108>)
 8000b06:	fb83 3201 	smull	r3, r2, r3, r1
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <BLDCCommuteHall+0x10c>)
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	e021      	b.n	8000b62 <BLDCCommuteHall+0xea>
		else if(((CurrentHallState-LastHallState)%6)<-1){
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <BLDCCommuteHall+0x110>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	1ad1      	subs	r1, r2, r3
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <BLDCCommuteHall+0x108>)
 8000b28:	fb83 3201 	smull	r3, r2, r3, r1
 8000b2c:	17cb      	asrs	r3, r1, #31
 8000b2e:	1ad2      	subs	r2, r2, r3
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1aca      	subs	r2, r1, r3
 8000b3a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000b3e:	da10      	bge.n	8000b62 <BLDCCommuteHall+0xea>
			BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	1c59      	adds	r1, r3, #1
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <BLDCCommuteHall+0x108>)
 8000b46:	fb83 3201 	smull	r3, r2, r3, r1
 8000b4a:	17cb      	asrs	r3, r1, #31
 8000b4c:	1ad2      	subs	r2, r2, r3
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	1aca      	subs	r2, r1, r3
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <BLDCCommuteHall+0x10c>)
 8000b5a:	609a      	str	r2, [r3, #8]
			LastHallState=CurrentHallState;
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <BLDCCommuteHall+0x110>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
		writeBLDC();
 8000b62:	f000 f88f 	bl	8000c84 <writeBLDC>
}
 8000b66:	e005      	b.n	8000b74 <BLDCCommuteHall+0xfc>
phU_Break();
 8000b68:	f000 f94e 	bl	8000e08 <phU_Break>
phV_Break();
 8000b6c:	f000 f9c0 	bl	8000ef0 <phV_Break>
phW_Break();
 8000b70:	f000 fa32 	bl	8000fd8 <phW_Break>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000551 	.word	0x20000551
 8000b80:	2aaaaaab 	.word	0x2aaaaaab
 8000b84:	20000538 	.word	0x20000538
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	00000000 	.word	0x00000000

08000b90 <BLDCCurrentController>:


void BLDCCurrentController(){
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	af00      	add	r7, sp, #0
//Implement a simple PI controller
	static float CurrentError=0;
	static float CurrentIntegralError=0;
	static int Duty=0;
	CurrentError=(BLDCVars.ReqCurrent-measurement_buffers.ConvertedADC[BLDCVars.CurrentChannel][0]);
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <BLDCCurrentController+0xe0>)
 8000b96:	ed93 7a00 	vldr	s14, [r3]
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <BLDCCurrentController+0xe0>)
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	4935      	ldr	r1, [pc, #212]	; (8000c74 <BLDCCurrentController+0xe4>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	332c      	adds	r3, #44	; 0x2c
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <BLDCCurrentController+0xe8>)
 8000bb6:	edc3 7a00 	vstr	s15, [r3]
	CurrentIntegralError=CurrentIntegralError + CurrentError*0.000027; //37kHz PWM, so the integral portion should be multiplied by 1/37k before accumulating
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <BLDCCurrentController+0xec>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fc6a 	bl	8000498 <__aeabi_f2d>
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460d      	mov	r5, r1
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <BLDCCurrentController+0xe8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc63 	bl	8000498 <__aeabi_f2d>
 8000bd2:	a325      	add	r3, pc, #148	; (adr r3, 8000c68 <BLDCCurrentController+0xd8>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fcb6 	bl	8000548 <__aeabi_dmul>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4620      	mov	r0, r4
 8000be2:	4629      	mov	r1, r5
 8000be4:	f7ff fafa 	bl	80001dc <__adddf3>
 8000be8:	4603      	mov	r3, r0
 8000bea:	460c      	mov	r4, r1
 8000bec:	4618      	mov	r0, r3
 8000bee:	4621      	mov	r1, r4
 8000bf0:	f7ff febc 	bl	800096c <__aeabi_d2f>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <BLDCCurrentController+0xec>)
 8000bf8:	601a      	str	r2, [r3, #0]

	Duty=(int)(CurrentError*BLDCVars.pGain + CurrentIntegralError*BLDCVars.iGain);
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <BLDCCurrentController+0xe0>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	ee07 3a90 	vmov	s15, r3
 8000c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <BLDCCurrentController+0xe8>)
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <BLDCCurrentController+0xe0>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <BLDCCurrentController+0xec>)
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2e:	ee17 2a90 	vmov	r2, s15
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <BLDCCurrentController+0xf0>)
 8000c34:	601a      	str	r2, [r3, #0]
	
	if(Duty>1023){
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <BLDCCurrentController+0xf0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3e:	db04      	blt.n	8000c4a <BLDCCurrentController+0xba>
		Duty=1023;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <BLDCCurrentController+0xf0>)
 8000c42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e006      	b.n	8000c58 <BLDCCurrentController+0xc8>
	}
	else if(Duty<0){
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <BLDCCurrentController+0xf0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da02      	bge.n	8000c58 <BLDCCurrentController+0xc8>
		Duty=0;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <BLDCCurrentController+0xf0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
	}

	BLDCVars.BLDCduty=Duty;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <BLDCCurrentController+0xf0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <BLDCCurrentController+0xe0>)
 8000c5e:	6053      	str	r3, [r2, #4]

}
 8000c60:	bf00      	nop
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	f3af 8000 	nop.w
 8000c68:	df3300de 	.word	0xdf3300de
 8000c6c:	3efc4fc1 	.word	0x3efc4fc1
 8000c70:	20000538 	.word	0x20000538
 8000c74:	200004e4 	.word	0x200004e4
 8000c78:	2000002c 	.word	0x2000002c
 8000c7c:	20000030 	.word	0x20000030
 8000c80:	20000034 	.word	0x20000034

08000c84 <writeBLDC>:

void writeBLDC(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	switch(BLDCVars.BLDCEstate){
 8000c88:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <writeBLDC+0x114>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	f200 8081 	bhi.w	8000d94 <writeBLDC+0x110>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <writeBLDC+0x14>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000cb1 	.word	0x08000cb1
 8000c9c:	08000cd7 	.word	0x08000cd7
 8000ca0:	08000cfd 	.word	0x08000cfd
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d49 	.word	0x08000d49
 8000cac:	08000d6f 	.word	0x08000d6f
	case 0:
		//disable phase first
		phW_Break();
 8000cb0:	f000 f992 	bl	8000fd8 <phW_Break>
		//WritePWM values
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 8000cb4:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <writeBLDC+0x114>)
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <writeBLDC+0x118>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=0;
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <writeBLDC+0x118>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 8000cc6:	f000 f8d9 	bl	8000e7c <phU_Enable>
		phV_Enable();
 8000cca:	f000 f94b 	bl	8000f64 <phV_Enable>
		BLDCVars.CurrentChannel=1; //Write the field into which the lowside current will flow, to be retrieved from the FOC_measurement_vars
 8000cce:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <writeBLDC+0x114>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
		break;
 8000cd4:	e05e      	b.n	8000d94 <writeBLDC+0x110>

	case 1:
		phV_Break();
 8000cd6:	f000 f90b 	bl	8000ef0 <phV_Break>
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 8000cda:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <writeBLDC+0x114>)
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <writeBLDC+0x118>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=0;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <writeBLDC+0x118>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 8000cec:	f000 f8c6 	bl	8000e7c <phU_Enable>
		phW_Enable();
 8000cf0:	f000 f9ac 	bl	800104c <phW_Enable>
		BLDCVars.CurrentChannel=2;
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <writeBLDC+0x114>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	60da      	str	r2, [r3, #12]
		break;
 8000cfa:	e04b      	b.n	8000d94 <writeBLDC+0x110>

	case 2:
		phU_Break();
 8000cfc:	f000 f884 	bl	8000e08 <phU_Break>
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <writeBLDC+0x114>)
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <writeBLDC+0x118>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=0;
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <writeBLDC+0x118>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 8000d12:	f000 f927 	bl	8000f64 <phV_Enable>
		phW_Enable();
 8000d16:	f000 f999 	bl	800104c <phW_Enable>
		BLDCVars.CurrentChannel=2;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <writeBLDC+0x114>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	60da      	str	r2, [r3, #12]
		break;
 8000d20:	e038      	b.n	8000d94 <writeBLDC+0x110>

	case 3:
		phW_Break();
 8000d22:	f000 f959 	bl	8000fd8 <phW_Break>
		htim1.Instance->CCR1=0;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <writeBLDC+0x118>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <writeBLDC+0x114>)
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <writeBLDC+0x118>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 8000d38:	f000 f8a0 	bl	8000e7c <phU_Enable>
		phV_Enable();
 8000d3c:	f000 f912 	bl	8000f64 <phV_Enable>
		BLDCVars.CurrentChannel=0;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <writeBLDC+0x114>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
		break;
 8000d46:	e025      	b.n	8000d94 <writeBLDC+0x110>

	case 4:
		phV_Break();
 8000d48:	f000 f8d2 	bl	8000ef0 <phV_Break>
		htim1.Instance->CCR1=0;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <writeBLDC+0x118>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <writeBLDC+0x114>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <writeBLDC+0x118>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 8000d5e:	f000 f88d 	bl	8000e7c <phU_Enable>
		phW_Enable();
 8000d62:	f000 f973 	bl	800104c <phW_Enable>
		BLDCVars.CurrentChannel=0;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <writeBLDC+0x114>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
		break;
 8000d6c:	e012      	b.n	8000d94 <writeBLDC+0x110>

	case 5:
		phU_Break();
 8000d6e:	f000 f84b 	bl	8000e08 <phU_Break>
		htim1.Instance->CCR2=0;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <writeBLDC+0x118>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <writeBLDC+0x114>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <writeBLDC+0x118>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 8000d84:	f000 f8ee 	bl	8000f64 <phV_Enable>
		phW_Enable();
 8000d88:	f000 f960 	bl	800104c <phW_Enable>
		BLDCVars.CurrentChannel=1;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <writeBLDC+0x114>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	60da      	str	r2, [r3, #12]
		break;
 8000d92:	bf00      	nop

	}
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000538 	.word	0x20000538
 8000d9c:	20000a54 	.word	0x20000a54

08000da0 <GetHallState>:
	phU_Break();
	phV_Break();
	phW_Break();
}

int GetHallState(){
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0


	//int hallState=0;
	//hallState=((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))<<1)|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))<<2));
	//ToDo Using these HAL_GPIO_ReadPin functions is very computationally expensive, should replace with a register read->byte mask->rightshift
	switch(((GPIOB->IDR>>6)&0x7))
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <GetHallState+0x64>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	099b      	lsrs	r3, r3, #6
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	2b07      	cmp	r3, #7
 8000db0:	d822      	bhi.n	8000df8 <GetHallState+0x58>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <GetHallState+0x18>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dd9 	.word	0x08000dd9
 8000dbc:	08000de1 	.word	0x08000de1
 8000dc0:	08000de9 	.word	0x08000de9
 8000dc4:	08000de5 	.word	0x08000de5
 8000dc8:	08000df1 	.word	0x08000df1
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	08000ded 	.word	0x08000ded
 8000dd4:	08000ddd 	.word	0x08000ddd
	//switch(hallState)
		{
			case 0:
				return 7; //7 is the no hall sensor detected state (all low)
 8000dd8:	2307      	movs	r3, #7
 8000dda:	e00e      	b.n	8000dfa <GetHallState+0x5a>
				break;
			case 7:
				return 6; //6 is the no hall sensor detected state (all high)
 8000ddc:	2306      	movs	r3, #6
 8000dde:	e00c      	b.n	8000dfa <GetHallState+0x5a>
				break;
//Implement the hall table order here, depending how the hall sensors are configured
			case 1:
				return 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e00a      	b.n	8000dfa <GetHallState+0x5a>
				break;
			case 3:
				return 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e008      	b.n	8000dfa <GetHallState+0x5a>
				break;
			case 2:
				return 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	e006      	b.n	8000dfa <GetHallState+0x5a>
				break;
			case 6:
				return 3;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e004      	b.n	8000dfa <GetHallState+0x5a>
				break;
			case 4:
				return 4;
 8000df0:	2304      	movs	r3, #4
 8000df2:	e002      	b.n	8000dfa <GetHallState+0x5a>
				break;
			case 5:
				return 5;
 8000df4:	2305      	movs	r3, #5
 8000df6:	e000      	b.n	8000dfa <GetHallState+0x5a>
				break;
			default:
				return 8;
 8000df8:	2308      	movs	r3, #8
				break;
		}
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	48000400 	.word	0x48000400

08000e08 <phU_Break>:


uint32_t tmpccmrx;	//Temporary buffer which is used to turn on/off phase PWMs
//Turn all phase U FETs off, Tristate the HBridge output - For BLDC mode mainly, but also used for measuring, software fault detection and recovery
//ToDo TEST THOROUGHLY The register manipulations for the break functions were used previously on an STM32F042K6 for my first BLDC drive, on TIM1, which should be identical, but definitely needs checking
void phU_Break(){
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <phU_Break+0x6c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <phU_Break+0x70>)
 8000e14:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <phU_Break+0x70>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <phU_Break+0x70>)
 8000e24:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <phU_Break+0x70>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <phU_Break+0x70>)
 8000e30:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <phU_Break+0x70>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <phU_Break+0x70>)
 8000e3c:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <phU_Break+0x6c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <phU_Break+0x70>)
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <phU_Break+0x6c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <phU_Break+0x6c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <phU_Break+0x6c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a1a      	ldr	r2, [r3, #32]
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <phU_Break+0x6c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0204 	bic.w	r2, r2, #4
 8000e66:	621a      	str	r2, [r3, #32]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000a54 	.word	0x20000a54
 8000e78:	20000588 	.word	0x20000588

08000e7c <phU_Enable>:
//Basically un-break phase U, opposite of above...
void phU_Enable(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <phU_Enable+0x6c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a19      	ldr	r2, [pc, #100]	; (8000eec <phU_Enable+0x70>)
 8000e88:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <phU_Enable+0x70>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <phU_Enable+0x70>)
 8000e98:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <phU_Enable+0x70>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <phU_Enable+0x70>)
 8000ea4:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <phU_Enable+0x70>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <phU_Enable+0x70>)
 8000eb0:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <phU_Enable+0x6c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <phU_Enable+0x70>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER |= TIM_CCER_CC1E;   //enable
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <phU_Enable+0x6c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <phU_Enable+0x6c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC1NE;   //enable
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <phU_Enable+0x6c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a1a      	ldr	r2, [r3, #32]
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <phU_Enable+0x6c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0204 	orr.w	r2, r2, #4
 8000eda:	621a      	str	r2, [r3, #32]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000a54 	.word	0x20000a54
 8000eec:	20000588 	.word	0x20000588

08000ef0 <phV_Break>:

void phV_Break(){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <phV_Break+0x6c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <phV_Break+0x70>)
 8000efc:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <phV_Break+0x70>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <phV_Break+0x70>)
 8000f0c:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <phV_Break+0x70>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <phV_Break+0x70>)
 8000f18:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE<<8;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <phV_Break+0x70>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <phV_Break+0x70>)
 8000f24:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <phV_Break+0x6c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <phV_Break+0x70>)
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <phV_Break+0x6c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6a1a      	ldr	r2, [r3, #32]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <phV_Break+0x6c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0210 	bic.w	r2, r2, #16
 8000f3e:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <phV_Break+0x6c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <phV_Break+0x6c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f4e:	621a      	str	r2, [r3, #32]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000a54 	.word	0x20000a54
 8000f60:	20000588 	.word	0x20000588

08000f64 <phV_Enable>:

void phV_Enable(){
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <phV_Enable+0x6c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <phV_Enable+0x70>)
 8000f70:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <phV_Enable+0x70>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <phV_Enable+0x70>)
 8000f80:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <phV_Enable+0x70>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <phV_Enable+0x70>)
 8000f8c:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1<<8;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <phV_Enable+0x70>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <phV_Enable+0x70>)
 8000f98:	6013      	str	r3, [r2, #0]
htim1.Instance->CCMR1 = tmpccmrx;
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <phV_Enable+0x6c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <phV_Enable+0x70>)
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	619a      	str	r2, [r3, #24]
htim1.Instance->CCER |= TIM_CCER_CC2E;   //enable
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <phV_Enable+0x6c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <phV_Enable+0x6c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0210 	orr.w	r2, r2, #16
 8000fb2:	621a      	str	r2, [r3, #32]
htim1.Instance->CCER |= TIM_CCER_CC2NE;   //enable
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <phV_Enable+0x6c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <phV_Enable+0x6c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	621a      	str	r2, [r3, #32]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000a54 	.word	0x20000a54
 8000fd4:	20000588 	.word	0x20000588

08000fd8 <phW_Break>:

void phW_Break(){
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	   tmpccmrx = htim1.Instance->CCMR2;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <phW_Break+0x6c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <phW_Break+0x70>)
 8000fe4:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_OC3M;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <phW_Break+0x70>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <phW_Break+0x70>)
 8000ff4:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <phW_Break+0x70>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 0303 	bic.w	r3, r3, #3
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <phW_Break+0x70>)
 8001000:	6013      	str	r3, [r2, #0]
	   tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <phW_Break+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <phW_Break+0x70>)
 800100c:	6013      	str	r3, [r2, #0]
	   htim1.Instance->CCMR2 = tmpccmrx;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <phW_Break+0x6c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <phW_Break+0x70>)
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	61da      	str	r2, [r3, #28]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <phW_Break+0x6c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <phW_Break+0x6c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001026:	621a      	str	r2, [r3, #32]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <phW_Break+0x6c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <phW_Break+0x6c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001036:	621a      	str	r2, [r3, #32]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000a54 	.word	0x20000a54
 8001048:	20000588 	.word	0x20000588

0800104c <phW_Enable>:

void phW_Enable(){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  	tmpccmrx = htim1.Instance->CCMR2;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <phW_Enable+0x6c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a19      	ldr	r2, [pc, #100]	; (80010bc <phW_Enable+0x70>)
 8001058:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <phW_Enable+0x70>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <phW_Enable+0x70>)
 8001068:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <phW_Enable+0x70>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <phW_Enable+0x70>)
 8001074:	6013      	str	r3, [r2, #0]
    tmpccmrx |= TIM_OCMODE_PWM1;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <phW_Enable+0x70>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <phW_Enable+0x70>)
 8001080:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCMR2 = tmpccmrx;
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <phW_Enable+0x6c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <phW_Enable+0x70>)
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	61da      	str	r2, [r3, #28]
    htim1.Instance->CCER |= TIM_CCER_CC3E;   //enable
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <phW_Enable+0x6c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a1a      	ldr	r2, [r3, #32]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <phW_Enable+0x6c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800109a:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER |= TIM_CCER_CC3NE;   //enable
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <phW_Enable+0x6c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6a1a      	ldr	r2, [r3, #32]
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <phW_Enable+0x6c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010aa:	621a      	str	r2, [r3, #32]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000a54 	.word	0x20000a54
 80010bc:	20000588 	.word	0x20000588

080010c0 <motor_init>:
/* Includes ------------------------------------------------------------------*/
#include "MESChw_setup.h"



void motor_init(){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	motor.Rphase=0;		//We init at 0 to trigger the measurer to get the vals
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <motor_init+0x34>)
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
	motor.Lphase=0;		//We init at 0 to trigger the measurer to get the vals
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <motor_init+0x34>)
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
	motor.uncertainty=1;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <motor_init+0x34>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	711a      	strb	r2, [r3, #4]
	motor.RawCurrLim=3000;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <motor_init+0x34>)
 80010dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010e0:	819a      	strh	r2, [r3, #12]
	motor.RawVoltLim=2303;
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <motor_init+0x34>)
 80010e4:	f640 02ff 	movw	r2, #2303	; 0x8ff
 80010e8:	81da      	strh	r2, [r3, #14]
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20000554 	.word	0x20000554

080010f8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7f1b      	ldrb	r3, [r3, #28]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d152      	bne.n	80011ae <HAL_TIM_IC_CaptureCallback+0xb6>
		ICVals[0]=HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001108:	2100      	movs	r1, #0
 800110a:	482b      	ldr	r0, [pc, #172]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800110c:	f006 fdf2 	bl	8007cf4 <HAL_TIM_ReadCapturedValue>
 8001110:	4602      	mov	r2, r0
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001114:	601a      	str	r2, [r3, #0]
		if(ICVals[0]!=0){
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d03a      	beq.n	8001194 <HAL_TIM_IC_CaptureCallback+0x9c>
			ICVals[1]=HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800111e:	2104      	movs	r1, #4
 8001120:	4825      	ldr	r0, [pc, #148]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001122:	f006 fde7 	bl	8007cf4 <HAL_TIM_ReadCapturedValue>
 8001126:	4602      	mov	r2, r0
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 800112a:	605a      	str	r2, [r3, #4]
			if(ICVals[1]>1500){
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001134:	4293      	cmp	r3, r2
 8001136:	d913      	bls.n	8001160 <HAL_TIM_IC_CaptureCallback+0x68>
				BLDCState=BLDC_FORWARDS;
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
				a=100*(ICVals[1]-1500)/1500;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2264      	movs	r2, #100	; 0x64
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 800114c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800115c:	801a      	strh	r2, [r3, #0]
 800115e:	e019      	b.n	8001194 <HAL_TIM_IC_CaptureCallback+0x9c>
			}
			else if(ICVals[1]<1500){
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f240 52db 	movw	r2, #1499	; 0x5db
 8001168:	4293      	cmp	r3, r2
 800116a:	d813      	bhi.n	8001194 <HAL_TIM_IC_CaptureCallback+0x9c>
				BLDCState=BLDC_BACKWARDS;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800116e:	2202      	movs	r2, #2
 8001170:	701a      	strb	r2, [r3, #0]
				a=100*(1500-ICVals[1])/1500;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 8001182:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001192:	801a      	strh	r2, [r3, #0]
			}
		}
		if(1){//Current control, ToDo convert to Enum
			BLDCVars.ReqCurrent=((float)a)/5.0; //Crude hack, which gets current scaled to +/-20A based on 0-3000us PWM in
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_TIM_IC_CaptureCallback+0xd4>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]
			if(a>9){
				BLDCVars.BLDCduty=10*(a-9);
			}
		}
	}
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000894 	.word	0x20000894
 80011bc:	20000048 	.word	0x20000048
 80011c0:	20000551 	.word	0x20000551
 80011c4:	057619f1 	.word	0x057619f1
 80011c8:	20000038 	.word	0x20000038
 80011cc:	20000538 	.word	0x20000538

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f001 fce4 	bl	8002ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f8d6 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f000 fe8e 	bl	8001efc <MX_GPIO_Init>
  MX_DMA_Init();
 80011e0:	f000 fe32 	bl	8001e48 <MX_DMA_Init>
  MX_ADC1_Init();
 80011e4:	f000 f93a 	bl	800145c <MX_ADC1_Init>
  MX_ADC2_Init();
 80011e8:	f000 f9c8 	bl	800157c <MX_ADC2_Init>
  MX_ADC3_Init();
 80011ec:	f000 fa44 	bl	8001678 <MX_ADC3_Init>
  MX_COMP1_Init();
 80011f0:	f000 fab4 	bl	800175c <MX_COMP1_Init>
  MX_COMP2_Init();
 80011f4:	f000 fae2 	bl	80017bc <MX_COMP2_Init>
  MX_COMP4_Init();
 80011f8:	f000 fb10 	bl	800181c <MX_COMP4_Init>
  MX_COMP7_Init();
 80011fc:	f000 fb3e 	bl	800187c <MX_COMP7_Init>
  MX_I2C1_Init();
 8001200:	f000 fb6c 	bl	80018dc <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8001204:	f000 fba8 	bl	8001958 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001208:	f000 fbcc 	bl	80019a4 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800120c:	f000 fbf0 	bl	80019f0 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8001210:	f000 fc14 	bl	8001a3c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001214:	f000 fccc 	bl	8001bb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001218:	f000 fd50 	bl	8001cbc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800121c:	f000 fde4 	bl	8001de8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	4843      	ldr	r0, [pc, #268]	; (8001330 <main+0x160>)
 8001224:	f006 f9c6 	bl	80075b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001228:	2104      	movs	r1, #4
 800122a:	4841      	ldr	r0, [pc, #260]	; (8001330 <main+0x160>)
 800122c:	f006 f9c2 	bl	80075b4 <HAL_TIM_IC_Start_IT>
  //Place to mess about with PWM in


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001230:	2100      	movs	r1, #0
 8001232:	4840      	ldr	r0, [pc, #256]	; (8001334 <main+0x164>)
 8001234:	f002 fb3c 	bl	80038b0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001238:	2100      	movs	r1, #0
 800123a:	483f      	ldr	r0, [pc, #252]	; (8001338 <main+0x168>)
 800123c:	f002 fb38 	bl	80038b0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001240:	2100      	movs	r1, #0
 8001242:	483e      	ldr	r0, [pc, #248]	; (800133c <main+0x16c>)
 8001244:	f002 fb34 	bl	80038b0 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(3000);
 8001248:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800124c:	f001 fcde 	bl	8002c0c <HAL_Delay>
quickHall=(GPIOB->IDR>>6)&0x7;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <main+0x170>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	099b      	lsrs	r3, r3, #6
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <main+0x174>)
 800125c:	6013      	str	r3, [r2, #0]
  HAL_OPAMP_Init(&hopamp1);
*/



  HAL_Delay(50);
 800125e:	2032      	movs	r0, #50	; 0x32
 8001260:	f001 fcd4 	bl	8002c0c <HAL_Delay>
HAL_OPAMP_Start(&hopamp1);
 8001264:	4838      	ldr	r0, [pc, #224]	; (8001348 <main+0x178>)
 8001266:	f004 f803 	bl	8005270 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp2);
 800126a:	4838      	ldr	r0, [pc, #224]	; (800134c <main+0x17c>)
 800126c:	f004 f800 	bl	8005270 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8001270:	4837      	ldr	r0, [pc, #220]	; (8001350 <main+0x180>)
 8001272:	f003 fffd 	bl	8005270 <HAL_OPAMP_Start>

BLDCInit();
 8001276:	f7ff fbc9 	bl	8000a0c <BLDCInit>
motor_init();
 800127a:	f7ff ff21 	bl	80010c0 <motor_init>
motor.Rphase=0.1;
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <main+0x184>)
 8001280:	4a35      	ldr	r2, [pc, #212]	; (8001358 <main+0x188>)
 8001282:	601a      	str	r2, [r3, #0]

HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	4835      	ldr	r0, [pc, #212]	; (800135c <main+0x18c>)
 8001288:	f006 f906 	bl	8007498 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <main+0x18c>)
 8001290:	f007 fb42 	bl	8008918 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001294:	2104      	movs	r1, #4
 8001296:	4831      	ldr	r0, [pc, #196]	; (800135c <main+0x18c>)
 8001298:	f006 f8fe 	bl	8007498 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800129c:	2104      	movs	r1, #4
 800129e:	482f      	ldr	r0, [pc, #188]	; (800135c <main+0x18c>)
 80012a0:	f007 fb3a 	bl	8008918 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012a4:	2108      	movs	r1, #8
 80012a6:	482d      	ldr	r0, [pc, #180]	; (800135c <main+0x18c>)
 80012a8:	f006 f8f6 	bl	8007498 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80012ac:	2108      	movs	r1, #8
 80012ae:	482b      	ldr	r0, [pc, #172]	; (800135c <main+0x18c>)
 80012b0:	f007 fb32 	bl	8008918 <HAL_TIMEx_PWMN_Start>

HAL_COMP_Start(&hcomp1);
 80012b4:	482a      	ldr	r0, [pc, #168]	; (8001360 <main+0x190>)
 80012b6:	f003 f90f 	bl	80044d8 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp2);
 80012ba:	482a      	ldr	r0, [pc, #168]	; (8001364 <main+0x194>)
 80012bc:	f003 f90c 	bl	80044d8 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp4);
 80012c0:	4829      	ldr	r0, [pc, #164]	; (8001368 <main+0x198>)
 80012c2:	f003 f909 	bl	80044d8 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp7);
 80012c6:	4829      	ldr	r0, [pc, #164]	; (800136c <main+0x19c>)
 80012c8:	f003 f906 	bl	80044d8 <HAL_COMP_Start>
HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d0:	f001 fc9c 	bl	8002c0c <HAL_Delay>
__HAL_TIM_MOE_ENABLE(&htim1); // initialising the comparators triggers the break state
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <main+0x18c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <main+0x18c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44

BLDCVars.BLDCduty=70;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <main+0x1a0>)
 80012e6:	2246      	movs	r2, #70	; 0x46
 80012e8:	605a      	str	r2, [r3, #4]

HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&measurement_buffers.RawADC[0][0], 3);
 80012ea:	2203      	movs	r2, #3
 80012ec:	4921      	ldr	r1, [pc, #132]	; (8001374 <main+0x1a4>)
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <main+0x164>)
 80012f0:	f001 feb6 	bl	8003060 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&measurement_buffers.RawADC[1][0], 3);
 80012f4:	2203      	movs	r2, #3
 80012f6:	4920      	ldr	r1, [pc, #128]	; (8001378 <main+0x1a8>)
 80012f8:	480f      	ldr	r0, [pc, #60]	; (8001338 <main+0x168>)
 80012fa:	f001 feb1 	bl	8003060 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&measurement_buffers.RawADC[2][0], 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	491e      	ldr	r1, [pc, #120]	; (800137c <main+0x1ac>)
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <main+0x16c>)
 8001304:	f001 feac 	bl	8003060 <HAL_ADC_Start_DMA>

	//Add a little area in which I can mess about without the RTOS
while(1){
	//BLDCCommuteHall(); //This has been moved to the DMA1 channel one IRQ, which triggers after every ADC measurement, on every PWM pulse.
if(	BLDCVars.BLDCduty<700){
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <main+0x1a0>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001310:	dafa      	bge.n	8001308 <main+0x138>
	BLDCVars.BLDCduty= 	BLDCVars.BLDCduty+10;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <main+0x1a0>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	330a      	adds	r3, #10
 8001318:	4a15      	ldr	r2, [pc, #84]	; (8001370 <main+0x1a0>)
 800131a:	6053      	str	r3, [r2, #4]
	HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f001 fc75 	bl	8002c0c <HAL_Delay>
	HAL_UART_Transmit(&huart3, "HelloWorld\r", 12, 10);
 8001322:	230a      	movs	r3, #10
 8001324:	220c      	movs	r2, #12
 8001326:	4916      	ldr	r1, [pc, #88]	; (8001380 <main+0x1b0>)
 8001328:	4816      	ldr	r0, [pc, #88]	; (8001384 <main+0x1b4>)
 800132a:	f007 fcb4 	bl	8008c96 <HAL_UART_Transmit>
if(	BLDCVars.BLDCduty<700){
 800132e:	e7eb      	b.n	8001308 <main+0x138>
 8001330:	20000894 	.word	0x20000894
 8001334:	20000938 	.word	0x20000938
 8001338:	200006c8 	.word	0x200006c8
 800133c:	20000988 	.word	0x20000988
 8001340:	48000400 	.word	0x48000400
 8001344:	20000050 	.word	0x20000050
 8001348:	200008d4 	.word	0x200008d4
 800134c:	20000590 	.word	0x20000590
 8001350:	20000830 	.word	0x20000830
 8001354:	20000554 	.word	0x20000554
 8001358:	3dcccccd 	.word	0x3dcccccd
 800135c:	20000a54 	.word	0x20000a54
 8001360:	20000864 	.word	0x20000864
 8001364:	20000adc 	.word	0x20000adc
 8001368:	20000908 	.word	0x20000908
 800136c:	200009d8 	.word	0x200009d8
 8001370:	20000538 	.word	0x20000538
 8001374:	200004e4 	.word	0x200004e4
 8001378:	200004f0 	.word	0x200004f0
 800137c:	200004fc 	.word	0x200004fc
 8001380:	0800bb14 	.word	0x0800bb14
 8001384:	20000648 	.word	0x20000648

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09e      	sub	sp, #120	; 0x78
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001392:	2228      	movs	r2, #40	; 0x28
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f00a fb8c 	bl	800bab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	223c      	movs	r2, #60	; 0x3c
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a fb7e 	bl	800bab4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013b8:	2303      	movs	r3, #3
 80013ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c6:	2301      	movs	r3, #1
 80013c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ca:	2310      	movs	r3, #16
 80013cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013dc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fcb6 	bl	8005d54 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013ee:	f000 fdc7 	bl	8001f80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	2302      	movs	r3, #2
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001408:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f005 fba8 	bl	8006b64 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800141a:	f000 fdb1 	bl	8001f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <SystemClock_Config+0xd0>)
 8001420:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001436:	2300      	movs	r3, #0
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f005 fdf7 	bl	8007034 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800144c:	f000 fd98 	bl	8001f80 <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3778      	adds	r7, #120	; 0x78
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	000211a4 	.word	0x000211a4

0800145c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800147e:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <MX_ADC1_Init+0x11c>)
 8001480:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001484:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <MX_ADC1_Init+0x11c>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <MX_ADC1_Init+0x11c>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <MX_ADC1_Init+0x11c>)
 8001494:	2201      	movs	r2, #1
 8001496:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MX_ADC1_Init+0x11c>)
 800149a:	2200      	movs	r2, #0
 800149c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014b0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014be:	2203      	movs	r2, #3
 80014c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014dc:	4826      	ldr	r0, [pc, #152]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014de:	f001 fbdf 	bl	8002ca0 <HAL_ADC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014e8:	f000 fd4a 	bl	8001f80 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4820      	ldr	r0, [pc, #128]	; (8001578 <MX_ADC1_Init+0x11c>)
 80014f8:	f002 fd58 	bl	8003fac <HAL_ADCEx_MultiModeConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001502:	f000 fd3d 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001506:	2303      	movs	r3, #3
 8001508:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150a:	2301      	movs	r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001512:	2305      	movs	r3, #5
 8001514:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4815      	ldr	r0, [pc, #84]	; (8001578 <MX_ADC1_Init+0x11c>)
 8001524:	f002 fa56 	bl	80039d4 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800152e:	f000 fd27 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001532:	2301      	movs	r3, #1
 8001534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001536:	2302      	movs	r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <MX_ADC1_Init+0x11c>)
 8001540:	f002 fa48 	bl	80039d4 <HAL_ADC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800154a:	f000 fd19 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800154e:	2304      	movs	r3, #4
 8001550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001552:	2303      	movs	r3, #3
 8001554:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001556:	2302      	movs	r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_ADC1_Init+0x11c>)
 8001560:	f002 fa38 	bl	80039d4 <HAL_ADC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800156a:	f000 fd09 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000938 	.word	0x20000938

0800157c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <MX_ADC2_Init+0xf4>)
 8001594:	4a37      	ldr	r2, [pc, #220]	; (8001674 <MX_ADC2_Init+0xf8>)
 8001596:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <MX_ADC2_Init+0xf4>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015aa:	4b31      	ldr	r3, [pc, #196]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015c2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80015ce:	4b28      	ldr	r3, [pc, #160]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015de:	2208      	movs	r2, #8
 80015e0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015ee:	4820      	ldr	r0, [pc, #128]	; (8001670 <MX_ADC2_Init+0xf4>)
 80015f0:	f001 fb56 	bl	8002ca0 <HAL_ADC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 80015fa:	f000 fcc1 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015fe:	2303      	movs	r3, #3
 8001600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001602:	2301      	movs	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800160a:	2305      	movs	r3, #5
 800160c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4619      	mov	r1, r3
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <MX_ADC2_Init+0xf4>)
 800161c:	f002 f9da 	bl	80039d4 <HAL_ADC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8001626:	f000 fcab 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800162a:	2301      	movs	r3, #1
 800162c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800162e:	2302      	movs	r3, #2
 8001630:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001632:	2302      	movs	r3, #2
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_ADC2_Init+0xf4>)
 800163c:	f002 f9ca 	bl	80039d4 <HAL_ADC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001646:	f000 fc9b 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800164a:	2302      	movs	r3, #2
 800164c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800164e:	2303      	movs	r3, #3
 8001650:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_ADC2_Init+0xf4>)
 8001658:	f002 f9bc 	bl	80039d4 <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8001662:	f000 fc8d 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200006c8 	.word	0x200006c8
 8001674:	50000100 	.word	0x50000100

08001678 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <MX_ADC3_Init+0xdc>)
 800169c:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <MX_ADC3_Init+0xe0>)
 800169e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ac:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016ca:	f44f 7210 	mov.w	r2, #576	; 0x240
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016d8:	2201      	movs	r2, #1
 80016da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016f6:	4817      	ldr	r0, [pc, #92]	; (8001754 <MX_ADC3_Init+0xdc>)
 80016f8:	f001 fad2 	bl	8002ca0 <HAL_ADC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001702:	f000 fc3d 	bl	8001f80 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4810      	ldr	r0, [pc, #64]	; (8001754 <MX_ADC3_Init+0xdc>)
 8001712:	f002 fc4b 	bl	8003fac <HAL_ADCEx_MultiModeConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 800171c:	f000 fc30 	bl	8001f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001720:	2301      	movs	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001724:	2301      	movs	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800172c:	2305      	movs	r3, #5
 800172e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_ADC3_Init+0xdc>)
 800173e:	f002 f949 	bl	80039d4 <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8001748:	f000 fc1a 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000988 	.word	0x20000988
 8001758:	50000400 	.word	0x50000400

0800175c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_COMP1_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_COMP1_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_COMP1_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_COMP1_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_COMP1_Init+0x58>)
 8001774:	f640 027f 	movw	r2, #2175	; 0x87f
 8001778:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_COMP1_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_COMP1_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_COMP1_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_COMP1_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_COMP1_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_COMP1_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_COMP1_Init+0x58>)
 80017a0:	f002 fe1a 	bl	80043d8 <HAL_COMP_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 80017aa:	f000 fbe9 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000864 	.word	0x20000864
 80017b8:	4001001c 	.word	0x4001001c

080017bc <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_COMP2_Init+0x58>)
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <MX_COMP2_Init+0x5c>)
 80017c4:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_COMP2_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_COMP2_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_COMP2_Init+0x58>)
 80017d4:	f640 027f 	movw	r2, #2175	; 0x87f
 80017d8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_COMP2_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_COMP2_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_COMP2_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_COMP2_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_COMP2_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_COMP2_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_COMP2_Init+0x58>)
 8001800:	f002 fdea 	bl	80043d8 <HAL_COMP_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800180a:	f000 fbb9 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000adc 	.word	0x20000adc
 8001818:	40010020 	.word	0x40010020

0800181c <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_COMP4_Init+0x58>)
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_COMP4_Init+0x5c>)
 8001824:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_COMP4_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_COMP4_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_COMP4_Init+0x58>)
 8001834:	f640 027f 	movw	r2, #2175	; 0x87f
 8001838:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_COMP4_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_COMP4_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_COMP4_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_COMP4_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_COMP4_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_COMP4_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_COMP4_Init+0x58>)
 8001860:	f002 fdba 	bl	80043d8 <HAL_COMP_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 800186a:	f000 fb89 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000908 	.word	0x20000908
 8001878:	40010028 	.word	0x40010028

0800187c <MX_COMP7_Init>:
  * @brief COMP7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP7_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP7_Init 0 */

  /* USER CODE BEGIN COMP7_Init 1 */

  /* USER CODE END COMP7_Init 1 */
  hcomp7.Instance = COMP7;
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_COMP7_Init+0x58>)
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <MX_COMP7_Init+0x5c>)
 8001884:	601a      	str	r2, [r3, #0]
  hcomp7.Init.InvertingInput = COMP_INVERTINGINPUT_3_4VREFINT;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_COMP7_Init+0x58>)
 8001888:	2220      	movs	r2, #32
 800188a:	605a      	str	r2, [r3, #4]
  hcomp7.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_COMP7_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hcomp7.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_COMP7_Init+0x58>)
 8001894:	f640 027f 	movw	r2, #2175	; 0x87f
 8001898:	60da      	str	r2, [r3, #12]
  hcomp7.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_COMP7_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  hcomp7.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_COMP7_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hcomp7.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_COMP7_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hcomp7.Init.Mode = COMP_MODE_HIGHSPEED;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_COMP7_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hcomp7.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_COMP7_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  hcomp7.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_COMP7_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp7) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_COMP7_Init+0x58>)
 80018c0:	f002 fd8a 	bl	80043d8 <HAL_COMP_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_COMP7_Init+0x52>
  {
    Error_Handler();
 80018ca:	f000 fb59 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP7_Init 2 */

  /* USER CODE END COMP7_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200009d8 	.word	0x200009d8
 80018d8:	40010034 	.word	0x40010034

080018dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_I2C1_Init+0x74>)
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <MX_I2C1_Init+0x78>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_I2C1_Init+0x74>)
 80018e8:	f240 220b 	movw	r2, #523	; 0x20b
 80018ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_I2C1_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_I2C1_Init+0x74>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_I2C1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_I2C1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_I2C1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_I2C1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_I2C1_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_I2C1_Init+0x74>)
 800191a:	f003 fadd 	bl	8004ed8 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 fb2c 	bl	8001f80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001928:	2100      	movs	r1, #0
 800192a:	4809      	ldr	r0, [pc, #36]	; (8001950 <MX_I2C1_Init+0x74>)
 800192c:	f003 fb63 	bl	8004ff6 <HAL_I2CEx_ConfigAnalogFilter>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001936:	f000 fb23 	bl	8001f80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800193a:	2100      	movs	r1, #0
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_I2C1_Init+0x74>)
 800193e:	f003 fba5 	bl	800508c <HAL_I2CEx_ConfigDigitalFilter>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001948:	f000 fb1a 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000075c 	.word	0x2000075c
 8001954:	40005400 	.word	0x40005400

08001958 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_OPAMP1_Init+0x44>)
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <MX_OPAMP1_Init+0x48>)
 8001960:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_OPAMP1_Init+0x44>)
 8001964:	2240      	movs	r2, #64	; 0x40
 8001966:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_OPAMP1_Init+0x44>)
 800196a:	220c      	movs	r2, #12
 800196c:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_OPAMP1_Init+0x44>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_OPAMP1_Init+0x44>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_OPAMP1_Init+0x44>)
 800197c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001980:	621a      	str	r2, [r3, #32]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_OPAMP1_Init+0x44>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_OPAMP1_Init+0x44>)
 800198a:	f003 fbcb 	bl	8005124 <HAL_OPAMP_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 8001994:	f000 faf4 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200008d4 	.word	0x200008d4
 80019a0:	40010038 	.word	0x40010038

080019a4 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <MX_OPAMP2_Init+0x48>)
 80019ac:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80019cc:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_OPAMP2_Init+0x44>)
 80019d6:	f003 fba5 	bl	8005124 <HAL_OPAMP_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 80019e0:	f000 face 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000590 	.word	0x20000590
 80019ec:	4001003c 	.word	0x4001003c

080019f0 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <MX_OPAMP3_Init+0x48>)
 80019f8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	605a      	str	r2, [r3, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	60da      	str	r2, [r3, #12]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 8001a14:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a18:	621a      	str	r2, [r3, #32]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_OPAMP3_Init+0x44>)
 8001a22:	f003 fb7f 	bl	8005124 <HAL_OPAMP_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_OPAMP3_Init+0x40>
  {
    Error_Handler();
 8001a2c:	f000 faa8 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000830 	.word	0x20000830
 8001a38:	40010040 	.word	0x40010040

08001a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b096      	sub	sp, #88	; 0x58
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	222c      	movs	r2, #44	; 0x2c
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00a f823 	bl	800bab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a70:	4a4e      	ldr	r2, [pc, #312]	; (8001bac <MX_TIM1_Init+0x170>)
 8001a72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001a80:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a82:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8e:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a9a:	4843      	ldr	r0, [pc, #268]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001a9c:	f005 fcd0 	bl	8007440 <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f000 fa6b 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001aaa:	2370      	movs	r3, #112	; 0x70
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aba:	4619      	mov	r1, r3
 8001abc:	483a      	ldr	r0, [pc, #232]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001abe:	f006 ff5b 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ac8:	f000 fa5a 	bl	8001f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001acc:	2360      	movs	r3, #96	; 0x60
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 512;
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001af4:	f005 ff88 	bl	8007a08 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001afe:	f000 fa3f 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b06:	2204      	movs	r2, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4827      	ldr	r0, [pc, #156]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001b0c:	f005 ff7c 	bl	8007a08 <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001b16:	f000 fa33 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b1e:	2208      	movs	r2, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	4821      	ldr	r0, [pc, #132]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001b24:	f005 ff70 	bl	8007a08 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001b2e:	f000 fa27 	bl	8001f80 <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 8001b32:	2305      	movs	r3, #5
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001b40:	f005 ff62 	bl	8007a08 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001b4a:	f000 fa19 	bl	8001f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 8001b5e:	231e      	movs	r3, #30
 8001b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 6;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001b8a:	f006 ff75 	bl	8008a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001b94:	f000 f9f4 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM1_Init+0x16c>)
 8001b9a:	f000 fda9 	bl	80026f0 <HAL_TIM_MspPostInit>

}
 8001b9e:	bf00      	nop
 8001ba0:	3758      	adds	r7, #88	; 0x58
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000a54 	.word	0x20000a54
 8001bac:	40012c00 	.word	0x40012c00

08001bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001be0:	4a35      	ldr	r2, [pc, #212]	; (8001cb8 <MX_TIM3_Init+0x108>)
 8001be2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001be6:	2247      	movs	r2, #71	; 0x47
 8001be8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c04:	482b      	ldr	r0, [pc, #172]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c06:	f005 fbc5 	bl	8007394 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001c10:	f000 f9b6 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001c14:	4827      	ldr	r0, [pc, #156]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c16:	f005 fc97 	bl	8007548 <HAL_TIM_IC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001c20:	f000 f9ae 	bl	8001f80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c24:	2304      	movs	r3, #4
 8001c26:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c28:	2350      	movs	r3, #80	; 0x50
 8001c2a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481e      	ldr	r0, [pc, #120]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c3c:	f006 f818 	bl	8007c70 <HAL_TIM_SlaveConfigSynchro>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c46:	f000 f99b 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c5a:	f006 fe8d 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001c64:	f000 f98c 	bl	8001f80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c80:	f005 fe25 	bl	80078ce <HAL_TIM_IC_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c8a:	f000 f979 	bl	8001f80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c92:	2302      	movs	r3, #2
 8001c94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_TIM3_Init+0x104>)
 8001c9e:	f005 fe16 	bl	80078ce <HAL_TIM_IC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001ca8:	f000 f96a 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000894 	.word	0x20000894
 8001cb8:	40000400 	.word	0x40000400

08001cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001cec:	4a3d      	ldr	r2, [pc, #244]	; (8001de4 <MX_TIM4_Init+0x128>)
 8001cee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 109;
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001cf2:	226d      	movs	r2, #109	; 0x6d
 8001cf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d10:	4833      	ldr	r0, [pc, #204]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d12:	f005 fb3f 	bl	8007394 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001d1c:	f000 f930 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d20:	482f      	ldr	r0, [pc, #188]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d22:	f005 fc11 	bl	8007548 <HAL_TIM_IC_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001d2c:	f000 f928 	bl	8001f80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d30:	2304      	movs	r3, #4
 8001d32:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4826      	ldr	r0, [pc, #152]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d48:	f005 ff92 	bl	8007c70 <HAL_TIM_SlaveConfigSynchro>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d52:	f000 f915 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	481e      	ldr	r0, [pc, #120]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d66:	f006 fe07 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001d70:	f000 f906 	bl	8001f80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d74:	2300      	movs	r3, #0
 8001d76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4815      	ldr	r0, [pc, #84]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001d8c:	f005 fd9f 	bl	80078ce <HAL_TIM_IC_ConfigChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001d96:	f000 f8f3 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480f      	ldr	r0, [pc, #60]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001da2:	f005 fd94 	bl	80078ce <HAL_TIM_IC_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001dac:	f000 f8e8 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	2208      	movs	r2, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001db8:	f005 fd89 	bl	80078ce <HAL_TIM_IC_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 8001dc2:	f000 f8dd 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim4, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM4_Init+0x124>)
 8001dca:	f005 ff35 	bl	8007c38 <HAL_TIM_ConfigTI1Input>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001dd4:	f000 f8d4 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200005c4 	.word	0x200005c4
 8001de4:	40000800 	.word	0x40000800

08001de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001dee:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <MX_USART3_UART_Init+0x5c>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e2c:	f006 fee5 	bl	8008bfa <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e36:	f000 f8a3 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000648 	.word	0x20000648
 8001e44:	40004800 	.word	0x40004800

08001e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <MX_DMA_Init+0xb0>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <MX_DMA_Init+0xb0>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6153      	str	r3, [r2, #20]
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <MX_DMA_Init+0xb0>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_DMA_Init+0xb0>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <MX_DMA_Init+0xb0>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6153      	str	r3, [r2, #20]
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <MX_DMA_Init+0xb0>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	200b      	movs	r0, #11
 8001e84:	f002 fcd0 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e88:	200b      	movs	r0, #11
 8001e8a:	f002 fce9 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	200c      	movs	r0, #12
 8001e94:	f002 fcc8 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e98:	200c      	movs	r0, #12
 8001e9a:	f002 fce1 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200d      	movs	r0, #13
 8001ea4:	f002 fcc0 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ea8:	200d      	movs	r0, #13
 8001eaa:	f002 fcd9 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2010      	movs	r0, #16
 8001eb4:	f002 fcb8 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001eb8:	2010      	movs	r0, #16
 8001eba:	f002 fcd1 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2011      	movs	r0, #17
 8001ec4:	f002 fcb0 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f002 fcc9 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2038      	movs	r0, #56	; 0x38
 8001ed4:	f002 fca8 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001ed8:	2038      	movs	r0, #56	; 0x38
 8001eda:	f002 fcc1 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	203c      	movs	r0, #60	; 0x3c
 8001ee4:	f002 fca0 	bl	8004828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001ee8:	203c      	movs	r0, #60	; 0x3c
 8001eea:	f002 fcb9 	bl	8004860 <HAL_NVIC_EnableIRQ>

}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f0c:	6153      	str	r3, [r2, #20]
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	6153      	str	r3, [r2, #20]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6153      	str	r3, [r2, #20]
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_GPIO_Init+0x5c>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]

}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f6e:	f000 fe2d 	bl	8002bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40001400 	.word	0x40001400

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_MspInit+0x4c>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_MspInit+0x4c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	210f      	movs	r1, #15
 8001fca:	f06f 0001 	mvn.w	r0, #1
 8001fce:	f002 fc2b 	bl	8004828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002000:	d15f      	bne.n	80020c2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002002:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_ADC_MspInit+0x228>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	4a7f      	ldr	r2, [pc, #508]	; (8002208 <HAL_ADC_MspInit+0x228>)
 800200a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800200c:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <HAL_ADC_MspInit+0x228>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10b      	bne.n	800202c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002014:	4b7d      	ldr	r3, [pc, #500]	; (800220c <HAL_ADC_MspInit+0x22c>)
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4a7c      	ldr	r2, [pc, #496]	; (800220c <HAL_ADC_MspInit+0x22c>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	6153      	str	r3, [r2, #20]
 8002020:	4b7a      	ldr	r3, [pc, #488]	; (800220c <HAL_ADC_MspInit+0x22c>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b77      	ldr	r3, [pc, #476]	; (800220c <HAL_ADC_MspInit+0x22c>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	4a76      	ldr	r2, [pc, #472]	; (800220c <HAL_ADC_MspInit+0x22c>)
 8002032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002036:	6153      	str	r3, [r2, #20]
 8002038:	4b74      	ldr	r3, [pc, #464]	; (800220c <HAL_ADC_MspInit+0x22c>)
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002044:	2309      	movs	r3, #9
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205a:	f002 fdc3 	bl	8004be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002060:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_ADC_MspInit+0x234>)
 8002062:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002064:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002066:	2200      	movs	r2, #0
 8002068:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800206a:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_ADC_MspInit+0x230>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002070:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002076:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800207e:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002084:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002086:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002088:	2220      	movs	r2, #32
 800208a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800208c:	4b60      	ldr	r3, [pc, #384]	; (8002210 <HAL_ADC_MspInit+0x230>)
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002094:	485e      	ldr	r0, [pc, #376]	; (8002210 <HAL_ADC_MspInit+0x230>)
 8002096:	f002 fbf1 	bl	800487c <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80020a0:	f7ff ff6e 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_ADC_MspInit+0x230>)
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
 80020aa:	4a59      	ldr	r2, [pc, #356]	; (8002210 <HAL_ADC_MspInit+0x230>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2012      	movs	r0, #18
 80020b6:	f002 fbb7 	bl	8004828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020ba:	2012      	movs	r0, #18
 80020bc:	f002 fbd0 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020c0:	e09e      	b.n	8002200 <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a54      	ldr	r2, [pc, #336]	; (8002218 <HAL_ADC_MspInit+0x238>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d15f      	bne.n	800218c <HAL_ADC_MspInit+0x1ac>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_ADC_MspInit+0x228>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a4d      	ldr	r2, [pc, #308]	; (8002208 <HAL_ADC_MspInit+0x228>)
 80020d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020d6:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_ADC_MspInit+0x228>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d10b      	bne.n	80020f6 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020de:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_ADC_MspInit+0x22c>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4a4a      	ldr	r2, [pc, #296]	; (800220c <HAL_ADC_MspInit+0x22c>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6153      	str	r3, [r2, #20]
 80020ea:	4b48      	ldr	r3, [pc, #288]	; (800220c <HAL_ADC_MspInit+0x22c>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b45      	ldr	r3, [pc, #276]	; (800220c <HAL_ADC_MspInit+0x22c>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4a44      	ldr	r2, [pc, #272]	; (800220c <HAL_ADC_MspInit+0x22c>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	6153      	str	r3, [r2, #20]
 8002102:	4b42      	ldr	r3, [pc, #264]	; (800220c <HAL_ADC_MspInit+0x22c>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800210e:	2330      	movs	r3, #48	; 0x30
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f002 fd5e 	bl	8004be4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <HAL_ADC_MspInit+0x23c>)
 800212a:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <HAL_ADC_MspInit+0x240>)
 800212c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002134:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800213a:	4b38      	ldr	r3, [pc, #224]	; (800221c <HAL_ADC_MspInit+0x23c>)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002148:	4b34      	ldr	r3, [pc, #208]	; (800221c <HAL_ADC_MspInit+0x23c>)
 800214a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800214e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002152:	2220      	movs	r2, #32
 8002154:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800215e:	482f      	ldr	r0, [pc, #188]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002160:	f002 fb8c 	bl	800487c <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 800216a:	f7ff ff09 	bl	8001f80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_ADC_MspInit+0x23c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2012      	movs	r0, #18
 8002180:	f002 fb52 	bl	8004828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002184:	2012      	movs	r0, #18
 8002186:	f002 fb6b 	bl	8004860 <HAL_NVIC_EnableIRQ>
}
 800218a:	e039      	b.n	8002200 <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <HAL_ADC_MspInit+0x244>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d134      	bne.n	8002200 <HAL_ADC_MspInit+0x220>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_ADC_MspInit+0x22c>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <HAL_ADC_MspInit+0x22c>)
 800219c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a0:	6153      	str	r3, [r2, #20]
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_ADC_MspInit+0x22c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA2_Channel5;
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021b0:	4a1e      	ldr	r2, [pc, #120]	; (800222c <HAL_ADC_MspInit+0x24c>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021cc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021d8:	2220      	movs	r2, #32
 80021da:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80021e4:	4810      	ldr	r0, [pc, #64]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021e6:	f002 fb49 	bl	800487c <HAL_DMA_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 80021f0:	f7ff fec6 	bl	8001f80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_ADC_MspInit+0x248>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	; 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000054 	.word	0x20000054
 800220c:	40021000 	.word	0x40021000
 8002210:	20000a08 	.word	0x20000a08
 8002214:	40020008 	.word	0x40020008
 8002218:	50000100 	.word	0x50000100
 800221c:	20000b0c 	.word	0x20000b0c
 8002220:	40020408 	.word	0x40020408
 8002224:	50000400 	.word	0x50000400
 8002228:	200007a8 	.word	0x200007a8
 800222c:	40020458 	.word	0x40020458

08002230 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_COMP_MspInit+0x114>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d119      	bne.n	8002286 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	6153      	str	r3, [r2, #20]
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800226a:	2302      	movs	r3, #2
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226e:	2303      	movs	r3, #3
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f002 fcb0 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8002284:	e05a      	b.n	800233c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a30      	ldr	r2, [pc, #192]	; (800234c <HAL_COMP_MspInit+0x11c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d119      	bne.n	80022c4 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229a:	6153      	str	r3, [r2, #20]
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_COMP_MspInit+0x118>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ac:	2303      	movs	r3, #3
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f002 fc91 	bl	8004be4 <HAL_GPIO_Init>
}
 80022c2:	e03b      	b.n	800233c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_COMP_MspInit+0x120>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d118      	bne.n	8002300 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_COMP_MspInit+0x118>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_COMP_MspInit+0x118>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6153      	str	r3, [r2, #20]
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_COMP_MspInit+0x118>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ea:	2303      	movs	r3, #3
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	4816      	ldr	r0, [pc, #88]	; (8002354 <HAL_COMP_MspInit+0x124>)
 80022fa:	f002 fc73 	bl	8004be4 <HAL_GPIO_Init>
}
 80022fe:	e01d      	b.n	800233c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_COMP_MspInit+0x128>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d118      	bne.n	800233c <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_COMP_MspInit+0x118>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	6153      	str	r3, [r2, #20]
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_COMP_MspInit+0x118>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002322:	2301      	movs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002326:	2303      	movs	r3, #3
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002338:	f002 fc54 	bl	8004be4 <HAL_GPIO_Init>
}
 800233c:	bf00      	nop
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	4001001c 	.word	0x4001001c
 8002348:	40021000 	.word	0x40021000
 800234c:	40010020 	.word	0x40010020
 8002350:	40010028 	.word	0x40010028
 8002354:	48000400 	.word	0x48000400
 8002358:	40010034 	.word	0x40010034

0800235c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_I2C_MspInit+0x154>)
 800237a:	4293      	cmp	r3, r2
 800237c:	f040 8093 	bne.w	80024a6 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002380:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 8002386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238a:	6153      	str	r3, [r2, #20]
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002398:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a2:	6153      	str	r3, [r2, #20]
 80023a4:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b6:	2312      	movs	r3, #18
 80023b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c2:	2304      	movs	r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d0:	f002 fc08 	bl	8004be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023da:	2312      	movs	r3, #18
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e6:	2304      	movs	r3, #4
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	4831      	ldr	r0, [pc, #196]	; (80024b8 <HAL_I2C_MspInit+0x15c>)
 80023f2:	f002 fbf7 	bl	8004be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 80023fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_I2C_MspInit+0x158>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002410:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_I2C_MspInit+0x164>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_I2C_MspInit+0x160>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_I2C_MspInit+0x160>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_I2C_MspInit+0x160>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800243e:	481f      	ldr	r0, [pc, #124]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002440:	f002 fa1c 	bl	800487c <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_MspInit+0xf2>
    {
      Error_Handler();
 800244a:	f7ff fd99 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_I2C_MspInit+0x160>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_I2C_MspInit+0x16c>)
 800245e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 8002462:	2210      	movs	r2, #16
 8002464:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 800248c:	f002 f9f6 	bl	800487c <HAL_DMA_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8002496:	f7ff fd73 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_I2C_MspInit+0x168>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	; 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40021000 	.word	0x40021000
 80024b8:	48000400 	.word	0x48000400
 80024bc:	20000a98 	.word	0x20000a98
 80024c0:	40020080 	.word	0x40020080
 80024c4:	20000718 	.word	0x20000718
 80024c8:	4002006c 	.word	0x4002006c

080024cc <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <HAL_OPAMP_MspInit+0xd8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d119      	bne.n	8002522 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	6153      	str	r3, [r2, #20]
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002506:	2306      	movs	r3, #6
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f002 fb62 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002520:	e03b      	b.n	800259a <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a21      	ldr	r2, [pc, #132]	; (80025ac <HAL_OPAMP_MspInit+0xe0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d119      	bne.n	8002560 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 8002532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002536:	6153      	str	r3, [r2, #20]
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002548:	2303      	movs	r3, #3
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	f002 fb43 	bl	8004be4 <HAL_GPIO_Init>
}
 800255e:	e01c      	b.n	800259a <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <HAL_OPAMP_MspInit+0xe4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d117      	bne.n	800259a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	6153      	str	r3, [r2, #20]
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_OPAMP_MspInit+0xdc>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002582:	2303      	movs	r3, #3
 8002584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002586:	2303      	movs	r3, #3
 8002588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <HAL_OPAMP_MspInit+0xe8>)
 8002596:	f002 fb25 	bl	8004be4 <HAL_GPIO_Init>
}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40010038 	.word	0x40010038
 80025a8:	40021000 	.word	0x40021000
 80025ac:	4001003c 	.word	0x4001003c
 80025b0:	40010040 	.word	0x40010040
 80025b4:	48000400 	.word	0x48000400

080025b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_TIM_PWM_MspInit+0x38>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10b      	bne.n	80025e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80025d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d4:	6193      	str	r3, [r2, #24]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <HAL_TIM_Base_MspInit+0xe8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d130      	bne.n	800267c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6153      	str	r3, [r2, #20]
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800264a:	2310      	movs	r3, #16
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800265a:	2302      	movs	r3, #2
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	4619      	mov	r1, r3
 8002664:	4820      	ldr	r0, [pc, #128]	; (80026e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002666:	f002 fabd 	bl	8004be4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201d      	movs	r0, #29
 8002670:	f002 f8da 	bl	8004828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002674:	201d      	movs	r0, #29
 8002676:	f002 f8f3 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800267a:	e02d      	b.n	80026d8 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_TIM_Base_MspInit+0xf4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d128      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_TIM_Base_MspInit+0xec>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80026b6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026c8:	2302      	movs	r3, #2
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <HAL_TIM_Base_MspInit+0xf0>)
 80026d4:	f002 fa86 	bl	8004be4 <HAL_GPIO_Init>
}
 80026d8:	bf00      	nop
 80026da:	3730      	adds	r7, #48	; 0x30
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40021000 	.word	0x40021000
 80026e8:	48000400 	.word	0x48000400
 80026ec:	40000800 	.word	0x40000800

080026f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_TIM_MspPostInit+0xc4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d14b      	bne.n	80027aa <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_TIM_MspPostInit+0xc8>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_TIM_MspPostInit+0xc8>)
 8002718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271c:	6153      	str	r3, [r2, #20]
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_TIM_MspPostInit+0xc8>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_TIM_MspPostInit+0xc8>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_TIM_MspPostInit+0xc8>)
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	6153      	str	r3, [r2, #20]
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_TIM_MspPostInit+0xc8>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002742:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002754:	2306      	movs	r3, #6
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	4817      	ldr	r0, [pc, #92]	; (80027bc <HAL_TIM_MspPostInit+0xcc>)
 8002760:	f002 fa40 	bl	8004be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002776:	2304      	movs	r3, #4
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	480e      	ldr	r0, [pc, #56]	; (80027bc <HAL_TIM_MspPostInit+0xcc>)
 8002782:	f002 fa2f 	bl	8004be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002786:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800278a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002798:	2306      	movs	r3, #6
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a6:	f002 fa1d 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400

080027c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_UART_MspInit+0x138>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 8086 	bne.w	80028f0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <HAL_UART_MspInit+0x13c>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4a44      	ldr	r2, [pc, #272]	; (80028fc <HAL_UART_MspInit+0x13c>)
 80027ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ee:	61d3      	str	r3, [r2, #28]
 80027f0:	4b42      	ldr	r3, [pc, #264]	; (80028fc <HAL_UART_MspInit+0x13c>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fc:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_UART_MspInit+0x13c>)
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4a3e      	ldr	r2, [pc, #248]	; (80028fc <HAL_UART_MspInit+0x13c>)
 8002802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002806:	6153      	str	r3, [r2, #20]
 8002808:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <HAL_UART_MspInit+0x13c>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002826:	2307      	movs	r3, #7
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	4833      	ldr	r0, [pc, #204]	; (8002900 <HAL_UART_MspInit+0x140>)
 8002832:	f002 f9d7 	bl	8004be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002848:	2307      	movs	r3, #7
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	482b      	ldr	r0, [pc, #172]	; (8002900 <HAL_UART_MspInit+0x140>)
 8002854:	f002 f9c6 	bl	8004be4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_UART_MspInit+0x144>)
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_UART_MspInit+0x148>)
 800285c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_UART_MspInit+0x144>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_UART_MspInit+0x144>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_UART_MspInit+0x144>)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_UART_MspInit+0x144>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_UART_MspInit+0x144>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800287c:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_UART_MspInit+0x144>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_UART_MspInit+0x144>)
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002888:	481e      	ldr	r0, [pc, #120]	; (8002904 <HAL_UART_MspInit+0x144>)
 800288a:	f001 fff7 	bl	800487c <HAL_DMA_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8002894:	f7ff fb74 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_UART_MspInit+0x144>)
 800289c:	66da      	str	r2, [r3, #108]	; 0x6c
 800289e:	4a19      	ldr	r2, [pc, #100]	; (8002904 <HAL_UART_MspInit+0x144>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028a6:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <HAL_UART_MspInit+0x150>)
 80028a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028ac:	2210      	movs	r2, #16
 80028ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028d6:	f001 ffd1 	bl	800487c <HAL_DMA_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80028e0:	f7ff fb4e 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028e8:	669a      	str	r2, [r3, #104]	; 0x68
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_UART_MspInit+0x14c>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40004800 	.word	0x40004800
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000400 	.word	0x48000400
 8002904:	20000604 	.word	0x20000604
 8002908:	40020030 	.word	0x40020030
 800290c:	200007ec 	.word	0x200007ec
 8002910:	4002001c 	.word	0x4002001c

08002914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002924:	2200      	movs	r2, #0
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	2037      	movs	r0, #55	; 0x37
 800292a:	f001 ff7d 	bl	8004828 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800292e:	2037      	movs	r0, #55	; 0x37
 8002930:	f001 ff96 	bl	8004860 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_InitTick+0xa0>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_InitTick+0xa0>)
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	61d3      	str	r3, [r2, #28]
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_InitTick+0xa0>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800294c:	f107 0210 	add.w	r2, r7, #16
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f004 fb3a 	bl	8006fd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800295c:	f004 faf4 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 8002960:	4603      	mov	r3, r0
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <HAL_InitTick+0xa4>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	3b01      	subs	r3, #1
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_InitTick+0xa8>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <HAL_InitTick+0xac>)
 8002978:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_InitTick+0xa8>)
 800297c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002980:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <HAL_InitTick+0xa8>)
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_InitTick+0xa8>)
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_InitTick+0xa8>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002994:	4809      	ldr	r0, [pc, #36]	; (80029bc <HAL_InitTick+0xa8>)
 8002996:	f004 fcfd 	bl	8007394 <HAL_TIM_Base_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80029a0:	4806      	ldr	r0, [pc, #24]	; (80029bc <HAL_InitTick+0xa8>)
 80029a2:	f004 fd23 	bl	80073ec <HAL_TIM_Base_Start_IT>
 80029a6:	4603      	mov	r3, r0
 80029a8:	e000      	b.n	80029ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	20000b50 	.word	0x20000b50
 80029c0:	40001400 	.word	0x40001400

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler+0x4>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler+0x4>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler+0x4>

080029ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <DMA1_Channel1_IRQHandler+0x4c>)
 80029fe:	f001 ffe3 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  	BLDCCurrentController();
 8002a02:	f7fe f8c5 	bl	8000b90 <BLDCCurrentController>
	BLDCCommuteHall();
 8002a06:	f7fe f837 	bl	8000a78 <BLDCCommuteHall>
	extern float adcBuff1[3];
	adcBuff1[0]=(float)measurement_buffers.RawADC[0][0];
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <DMA1_Channel1_IRQHandler+0x50>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <DMA1_Channel1_IRQHandler+0x54>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]
	adcBuff1[1]=(float)measurement_buffers.RawADC[0][1];
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <DMA1_Channel1_IRQHandler+0x50>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <DMA1_Channel1_IRQHandler+0x54>)
 8002a2a:	edc3 7a01 	vstr	s15, [r3, #4]
	adcBuff1[2]=(float)measurement_buffers.RawADC[0][2];
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <DMA1_Channel1_IRQHandler+0x50>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <DMA1_Channel1_IRQHandler+0x54>)
 8002a3c:	edc3 7a02 	vstr	s15, [r3, #8]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000a08 	.word	0x20000a08
 8002a48:	200004e4 	.word	0x200004e4
 8002a4c:	2000003c 	.word	0x2000003c

08002a50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <DMA1_Channel2_IRQHandler+0x10>)
 8002a56:	f001 ffb7 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200007ec 	.word	0x200007ec

08002a64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <DMA1_Channel3_IRQHandler+0x10>)
 8002a6a:	f001 ffad 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000604 	.word	0x20000604

08002a78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <DMA1_Channel6_IRQHandler+0x10>)
 8002a7e:	f001 ffa3 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000718 	.word	0x20000718

08002a8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <DMA1_Channel7_IRQHandler+0x10>)
 8002a92:	f001 ff99 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000a98 	.word	0x20000a98

08002aa0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */


  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <ADC1_2_IRQHandler+0x14>)
 8002aa6:	f000 fbf7 	bl	8003298 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <ADC1_2_IRQHandler+0x18>)
 8002aac:	f000 fbf4 	bl	8003298 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000938 	.word	0x20000938
 8002ab8:	200006c8 	.word	0x200006c8

08002abc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002ac2:	f002 fc06 	bl	80052d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000b94 	.word	0x20000b94

08002ad0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <TIM3_IRQHandler+0x10>)
 8002ad6:	f004 fddb 	bl	8007690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000894 	.word	0x20000894

08002ae4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM7_IRQHandler+0x10>)
 8002aea:	f004 fdd1 	bl	8007690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000b50 	.word	0x20000b50

08002af8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <DMA2_Channel1_IRQHandler+0x10>)
 8002afe:	f001 ff63 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000b0c 	.word	0x20000b0c

08002b0c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DMA2_Channel5_IRQHandler+0x10>)
 8002b12:	f001 ff59 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200007a8 	.word	0x200007a8

08002b20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <SystemInit+0x28>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <SystemInit+0x28>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SystemInit+0x28>)
 8002b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b52:	e003      	b.n	8002b5c <LoopCopyDataInit>

08002b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b5a:	3104      	adds	r1, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b5c:	480b      	ldr	r0, [pc, #44]	; (8002b8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b64:	d3f6      	bcc.n	8002b54 <CopyDataInit>
	ldr	r2, =_sbss
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b68:	e002      	b.n	8002b70 <LoopFillZerobss>

08002b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b6c:	f842 3b04 	str.w	r3, [r2], #4

08002b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <LoopForever+0x16>)
	cmp	r2, r3
 8002b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b74:	d3f9      	bcc.n	8002b6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b76:	f7ff ffd3 	bl	8002b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b7a:	f008 ff77 	bl	800ba6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b7e:	f7fe fb27 	bl	80011d0 <main>

08002b82 <LoopForever>:

LoopForever:
    b LoopForever
 8002b82:	e7fe      	b.n	8002b82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b84:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002b88:	0800bb60 	.word	0x0800bb60
	ldr	r0, =_sdata
 8002b8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b90:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002b94:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002b98:	20000e00 	.word	0x20000e00

08002b9c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b9c:	e7fe      	b.n	8002b9c <ADC3_IRQHandler>
	...

08002ba0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_Init+0x28>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_Init+0x28>)
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f001 fe2e 	bl	8004812 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff feac 	bl	8002914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff f9e8 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40022000 	.word	0x40022000

08002bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	20000b90 	.word	0x20000b90

08002bf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000b90 	.word	0x20000b90

08002c0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d005      	beq.n	8002c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_Delay+0x40>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c32:	bf00      	nop
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8f7      	bhi.n	8002c34 <HAL_Delay+0x28>
  {
  }
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b09a      	sub	sp, #104	; 0x68
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e1c9      	b.n	8003054 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d176      	bne.n	8002dc0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d152      	bne.n	8002d80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff f973 	bl	8001fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d13b      	bne.n	8002d80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f001 fb05 	bl	8004318 <ADC_Disable>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d12f      	bne.n	8002d80 <HAL_ADC_Init+0xe0>
 8002d20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d12b      	bne.n	8002d80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d30:	f023 0302 	bic.w	r3, r3, #2
 8002d34:	f043 0202 	orr.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d5c:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <HAL_ADC_Init+0x2d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a86      	ldr	r2, [pc, #536]	; (8002f7c <HAL_ADC_Init+0x2dc>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9a      	lsrs	r2, r3, #18
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d9c:	d110      	bne.n	8002dc0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f023 0312 	bic.w	r3, r3, #18
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 8136 	bne.w	800303a <HAL_ADC_Init+0x39a>
 8002dce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 8131 	bne.w	800303a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 8129 	bne.w	800303a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e00:	d004      	beq.n	8002e0c <HAL_ADC_Init+0x16c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5e      	ldr	r2, [pc, #376]	; (8002f80 <HAL_ADC_Init+0x2e0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_Init+0x170>
 8002e0c:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <HAL_ADC_Init+0x2e4>)
 8002e0e:	e000      	b.n	8002e12 <HAL_ADC_Init+0x172>
 8002e10:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <HAL_ADC_Init+0x2e8>)
 8002e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d102      	bne.n	8002e24 <HAL_ADC_Init+0x184>
 8002e1e:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_ADC_Init+0x2e0>)
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e01a      	b.n	8002e5a <HAL_ADC_Init+0x1ba>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_ADC_Init+0x2e0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d103      	bne.n	8002e36 <HAL_ADC_Init+0x196>
 8002e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e011      	b.n	8002e5a <HAL_ADC_Init+0x1ba>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a54      	ldr	r2, [pc, #336]	; (8002f8c <HAL_ADC_Init+0x2ec>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADC_Init+0x1a6>
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_ADC_Init+0x2f0>)
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e009      	b.n	8002e5a <HAL_ADC_Init+0x1ba>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a51      	ldr	r2, [pc, #324]	; (8002f90 <HAL_ADC_Init+0x2f0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <HAL_ADC_Init+0x1b6>
 8002e50:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <HAL_ADC_Init+0x2ec>)
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e001      	b.n	8002e5a <HAL_ADC_Init+0x1ba>
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d108      	bne.n	8002e7a <HAL_ADC_Init+0x1da>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Init+0x1da>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_ADC_Init+0x1dc>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11c      	bne.n	8002eba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_ADC_Init+0x202>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Init+0x202>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_ADC_Init+0x204>
 8002ea2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7e5b      	ldrb	r3, [r3, #25]
 8002ebe:	035b      	lsls	r3, r3, #13
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec4:	2a01      	cmp	r2, #1
 8002ec6:	d002      	beq.n	8002ece <HAL_ADC_Init+0x22e>
 8002ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ecc:	e000      	b.n	8002ed0 <HAL_ADC_Init+0x230>
 8002ece:	2200      	movs	r2, #0
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d11b      	bne.n	8002f26 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7e5b      	ldrb	r3, [r3, #25]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	3b01      	subs	r3, #1
 8002efc:	045a      	lsls	r2, r3, #17
 8002efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	663b      	str	r3, [r7, #96]	; 0x60
 8002f08:	e00d      	b.n	8002f26 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d03a      	beq.n	8002fa4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_ADC_Init+0x2ec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_ADC_Init+0x2a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <HAL_ADC_Init+0x2f0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d128      	bne.n	8002f94 <HAL_ADC_Init+0x2f4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002f4a:	d012      	beq.n	8002f72 <HAL_ADC_Init+0x2d2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d00a      	beq.n	8002f6c <HAL_ADC_Init+0x2cc>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002f5e:	d002      	beq.n	8002f66 <HAL_ADC_Init+0x2c6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	e018      	b.n	8002f98 <HAL_ADC_Init+0x2f8>
 8002f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6a:	e015      	b.n	8002f98 <HAL_ADC_Init+0x2f8>
 8002f6c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002f70:	e012      	b.n	8002f98 <HAL_ADC_Init+0x2f8>
 8002f72:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002f76:	e00f      	b.n	8002f98 <HAL_ADC_Init+0x2f8>
 8002f78:	20000004 	.word	0x20000004
 8002f7c:	431bde83 	.word	0x431bde83
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000300 	.word	0x50000300
 8002f88:	50000700 	.word	0x50000700
 8002f8c:	50000400 	.word	0x50000400
 8002f90:	50000500 	.word	0x50000500
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d114      	bne.n	8002fdc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc0:	f023 0302 	bic.w	r3, r3, #2
 8002fc4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7e1b      	ldrb	r3, [r3, #24]
 8002fca:	039a      	lsls	r2, r3, #14
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_ADC_Init+0x3bc>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002fec:	430b      	orrs	r3, r1
 8002fee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10c      	bne.n	8003012 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f023 010f 	bic.w	r1, r3, #15
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
 8003010:	e007      	b.n	8003022 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 020f 	bic.w	r2, r2, #15
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f023 0303 	bic.w	r3, r3, #3
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
 8003038:	e00a      	b.n	8003050 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f023 0312 	bic.w	r3, r3, #18
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003050:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003054:	4618      	mov	r0, r3
 8003056:	3768      	adds	r7, #104	; 0x68
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	fff0c007 	.word	0xfff0c007

08003060 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80f7 	bne.w	800326e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADC_Start_DMA+0x2e>
 800308a:	2302      	movs	r3, #2
 800308c:	e0f2      	b.n	8003274 <HAL_ADC_Start_DMA+0x214>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309e:	d004      	beq.n	80030aa <HAL_ADC_Start_DMA+0x4a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a75      	ldr	r2, [pc, #468]	; (800327c <HAL_ADC_Start_DMA+0x21c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d109      	bne.n	80030be <HAL_ADC_Start_DMA+0x5e>
 80030aa:	4b75      	ldr	r3, [pc, #468]	; (8003280 <HAL_ADC_Start_DMA+0x220>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e008      	b.n	80030d0 <HAL_ADC_Start_DMA+0x70>
 80030be:	4b71      	ldr	r3, [pc, #452]	; (8003284 <HAL_ADC_Start_DMA+0x224>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80c5 	beq.w	8003260 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 f8c0 	bl	800425c <ADC_Enable>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 80b7 	bne.w	8003256 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003104:	d004      	beq.n	8003110 <HAL_ADC_Start_DMA+0xb0>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_ADC_Start_DMA+0x21c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d106      	bne.n	800311e <HAL_ADC_Start_DMA+0xbe>
 8003110:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_ADC_Start_DMA+0x220>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_ADC_Start_DMA+0xde>
 800311c:	e005      	b.n	800312a <HAL_ADC_Start_DMA+0xca>
 800311e:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_ADC_Start_DMA+0x224>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_ADC_Start_DMA+0xde>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003132:	d004      	beq.n	800313e <HAL_ADC_Start_DMA+0xde>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_ADC_Start_DMA+0x228>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d115      	bne.n	800316a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d036      	beq.n	80031c6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003160:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003168:	e02d      	b.n	80031c6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317e:	d004      	beq.n	800318a <HAL_ADC_Start_DMA+0x12a>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3d      	ldr	r2, [pc, #244]	; (800327c <HAL_ADC_Start_DMA+0x21c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10a      	bne.n	80031a0 <HAL_ADC_Start_DMA+0x140>
 800318a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e008      	b.n	80031b2 <HAL_ADC_Start_DMA+0x152>
 80031a0:	4b39      	ldr	r3, [pc, #228]	; (8003288 <HAL_ADC_Start_DMA+0x228>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d106      	bne.n	80031e2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f023 0206 	bic.w	r2, r3, #6
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_ADC_Start_DMA+0x22c>)
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <HAL_ADC_Start_DMA+0x230>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <HAL_ADC_Start_DMA+0x234>)
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	221c      	movs	r2, #28
 800320e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0210 	orr.w	r2, r2, #16
 800321e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3340      	adds	r3, #64	; 0x40
 800323a:	4619      	mov	r1, r3
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f001 fb63 	bl	800490a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0204 	orr.w	r2, r2, #4
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	e00d      	b.n	8003272 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800325e:	e008      	b.n	8003272 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800326c:	e001      	b.n	8003272 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	50000100 	.word	0x50000100
 8003280:	50000300 	.word	0x50000300
 8003284:	50000700 	.word	0x50000700
 8003288:	50000400 	.word	0x50000400
 800328c:	08004191 	.word	0x08004191
 8003290:	0800420b 	.word	0x0800420b
 8003294:	08004227 	.word	0x08004227

08003298 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_IRQHandler+0x30>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d00f      	beq.n	80032e8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	f040 80c0 	bne.w	8003458 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	f040 80b8 	bne.w	8003458 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003308:	d004      	beq.n	8003314 <HAL_ADC_IRQHandler+0x7c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a95      	ldr	r2, [pc, #596]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d106      	bne.n	8003322 <HAL_ADC_IRQHandler+0x8a>
 8003314:	4b94      	ldr	r3, [pc, #592]	; (8003568 <HAL_ADC_IRQHandler+0x2d0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03e      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 8003320:	e005      	b.n	800332e <HAL_ADC_IRQHandler+0x96>
 8003322:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_ADC_IRQHandler+0x2d4>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2b00      	cmp	r3, #0
 800332c:	d037      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003336:	d004      	beq.n	8003342 <HAL_ADC_IRQHandler+0xaa>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a89      	ldr	r2, [pc, #548]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d106      	bne.n	8003350 <HAL_ADC_IRQHandler+0xb8>
 8003342:	4b89      	ldr	r3, [pc, #548]	; (8003568 <HAL_ADC_IRQHandler+0x2d0>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2b05      	cmp	r3, #5
 800334c:	d027      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 800334e:	e005      	b.n	800335c <HAL_ADC_IRQHandler+0xc4>
 8003350:	4b86      	ldr	r3, [pc, #536]	; (800356c <HAL_ADC_IRQHandler+0x2d4>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2b05      	cmp	r3, #5
 800335a:	d020      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003364:	d004      	beq.n	8003370 <HAL_ADC_IRQHandler+0xd8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7e      	ldr	r2, [pc, #504]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d106      	bne.n	800337e <HAL_ADC_IRQHandler+0xe6>
 8003370:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <HAL_ADC_IRQHandler+0x2d0>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b09      	cmp	r3, #9
 800337a:	d010      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 800337c:	e005      	b.n	800338a <HAL_ADC_IRQHandler+0xf2>
 800337e:	4b7b      	ldr	r3, [pc, #492]	; (800356c <HAL_ADC_IRQHandler+0x2d4>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2b09      	cmp	r3, #9
 8003388:	d009      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003392:	d004      	beq.n	800339e <HAL_ADC_IRQHandler+0x106>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_ADC_IRQHandler+0x2d8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d104      	bne.n	80033a8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	e00f      	b.n	80033c8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_IRQHandler+0x124>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6b      	ldr	r2, [pc, #428]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d102      	bne.n	80033c2 <HAL_ADC_IRQHandler+0x12a>
 80033bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033c0:	e000      	b.n	80033c4 <HAL_ADC_IRQHandler+0x12c>
 80033c2:	4b6b      	ldr	r3, [pc, #428]	; (8003570 <HAL_ADC_IRQHandler+0x2d8>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d139      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d134      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d12d      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11a      	bne.n	8003432 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 020c 	bic.w	r2, r2, #12
 800340a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d112      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
 8003430:	e00b      	b.n	800344a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fc00 	bl	8002c50 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	220c      	movs	r2, #12
 8003456:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b20      	cmp	r3, #32
 8003464:	d106      	bne.n	8003474 <HAL_ADC_IRQHandler+0x1dc>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b20      	cmp	r3, #32
 8003472:	d00f      	beq.n	8003494 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	f040 813c 	bne.w	80036fc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	f040 8134 	bne.w	80036fc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a8:	d004      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x21c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d106      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x22a>
 80034b4:	4b2c      	ldr	r3, [pc, #176]	; (8003568 <HAL_ADC_IRQHandler+0x2d0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d03e      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 80034c0:	e005      	b.n	80034ce <HAL_ADC_IRQHandler+0x236>
 80034c2:	4b2a      	ldr	r3, [pc, #168]	; (800356c <HAL_ADC_IRQHandler+0x2d4>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d037      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d6:	d004      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x24a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d106      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x258>
 80034e2:	4b21      	ldr	r3, [pc, #132]	; (8003568 <HAL_ADC_IRQHandler+0x2d0>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d027      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 80034ee:	e005      	b.n	80034fc <HAL_ADC_IRQHandler+0x264>
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_ADC_IRQHandler+0x2d4>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d020      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003504:	d004      	beq.n	8003510 <HAL_ADC_IRQHandler+0x278>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a16      	ldr	r2, [pc, #88]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d106      	bne.n	800351e <HAL_ADC_IRQHandler+0x286>
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_ADC_IRQHandler+0x2d0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2b09      	cmp	r3, #9
 800351a:	d010      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 800351c:	e005      	b.n	800352a <HAL_ADC_IRQHandler+0x292>
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <HAL_ADC_IRQHandler+0x2d4>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2b09      	cmp	r3, #9
 8003528:	d009      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003532:	d004      	beq.n	800353e <HAL_ADC_IRQHandler+0x2a6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_ADC_IRQHandler+0x2d8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d104      	bne.n	8003548 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	e018      	b.n	800357a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003550:	d004      	beq.n	800355c <HAL_ADC_IRQHandler+0x2c4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_ADC_IRQHandler+0x2cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10b      	bne.n	8003574 <HAL_ADC_IRQHandler+0x2dc>
 800355c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003560:	e009      	b.n	8003576 <HAL_ADC_IRQHandler+0x2de>
 8003562:	bf00      	nop
 8003564:	50000100 	.word	0x50000100
 8003568:	50000300 	.word	0x50000300
 800356c:	50000700 	.word	0x50000700
 8003570:	50000400 	.word	0x50000400
 8003574:	4b9d      	ldr	r3, [pc, #628]	; (80037ec <HAL_ADC_IRQHandler+0x554>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003580:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 80ad 	bne.w	80036ee <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 80a5 	bne.w	80036ee <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 809f 	bne.w	80036ee <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	f040 8097 	bne.w	80036ee <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x33c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a88      	ldr	r2, [pc, #544]	; (80037f0 <HAL_ADC_IRQHandler+0x558>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d106      	bne.n	80035e2 <HAL_ADC_IRQHandler+0x34a>
 80035d4:	4b87      	ldr	r3, [pc, #540]	; (80037f4 <HAL_ADC_IRQHandler+0x55c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03e      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 80035e0:	e005      	b.n	80035ee <HAL_ADC_IRQHandler+0x356>
 80035e2:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_ADC_IRQHandler+0x560>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d037      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f6:	d004      	beq.n	8003602 <HAL_ADC_IRQHandler+0x36a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7c      	ldr	r2, [pc, #496]	; (80037f0 <HAL_ADC_IRQHandler+0x558>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d106      	bne.n	8003610 <HAL_ADC_IRQHandler+0x378>
 8003602:	4b7c      	ldr	r3, [pc, #496]	; (80037f4 <HAL_ADC_IRQHandler+0x55c>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b06      	cmp	r3, #6
 800360c:	d027      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 800360e:	e005      	b.n	800361c <HAL_ADC_IRQHandler+0x384>
 8003610:	4b79      	ldr	r3, [pc, #484]	; (80037f8 <HAL_ADC_IRQHandler+0x560>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	2b06      	cmp	r3, #6
 800361a:	d020      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADC_IRQHandler+0x398>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a71      	ldr	r2, [pc, #452]	; (80037f0 <HAL_ADC_IRQHandler+0x558>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d106      	bne.n	800363e <HAL_ADC_IRQHandler+0x3a6>
 8003630:	4b70      	ldr	r3, [pc, #448]	; (80037f4 <HAL_ADC_IRQHandler+0x55c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2b07      	cmp	r3, #7
 800363a:	d010      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 800363c:	e005      	b.n	800364a <HAL_ADC_IRQHandler+0x3b2>
 800363e:	4b6e      	ldr	r3, [pc, #440]	; (80037f8 <HAL_ADC_IRQHandler+0x560>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2b07      	cmp	r3, #7
 8003648:	d009      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003652:	d004      	beq.n	800365e <HAL_ADC_IRQHandler+0x3c6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a64      	ldr	r2, [pc, #400]	; (80037ec <HAL_ADC_IRQHandler+0x554>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d104      	bne.n	8003668 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e00f      	b.n	8003688 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003670:	d004      	beq.n	800367c <HAL_ADC_IRQHandler+0x3e4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_ADC_IRQHandler+0x558>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_ADC_IRQHandler+0x3ea>
 800367c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003680:	e000      	b.n	8003684 <HAL_ADC_IRQHandler+0x3ec>
 8003682:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <HAL_ADC_IRQHandler+0x554>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d12d      	bne.n	80036ee <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11a      	bne.n	80036d6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ae:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d112      	bne.n	80036ee <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
 80036d4:	e00b      	b.n	80036ee <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f948 	bl	8003984 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2260      	movs	r2, #96	; 0x60
 80036fa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d113      	bne.n	8003732 <HAL_ADC_IRQHandler+0x49a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d10c      	bne.n	8003732 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff faa7 	bl	8002c78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003740:	d115      	bne.n	800376e <HAL_ADC_IRQHandler+0x4d6>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003750:	d10d      	bne.n	800376e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f924 	bl	80039ac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377c:	d115      	bne.n	80037aa <HAL_ADC_IRQHandler+0x512>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378c:	d10d      	bne.n	80037aa <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f910 	bl	80039c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d151      	bne.n	800385c <HAL_ADC_IRQHandler+0x5c4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d14a      	bne.n	800385c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80037ce:	2301      	movs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e02d      	b.n	8003830 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037dc:	d004      	beq.n	80037e8 <HAL_ADC_IRQHandler+0x550>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_ADC_IRQHandler+0x558>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <HAL_ADC_IRQHandler+0x564>
 80037e8:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <HAL_ADC_IRQHandler+0x55c>)
 80037ea:	e008      	b.n	80037fe <HAL_ADC_IRQHandler+0x566>
 80037ec:	50000400 	.word	0x50000400
 80037f0:	50000100 	.word	0x50000100
 80037f4:	50000300 	.word	0x50000300
 80037f8:	50000700 	.word	0x50000700
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_ADC_IRQHandler+0x614>)
 80037fe:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10a      	bne.n	8003830 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800381a:	2301      	movs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e007      	b.n	8003830 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800382c:	2301      	movs	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d10e      	bne.n	8003854 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fa1c 	bl	8002c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2210      	movs	r2, #16
 800385a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d11b      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x60c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d113      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	f043 0208 	orr.w	r2, r3, #8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f87a 	bl	8003998 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80038a4:	bf00      	nop
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	50000700 	.word	0x50000700

080038b0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_ADCEx_Calibration_Start+0x1c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e057      	b.n	800397c <HAL_ADCEx_Calibration_Start+0xcc>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fd1f 	bl	8004318 <ADC_Disable>
 80038da:	4603      	mov	r3, r0
 80038dc:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d146      	bne.n	8003972 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80038f8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800390e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800391e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003920:	f7ff f968 	bl	8002bf4 <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003926:	e014      	b.n	8003952 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003928:	f7ff f964 	bl	8002bf4 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d90d      	bls.n	8003952 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f023 0312 	bic.w	r3, r3, #18
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e014      	b.n	800397c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800395c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003960:	d0e2      	beq.n	8003928 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f023 0303 	bic.w	r3, r3, #3
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b09b      	sub	sp, #108	; 0x6c
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x22>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e2cb      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x5ba>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 82af 	bne.w	8003f6c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d81c      	bhi.n	8003a50 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	461a      	mov	r2, r3
 8003a2a:	231f      	movs	r3, #31
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4019      	ands	r1, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4e:	e063      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	d81e      	bhi.n	8003a96 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	3b1e      	subs	r3, #30
 8003a6c:	221f      	movs	r2, #31
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	4019      	ands	r1, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	3b1e      	subs	r3, #30
 8003a88:	fa00 f203 	lsl.w	r2, r0, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34
 8003a94:	e040      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b0e      	cmp	r3, #14
 8003a9c:	d81e      	bhi.n	8003adc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	3b3c      	subs	r3, #60	; 0x3c
 8003ab2:	221f      	movs	r2, #31
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4019      	ands	r1, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	3b3c      	subs	r3, #60	; 0x3c
 8003ace:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8003ada:	e01d      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	3b5a      	subs	r3, #90	; 0x5a
 8003af0:	221f      	movs	r2, #31
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	4019      	ands	r1, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	3b5a      	subs	r3, #90	; 0x5a
 8003b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 80e5 	bne.w	8003cf2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b09      	cmp	r3, #9
 8003b2e:	d91c      	bls.n	8003b6a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	3b1e      	subs	r3, #30
 8003b42:	2207      	movs	r2, #7
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	4019      	ands	r1, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6898      	ldr	r0, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	3b1e      	subs	r3, #30
 8003b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	e019      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6959      	ldr	r1, [r3, #20]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	4019      	ands	r1, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6898      	ldr	r0, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	fa00 f203 	lsl.w	r2, r0, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d84f      	bhi.n	8003c60 <HAL_ADC_ConfigChannel+0x28c>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_ADC_ConfigChannel+0x1f4>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003c1d 	.word	0x08003c1d
 8003bd4:	08003c3f 	.word	0x08003c3f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bde:	4b9f      	ldr	r3, [pc, #636]	; (8003e5c <HAL_ADC_ConfigChannel+0x488>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	0691      	lsls	r1, r2, #26
 8003be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bea:	430a      	orrs	r2, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bf6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003bf8:	e07e      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c00:	4b96      	ldr	r3, [pc, #600]	; (8003e5c <HAL_ADC_ConfigChannel+0x488>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	0691      	lsls	r1, r2, #26
 8003c0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c18:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c1a:	e06d      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c22:	4b8e      	ldr	r3, [pc, #568]	; (8003e5c <HAL_ADC_ConfigChannel+0x488>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	0691      	lsls	r1, r2, #26
 8003c2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c3a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c3c:	e05c      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c44:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_ADC_ConfigChannel+0x488>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	0691      	lsls	r1, r2, #26
 8003c4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c50:	430a      	orrs	r2, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c5c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c5e:	e04b      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	069b      	lsls	r3, r3, #26
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	069b      	lsls	r3, r3, #26
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d107      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ca6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	069b      	lsls	r3, r3, #26
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	069b      	lsls	r3, r3, #26
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d10a      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003cf0:	e001      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003cf6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d108      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x344>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x344>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x346>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 8131 	bne.w	8003f82 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d00f      	beq.n	8003d48 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2201      	movs	r2, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	400a      	ands	r2, r1
 8003d42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003d46:	e049      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	409a      	lsls	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	d91c      	bls.n	8003da4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6999      	ldr	r1, [r3, #24]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	3b1b      	subs	r3, #27
 8003d7c:	2207      	movs	r2, #7
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	4019      	ands	r1, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6898      	ldr	r0, [r3, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	3b1b      	subs	r3, #27
 8003d96:	fa00 f203 	lsl.w	r2, r0, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	e01b      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6959      	ldr	r1, [r3, #20]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	2207      	movs	r2, #7
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	4019      	ands	r1, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6898      	ldr	r0, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de4:	d004      	beq.n	8003df0 <HAL_ADC_ConfigChannel+0x41c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_ADC_ConfigChannel+0x48c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x420>
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <HAL_ADC_ConfigChannel+0x490>)
 8003df2:	e000      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x422>
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <HAL_ADC_ConfigChannel+0x494>)
 8003df6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d105      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e10:	2b11      	cmp	r3, #17
 8003e12:	d105      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e24:	2b12      	cmp	r3, #18
 8003e26:	f040 80ac 	bne.w	8003f82 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 80a5 	bne.w	8003f82 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e40:	d102      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x474>
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_ADC_ConfigChannel+0x48c>)
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e023      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x4bc>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_ADC_ConfigChannel+0x48c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10c      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x498>
 8003e52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e01a      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x4bc>
 8003e5a:	bf00      	nop
 8003e5c:	83fff000 	.word	0x83fff000
 8003e60:	50000100 	.word	0x50000100
 8003e64:	50000300 	.word	0x50000300
 8003e68:	50000700 	.word	0x50000700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_ADC_ConfigChannel+0x5c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d102      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x4a8>
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e009      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x4bc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d102      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x4b8>
 8003e86:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <HAL_ADC_ConfigChannel+0x5c8>)
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e001      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x4bc>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x4dc>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x4dc>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x4de>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d150      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x504>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x504>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_ADC_ConfigChannel+0x506>
 8003ed8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d13c      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d11d      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x54e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eee:	d118      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_ADC_ConfigChannel+0x5d0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_ADC_ConfigChannel+0x5d4>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	0c9a      	lsrs	r2, r3, #18
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f12:	e002      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f9      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f20:	e02e      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b11      	cmp	r3, #17
 8003f28:	d10b      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x56e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f32:	d106      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f40:	e01e      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b12      	cmp	r3, #18
 8003f48:	d11a      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f54:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f56:	e013      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f6a:	e00a      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f7e:	e000      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f80:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	376c      	adds	r7, #108	; 0x6c
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	50000400 	.word	0x50000400
 8003fa0:	50000500 	.word	0x50000500
 8003fa4:	20000004 	.word	0x20000004
 8003fa8:	431bde83 	.word	0x431bde83

08003fac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b099      	sub	sp, #100	; 0x64
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fc4:	d102      	bne.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003fc6:	4b6d      	ldr	r3, [pc, #436]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	e01a      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6a      	ldr	r2, [pc, #424]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d103      	bne.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003fd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	e011      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a67      	ldr	r2, [pc, #412]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d102      	bne.n	8003fee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	e009      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a64      	ldr	r2, [pc, #400]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d102      	bne.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ff8:	4b61      	ldr	r3, [pc, #388]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	e001      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b0      	b.n	800416e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004016:	2302      	movs	r3, #2
 8004018:	e0a9      	b.n	800416e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 808d 	bne.w	800414c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 8086 	bne.w	800414c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004048:	d004      	beq.n	8004054 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a4b      	ldr	r2, [pc, #300]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d101      	bne.n	8004058 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004054:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004056:	e000      	b.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004058:	4b4c      	ldr	r3, [pc, #304]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800405a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d040      	beq.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004076:	035b      	lsls	r3, r3, #13
 8004078:	430b      	orrs	r3, r1
 800407a:	431a      	orrs	r2, r3
 800407c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800407e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d108      	bne.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d15c      	bne.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80040c2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d14b      	bne.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80040c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040d0:	f023 030f 	bic.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	6811      	ldr	r1, [r2, #0]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	430a      	orrs	r2, r1
 80040de:	431a      	orrs	r2, r3
 80040e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e4:	e03c      	b.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d108      	bne.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d123      	bne.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004134:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	d112      	bne.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800413a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004142:	f023 030f 	bic.w	r3, r3, #15
 8004146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004148:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800414a:	e009      	b.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800415e:	e000      	b.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004160:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800416a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800416e:	4618      	mov	r0, r3
 8004170:	3764      	adds	r7, #100	; 0x64
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	50000100 	.word	0x50000100
 8004180:	50000400 	.word	0x50000400
 8004184:	50000500 	.word	0x50000500
 8004188:	50000300 	.word	0x50000300
 800418c:	50000700 	.word	0x50000700

08004190 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d126      	bne.n	80041f8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d115      	bne.n	80041f0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d111      	bne.n	80041f0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7fe fd2d 	bl	8002c50 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80041f6:	e004      	b.n	8004202 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7fe fd23 	bl	8002c64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7fe fd1d 	bl	8002c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <ADC_Enable+0x2c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <ADC_Enable+0x2c>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <ADC_Enable+0x2e>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d13c      	bne.n	8004308 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <ADC_Enable+0xb8>)
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0210 	orr.w	r2, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e028      	b.n	800430a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80042c8:	f7fe fc94 	bl	8002bf4 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042ce:	e014      	b.n	80042fa <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042d0:	f7fe fc90 	bl	8002bf4 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d90d      	bls.n	80042fa <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0210 	orr.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d1e3      	bne.n	80042d0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	8000003f 	.word	0x8000003f

08004318 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d108      	bne.n	8004344 <ADC_Disable+0x2c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <ADC_Disable+0x2c>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <ADC_Disable+0x2e>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d040      	beq.n	80043cc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030d 	and.w	r3, r3, #13
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10f      	bne.n	8004378 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0202 	orr.w	r2, r2, #2
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2203      	movs	r2, #3
 800436e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004370:	f7fe fc40 	bl	8002bf4 <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004376:	e022      	b.n	80043be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f043 0210 	orr.w	r2, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e01c      	b.n	80043ce <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004394:	f7fe fc2e 	bl	8002bf4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d90d      	bls.n	80043be <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0210 	orr.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d0e3      	beq.n	8004394 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_COMP_Init+0x22>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
 80043fe:	e064      	b.n	80044ca <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004400:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_COMP_Init+0xfc>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <HAL_COMP_Init+0xfc>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6193      	str	r3, [r2, #24]
 800440c:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_COMP_Init+0xfc>)
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd ff09 	bl	8002230 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 020c 	bic.w	r2, r3, #12
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000

080044d8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_COMP_Start+0x26>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	e0c4      	b.n	800468e <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	f040 80bc 	bne.w	800468a <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_COMP_Start+0x1c4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d028      	beq.n	800456e <HAL_COMP_Start+0x96>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <HAL_COMP_Start+0x1c8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d020      	beq.n	8004568 <HAL_COMP_Start+0x90>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_COMP_Start+0x1cc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d018      	beq.n	8004562 <HAL_COMP_Start+0x8a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5c      	ldr	r2, [pc, #368]	; (80046a8 <HAL_COMP_Start+0x1d0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d010      	beq.n	800455c <HAL_COMP_Start+0x84>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5b      	ldr	r2, [pc, #364]	; (80046ac <HAL_COMP_Start+0x1d4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d008      	beq.n	8004556 <HAL_COMP_Start+0x7e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a59      	ldr	r2, [pc, #356]	; (80046b0 <HAL_COMP_Start+0x1d8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_COMP_Start+0x7a>
 800454e:	2301      	movs	r3, #1
 8004550:	e00f      	b.n	8004572 <HAL_COMP_Start+0x9a>
 8004552:	2302      	movs	r3, #2
 8004554:	e00d      	b.n	8004572 <HAL_COMP_Start+0x9a>
 8004556:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800455a:	e00a      	b.n	8004572 <HAL_COMP_Start+0x9a>
 800455c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004560:	e007      	b.n	8004572 <HAL_COMP_Start+0x9a>
 8004562:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004566:	e004      	b.n	8004572 <HAL_COMP_Start+0x9a>
 8004568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800456c:	e001      	b.n	8004572 <HAL_COMP_Start+0x9a>
 800456e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004572:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d077      	beq.n	8004670 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <HAL_COMP_Start+0xcc>
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459a:	4946      	ldr	r1, [pc, #280]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	628b      	str	r3, [r1, #40]	; 0x28
 80045a2:	e01a      	b.n	80045da <HAL_COMP_Start+0x102>
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4942      	ldr	r1, [pc, #264]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
 80045b0:	e013      	b.n	80045da <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_COMP_Start+0xf4>
 80045bc:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	493b      	ldr	r1, [pc, #236]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	628b      	str	r3, [r1, #40]	; 0x28
 80045ca:	e006      	b.n	80045da <HAL_COMP_Start+0x102>
 80045cc:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	4937      	ldr	r1, [pc, #220]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d012      	beq.n	800460c <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d006      	beq.n	80045fe <HAL_COMP_Start+0x126>
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	492f      	ldr	r1, [pc, #188]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80045fc:	e01a      	b.n	8004634 <HAL_COMP_Start+0x15c>
 80045fe:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	492c      	ldr	r1, [pc, #176]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4313      	orrs	r3, r2
 8004608:	60cb      	str	r3, [r1, #12]
 800460a:	e013      	b.n	8004634 <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_COMP_Start+0x14e>
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	43db      	mvns	r3, r3
 800461e:	4925      	ldr	r1, [pc, #148]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004620:	4013      	ands	r3, r2
 8004622:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004624:	e006      	b.n	8004634 <HAL_COMP_Start+0x15c>
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	43db      	mvns	r3, r3
 800462e:	4921      	ldr	r1, [pc, #132]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004630:	4013      	ands	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <HAL_COMP_Start+0x174>
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004642:	491c      	ldr	r1, [pc, #112]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	624b      	str	r3, [r1, #36]	; 0x24
 800464a:	e005      	b.n	8004658 <HAL_COMP_Start+0x180>
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4918      	ldr	r1, [pc, #96]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_COMP_Start+0x192>
 8004662:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6353      	str	r3, [r2, #52]	; 0x34
 8004668:	e002      	b.n	8004670 <HAL_COMP_Start+0x198>
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <HAL_COMP_Start+0x1dc>)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004688:	e001      	b.n	800468e <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	4001001c 	.word	0x4001001c
 80046a0:	40010020 	.word	0x40010020
 80046a4:	40010024 	.word	0x40010024
 80046a8:	40010028 	.word	0x40010028
 80046ac:	4001002c 	.word	0x4001002c
 80046b0:	40010030 	.word	0x40010030
 80046b4:	40010400 	.word	0x40010400

080046b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <__NVIC_SetPriorityGrouping+0x44>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046d4:	4013      	ands	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ea:	4a04      	ldr	r2, [pc, #16]	; (80046fc <__NVIC_SetPriorityGrouping+0x44>)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	60d3      	str	r3, [r2, #12]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <__NVIC_GetPriorityGrouping+0x18>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 0307 	and.w	r3, r3, #7
}
 800470e:	4618      	mov	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db0b      	blt.n	8004746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	4907      	ldr	r1, [pc, #28]	; (8004754 <__NVIC_EnableIRQ+0x38>)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2001      	movs	r0, #1
 800473e:	fa00 f202 	lsl.w	r2, r0, r2
 8004742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	e000e100 	.word	0xe000e100

08004758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004768:	2b00      	cmp	r3, #0
 800476a:	db0a      	blt.n	8004782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	b2da      	uxtb	r2, r3
 8004770:	490c      	ldr	r1, [pc, #48]	; (80047a4 <__NVIC_SetPriority+0x4c>)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	440b      	add	r3, r1
 800477c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004780:	e00a      	b.n	8004798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	4908      	ldr	r1, [pc, #32]	; (80047a8 <__NVIC_SetPriority+0x50>)
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	3b04      	subs	r3, #4
 8004790:	0112      	lsls	r2, r2, #4
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	440b      	add	r3, r1
 8004796:	761a      	strb	r2, [r3, #24]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	e000e100 	.word	0xe000e100
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f1c3 0307 	rsb	r3, r3, #7
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	bf28      	it	cs
 80047ca:	2304      	movcs	r3, #4
 80047cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d902      	bls.n	80047dc <NVIC_EncodePriority+0x30>
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3b03      	subs	r3, #3
 80047da:	e000      	b.n	80047de <NVIC_EncodePriority+0x32>
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e0:	f04f 32ff 	mov.w	r2, #4294967295
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43da      	mvns	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	401a      	ands	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f4:	f04f 31ff 	mov.w	r1, #4294967295
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	fa01 f303 	lsl.w	r3, r1, r3
 80047fe:	43d9      	mvns	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004804:	4313      	orrs	r3, r2
         );
}
 8004806:	4618      	mov	r0, r3
 8004808:	3724      	adds	r7, #36	; 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ff4c 	bl	80046b8 <__NVIC_SetPriorityGrouping>
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800483a:	f7ff ff61 	bl	8004700 <__NVIC_GetPriorityGrouping>
 800483e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	6978      	ldr	r0, [r7, #20]
 8004846:	f7ff ffb1 	bl	80047ac <NVIC_EncodePriority>
 800484a:	4602      	mov	r2, r0
 800484c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ff80 	bl	8004758 <__NVIC_SetPriority>
}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff54 	bl	800471c <__NVIC_EnableIRQ>
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e037      	b.n	8004902 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048ac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f941 	bl	8004b6c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}  
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_DMA_Start_IT+0x20>
 8004926:	2302      	movs	r3, #2
 8004928:	e04a      	b.n	80049c0 <HAL_DMA_Start_IT+0xb6>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004938:	2b01      	cmp	r3, #1
 800493a:	d13a      	bne.n	80049b2 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f8d4 	bl	8004b0e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 020e 	orr.w	r2, r2, #14
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e00f      	b.n	80049a0 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 020a 	orr.w	r2, r2, #10
 800498e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0204 	bic.w	r2, r2, #4
 800499e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	e005      	b.n	80049be <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
 80049bc:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80049be:	7dfb      	ldrb	r3, [r7, #23]
} 
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	2204      	movs	r2, #4
 80049e6:	409a      	lsls	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d024      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x72>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01f      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0204 	bic.w	r2, r2, #4
 8004a16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	2104      	movs	r1, #4
 8004a22:	fa01 f202 	lsl.w	r2, r1, r2
 8004a26:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d06a      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	e065      	b.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2202      	movs	r2, #2
 8004a40:	409a      	lsls	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d02c      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0xdc>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d027      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 020a 	bic.w	r2, r2, #10
 8004a70:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	2102      	movs	r1, #2
 8004a84:	fa01 f202 	lsl.w	r2, r1, r2
 8004a88:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d035      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004aa2:	e030      	b.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d028      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d023      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 020e 	bic.w	r2, r2, #14
 8004acc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8004adc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
    }
  }
}  
 8004b04:	e7ff      	b.n	8004b06 <HAL_DMA_IRQHandler+0x13e>
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d108      	bne.n	8004b4e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b4c:	e007      	b.n	8004b5e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	60da      	str	r2, [r3, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <DMA_CalcBaseAndBitshift+0x60>)
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d80f      	bhi.n	8004ba0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x6c>)
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004b9e:	e00e      	b.n	8004bbe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <DMA_CalcBaseAndBitshift+0x70>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	009a      	lsls	r2, r3, #2
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <DMA_CalcBaseAndBitshift+0x74>)
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40020407 	.word	0x40020407
 8004bd0:	bffdfff8 	.word	0xbffdfff8
 8004bd4:	cccccccd 	.word	0xcccccccd
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	bffdfbf8 	.word	0xbffdfbf8
 8004be0:	40020400 	.word	0x40020400

08004be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bf2:	e154      	b.n	8004e9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8146 	beq.w	8004e98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x38>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b12      	cmp	r3, #18
 8004c1a:	d123      	bne.n	8004c64 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	08da      	lsrs	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3208      	adds	r2, #8
 8004c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	220f      	movs	r2, #15
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	08da      	lsrs	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3208      	adds	r2, #8
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0203 	and.w	r2, r3, #3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_GPIO_Init+0xd4>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d007      	beq.n	8004cb8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cac:	2b11      	cmp	r3, #17
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b12      	cmp	r3, #18
 8004cb6:	d130      	bne.n	8004d1a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cee:	2201      	movs	r2, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0201 	and.w	r2, r3, #1
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	2203      	movs	r2, #3
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80a0 	beq.w	8004e98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d58:	4b58      	ldr	r3, [pc, #352]	; (8004ebc <HAL_GPIO_Init+0x2d8>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4a57      	ldr	r2, [pc, #348]	; (8004ebc <HAL_GPIO_Init+0x2d8>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6193      	str	r3, [r2, #24]
 8004d64:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <HAL_GPIO_Init+0x2d8>)
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d70:	4a53      	ldr	r2, [pc, #332]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	3302      	adds	r3, #2
 8004d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	220f      	movs	r2, #15
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d9a:	d019      	beq.n	8004dd0 <HAL_GPIO_Init+0x1ec>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a49      	ldr	r2, [pc, #292]	; (8004ec4 <HAL_GPIO_Init+0x2e0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <HAL_GPIO_Init+0x1e8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a48      	ldr	r2, [pc, #288]	; (8004ec8 <HAL_GPIO_Init+0x2e4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00d      	beq.n	8004dc8 <HAL_GPIO_Init+0x1e4>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a47      	ldr	r2, [pc, #284]	; (8004ecc <HAL_GPIO_Init+0x2e8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <HAL_GPIO_Init+0x1e0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a46      	ldr	r2, [pc, #280]	; (8004ed0 <HAL_GPIO_Init+0x2ec>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_GPIO_Init+0x1dc>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	e008      	b.n	8004dd2 <HAL_GPIO_Init+0x1ee>
 8004dc0:	2305      	movs	r3, #5
 8004dc2:	e006      	b.n	8004dd2 <HAL_GPIO_Init+0x1ee>
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e004      	b.n	8004dd2 <HAL_GPIO_Init+0x1ee>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e002      	b.n	8004dd2 <HAL_GPIO_Init+0x1ee>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_GPIO_Init+0x1ee>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	f002 0203 	and.w	r2, r2, #3
 8004dd8:	0092      	lsls	r2, r2, #2
 8004dda:	4093      	lsls	r3, r2
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004de2:	4937      	ldr	r1, [pc, #220]	; (8004ec0 <HAL_GPIO_Init+0x2dc>)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	3302      	adds	r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004df0:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e14:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e3e:	4a25      	ldr	r2, [pc, #148]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e44:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e6e:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f aea3 	bne.w	8004bf4 <HAL_GPIO_Init+0x10>
  }
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	48000400 	.word	0x48000400
 8004ec8:	48000800 	.word	0x48000800
 8004ecc:	48000c00 	.word	0x48000c00
 8004ed0:	48001000 	.word	0x48001000
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e081      	b.n	8004fee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fd fa2c 	bl	800235c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	; 0x24
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	e006      	b.n	8004f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d104      	bne.n	8004f72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	ea42 0103 	orr.w	r1, r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b20      	cmp	r3, #32
 800500a:	d138      	bne.n	800507e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005016:	2302      	movs	r3, #2
 8005018:	e032      	b.n	8005080 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2224      	movs	r2, #36	; 0x24
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005048:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d139      	bne.n	8005116 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e033      	b.n	8005118 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e092      	b.n	8005260 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b05      	cmp	r3, #5
 8005144:	d101      	bne.n	800514a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e08a      	b.n	8005260 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d101      	bne.n	800515a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e082      	b.n	8005260 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_OPAMP_Init+0x144>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <HAL_OPAMP_Init+0x144>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6193      	str	r3, [r2, #24]
 8005172:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <HAL_OPAMP_Init+0x144>)
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd f99a 	bl	80024cc <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d003      	beq.n	80051a8 <HAL_OPAMP_Init+0x84>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b60      	cmp	r3, #96	; 0x60
 80051a6:	d125      	bne.n	80051f4 <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <HAL_OPAMP_Init+0x148>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6851      	ldr	r1, [r2, #4]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68d2      	ldr	r2, [r2, #12]
 80051ba:	4311      	orrs	r1, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6912      	ldr	r2, [r2, #16]
 80051c0:	4311      	orrs	r1, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6992      	ldr	r2, [r2, #24]
 80051c6:	4311      	orrs	r1, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	69d2      	ldr	r2, [r2, #28]
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6a12      	ldr	r2, [r2, #32]
 80051d2:	4311      	orrs	r1, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051d8:	4311      	orrs	r1, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051de:	04d2      	lsls	r2, r2, #19
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051e6:	0612      	lsls	r2, r2, #24
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e02a      	b.n	800524a <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <HAL_OPAMP_Init+0x148>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6851      	ldr	r1, [r2, #4]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6892      	ldr	r2, [r2, #8]
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68d2      	ldr	r2, [r2, #12]
 800520c:	4311      	orrs	r1, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6912      	ldr	r2, [r2, #16]
 8005212:	4311      	orrs	r1, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6952      	ldr	r2, [r2, #20]
 8005218:	4311      	orrs	r1, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6992      	ldr	r2, [r2, #24]
 800521e:	4311      	orrs	r1, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	69d2      	ldr	r2, [r2, #28]
 8005224:	4311      	orrs	r1, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6a12      	ldr	r2, [r2, #32]
 800522a:	4311      	orrs	r1, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005230:	4311      	orrs	r1, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005236:	04d2      	lsls	r2, r2, #19
 8005238:	4311      	orrs	r1, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800523e:	0612      	lsls	r2, r2, #24
 8005240:	4311      	orrs	r1, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	430b      	orrs	r3, r1
 8005248:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	e0003811 	.word	0xe0003811

08005270 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	e01d      	b.n	80052c4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b05      	cmp	r3, #5
 8005292:	d102      	bne.n	800529a <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e014      	b.n	80052c4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d10c      	bne.n	80052c0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80052be:	e001      	b.n	80052c4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f004 ff98 	bl	800a214 <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ee:	d102      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fa91 	bl	8005818 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f004 ff8a 	bl	800a214 <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d112      	bne.n	8005332 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531e:	b292      	uxth	r2, r2
 8005320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f006 fa3e 	bl	800b7a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800532a:	2100      	movs	r1, #0
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f8d2 	bl	80054d6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f004 ff6c 	bl	800a214 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005346:	d10b      	bne.n	8005360 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800535a:	b292      	uxth	r2, r2
 800535c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f004 ff55 	bl	800a214 <USB_ReadInterrupts>
 800536a:	4603      	mov	r3, r0
 800536c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005374:	d10b      	bne.n	800538e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005388:	b292      	uxth	r2, r2
 800538a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f004 ff3e 	bl	800a214 <USB_ReadInterrupts>
 8005398:	4603      	mov	r3, r0
 800539a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a2:	d126      	bne.n	80053f2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	b292      	uxth	r2, r2
 80053b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0208 	bic.w	r2, r2, #8
 80053ce:	b292      	uxth	r2, r2
 80053d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f006 fa1f 	bl	800b818 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ec:	b292      	uxth	r2, r2
 80053ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f004 ff0c 	bl	800a214 <USB_ReadInterrupts>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005406:	d131      	bne.n	800546c <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	b292      	uxth	r2, r2
 800541c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005432:	b292      	uxth	r2, r2
 8005434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0204 	orr.w	r2, r2, #4
 800544a:	b292      	uxth	r2, r2
 800544c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fedd 	bl	800a214 <USB_ReadInterrupts>
 800545a:	4603      	mov	r3, r0
 800545c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005464:	d002      	beq.n	800546c <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f006 f9bc 	bl	800b7e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f004 fecf 	bl	800a214 <USB_ReadInterrupts>
 8005476:	4603      	mov	r3, r0
 8005478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005480:	d10e      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005494:	b292      	uxth	r2, r2
 8005496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f006 f975 	bl	800b78a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f004 feb5 	bl	800a214 <USB_ReadInterrupts>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b4:	d10b      	bne.n	80054ce <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c8:	b292      	uxth	r2, r2
 80054ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_PCD_SetAddress+0x1a>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e013      	b.n	8005518 <HAL_PCD_SetAddress+0x42>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f004 fe6f 	bl	800a1ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	70fb      	strb	r3, [r7, #3]
 8005532:	460b      	mov	r3, r1
 8005534:	803b      	strh	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800553e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0b      	bge.n	800555e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	015b      	lsls	r3, r3, #5
 800554e:	3328      	adds	r3, #40	; 0x28
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	705a      	strb	r2, [r3, #1]
 800555c:	e00b      	b.n	8005576 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	015b      	lsls	r3, r3, #5
 8005566:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005582:	883a      	ldrh	r2, [r7, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	78ba      	ldrb	r2, [r7, #2]
 800558c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055a0:	78bb      	ldrb	r3, [r7, #2]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d102      	bne.n	80055ac <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_PCD_EP_Open+0x9a>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e00e      	b.n	80055d8 <HAL_PCD_EP_Open+0xb8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f003 ff73 	bl	80094b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80055d6:	7afb      	ldrb	r3, [r7, #11]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	460b      	mov	r3, r1
 80055ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055f0:	7afb      	ldrb	r3, [r7, #11]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	b2da      	uxtb	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005626:	7afb      	ldrb	r3, [r7, #11]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	4618      	mov	r0, r3
 8005638:	f004 fa30 	bl	8009a9c <USB_EPStartXfer>
 800563c:	e005      	b.n	800564a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	4618      	mov	r0, r3
 8005646:	f004 fa29 	bl	8009a9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	460b      	mov	r3, r1
 8005662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	015b      	lsls	r3, r3, #5
 800566c:	3328      	adds	r3, #40	; 0x28
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2201      	movs	r2, #1
 800568a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800568c:	7afb      	ldrb	r3, [r7, #11]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	b2da      	uxtb	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f004 f9f7 	bl	8009a9c <USB_EPStartXfer>
 80056ae:	e005      	b.n	80056bc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f004 f9f0 	bl	8009a9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	f003 0207 	and.w	r2, r3, #7
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d901      	bls.n	80056e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e046      	b.n	8005772 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da0b      	bge.n	8005704 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	015b      	lsls	r3, r3, #5
 80056f4:	3328      	adds	r3, #40	; 0x28
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	705a      	strb	r2, [r3, #1]
 8005702:	e009      	b.n	8005718 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015b      	lsls	r3, r3, #5
 8005708:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_PCD_EP_SetStall+0x72>
 8005734:	2302      	movs	r3, #2
 8005736:	e01c      	b.n	8005772 <HAL_PCD_EP_SetStall+0xac>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	4618      	mov	r0, r3
 8005748:	f004 fc7a 	bl	800a040 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d108      	bne.n	8005768 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f004 fd66 	bl	800a234 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d901      	bls.n	8005798 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e03a      	b.n	800580e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da0b      	bge.n	80057b8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	015b      	lsls	r3, r3, #5
 80057a8:	3328      	adds	r3, #40	; 0x28
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	705a      	strb	r2, [r3, #1]
 80057b6:	e00b      	b.n	80057d0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	015b      	lsls	r3, r3, #5
 80057c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4413      	add	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_EP_ClrStall+0x76>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e00e      	b.n	800580e <HAL_PCD_EP_ClrStall+0x94>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	4618      	mov	r0, r3
 8005800:	f004 fc60 	bl	800a0c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b089      	sub	sp, #36	; 0x24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005820:	e286      	b.n	8005d30 <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800582a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800582c:	8afb      	ldrh	r3, [r7, #22]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8005836:	7d7b      	ldrb	r3, [r7, #21]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 8146 	bne.w	8005aca <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800583e:	8afb      	ldrh	r3, [r7, #22]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d151      	bne.n	80058ec <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005858:	b29c      	uxth	r4, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3328      	adds	r3, #40	; 0x28
 800586e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	3302      	adds	r3, #2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	441a      	add	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80058aa:	2100      	movs	r1, #0
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f005 ff55 	bl	800b75c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8238 	beq.w	8005d30 <PCD_EP_ISR_Handler+0x518>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 8233 	bne.w	8005d30 <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b292      	uxth	r2, r2
 80058de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058ea:	e221      	b.n	8005d30 <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058f2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80058fc:	8a7b      	ldrh	r3, [r7, #18]
 80058fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005902:	2b00      	cmp	r3, #0
 8005904:	d033      	beq.n	800596e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	3306      	adds	r3, #6
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005944:	b29b      	uxth	r3, r3
 8005946:	f004 fcc6 	bl	800a2d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29a      	uxth	r2, r3
 8005952:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005956:	4013      	ands	r3, r2
 8005958:	b29c      	uxth	r4, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005962:	b292      	uxth	r2, r2
 8005964:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f005 fece 	bl	800b708 <HAL_PCD_SetupStageCallback>
 800596c:	e1e0      	b.n	8005d30 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800596e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f280 81dc 	bge.w	8005d30 <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29a      	uxth	r2, r3
 8005980:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005984:	4013      	ands	r3, r2
 8005986:	b29c      	uxth	r4, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005990:	b292      	uxth	r2, r2
 8005992:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4413      	add	r3, r2
 80059a8:	3306      	adds	r3, #6
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d019      	beq.n	80059fc <PCD_EP_ISR_Handler+0x1e4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d015      	beq.n	80059fc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6959      	ldr	r1, [r3, #20]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f004 fc78 	bl	800a2d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f005 fe98 	bl	800b72c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461c      	mov	r4, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	441c      	add	r4, r3
 8005a0e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d110      	bne.n	8005a3e <PCD_EP_ISR_Handler+0x226>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	e02f      	b.n	8005a9e <PCD_EP_ISR_Handler+0x286>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b3e      	cmp	r3, #62	; 0x3e
 8005a44:	d813      	bhi.n	8005a6e <PCD_EP_ISR_Handler+0x256>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <PCD_EP_ISR_Handler+0x248>
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	029b      	lsls	r3, r3, #10
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e017      	b.n	8005a9e <PCD_EP_ISR_Handler+0x286>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <PCD_EP_ISR_Handler+0x270>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	b29c      	uxth	r4, r3
 8005ab0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ab4:	b29c      	uxth	r4, r3
 8005ab6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005aba:	b29c      	uxth	r4, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4ba2      	ldr	r3, [pc, #648]	; (8005d4c <PCD_EP_ISR_Handler+0x534>)
 8005ac2:	4323      	orrs	r3, r4
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]
 8005ac8:	e132      	b.n	8005d30 <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	7d7b      	ldrb	r3, [r7, #21]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ada:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f280 80d1 	bge.w	8005c86 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	7d7b      	ldrb	r3, [r7, #21]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005af8:	4013      	ands	r3, r2
 8005afa:	b29c      	uxth	r4, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	7d7b      	ldrb	r3, [r7, #21]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005b10:	7d7b      	ldrb	r3, [r7, #21]
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	7b1b      	ldrb	r3, [r3, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d121      	bne.n	8005b6a <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	3306      	adds	r3, #6
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8005b50:	8bfb      	ldrh	r3, [r7, #30]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d072      	beq.n	8005c3c <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6959      	ldr	r1, [r3, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	88da      	ldrh	r2, [r3, #6]
 8005b62:	8bfb      	ldrh	r3, [r7, #30]
 8005b64:	f004 fbb7 	bl	800a2d6 <USB_ReadPMA>
 8005b68:	e068      	b.n	8005c3c <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d021      	beq.n	8005bc8 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	3302      	adds	r3, #2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bac:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005bae:	8bfb      	ldrh	r3, [r7, #30]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02a      	beq.n	8005c0a <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6959      	ldr	r1, [r3, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	891a      	ldrh	r2, [r3, #8]
 8005bc0:	8bfb      	ldrh	r3, [r7, #30]
 8005bc2:	f004 fb88 	bl	800a2d6 <USB_ReadPMA>
 8005bc6:	e020      	b.n	8005c0a <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	3306      	adds	r3, #6
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005bf2:	8bfb      	ldrh	r3, [r7, #30]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	895a      	ldrh	r2, [r3, #10]
 8005c04:	8bfb      	ldrh	r3, [r7, #30]
 8005c06:	f004 fb66 	bl	800a2d6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	b29c      	uxth	r4, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <PCD_EP_ISR_Handler+0x538>)
 8005c36:	4323      	orrs	r3, r4
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	8bfb      	ldrh	r3, [r7, #30]
 8005c42:	441a      	add	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	8bfb      	ldrh	r3, [r7, #30]
 8005c4e:	441a      	add	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <PCD_EP_ISR_Handler+0x44e>
 8005c5c:	8bfa      	ldrh	r2, [r7, #30]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d206      	bcs.n	8005c74 <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f005 fd5d 	bl	800b72c <HAL_PCD_DataOutStageCallback>
 8005c72:	e008      	b.n	8005c86 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	7819      	ldrb	r1, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fcad 	bl	80055e0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c86:	8a7b      	ldrh	r3, [r7, #18]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d04f      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c90:	7d7b      	ldrb	r3, [r7, #21]
 8005c92:	015b      	lsls	r3, r3, #5
 8005c94:	3328      	adds	r3, #40	; 0x28
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	7d7b      	ldrb	r3, [r7, #21]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	b29c      	uxth	r4, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	7d7b      	ldrb	r3, [r7, #21]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8005cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f005 fd20 	bl	800b75c <HAL_PCD_DataInStageCallback>
 8005d1c:	e008      	b.n	8005d30 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fc92 	bl	8005654 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f6ff ad70 	blt.w	8005822 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd90      	pop	{r4, r7, pc}
 8005d4c:	ffff8080 	.word	0xffff8080
 8005d50:	ffff80c0 	.word	0xffff80c0

08005d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d60:	1d3b      	adds	r3, r7, #4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f000 bef4 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 816a 	beq.w	8006052 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d7e:	4bb3      	ldr	r3, [pc, #716]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00c      	beq.n	8005da4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d8a:	4bb0      	ldr	r3, [pc, #704]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d159      	bne.n	8005e4a <HAL_RCC_OscConfig+0xf6>
 8005d96:	4bad      	ldr	r3, [pc, #692]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da2:	d152      	bne.n	8005e4a <HAL_RCC_OscConfig+0xf6>
 8005da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005da8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005db8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	fab3 f383 	clz	r3, r3
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x82>
 8005dd0:	4b9e      	ldr	r3, [pc, #632]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	e015      	b.n	8005e02 <HAL_RCC_OscConfig+0xae>
 8005dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dda:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005de2:	fa93 f3a3 	rbit	r3, r3
 8005de6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005df2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005df6:	fa93 f3a3 	rbit	r3, r3
 8005dfa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005dfe:	4b93      	ldr	r3, [pc, #588]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e06:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005e0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005e0e:	fa92 f2a2 	rbit	r2, r2
 8005e12:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005e16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005e1a:	fab2 f282 	clz	r2, r2
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	f042 0220 	orr.w	r2, r2, #32
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	f002 021f 	and.w	r2, r2, #31
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 810c 	beq.w	8006050 <HAL_RCC_OscConfig+0x2fc>
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 8106 	bne.w	8006050 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f000 be86 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e54:	d106      	bne.n	8005e64 <HAL_RCC_OscConfig+0x110>
 8005e56:	4b7d      	ldr	r3, [pc, #500]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7c      	ldr	r2, [pc, #496]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e030      	b.n	8005ec6 <HAL_RCC_OscConfig+0x172>
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x134>
 8005e6e:	4b77      	ldr	r3, [pc, #476]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a76      	ldr	r2, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b74      	ldr	r3, [pc, #464]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a73      	ldr	r2, [pc, #460]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e01e      	b.n	8005ec6 <HAL_RCC_OscConfig+0x172>
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e92:	d10c      	bne.n	8005eae <HAL_RCC_OscConfig+0x15a>
 8005e94:	4b6d      	ldr	r3, [pc, #436]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a6c      	ldr	r2, [pc, #432]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005e9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	4b6a      	ldr	r3, [pc, #424]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a69      	ldr	r2, [pc, #420]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e00b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x172>
 8005eae:	4b67      	ldr	r3, [pc, #412]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a66      	ldr	r2, [pc, #408]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a63      	ldr	r2, [pc, #396]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ec6:	4b61      	ldr	r3, [pc, #388]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	f023 020f 	bic.w	r2, r3, #15
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	495d      	ldr	r1, [pc, #372]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d059      	beq.n	8005f98 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fe86 	bl	8002bf4 <HAL_GetTick>
 8005ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eec:	e00a      	b.n	8005f04 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eee:	f7fc fe81 	bl	8002bf4 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d902      	bls.n	8005f04 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	f000 be29 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>
 8005f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005f10:	fa93 f3a3 	rbit	r3, r3
 8005f14:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005f18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1c:	fab3 f383 	clz	r3, r3
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d102      	bne.n	8005f36 <HAL_RCC_OscConfig+0x1e2>
 8005f30:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	e015      	b.n	8005f62 <HAL_RCC_OscConfig+0x20e>
 8005f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f4e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005f52:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005f56:	fa93 f3a3 	rbit	r3, r3
 8005f5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f66:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005f6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005f6e:	fa92 f2a2 	rbit	r2, r2
 8005f72:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005f76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005f7a:	fab2 f282 	clz	r2, r2
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	f042 0220 	orr.w	r2, r2, #32
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	f002 021f 	and.w	r2, r2, #31
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ab      	beq.n	8005eee <HAL_RCC_OscConfig+0x19a>
 8005f96:	e05c      	b.n	8006052 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f98:	f7fc fe2c 	bl	8002bf4 <HAL_GetTick>
 8005f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fa2:	f7fc fe27 	bl	8002bf4 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	; 0x64
 8005fb0:	d902      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	f000 bdcf 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>
 8005fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005fc4:	fa93 f3a3 	rbit	r3, r3
 8005fc8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005fcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd0:	fab3 f383 	clz	r3, r3
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d102      	bne.n	8005fea <HAL_RCC_OscConfig+0x296>
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	e015      	b.n	8006016 <HAL_RCC_OscConfig+0x2c2>
 8005fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005ff6:	fa93 f3a3 	rbit	r3, r3
 8005ffa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006002:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800600a:	fa93 f3a3 	rbit	r3, r3
 800600e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006012:	4b0e      	ldr	r3, [pc, #56]	; (800604c <HAL_RCC_OscConfig+0x2f8>)
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800601a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800601e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006022:	fa92 f2a2 	rbit	r2, r2
 8006026:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800602a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800602e:	fab2 f282 	clz	r2, r2
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	f042 0220 	orr.w	r2, r2, #32
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	f002 021f 	and.w	r2, r2, #31
 800603e:	2101      	movs	r1, #1
 8006040:	fa01 f202 	lsl.w	r2, r1, r2
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1ab      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x24e>
 800604a:	e002      	b.n	8006052 <HAL_RCC_OscConfig+0x2fe>
 800604c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 816f 	beq.w	8006340 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006062:	4bd0      	ldr	r3, [pc, #832]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800606e:	4bcd      	ldr	r3, [pc, #820]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b08      	cmp	r3, #8
 8006078:	d16c      	bne.n	8006154 <HAL_RCC_OscConfig+0x400>
 800607a:	4bca      	ldr	r3, [pc, #808]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d166      	bne.n	8006154 <HAL_RCC_OscConfig+0x400>
 8006086:	2302      	movs	r3, #2
 8006088:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006090:	fa93 f3a3 	rbit	r3, r3
 8006094:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006098:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609c:	fab3 f383 	clz	r3, r3
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d102      	bne.n	80060b6 <HAL_RCC_OscConfig+0x362>
 80060b0:	4bbc      	ldr	r3, [pc, #752]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	e013      	b.n	80060de <HAL_RCC_OscConfig+0x38a>
 80060b6:	2302      	movs	r3, #2
 80060b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80060c0:	fa93 f3a3 	rbit	r3, r3
 80060c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80060c8:	2302      	movs	r3, #2
 80060ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80060ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060d2:	fa93 f3a3 	rbit	r3, r3
 80060d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80060da:	4bb2      	ldr	r3, [pc, #712]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	2202      	movs	r2, #2
 80060e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80060e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80060e8:	fa92 f2a2 	rbit	r2, r2
 80060ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80060f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80060f4:	fab2 f282 	clz	r2, r2
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	f042 0220 	orr.w	r2, r2, #32
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	f002 021f 	and.w	r2, r2, #31
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f202 	lsl.w	r2, r1, r2
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_RCC_OscConfig+0x3cc>
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d002      	beq.n	8006120 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f000 bd1b 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006120:	4ba0      	ldr	r3, [pc, #640]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	21f8      	movs	r1, #248	; 0xf8
 8006130:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006134:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006138:	fa91 f1a1 	rbit	r1, r1
 800613c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006140:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006144:	fab1 f181 	clz	r1, r1
 8006148:	b2c9      	uxtb	r1, r1
 800614a:	408b      	lsls	r3, r1
 800614c:	4995      	ldr	r1, [pc, #596]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 800614e:	4313      	orrs	r3, r2
 8006150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006152:	e0f5      	b.n	8006340 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006154:	1d3b      	adds	r3, r7, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8085 	beq.w	800626a <HAL_RCC_OscConfig+0x516>
 8006160:	2301      	movs	r3, #1
 8006162:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800616a:	fa93 f3a3 	rbit	r3, r3
 800616e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006172:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	461a      	mov	r2, r3
 8006188:	2301      	movs	r3, #1
 800618a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618c:	f7fc fd32 	bl	8002bf4 <HAL_GetTick>
 8006190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006194:	e00a      	b.n	80061ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006196:	f7fc fd2d 	bl	8002bf4 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d902      	bls.n	80061ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	f000 bcd5 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>
 80061ac:	2302      	movs	r3, #2
 80061ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80061b6:	fa93 f3a3 	rbit	r3, r3
 80061ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80061be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d102      	bne.n	80061dc <HAL_RCC_OscConfig+0x488>
 80061d6:	4b73      	ldr	r3, [pc, #460]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	e013      	b.n	8006204 <HAL_RCC_OscConfig+0x4b0>
 80061dc:	2302      	movs	r3, #2
 80061de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80061e6:	fa93 f3a3 	rbit	r3, r3
 80061ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80061ee:	2302      	movs	r3, #2
 80061f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80061f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80061f8:	fa93 f3a3 	rbit	r3, r3
 80061fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006200:	4b68      	ldr	r3, [pc, #416]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2202      	movs	r2, #2
 8006206:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800620a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800620e:	fa92 f2a2 	rbit	r2, r2
 8006212:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006216:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800621a:	fab2 f282 	clz	r2, r2
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	f042 0220 	orr.w	r2, r2, #32
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	f002 021f 	and.w	r2, r2, #31
 800622a:	2101      	movs	r1, #1
 800622c:	fa01 f202 	lsl.w	r2, r1, r2
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0af      	beq.n	8006196 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006236:	4b5b      	ldr	r3, [pc, #364]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	21f8      	movs	r1, #248	; 0xf8
 8006246:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800624e:	fa91 f1a1 	rbit	r1, r1
 8006252:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006256:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800625a:	fab1 f181 	clz	r1, r1
 800625e:	b2c9      	uxtb	r1, r1
 8006260:	408b      	lsls	r3, r1
 8006262:	4950      	ldr	r1, [pc, #320]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 8006264:	4313      	orrs	r3, r2
 8006266:	600b      	str	r3, [r1, #0]
 8006268:	e06a      	b.n	8006340 <HAL_RCC_OscConfig+0x5ec>
 800626a:	2301      	movs	r3, #1
 800626c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006270:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800627c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006280:	fab3 f383 	clz	r3, r3
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800628a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006296:	f7fc fcad 	bl	8002bf4 <HAL_GetTick>
 800629a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a0:	f7fc fca8 	bl	8002bf4 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d902      	bls.n	80062b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	f000 bc50 	b.w	8006b56 <HAL_RCC_OscConfig+0xe02>
 80062b6:	2302      	movs	r3, #2
 80062b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80062c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d102      	bne.n	80062e6 <HAL_RCC_OscConfig+0x592>
 80062e0:	4b30      	ldr	r3, [pc, #192]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	e013      	b.n	800630e <HAL_RCC_OscConfig+0x5ba>
 80062e6:	2302      	movs	r3, #2
 80062e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062f0:	fa93 f3a3 	rbit	r3, r3
 80062f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062f8:	2302      	movs	r3, #2
 80062fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800630a:	4b26      	ldr	r3, [pc, #152]	; (80063a4 <HAL_RCC_OscConfig+0x650>)
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	2202      	movs	r2, #2
 8006310:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006314:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006318:	fa92 f2a2 	rbit	r2, r2
 800631c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006320:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006324:	fab2 f282 	clz	r2, r2
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	f042 0220 	orr.w	r2, r2, #32
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	f002 021f 	and.w	r2, r2, #31
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f202 	lsl.w	r2, r1, r2
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1af      	bne.n	80062a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80da 	beq.w	8006504 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d069      	beq.n	800642e <HAL_RCC_OscConfig+0x6da>
 800635a:	2301      	movs	r3, #1
 800635c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006360:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006364:	fa93 f3a3 	rbit	r3, r3
 8006368:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800636c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006370:	fab3 f383 	clz	r3, r3
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_OscConfig+0x654>)
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	461a      	mov	r2, r3
 8006380:	2301      	movs	r3, #1
 8006382:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006384:	f7fc fc36 	bl	8002bf4 <HAL_GetTick>
 8006388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638c:	e00e      	b.n	80063ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800638e:	f7fc fc31 	bl	8002bf4 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d906      	bls.n	80063ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e3d9      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	10908120 	.word	0x10908120
 80063ac:	2302      	movs	r3, #2
 80063ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063b6:	fa93 f3a3 	rbit	r3, r3
 80063ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80063c2:	2202      	movs	r2, #2
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	fa93 f2a3 	rbit	r2, r3
 80063d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80063da:	2202      	movs	r2, #2
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	fa93 f2a3 	rbit	r2, r3
 80063e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80063ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	4ba5      	ldr	r3, [pc, #660]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80063f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80063f6:	2102      	movs	r1, #2
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	fa93 f1a3 	rbit	r1, r3
 8006404:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006408:	6019      	str	r1, [r3, #0]
  return result;
 800640a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	fab3 f383 	clz	r3, r3
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	2101      	movs	r1, #1
 8006422:	fa01 f303 	lsl.w	r3, r1, r3
 8006426:	4013      	ands	r3, r2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0b0      	beq.n	800638e <HAL_RCC_OscConfig+0x63a>
 800642c:	e06a      	b.n	8006504 <HAL_RCC_OscConfig+0x7b0>
 800642e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006432:	2201      	movs	r2, #1
 8006434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	fa93 f2a3 	rbit	r2, r3
 8006440:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006444:	601a      	str	r2, [r3, #0]
  return result;
 8006446:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800644a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800644c:	fab3 f383 	clz	r3, r3
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	4b8c      	ldr	r3, [pc, #560]	; (8006688 <HAL_RCC_OscConfig+0x934>)
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	461a      	mov	r2, r3
 800645c:	2300      	movs	r3, #0
 800645e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006460:	f7fc fbc8 	bl	8002bf4 <HAL_GetTick>
 8006464:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006468:	e009      	b.n	800647e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800646a:	f7fc fbc3 	bl	8002bf4 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e36b      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 800647e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006482:	2202      	movs	r2, #2
 8006484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	fa93 f2a3 	rbit	r2, r3
 8006490:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800649a:	2202      	movs	r2, #2
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	fa93 f2a3 	rbit	r2, r3
 80064a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80064b2:	2202      	movs	r2, #2
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	fa93 f2a3 	rbit	r2, r3
 80064c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80064c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c6:	4b6f      	ldr	r3, [pc, #444]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80064c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80064ce:	2102      	movs	r1, #2
 80064d0:	6019      	str	r1, [r3, #0]
 80064d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	fa93 f1a3 	rbit	r1, r3
 80064dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80064e0:	6019      	str	r1, [r3, #0]
  return result;
 80064e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	fab3 f383 	clz	r3, r3
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2101      	movs	r1, #1
 80064fa:	fa01 f303 	lsl.w	r3, r1, r3
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1b2      	bne.n	800646a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	1d3b      	adds	r3, r7, #4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8158 	beq.w	80067c4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006514:	2300      	movs	r3, #0
 8006516:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800651a:	4b5a      	ldr	r3, [pc, #360]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d112      	bne.n	800654c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006526:	4b57      	ldr	r3, [pc, #348]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	4a56      	ldr	r2, [pc, #344]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	61d3      	str	r3, [r2, #28]
 8006532:	4b54      	ldr	r3, [pc, #336]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f107 0308 	add.w	r3, r7, #8
 8006544:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654c:	4b4f      	ldr	r3, [pc, #316]	; (800668c <HAL_RCC_OscConfig+0x938>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11a      	bne.n	800658e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006558:	4b4c      	ldr	r3, [pc, #304]	; (800668c <HAL_RCC_OscConfig+0x938>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a4b      	ldr	r2, [pc, #300]	; (800668c <HAL_RCC_OscConfig+0x938>)
 800655e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006562:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006564:	f7fc fb46 	bl	8002bf4 <HAL_GetTick>
 8006568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656c:	e009      	b.n	8006582 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656e:	f7fc fb41 	bl	8002bf4 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	; 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e2e9      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006582:	4b42      	ldr	r3, [pc, #264]	; (800668c <HAL_RCC_OscConfig+0x938>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0ef      	beq.n	800656e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d106      	bne.n	80065a6 <HAL_RCC_OscConfig+0x852>
 8006598:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	4a39      	ldr	r2, [pc, #228]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6213      	str	r3, [r2, #32]
 80065a4:	e02f      	b.n	8006606 <HAL_RCC_OscConfig+0x8b2>
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_OscConfig+0x876>
 80065b0:	4b34      	ldr	r3, [pc, #208]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	4a33      	ldr	r2, [pc, #204]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	6213      	str	r3, [r2, #32]
 80065bc:	4b31      	ldr	r3, [pc, #196]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	4a30      	ldr	r2, [pc, #192]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065c2:	f023 0304 	bic.w	r3, r3, #4
 80065c6:	6213      	str	r3, [r2, #32]
 80065c8:	e01d      	b.n	8006606 <HAL_RCC_OscConfig+0x8b2>
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b05      	cmp	r3, #5
 80065d2:	d10c      	bne.n	80065ee <HAL_RCC_OscConfig+0x89a>
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065da:	f043 0304 	orr.w	r3, r3, #4
 80065de:	6213      	str	r3, [r2, #32]
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	4a27      	ldr	r2, [pc, #156]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	6213      	str	r3, [r2, #32]
 80065ec:	e00b      	b.n	8006606 <HAL_RCC_OscConfig+0x8b2>
 80065ee:	4b25      	ldr	r3, [pc, #148]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	4a24      	ldr	r2, [pc, #144]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	6213      	str	r3, [r2, #32]
 80065fa:	4b22      	ldr	r3, [pc, #136]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	4a21      	ldr	r2, [pc, #132]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 8006600:	f023 0304 	bic.w	r3, r3, #4
 8006604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d06b      	beq.n	80066e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006610:	f7fc faf0 	bl	8002bf4 <HAL_GetTick>
 8006614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006618:	e00b      	b.n	8006632 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661a:	f7fc faeb 	bl	8002bf4 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	; 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e291      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 8006632:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006636:	2202      	movs	r2, #2
 8006638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	fa93 f2a3 	rbit	r2, r3
 8006644:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800664e:	2202      	movs	r2, #2
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	fa93 f2a3 	rbit	r2, r3
 800665c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006660:	601a      	str	r2, [r3, #0]
  return result;
 8006662:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006666:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006668:	fab3 f383 	clz	r3, r3
 800666c:	b2db      	uxtb	r3, r3
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f043 0302 	orr.w	r3, r3, #2
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d109      	bne.n	8006690 <HAL_RCC_OscConfig+0x93c>
 800667c:	4b01      	ldr	r3, [pc, #4]	; (8006684 <HAL_RCC_OscConfig+0x930>)
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	e014      	b.n	80066ac <HAL_RCC_OscConfig+0x958>
 8006682:	bf00      	nop
 8006684:	40021000 	.word	0x40021000
 8006688:	10908120 	.word	0x10908120
 800668c:	40007000 	.word	0x40007000
 8006690:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006694:	2202      	movs	r2, #2
 8006696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006698:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	fa93 f2a3 	rbit	r2, r3
 80066a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	4bbb      	ldr	r3, [pc, #748]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80066b0:	2102      	movs	r1, #2
 80066b2:	6011      	str	r1, [r2, #0]
 80066b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	fa92 f1a2 	rbit	r1, r2
 80066be:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80066c2:	6011      	str	r1, [r2, #0]
  return result;
 80066c4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	fab2 f282 	clz	r2, r2
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	f002 021f 	and.w	r2, r2, #31
 80066da:	2101      	movs	r1, #1
 80066dc:	fa01 f202 	lsl.w	r2, r1, r2
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d099      	beq.n	800661a <HAL_RCC_OscConfig+0x8c6>
 80066e6:	e063      	b.n	80067b0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e8:	f7fc fa84 	bl	8002bf4 <HAL_GetTick>
 80066ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f0:	e00b      	b.n	800670a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066f2:	f7fc fa7f 	bl	8002bf4 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006702:	4293      	cmp	r3, r2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e225      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 800670a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800670e:	2202      	movs	r2, #2
 8006710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	fa93 f2a3 	rbit	r2, r3
 800671c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006726:	2202      	movs	r2, #2
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	fa93 f2a3 	rbit	r2, r3
 8006734:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006738:	601a      	str	r2, [r3, #0]
  return result;
 800673a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800673e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006740:	fab3 f383 	clz	r3, r3
 8006744:	b2db      	uxtb	r3, r3
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f043 0302 	orr.w	r3, r3, #2
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d102      	bne.n	800675a <HAL_RCC_OscConfig+0xa06>
 8006754:	4b90      	ldr	r3, [pc, #576]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	e00d      	b.n	8006776 <HAL_RCC_OscConfig+0xa22>
 800675a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800675e:	2202      	movs	r2, #2
 8006760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006762:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	fa93 f2a3 	rbit	r2, r3
 800676c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	4b89      	ldr	r3, [pc, #548]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800677a:	2102      	movs	r1, #2
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	fa92 f1a2 	rbit	r1, r2
 8006788:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800678c:	6011      	str	r1, [r2, #0]
  return result;
 800678e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	fab2 f282 	clz	r2, r2
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	f002 021f 	and.w	r2, r2, #31
 80067a4:	2101      	movs	r1, #1
 80067a6:	fa01 f202 	lsl.w	r2, r1, r2
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1a0      	bne.n	80066f2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d105      	bne.n	80067c4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b8:	4b77      	ldr	r3, [pc, #476]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4a76      	ldr	r2, [pc, #472]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 80067be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c4:	1d3b      	adds	r3, r7, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 81c2 	beq.w	8006b54 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d0:	4b71      	ldr	r3, [pc, #452]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 030c 	and.w	r3, r3, #12
 80067d8:	2b08      	cmp	r3, #8
 80067da:	f000 819c 	beq.w	8006b16 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	f040 8114 	bne.w	8006a12 <HAL_RCC_OscConfig+0xcbe>
 80067ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80067ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	fa93 f2a3 	rbit	r2, r3
 80067fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006802:	601a      	str	r2, [r3, #0]
  return result;
 8006804:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006808:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680a:	fab3 f383 	clz	r3, r3
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	461a      	mov	r2, r3
 800681c:	2300      	movs	r3, #0
 800681e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fc f9e8 	bl	8002bf4 <HAL_GetTick>
 8006824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006828:	e009      	b.n	800683e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800682a:	f7fc f9e3 	bl	8002bf4 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e18b      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 800683e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006848:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	fa93 f2a3 	rbit	r2, r3
 8006852:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006856:	601a      	str	r2, [r3, #0]
  return result;
 8006858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800685c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800685e:	fab3 f383 	clz	r3, r3
 8006862:	b2db      	uxtb	r3, r3
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	d102      	bne.n	8006878 <HAL_RCC_OscConfig+0xb24>
 8006872:	4b49      	ldr	r3, [pc, #292]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	e01b      	b.n	80068b0 <HAL_RCC_OscConfig+0xb5c>
 8006878:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800687c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006882:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	fa93 f2a3 	rbit	r2, r3
 800688c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	fa93 f2a3 	rbit	r2, r3
 80068a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80068b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	fa92 f1a2 	rbit	r1, r2
 80068c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80068c8:	6011      	str	r1, [r2, #0]
  return result;
 80068ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	fab2 f282 	clz	r2, r2
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	f042 0220 	orr.w	r2, r2, #32
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	f002 021f 	and.w	r2, r2, #31
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f202 	lsl.w	r2, r1, r2
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d19e      	bne.n	800682a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ec:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	430b      	orrs	r3, r1
 8006902:	4925      	ldr	r1, [pc, #148]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 8006904:	4313      	orrs	r3, r2
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800690c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	fa93 f2a3 	rbit	r2, r3
 800691c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006920:	601a      	str	r2, [r3, #0]
  return result;
 8006922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006926:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006928:	fab3 f383 	clz	r3, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006932:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	461a      	mov	r2, r3
 800693a:	2301      	movs	r3, #1
 800693c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693e:	f7fc f959 	bl	8002bf4 <HAL_GetTick>
 8006942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006946:	e009      	b.n	800695c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006948:	f7fc f954 	bl	8002bf4 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e0fc      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 800695c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006966:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	fa93 f2a3 	rbit	r2, r3
 8006970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006974:	601a      	str	r2, [r3, #0]
  return result;
 8006976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800697a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800697c:	fab3 f383 	clz	r3, r3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d105      	bne.n	800699c <HAL_RCC_OscConfig+0xc48>
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <HAL_RCC_OscConfig+0xc44>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	e01e      	b.n	80069d4 <HAL_RCC_OscConfig+0xc80>
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80069a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	fa93 f2a3 	rbit	r2, r3
 80069b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	fa93 f2a3 	rbit	r2, r3
 80069ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	4b63      	ldr	r3, [pc, #396]	; (8006b60 <HAL_RCC_OscConfig+0xe0c>)
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80069d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80069dc:	6011      	str	r1, [r2, #0]
 80069de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	fa92 f1a2 	rbit	r1, r2
 80069e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069ec:	6011      	str	r1, [r2, #0]
  return result;
 80069ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	fab2 f282 	clz	r2, r2
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	f042 0220 	orr.w	r2, r2, #32
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	f002 021f 	and.w	r2, r2, #31
 8006a04:	2101      	movs	r1, #1
 8006a06:	fa01 f202 	lsl.w	r2, r1, r2
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d09b      	beq.n	8006948 <HAL_RCC_OscConfig+0xbf4>
 8006a10:	e0a0      	b.n	8006b54 <HAL_RCC_OscConfig+0xe00>
 8006a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	fa93 f2a3 	rbit	r2, r3
 8006a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a2a:	601a      	str	r2, [r3, #0]
  return result;
 8006a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a32:	fab3 f383 	clz	r3, r3
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	461a      	mov	r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a48:	f7fc f8d4 	bl	8002bf4 <HAL_GetTick>
 8006a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a50:	e009      	b.n	8006a66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a52:	f7fc f8cf 	bl	8002bf4 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e077      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
 8006a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	fa93 f2a3 	rbit	r2, r3
 8006a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a7e:	601a      	str	r2, [r3, #0]
  return result;
 8006a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a86:	fab3 f383 	clz	r3, r3
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCC_OscConfig+0xd4c>
 8006a9a:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <HAL_RCC_OscConfig+0xe0c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	e01b      	b.n	8006ad8 <HAL_RCC_OscConfig+0xd84>
 8006aa0:	f107 0320 	add.w	r3, r7, #32
 8006aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	f107 0320 	add.w	r3, r7, #32
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	fa93 f2a3 	rbit	r2, r3
 8006ab4:	f107 031c 	add.w	r3, r7, #28
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	f107 0318 	add.w	r3, r7, #24
 8006abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f107 0318 	add.w	r3, r7, #24
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	fa93 f2a3 	rbit	r2, r3
 8006ace:	f107 0314 	add.w	r3, r7, #20
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <HAL_RCC_OscConfig+0xe0c>)
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	f107 0210 	add.w	r2, r7, #16
 8006adc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ae0:	6011      	str	r1, [r2, #0]
 8006ae2:	f107 0210 	add.w	r2, r7, #16
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	fa92 f1a2 	rbit	r1, r2
 8006aec:	f107 020c 	add.w	r2, r7, #12
 8006af0:	6011      	str	r1, [r2, #0]
  return result;
 8006af2:	f107 020c 	add.w	r2, r7, #12
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	fab2 f282 	clz	r2, r2
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	f042 0220 	orr.w	r2, r2, #32
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	f002 021f 	and.w	r2, r2, #31
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0e:	4013      	ands	r3, r2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d19e      	bne.n	8006a52 <HAL_RCC_OscConfig+0xcfe>
 8006b14:	e01e      	b.n	8006b54 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e018      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <HAL_RCC_OscConfig+0xe0c>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006b2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b34:	1d3b      	adds	r3, r7, #4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d108      	bne.n	8006b50 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006b3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d001      	beq.n	8006b54 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40021000 	.word	0x40021000

08006b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b09e      	sub	sp, #120	; 0x78
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e162      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b90      	ldr	r3, [pc, #576]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d910      	bls.n	8006bac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b8d      	ldr	r3, [pc, #564]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f023 0207 	bic.w	r2, r3, #7
 8006b92:	498b      	ldr	r1, [pc, #556]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b89      	ldr	r3, [pc, #548]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d001      	beq.n	8006bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e14a      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb8:	4b82      	ldr	r3, [pc, #520]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	497f      	ldr	r1, [pc, #508]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80dc 	beq.w	8006d90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d13c      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xf6>
 8006be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006be4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be8:	fa93 f3a3 	rbit	r3, r3
 8006bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf0:	fab3 f383 	clz	r3, r3
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d102      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xa6>
 8006c04:	4b6f      	ldr	r3, [pc, #444]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	e00f      	b.n	8006c2a <HAL_RCC_ClockConfig+0xc6>
 8006c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c12:	fa93 f3a3 	rbit	r3, r3
 8006c16:	667b      	str	r3, [r7, #100]	; 0x64
 8006c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c20:	fa93 f3a3 	rbit	r3, r3
 8006c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c26:	4b67      	ldr	r3, [pc, #412]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c32:	fa92 f2a2 	rbit	r2, r2
 8006c36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c3a:	fab2 f282 	clz	r2, r2
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	f042 0220 	orr.w	r2, r2, #32
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	f002 021f 	and.w	r2, r2, #31
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d17b      	bne.n	8006d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e0f3      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d13c      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x178>
 8006c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6a:	fa93 f3a3 	rbit	r3, r3
 8006c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	fab3 f383 	clz	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d102      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x128>
 8006c86:	4b4f      	ldr	r3, [pc, #316]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	e00f      	b.n	8006cac <HAL_RCC_ClockConfig+0x148>
 8006c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c94:	fa93 f3a3 	rbit	r3, r3
 8006c98:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca2:	fa93 f3a3 	rbit	r3, r3
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca8:	4b46      	ldr	r3, [pc, #280]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8006cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb4:	fa92 f2a2 	rbit	r2, r2
 8006cb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cbc:	fab2 f282 	clz	r2, r2
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	f042 0220 	orr.w	r2, r2, #32
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	f002 021f 	and.w	r2, r2, #31
 8006ccc:	2101      	movs	r1, #1
 8006cce:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d13a      	bne.n	8006d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0b2      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	fa93 f3a3 	rbit	r3, r3
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cea:	fab3 f383 	clz	r3, r3
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCC_ClockConfig+0x1a0>
 8006cfe:	4b31      	ldr	r3, [pc, #196]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	e00d      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1bc>
 8006d04:	2302      	movs	r3, #2
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	fa93 f3a3 	rbit	r3, r3
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d10:	2302      	movs	r3, #2
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	fa93 f3a3 	rbit	r3, r3
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	2202      	movs	r2, #2
 8006d22:	61ba      	str	r2, [r7, #24]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	fa92 f2a2 	rbit	r2, r2
 8006d2a:	617a      	str	r2, [r7, #20]
  return result;
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	fab2 f282 	clz	r2, r2
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	f042 0220 	orr.w	r2, r2, #32
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	f002 021f 	and.w	r2, r2, #31
 8006d3e:	2101      	movs	r1, #1
 8006d40:	fa01 f202 	lsl.w	r2, r1, r2
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e079      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f023 0203 	bic.w	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	491a      	ldr	r1, [pc, #104]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d60:	f7fb ff48 	bl	8002bf4 <HAL_GetTick>
 8006d64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d68:	f7fb ff44 	bl	8002bf4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e061      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <HAL_RCC_ClockConfig+0x260>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 020c 	and.w	r2, r3, #12
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d1eb      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d214      	bcs.n	8006dc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f023 0207 	bic.w	r2, r3, #7
 8006da6:	4906      	ldr	r1, [pc, #24]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dae:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <HAL_RCC_ClockConfig+0x25c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e040      	b.n	8006e42 <HAL_RCC_ClockConfig+0x2de>
 8006dc0:	40022000 	.word	0x40022000
 8006dc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <HAL_RCC_ClockConfig+0x2e8>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	491a      	ldr	r1, [pc, #104]	; (8006e4c <HAL_RCC_ClockConfig+0x2e8>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <HAL_RCC_ClockConfig+0x2e8>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4912      	ldr	r1, [pc, #72]	; (8006e4c <HAL_RCC_ClockConfig+0x2e8>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006e06:	f000 f829 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <HAL_RCC_ClockConfig+0x2e8>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e14:	22f0      	movs	r2, #240	; 0xf0
 8006e16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	fa92 f2a2 	rbit	r2, r2
 8006e1e:	60fa      	str	r2, [r7, #12]
  return result;
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	fab2 f282 	clz	r2, r2
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	40d3      	lsrs	r3, r2
 8006e2a:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <HAL_RCC_ClockConfig+0x2ec>)
 8006e2c:	5cd3      	ldrb	r3, [r2, r3]
 8006e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006e32:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <HAL_RCC_ClockConfig+0x2f0>)
 8006e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <HAL_RCC_ClockConfig+0x2f4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb fd6a 	bl	8002914 <HAL_InitTick>
  
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3778      	adds	r7, #120	; 0x78
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	0800bb20 	.word	0x0800bb20
 8006e54:	20000004 	.word	0x20000004
 8006e58:	20000008 	.word	0x20000008

08006e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b08b      	sub	sp, #44	; 0x2c
 8006e60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006e76:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f003 030c 	and.w	r3, r3, #12
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d002      	beq.n	8006e8c <HAL_RCC_GetSysClockFreq+0x30>
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d003      	beq.n	8006e92 <HAL_RCC_GetSysClockFreq+0x36>
 8006e8a:	e03c      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e8c:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006e8e:	623b      	str	r3, [r7, #32]
      break;
 8006e90:	e03c      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006e98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006e9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	fa92 f2a2 	rbit	r2, r2
 8006ea4:	607a      	str	r2, [r7, #4]
  return result;
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	fab2 f282 	clz	r2, r2
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	40d3      	lsrs	r3, r2
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006eb2:	5cd3      	ldrb	r3, [r2, r3]
 8006eb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006eb6:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	220f      	movs	r2, #15
 8006ec0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	fa92 f2a2 	rbit	r2, r2
 8006ec8:	60fa      	str	r2, [r7, #12]
  return result;
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	fab2 f282 	clz	r2, r2
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	40d3      	lsrs	r3, r2
 8006ed4:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ed6:	5cd3      	ldrb	r3, [r2, r3]
 8006ed8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ee4:	4a0e      	ldr	r2, [pc, #56]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	fb02 f303 	mul.w	r3, r2, r3
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef4:	e004      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	; (8006f2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006efa:	fb02 f303 	mul.w	r3, r2, r3
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	623b      	str	r3, [r7, #32]
      break;
 8006f04:	e002      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006f08:	623b      	str	r3, [r7, #32]
      break;
 8006f0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	372c      	adds	r7, #44	; 0x2c
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	007a1200 	.word	0x007a1200
 8006f24:	0800bb38 	.word	0x0800bb38
 8006f28:	0800bb48 	.word	0x0800bb48
 8006f2c:	003d0900 	.word	0x003d0900

08006f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f34:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f36:	681b      	ldr	r3, [r3, #0]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000004 	.word	0x20000004

08006f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006f4e:	f7ff ffef 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006f52:	4601      	mov	r1, r0
 8006f54:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006f60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	fa92 f2a2 	rbit	r2, r2
 8006f68:	603a      	str	r2, [r7, #0]
  return result;
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	fab2 f282 	clz	r2, r2
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	40d3      	lsrs	r3, r2
 8006f74:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006f76:	5cd3      	ldrb	r3, [r2, r3]
 8006f78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40021000 	.word	0x40021000
 8006f88:	0800bb30 	.word	0x0800bb30

08006f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006f92:	f7ff ffcd 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006f96:	4601      	mov	r1, r0
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006fa0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006fa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	fa92 f2a2 	rbit	r2, r2
 8006fac:	603a      	str	r2, [r7, #0]
  return result;
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	fab2 f282 	clz	r2, r2
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	40d3      	lsrs	r3, r2
 8006fb8:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006fba:	5cd3      	ldrb	r3, [r2, r3]
 8006fbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	0800bb30 	.word	0x0800bb30

08006fd0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	220f      	movs	r2, #15
 8006fde:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006fe0:	4b12      	ldr	r3, [pc, #72]	; (800702c <HAL_RCC_GetClockConfig+0x5c>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 0203 	and.w	r2, r3, #3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <HAL_RCC_GetClockConfig+0x5c>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <HAL_RCC_GetClockConfig+0x5c>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_RCC_GetClockConfig+0x5c>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	08db      	lsrs	r3, r3, #3
 800700a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <HAL_RCC_GetClockConfig+0x60>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0207 	and.w	r2, r3, #7
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	601a      	str	r2, [r3, #0]
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	40022000 	.word	0x40022000

08007034 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b092      	sub	sp, #72	; 0x48
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80d7 	beq.w	8007200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007052:	2300      	movs	r3, #0
 8007054:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007058:	4b4e      	ldr	r3, [pc, #312]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10e      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007064:	4b4b      	ldr	r3, [pc, #300]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	4a4a      	ldr	r2, [pc, #296]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706e:	61d3      	str	r3, [r2, #28]
 8007070:	4b48      	ldr	r3, [pc, #288]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007082:	4b45      	ldr	r3, [pc, #276]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d118      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800708e:	4b42      	ldr	r3, [pc, #264]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a41      	ldr	r2, [pc, #260]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007098:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800709a:	f7fb fdab 	bl	8002bf4 <HAL_GetTick>
 800709e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a0:	e008      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070a2:	f7fb fda7 	bl	8002bf4 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b64      	cmp	r3, #100	; 0x64
 80070ae:	d901      	bls.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e169      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b4:	4b38      	ldr	r3, [pc, #224]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f0      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070c0:	4b34      	ldr	r3, [pc, #208]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8084 	beq.w	80071da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d07c      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	fa93 f3a3 	rbit	r3, r3
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070fa:	fab3 f383 	clz	r3, r3
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	4b26      	ldr	r3, [pc, #152]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	461a      	mov	r2, r3
 800710a:	2301      	movs	r3, #1
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	fa93 f3a3 	rbit	r3, r3
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800711e:	fab3 f383 	clz	r3, r3
 8007122:	b2db      	uxtb	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	4b1d      	ldr	r3, [pc, #116]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007132:	4a18      	ldr	r2, [pc, #96]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007136:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d04b      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007142:	f7fb fd57 	bl	8002bf4 <HAL_GetTick>
 8007146:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007148:	e00a      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800714a:	f7fb fd53 	bl	8002bf4 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	f241 3288 	movw	r2, #5000	; 0x1388
 8007158:	4293      	cmp	r3, r2
 800715a:	d901      	bls.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e113      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007160:	2302      	movs	r3, #2
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	fa93 f3a3 	rbit	r3, r3
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
 800716c:	2302      	movs	r3, #2
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	fa93 f3a3 	rbit	r3, r3
 8007176:	61fb      	str	r3, [r7, #28]
  return result;
 8007178:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717a:	fab3 f383 	clz	r3, r3
 800717e:	b2db      	uxtb	r3, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f043 0302 	orr.w	r3, r3, #2
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d108      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800718e:	4b01      	ldr	r3, [pc, #4]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	e00d      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007194:	40021000 	.word	0x40021000
 8007198:	40007000 	.word	0x40007000
 800719c:	10908100 	.word	0x10908100
 80071a0:	2302      	movs	r3, #2
 80071a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	fa93 f3a3 	rbit	r3, r3
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	4b78      	ldr	r3, [pc, #480]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2202      	movs	r2, #2
 80071b2:	613a      	str	r2, [r7, #16]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	fa92 f2a2 	rbit	r2, r2
 80071ba:	60fa      	str	r2, [r7, #12]
  return result;
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	fab2 f282 	clz	r2, r2
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	f002 021f 	and.w	r2, r2, #31
 80071ce:	2101      	movs	r1, #1
 80071d0:	fa01 f202 	lsl.w	r2, r1, r2
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0b7      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80071da:	4b6d      	ldr	r3, [pc, #436]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	496a      	ldr	r1, [pc, #424]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80071ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d105      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071f4:	4b66      	ldr	r3, [pc, #408]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	4a65      	ldr	r2, [pc, #404]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800720c:	4b60      	ldr	r3, [pc, #384]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	f023 0203 	bic.w	r2, r3, #3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	495d      	ldr	r1, [pc, #372]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800721a:	4313      	orrs	r3, r2
 800721c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d008      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800722a:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	4956      	ldr	r1, [pc, #344]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007238:	4313      	orrs	r3, r2
 800723a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007248:	4b51      	ldr	r3, [pc, #324]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	494e      	ldr	r1, [pc, #312]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007256:	4313      	orrs	r3, r2
 8007258:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007266:	4b4a      	ldr	r3, [pc, #296]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	f023 0210 	bic.w	r2, r3, #16
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	4947      	ldr	r1, [pc, #284]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007274:	4313      	orrs	r3, r2
 8007276:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007284:	4b42      	ldr	r3, [pc, #264]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	493f      	ldr	r1, [pc, #252]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007292:	4313      	orrs	r3, r2
 8007294:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072a2:	4b3b      	ldr	r3, [pc, #236]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f023 0220 	bic.w	r2, r3, #32
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	4938      	ldr	r1, [pc, #224]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072c0:	4b33      	ldr	r3, [pc, #204]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	4930      	ldr	r1, [pc, #192]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072de:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	4929      	ldr	r1, [pc, #164]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072fc:	4b24      	ldr	r3, [pc, #144]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4921      	ldr	r1, [pc, #132]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800730a:	4313      	orrs	r3, r2
 800730c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	491a      	ldr	r1, [pc, #104]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007328:	4313      	orrs	r3, r2
 800732a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007338:	4b15      	ldr	r3, [pc, #84]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	4912      	ldr	r1, [pc, #72]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007346:	4313      	orrs	r3, r2
 8007348:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007356:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	490b      	ldr	r1, [pc, #44]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007364:	4313      	orrs	r3, r2
 8007366:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	4903      	ldr	r1, [pc, #12]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007382:	4313      	orrs	r3, r2
 8007384:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3748      	adds	r7, #72	; 0x48
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40021000 	.word	0x40021000

08007394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e01d      	b.n	80073e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fb f91c 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3304      	adds	r3, #4
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f000 fcf0 	bl	8007db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <HAL_TIM_Base_Start_IT+0x50>)
 800740c:	4013      	ands	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b06      	cmp	r3, #6
 8007414:	d00b      	beq.n	800742e <HAL_TIM_Base_Start_IT+0x42>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741c:	d007      	beq.n	800742e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0201 	orr.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	00010007 	.word	0x00010007

08007440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e01d      	b.n	800748e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fb f8a6 	bl	80025b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f000 fc9a 	bl	8007db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2201      	movs	r2, #1
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fa0f 	bl	80088ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <HAL_TIM_PWM_Start+0x98>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d013      	beq.n	80074e2 <HAL_TIM_PWM_Start+0x4a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <HAL_TIM_PWM_Start+0x9c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00e      	beq.n	80074e2 <HAL_TIM_PWM_Start+0x4a>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <HAL_TIM_PWM_Start+0xa0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d009      	beq.n	80074e2 <HAL_TIM_PWM_Start+0x4a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1a      	ldr	r2, [pc, #104]	; (800753c <HAL_TIM_PWM_Start+0xa4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d004      	beq.n	80074e2 <HAL_TIM_PWM_Start+0x4a>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a18      	ldr	r2, [pc, #96]	; (8007540 <HAL_TIM_PWM_Start+0xa8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d101      	bne.n	80074e6 <HAL_TIM_PWM_Start+0x4e>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <HAL_TIM_PWM_Start+0x50>
 80074e6:	2300      	movs	r3, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <HAL_TIM_PWM_Start+0xac>)
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b06      	cmp	r3, #6
 800750c:	d00b      	beq.n	8007526 <HAL_TIM_PWM_Start+0x8e>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007514:	d007      	beq.n	8007526 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0201 	orr.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40013400 	.word	0x40013400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	00010007 	.word	0x00010007

08007548 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e01d      	b.n	8007596 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f815 	bl	800759e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f000 fc16 	bl	8007db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b0c      	cmp	r3, #12
 80075c2:	d841      	bhi.n	8007648 <HAL_TIM_IC_Start_IT+0x94>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <HAL_TIM_IC_Start_IT+0x18>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	08007601 	.word	0x08007601
 80075d0:	08007649 	.word	0x08007649
 80075d4:	08007649 	.word	0x08007649
 80075d8:	08007649 	.word	0x08007649
 80075dc:	08007613 	.word	0x08007613
 80075e0:	08007649 	.word	0x08007649
 80075e4:	08007649 	.word	0x08007649
 80075e8:	08007649 	.word	0x08007649
 80075ec:	08007625 	.word	0x08007625
 80075f0:	08007649 	.word	0x08007649
 80075f4:	08007649 	.word	0x08007649
 80075f8:	08007649 	.word	0x08007649
 80075fc:	08007637 	.word	0x08007637
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0202 	orr.w	r2, r2, #2
 800760e:	60da      	str	r2, [r3, #12]
      break;
 8007610:	e01b      	b.n	800764a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0204 	orr.w	r2, r2, #4
 8007620:	60da      	str	r2, [r3, #12]
      break;
 8007622:	e012      	b.n	800764a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0208 	orr.w	r2, r2, #8
 8007632:	60da      	str	r2, [r3, #12]
      break;
 8007634:	e009      	b.n	800764a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0210 	orr.w	r2, r2, #16
 8007644:	60da      	str	r2, [r3, #12]
      break;
 8007646:	e000      	b.n	800764a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007648:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2201      	movs	r2, #1
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f93b 	bl	80088ce <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <HAL_TIM_IC_Start_IT+0xd8>)
 8007660:	4013      	ands	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b06      	cmp	r3, #6
 8007668:	d00b      	beq.n	8007682 <HAL_TIM_IC_Start_IT+0xce>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007670:	d007      	beq.n	8007682 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0201 	orr.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	00010007 	.word	0x00010007

08007690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d122      	bne.n	80076ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d11b      	bne.n	80076ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0202 	mvn.w	r2, #2
 80076bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7f9 fd10 	bl	80010f8 <HAL_TIM_IC_CaptureCallback>
 80076d8:	e005      	b.n	80076e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fb4e 	bl	8007d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fb55 	bl	8007d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d122      	bne.n	8007740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d11b      	bne.n	8007740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0204 	mvn.w	r2, #4
 8007710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7f9 fce6 	bl	80010f8 <HAL_TIM_IC_CaptureCallback>
 800772c:	e005      	b.n	800773a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb24 	bl	8007d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb2b 	bl	8007d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b08      	cmp	r3, #8
 800774c:	d122      	bne.n	8007794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b08      	cmp	r3, #8
 800775a:	d11b      	bne.n	8007794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0208 	mvn.w	r2, #8
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7f9 fcbc 	bl	80010f8 <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fafa 	bl	8007d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fb01 	bl	8007d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0210 	mvn.w	r2, #16
 80077b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2208      	movs	r2, #8
 80077be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7f9 fc92 	bl	80010f8 <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fad0 	bl	8007d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fad7 	bl	8007d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d10e      	bne.n	8007814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b01      	cmp	r3, #1
 8007802:	d107      	bne.n	8007814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0201 	mvn.w	r2, #1
 800780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fa fba4 	bl	8001f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	2b80      	cmp	r3, #128	; 0x80
 8007820:	d10e      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b80      	cmp	r3, #128	; 0x80
 800782e:	d107      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 f9a4 	bl	8008b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d10e      	bne.n	800786e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d107      	bne.n	800786e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f997 	bl	8008b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d10e      	bne.n	800789a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d107      	bne.n	800789a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa85 	bl	8007da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d10e      	bne.n	80078c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d107      	bne.n	80078c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f06f 0220 	mvn.w	r2, #32
 80078be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f957 	bl	8008b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e08a      	b.n	80079fe <HAL_TIM_IC_ConfigChannel+0x130>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d11b      	bne.n	8007936 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6819      	ldr	r1, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f000 fe41 	bl	8008594 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699a      	ldr	r2, [r3, #24]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 020c 	bic.w	r2, r2, #12
 8007920:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6999      	ldr	r1, [r3, #24]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	619a      	str	r2, [r3, #24]
 8007934:	e05a      	b.n	80079ec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b04      	cmp	r3, #4
 800793a:	d11c      	bne.n	8007976 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f000 feb9 	bl	80086c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800795e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6999      	ldr	r1, [r3, #24]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]
 8007974:	e03a      	b.n	80079ec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b08      	cmp	r3, #8
 800797a:	d11b      	bne.n	80079b4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f000 ff06 	bl	800879c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69da      	ldr	r2, [r3, #28]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 020c 	bic.w	r2, r2, #12
 800799e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69d9      	ldr	r1, [r3, #28]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	61da      	str	r2, [r3, #28]
 80079b2:	e01b      	b.n	80079ec <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f000 ff26 	bl	8008814 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69d9      	ldr	r1, [r3, #28]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	021a      	lsls	r2, r3, #8
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e105      	b.n	8007c2e <HAL_TIM_PWM_ConfigChannel+0x226>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b14      	cmp	r3, #20
 8007a36:	f200 80f0 	bhi.w	8007c1a <HAL_TIM_PWM_ConfigChannel+0x212>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007c1b 	.word	0x08007c1b
 8007a48:	08007c1b 	.word	0x08007c1b
 8007a4c:	08007c1b 	.word	0x08007c1b
 8007a50:	08007ad5 	.word	0x08007ad5
 8007a54:	08007c1b 	.word	0x08007c1b
 8007a58:	08007c1b 	.word	0x08007c1b
 8007a5c:	08007c1b 	.word	0x08007c1b
 8007a60:	08007b17 	.word	0x08007b17
 8007a64:	08007c1b 	.word	0x08007c1b
 8007a68:	08007c1b 	.word	0x08007c1b
 8007a6c:	08007c1b 	.word	0x08007c1b
 8007a70:	08007b57 	.word	0x08007b57
 8007a74:	08007c1b 	.word	0x08007c1b
 8007a78:	08007c1b 	.word	0x08007c1b
 8007a7c:	08007c1b 	.word	0x08007c1b
 8007a80:	08007b99 	.word	0x08007b99
 8007a84:	08007c1b 	.word	0x08007c1b
 8007a88:	08007c1b 	.word	0x08007c1b
 8007a8c:	08007c1b 	.word	0x08007c1b
 8007a90:	08007bd9 	.word	0x08007bd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fa1c 	bl	8007ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0208 	orr.w	r2, r2, #8
 8007aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0204 	bic.w	r2, r2, #4
 8007abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6999      	ldr	r1, [r3, #24]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	619a      	str	r2, [r3, #24]
      break;
 8007ad2:	e0a3      	b.n	8007c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fa8c 	bl	8007ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6999      	ldr	r1, [r3, #24]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	021a      	lsls	r2, r3, #8
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	619a      	str	r2, [r3, #24]
      break;
 8007b14:	e082      	b.n	8007c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 faf5 	bl	800810c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0208 	orr.w	r2, r2, #8
 8007b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0204 	bic.w	r2, r2, #4
 8007b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	61da      	str	r2, [r3, #28]
      break;
 8007b54:	e062      	b.n	8007c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fb5d 	bl	800821c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69d9      	ldr	r1, [r3, #28]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	021a      	lsls	r2, r3, #8
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	61da      	str	r2, [r3, #28]
      break;
 8007b96:	e041      	b.n	8007c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fba6 	bl	80082f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0208 	orr.w	r2, r2, #8
 8007bb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0204 	bic.w	r2, r2, #4
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bd6:	e021      	b.n	8007c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fbea 	bl	80083b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	021a      	lsls	r2, r3, #8
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c18:	e000      	b.n	8007c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007c1a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e031      	b.n	8007cec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fbf2 	bl	8008484 <TIM_SlaveTimer_SetConfig>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e018      	b.n	8007cec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007cd8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b0c      	cmp	r3, #12
 8007d06:	d831      	bhi.n	8007d6c <HAL_TIM_ReadCapturedValue+0x78>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d45 	.word	0x08007d45
 8007d14:	08007d6d 	.word	0x08007d6d
 8007d18:	08007d6d 	.word	0x08007d6d
 8007d1c:	08007d6d 	.word	0x08007d6d
 8007d20:	08007d4f 	.word	0x08007d4f
 8007d24:	08007d6d 	.word	0x08007d6d
 8007d28:	08007d6d 	.word	0x08007d6d
 8007d2c:	08007d6d 	.word	0x08007d6d
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d6d 	.word	0x08007d6d
 8007d38:	08007d6d 	.word	0x08007d6d
 8007d3c:	08007d6d 	.word	0x08007d6d
 8007d40:	08007d63 	.word	0x08007d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	60fb      	str	r3, [r7, #12]

      break;
 8007d4c:	e00f      	b.n	8007d6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	60fb      	str	r3, [r7, #12]

      break;
 8007d56:	e00a      	b.n	8007d6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	60fb      	str	r3, [r7, #12]

      break;
 8007d60:	e005      	b.n	8007d6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	60fb      	str	r3, [r7, #12]

      break;
 8007d6a:	e000      	b.n	8007d6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007d6c:	bf00      	nop
  }

  return tmpreg;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a3c      	ldr	r2, [pc, #240]	; (8007ebc <TIM_Base_SetConfig+0x104>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00f      	beq.n	8007df0 <TIM_Base_SetConfig+0x38>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd6:	d00b      	beq.n	8007df0 <TIM_Base_SetConfig+0x38>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a39      	ldr	r2, [pc, #228]	; (8007ec0 <TIM_Base_SetConfig+0x108>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d007      	beq.n	8007df0 <TIM_Base_SetConfig+0x38>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a38      	ldr	r2, [pc, #224]	; (8007ec4 <TIM_Base_SetConfig+0x10c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_Base_SetConfig+0x38>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a37      	ldr	r2, [pc, #220]	; (8007ec8 <TIM_Base_SetConfig+0x110>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d108      	bne.n	8007e02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a2d      	ldr	r2, [pc, #180]	; (8007ebc <TIM_Base_SetConfig+0x104>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01b      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e10:	d017      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <TIM_Base_SetConfig+0x108>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <TIM_Base_SetConfig+0x10c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00f      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a28      	ldr	r2, [pc, #160]	; (8007ec8 <TIM_Base_SetConfig+0x110>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00b      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a27      	ldr	r2, [pc, #156]	; (8007ecc <TIM_Base_SetConfig+0x114>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d007      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <TIM_Base_SetConfig+0x118>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d003      	beq.n	8007e42 <TIM_Base_SetConfig+0x8a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a25      	ldr	r2, [pc, #148]	; (8007ed4 <TIM_Base_SetConfig+0x11c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d108      	bne.n	8007e54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a10      	ldr	r2, [pc, #64]	; (8007ebc <TIM_Base_SetConfig+0x104>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00f      	beq.n	8007ea0 <TIM_Base_SetConfig+0xe8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <TIM_Base_SetConfig+0x110>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <TIM_Base_SetConfig+0xe8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a10      	ldr	r2, [pc, #64]	; (8007ecc <TIM_Base_SetConfig+0x114>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d007      	beq.n	8007ea0 <TIM_Base_SetConfig+0xe8>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a0f      	ldr	r2, [pc, #60]	; (8007ed0 <TIM_Base_SetConfig+0x118>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <TIM_Base_SetConfig+0xe8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ed4 <TIM_Base_SetConfig+0x11c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d103      	bne.n	8007ea8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	615a      	str	r2, [r3, #20]
}
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40012c00 	.word	0x40012c00
 8007ec0:	40000400 	.word	0x40000400
 8007ec4:	40000800 	.word	0x40000800
 8007ec8:	40013400 	.word	0x40013400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40014400 	.word	0x40014400
 8007ed4:	40014800 	.word	0x40014800

08007ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f023 0201 	bic.w	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0303 	bic.w	r3, r3, #3
 8007f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f023 0302 	bic.w	r3, r3, #2
 8007f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a2c      	ldr	r2, [pc, #176]	; (8007fe4 <TIM_OC1_SetConfig+0x10c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00f      	beq.n	8007f58 <TIM_OC1_SetConfig+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a2b      	ldr	r2, [pc, #172]	; (8007fe8 <TIM_OC1_SetConfig+0x110>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00b      	beq.n	8007f58 <TIM_OC1_SetConfig+0x80>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a2a      	ldr	r2, [pc, #168]	; (8007fec <TIM_OC1_SetConfig+0x114>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d007      	beq.n	8007f58 <TIM_OC1_SetConfig+0x80>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a29      	ldr	r2, [pc, #164]	; (8007ff0 <TIM_OC1_SetConfig+0x118>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d003      	beq.n	8007f58 <TIM_OC1_SetConfig+0x80>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a28      	ldr	r2, [pc, #160]	; (8007ff4 <TIM_OC1_SetConfig+0x11c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d10c      	bne.n	8007f72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f023 0308 	bic.w	r3, r3, #8
 8007f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f023 0304 	bic.w	r3, r3, #4
 8007f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a1b      	ldr	r2, [pc, #108]	; (8007fe4 <TIM_OC1_SetConfig+0x10c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00f      	beq.n	8007f9a <TIM_OC1_SetConfig+0xc2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a1a      	ldr	r2, [pc, #104]	; (8007fe8 <TIM_OC1_SetConfig+0x110>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00b      	beq.n	8007f9a <TIM_OC1_SetConfig+0xc2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a19      	ldr	r2, [pc, #100]	; (8007fec <TIM_OC1_SetConfig+0x114>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d007      	beq.n	8007f9a <TIM_OC1_SetConfig+0xc2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <TIM_OC1_SetConfig+0x118>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d003      	beq.n	8007f9a <TIM_OC1_SetConfig+0xc2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a17      	ldr	r2, [pc, #92]	; (8007ff4 <TIM_OC1_SetConfig+0x11c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d111      	bne.n	8007fbe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40012c00 	.word	0x40012c00
 8007fe8:	40013400 	.word	0x40013400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800

08007ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	f023 0210 	bic.w	r2, r3, #16
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0320 	bic.w	r3, r3, #32
 8008046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a28      	ldr	r2, [pc, #160]	; (80080f8 <TIM_OC2_SetConfig+0x100>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d003      	beq.n	8008064 <TIM_OC2_SetConfig+0x6c>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a27      	ldr	r2, [pc, #156]	; (80080fc <TIM_OC2_SetConfig+0x104>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d10d      	bne.n	8008080 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <TIM_OC2_SetConfig+0x100>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00f      	beq.n	80080a8 <TIM_OC2_SetConfig+0xb0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <TIM_OC2_SetConfig+0x104>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00b      	beq.n	80080a8 <TIM_OC2_SetConfig+0xb0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <TIM_OC2_SetConfig+0x108>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d007      	beq.n	80080a8 <TIM_OC2_SetConfig+0xb0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a1a      	ldr	r2, [pc, #104]	; (8008104 <TIM_OC2_SetConfig+0x10c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_OC2_SetConfig+0xb0>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a19      	ldr	r2, [pc, #100]	; (8008108 <TIM_OC2_SetConfig+0x110>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d113      	bne.n	80080d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40012c00 	.word	0x40012c00
 80080fc:	40013400 	.word	0x40013400
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	40014800 	.word	0x40014800

0800810c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0303 	bic.w	r3, r3, #3
 8008146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a27      	ldr	r2, [pc, #156]	; (8008208 <TIM_OC3_SetConfig+0xfc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC3_SetConfig+0x6a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a26      	ldr	r2, [pc, #152]	; (800820c <TIM_OC3_SetConfig+0x100>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d10d      	bne.n	8008192 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800817c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008190:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1c      	ldr	r2, [pc, #112]	; (8008208 <TIM_OC3_SetConfig+0xfc>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00f      	beq.n	80081ba <TIM_OC3_SetConfig+0xae>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a1b      	ldr	r2, [pc, #108]	; (800820c <TIM_OC3_SetConfig+0x100>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00b      	beq.n	80081ba <TIM_OC3_SetConfig+0xae>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a1a      	ldr	r2, [pc, #104]	; (8008210 <TIM_OC3_SetConfig+0x104>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d007      	beq.n	80081ba <TIM_OC3_SetConfig+0xae>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a19      	ldr	r2, [pc, #100]	; (8008214 <TIM_OC3_SetConfig+0x108>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <TIM_OC3_SetConfig+0xae>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a18      	ldr	r2, [pc, #96]	; (8008218 <TIM_OC3_SetConfig+0x10c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d113      	bne.n	80081e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	621a      	str	r2, [r3, #32]
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	40012c00 	.word	0x40012c00
 800820c:	40013400 	.word	0x40013400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800

0800821c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800824a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800826a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a18      	ldr	r2, [pc, #96]	; (80082dc <TIM_OC4_SetConfig+0xc0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00f      	beq.n	80082a0 <TIM_OC4_SetConfig+0x84>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <TIM_OC4_SetConfig+0xc4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d00b      	beq.n	80082a0 <TIM_OC4_SetConfig+0x84>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a16      	ldr	r2, [pc, #88]	; (80082e4 <TIM_OC4_SetConfig+0xc8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d007      	beq.n	80082a0 <TIM_OC4_SetConfig+0x84>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <TIM_OC4_SetConfig+0xcc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC4_SetConfig+0x84>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a14      	ldr	r2, [pc, #80]	; (80082ec <TIM_OC4_SetConfig+0xd0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d109      	bne.n	80082b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	019b      	lsls	r3, r3, #6
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40012c00 	.word	0x40012c00
 80082e0:	40013400 	.word	0x40013400
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40014400 	.word	0x40014400
 80082ec:	40014800 	.word	0x40014800

080082f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	041b      	lsls	r3, r3, #16
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <TIM_OC5_SetConfig+0xb4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a16      	ldr	r2, [pc, #88]	; (80083a8 <TIM_OC5_SetConfig+0xb8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <TIM_OC5_SetConfig+0xbc>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a14      	ldr	r2, [pc, #80]	; (80083b0 <TIM_OC5_SetConfig+0xc0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a13      	ldr	r2, [pc, #76]	; (80083b4 <TIM_OC5_SetConfig+0xc4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d109      	bne.n	800837e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40013400 	.word	0x40013400
 80083ac:	40014000 	.word	0x40014000
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800

080083b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	051b      	lsls	r3, r3, #20
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a18      	ldr	r2, [pc, #96]	; (8008470 <TIM_OC6_SetConfig+0xb8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00f      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a17      	ldr	r2, [pc, #92]	; (8008474 <TIM_OC6_SetConfig+0xbc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00b      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a16      	ldr	r2, [pc, #88]	; (8008478 <TIM_OC6_SetConfig+0xc0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <TIM_OC6_SetConfig+0xc4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a14      	ldr	r2, [pc, #80]	; (8008480 <TIM_OC6_SetConfig+0xc8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d109      	bne.n	8008448 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800843a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40012c00 	.word	0x40012c00
 8008474:	40013400 	.word	0x40013400
 8008478:	40014000 	.word	0x40014000
 800847c:	40014400 	.word	0x40014400
 8008480:	40014800 	.word	0x40014800

08008484 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ae:	f023 0307 	bic.w	r3, r3, #7
 80084b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b30      	cmp	r3, #48	; 0x30
 80084cc:	d05c      	beq.n	8008588 <TIM_SlaveTimer_SetConfig+0x104>
 80084ce:	2b30      	cmp	r3, #48	; 0x30
 80084d0:	d806      	bhi.n	80084e0 <TIM_SlaveTimer_SetConfig+0x5c>
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d058      	beq.n	8008588 <TIM_SlaveTimer_SetConfig+0x104>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d056      	beq.n	8008588 <TIM_SlaveTimer_SetConfig+0x104>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d054      	beq.n	8008588 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80084de:	e054      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80084e0:	2b50      	cmp	r3, #80	; 0x50
 80084e2:	d03d      	beq.n	8008560 <TIM_SlaveTimer_SetConfig+0xdc>
 80084e4:	2b50      	cmp	r3, #80	; 0x50
 80084e6:	d802      	bhi.n	80084ee <TIM_SlaveTimer_SetConfig+0x6a>
 80084e8:	2b40      	cmp	r3, #64	; 0x40
 80084ea:	d010      	beq.n	800850e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80084ec:	e04d      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80084ee:	2b60      	cmp	r3, #96	; 0x60
 80084f0:	d040      	beq.n	8008574 <TIM_SlaveTimer_SetConfig+0xf0>
 80084f2:	2b70      	cmp	r3, #112	; 0x70
 80084f4:	d000      	beq.n	80084f8 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80084f6:	e048      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68d9      	ldr	r1, [r3, #12]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f000 f9c1 	bl	800888e <TIM_ETR_SetConfig>
      break;
 800850c:	e03d      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b05      	cmp	r3, #5
 8008514:	d101      	bne.n	800851a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e038      	b.n	800858c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a1a      	ldr	r2, [r3, #32]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0201 	bic.w	r2, r2, #1
 8008530:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008540:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	621a      	str	r2, [r3, #32]
      break;
 800855e:	e014      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	6899      	ldr	r1, [r3, #8]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	461a      	mov	r2, r3
 800856e:	f000 f879 	bl	8008664 <TIM_TI1_ConfigInputStage>
      break;
 8008572:	e00a      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6818      	ldr	r0, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	6899      	ldr	r1, [r3, #8]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	461a      	mov	r2, r3
 8008582:	f000 f8db 	bl	800873c <TIM_TI2_ConfigInputStage>
      break;
 8008586:	e000      	b.n	800858a <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8008588:	bf00      	nop
  }
  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f023 0201 	bic.w	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a24      	ldr	r2, [pc, #144]	; (8008650 <TIM_TI1_SetConfig+0xbc>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <TIM_TI1_SetConfig+0x56>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d00f      	beq.n	80085ea <TIM_TI1_SetConfig+0x56>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4a21      	ldr	r2, [pc, #132]	; (8008654 <TIM_TI1_SetConfig+0xc0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00b      	beq.n	80085ea <TIM_TI1_SetConfig+0x56>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4a20      	ldr	r2, [pc, #128]	; (8008658 <TIM_TI1_SetConfig+0xc4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d007      	beq.n	80085ea <TIM_TI1_SetConfig+0x56>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4a1f      	ldr	r2, [pc, #124]	; (800865c <TIM_TI1_SetConfig+0xc8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <TIM_TI1_SetConfig+0x56>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4a1e      	ldr	r2, [pc, #120]	; (8008660 <TIM_TI1_SetConfig+0xcc>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d101      	bne.n	80085ee <TIM_TI1_SetConfig+0x5a>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <TIM_TI1_SetConfig+0x5c>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d008      	beq.n	8008606 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f023 0303 	bic.w	r3, r3, #3
 80085fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	e003      	b.n	800860e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	b2db      	uxtb	r3, r3
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f023 030a 	bic.w	r3, r3, #10
 8008628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f003 030a 	and.w	r3, r3, #10
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	40012c00 	.word	0x40012c00
 8008654:	40000400 	.word	0x40000400
 8008658:	40000800 	.word	0x40000800
 800865c:	40013400 	.word	0x40013400
 8008660:	40014000 	.word	0x40014000

08008664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0201 	bic.w	r2, r3, #1
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800868e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 030a 	bic.w	r3, r3, #10
 80086a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	621a      	str	r2, [r3, #32]
}
 80086b6:	bf00      	nop
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b087      	sub	sp, #28
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
 80086ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f023 0210 	bic.w	r2, r3, #16
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	031b      	lsls	r3, r3, #12
 8008706:	b29b      	uxth	r3, r3
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008714:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	621a      	str	r2, [r3, #32]
}
 8008730:	bf00      	nop
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	f023 0210 	bic.w	r2, r3, #16
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008766:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	031b      	lsls	r3, r3, #12
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f023 0303 	bic.w	r3, r3, #3
 80087c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80087ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	621a      	str	r2, [r3, #32]
}
 8008808:	bf00      	nop
 800880a:	371c      	adds	r7, #28
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008840:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008852:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	031b      	lsls	r3, r3, #12
 8008858:	b29b      	uxth	r3, r3
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008866:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	031b      	lsls	r3, r3, #12
 800886c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800888e:	b480      	push	{r7}
 8008890:	b087      	sub	sp, #28
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	021a      	lsls	r2, r3, #8
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	431a      	orrs	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	609a      	str	r2, [r3, #8]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b087      	sub	sp, #28
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2201      	movs	r2, #1
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a1a      	ldr	r2, [r3, #32]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	43db      	mvns	r3, r3
 80088f0:	401a      	ands	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6a1a      	ldr	r2, [r3, #32]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	fa01 f303 	lsl.w	r3, r1, r3
 8008906:	431a      	orrs	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	621a      	str	r2, [r3, #32]
}
 800890c:	bf00      	nop
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2204      	movs	r2, #4
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f000 f940 	bl	8008bb0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800893e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <HAL_TIMEx_PWMN_Start+0x5c>)
 8008948:	4013      	ands	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b06      	cmp	r3, #6
 8008950:	d00b      	beq.n	800896a <HAL_TIMEx_PWMN_Start+0x52>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008958:	d007      	beq.n	800896a <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f042 0201 	orr.w	r2, r2, #1
 8008968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	00010007 	.word	0x00010007

08008978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800898c:	2302      	movs	r3, #2
 800898e:	e063      	b.n	8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a2b      	ldr	r2, [pc, #172]	; (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d004      	beq.n	80089c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a2a      	ldr	r2, [pc, #168]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d108      	bne.n	80089d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1b      	ldr	r2, [pc, #108]	; (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d018      	beq.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a02:	d013      	beq.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d00e      	beq.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a17      	ldr	r2, [pc, #92]	; (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d009      	beq.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a12      	ldr	r2, [pc, #72]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d004      	beq.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a13      	ldr	r2, [pc, #76]	; (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d10c      	bne.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40013400 	.word	0x40013400
 8008a6c:	40000400 	.word	0x40000400
 8008a70:	40000800 	.word	0x40000800
 8008a74:	40014000 	.word	0x40014000

08008a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e065      	b.n	8008b60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	041b      	lsls	r3, r3, #16
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a14      	ldr	r2, [pc, #80]	; (8008b70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d115      	bne.n	8008b4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	051b      	lsls	r3, r3, #20
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40013400 	.word	0x40013400

08008b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a1a      	ldr	r2, [r3, #32]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	43db      	mvns	r3, r3
 8008bd2:	401a      	ands	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a1a      	ldr	r2, [r3, #32]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f003 031f 	and.w	r3, r3, #31
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	431a      	orrs	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e040      	b.n	8008c8e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f9 fdcf 	bl	80027c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2224      	movs	r2, #36	; 0x24
 8008c26:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f8bf 	bl	8008dbc <UART_SetConfig>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e022      	b.n	8008c8e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 facd 	bl	80091f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fb54 	bl	8009334 <UART_CheckIdleState>
 8008c8c:	4603      	mov	r3, r0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b08a      	sub	sp, #40	; 0x28
 8008c9a:	af02      	add	r7, sp, #8
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	f040 8081 	bne.w	8008db2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_UART_Transmit+0x26>
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e079      	b.n	8008db4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_UART_Transmit+0x38>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e072      	b.n	8008db4 <HAL_UART_Transmit+0x11e>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2221      	movs	r2, #33	; 0x21
 8008ce0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008ce2:	f7f9 ff87 	bl	8002bf4 <HAL_GetTick>
 8008ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	88fa      	ldrh	r2, [r7, #6]
 8008cec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	88fa      	ldrh	r2, [r7, #6]
 8008cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d00:	d108      	bne.n	8008d14 <HAL_UART_Transmit+0x7e>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	e003      	b.n	8008d1c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d1c:	e02d      	b.n	8008d7a <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2200      	movs	r2, #0
 8008d26:	2180      	movs	r1, #128	; 0x80
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fb48 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e03d      	b.n	8008db4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10b      	bne.n	8008d56 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	881a      	ldrh	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d4a:	b292      	uxth	r2, r2
 8008d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	3302      	adds	r3, #2
 8008d52:	61bb      	str	r3, [r7, #24]
 8008d54:	e008      	b.n	8008d68 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	3301      	adds	r3, #1
 8008d66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1cb      	bne.n	8008d1e <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2140      	movs	r1, #64	; 0x40
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fb14 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e009      	b.n	8008db4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e000      	b.n	8008db4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008db2:	2302      	movs	r3, #2
  }
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008dee:	f023 030c 	bic.w	r3, r3, #12
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	6939      	ldr	r1, [r7, #16]
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4aa9      	ldr	r2, [pc, #676]	; (80090e0 <UART_SetConfig+0x324>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d121      	bne.n	8008e84 <UART_SetConfig+0xc8>
 8008e40:	4ba8      	ldr	r3, [pc, #672]	; (80090e4 <UART_SetConfig+0x328>)
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d817      	bhi.n	8008e7c <UART_SetConfig+0xc0>
 8008e4c:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <UART_SetConfig+0x98>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e65 	.word	0x08008e65
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008e77 	.word	0x08008e77
 8008e60:	08008e6b 	.word	0x08008e6b
 8008e64:	2301      	movs	r3, #1
 8008e66:	77fb      	strb	r3, [r7, #31]
 8008e68:	e0b2      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	77fb      	strb	r3, [r7, #31]
 8008e6e:	e0af      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008e70:	2304      	movs	r3, #4
 8008e72:	77fb      	strb	r3, [r7, #31]
 8008e74:	e0ac      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008e76:	2308      	movs	r3, #8
 8008e78:	77fb      	strb	r3, [r7, #31]
 8008e7a:	e0a9      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	77fb      	strb	r3, [r7, #31]
 8008e80:	bf00      	nop
 8008e82:	e0a5      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a97      	ldr	r2, [pc, #604]	; (80090e8 <UART_SetConfig+0x32c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d123      	bne.n	8008ed6 <UART_SetConfig+0x11a>
 8008e8e:	4b95      	ldr	r3, [pc, #596]	; (80090e4 <UART_SetConfig+0x328>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e9a:	d012      	beq.n	8008ec2 <UART_SetConfig+0x106>
 8008e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea0:	d802      	bhi.n	8008ea8 <UART_SetConfig+0xec>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <UART_SetConfig+0xfa>
 8008ea6:	e012      	b.n	8008ece <UART_SetConfig+0x112>
 8008ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eac:	d00c      	beq.n	8008ec8 <UART_SetConfig+0x10c>
 8008eae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008eb2:	d003      	beq.n	8008ebc <UART_SetConfig+0x100>
 8008eb4:	e00b      	b.n	8008ece <UART_SetConfig+0x112>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	77fb      	strb	r3, [r7, #31]
 8008eba:	e089      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	77fb      	strb	r3, [r7, #31]
 8008ec0:	e086      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	77fb      	strb	r3, [r7, #31]
 8008ec6:	e083      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	77fb      	strb	r3, [r7, #31]
 8008ecc:	e080      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008ece:	2310      	movs	r3, #16
 8008ed0:	77fb      	strb	r3, [r7, #31]
 8008ed2:	bf00      	nop
 8008ed4:	e07c      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a84      	ldr	r2, [pc, #528]	; (80090ec <UART_SetConfig+0x330>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d123      	bne.n	8008f28 <UART_SetConfig+0x16c>
 8008ee0:	4b80      	ldr	r3, [pc, #512]	; (80090e4 <UART_SetConfig+0x328>)
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eec:	d012      	beq.n	8008f14 <UART_SetConfig+0x158>
 8008eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ef2:	d802      	bhi.n	8008efa <UART_SetConfig+0x13e>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <UART_SetConfig+0x14c>
 8008ef8:	e012      	b.n	8008f20 <UART_SetConfig+0x164>
 8008efa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008efe:	d00c      	beq.n	8008f1a <UART_SetConfig+0x15e>
 8008f00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008f04:	d003      	beq.n	8008f0e <UART_SetConfig+0x152>
 8008f06:	e00b      	b.n	8008f20 <UART_SetConfig+0x164>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	77fb      	strb	r3, [r7, #31]
 8008f0c:	e060      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	77fb      	strb	r3, [r7, #31]
 8008f12:	e05d      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f14:	2304      	movs	r3, #4
 8008f16:	77fb      	strb	r3, [r7, #31]
 8008f18:	e05a      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	77fb      	strb	r3, [r7, #31]
 8008f1e:	e057      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f20:	2310      	movs	r3, #16
 8008f22:	77fb      	strb	r3, [r7, #31]
 8008f24:	bf00      	nop
 8008f26:	e053      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a70      	ldr	r2, [pc, #448]	; (80090f0 <UART_SetConfig+0x334>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d123      	bne.n	8008f7a <UART_SetConfig+0x1be>
 8008f32:	4b6c      	ldr	r3, [pc, #432]	; (80090e4 <UART_SetConfig+0x328>)
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f3e:	d012      	beq.n	8008f66 <UART_SetConfig+0x1aa>
 8008f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f44:	d802      	bhi.n	8008f4c <UART_SetConfig+0x190>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <UART_SetConfig+0x19e>
 8008f4a:	e012      	b.n	8008f72 <UART_SetConfig+0x1b6>
 8008f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f50:	d00c      	beq.n	8008f6c <UART_SetConfig+0x1b0>
 8008f52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f56:	d003      	beq.n	8008f60 <UART_SetConfig+0x1a4>
 8008f58:	e00b      	b.n	8008f72 <UART_SetConfig+0x1b6>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	77fb      	strb	r3, [r7, #31]
 8008f5e:	e037      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f60:	2302      	movs	r3, #2
 8008f62:	77fb      	strb	r3, [r7, #31]
 8008f64:	e034      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f66:	2304      	movs	r3, #4
 8008f68:	77fb      	strb	r3, [r7, #31]
 8008f6a:	e031      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	77fb      	strb	r3, [r7, #31]
 8008f70:	e02e      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f72:	2310      	movs	r3, #16
 8008f74:	77fb      	strb	r3, [r7, #31]
 8008f76:	bf00      	nop
 8008f78:	e02a      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a5d      	ldr	r2, [pc, #372]	; (80090f4 <UART_SetConfig+0x338>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d123      	bne.n	8008fcc <UART_SetConfig+0x210>
 8008f84:	4b57      	ldr	r3, [pc, #348]	; (80090e4 <UART_SetConfig+0x328>)
 8008f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f90:	d012      	beq.n	8008fb8 <UART_SetConfig+0x1fc>
 8008f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f96:	d802      	bhi.n	8008f9e <UART_SetConfig+0x1e2>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <UART_SetConfig+0x1f0>
 8008f9c:	e012      	b.n	8008fc4 <UART_SetConfig+0x208>
 8008f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fa2:	d00c      	beq.n	8008fbe <UART_SetConfig+0x202>
 8008fa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fa8:	d003      	beq.n	8008fb2 <UART_SetConfig+0x1f6>
 8008faa:	e00b      	b.n	8008fc4 <UART_SetConfig+0x208>
 8008fac:	2300      	movs	r3, #0
 8008fae:	77fb      	strb	r3, [r7, #31]
 8008fb0:	e00e      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	77fb      	strb	r3, [r7, #31]
 8008fb6:	e00b      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	77fb      	strb	r3, [r7, #31]
 8008fbc:	e008      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008fbe:	2308      	movs	r3, #8
 8008fc0:	77fb      	strb	r3, [r7, #31]
 8008fc2:	e005      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	bf00      	nop
 8008fca:	e001      	b.n	8008fd0 <UART_SetConfig+0x214>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd8:	f040 808e 	bne.w	80090f8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d85e      	bhi.n	80090a0 <UART_SetConfig+0x2e4>
 8008fe2:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <UART_SetConfig+0x22c>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	0800902d 	.word	0x0800902d
 8008ff0:	0800904d 	.word	0x0800904d
 8008ff4:	080090a1 	.word	0x080090a1
 8008ff8:	08009069 	.word	0x08009069
 8008ffc:	080090a1 	.word	0x080090a1
 8009000:	080090a1 	.word	0x080090a1
 8009004:	080090a1 	.word	0x080090a1
 8009008:	08009089 	.word	0x08009089
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800900c:	f7fd ff9c 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 8009010:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	005a      	lsls	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	441a      	add	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	fbb2 f3f3 	udiv	r3, r2, r3
 8009026:	b29b      	uxth	r3, r3
 8009028:	61bb      	str	r3, [r7, #24]
        break;
 800902a:	e03c      	b.n	80090a6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800902c:	f7fd ffae 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 8009030:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	005a      	lsls	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	fbb2 f3f3 	udiv	r3, r2, r3
 8009046:	b29b      	uxth	r3, r3
 8009048:	61bb      	str	r3, [r7, #24]
        break;
 800904a:	e02c      	b.n	80090a6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009056:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	6852      	ldr	r2, [r2, #4]
 800905e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009062:	b29b      	uxth	r3, r3
 8009064:	61bb      	str	r3, [r7, #24]
        break;
 8009066:	e01e      	b.n	80090a6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009068:	f7fd fef8 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 800906c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	005a      	lsls	r2, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	441a      	add	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009082:	b29b      	uxth	r3, r3
 8009084:	61bb      	str	r3, [r7, #24]
        break;
 8009086:	e00e      	b.n	80090a6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	085b      	lsrs	r3, r3, #1
 800908e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	fbb2 f3f3 	udiv	r3, r2, r3
 800909a:	b29b      	uxth	r3, r3
 800909c:	61bb      	str	r3, [r7, #24]
        break;
 800909e:	e002      	b.n	80090a6 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	75fb      	strb	r3, [r7, #23]
        break;
 80090a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b0f      	cmp	r3, #15
 80090aa:	d916      	bls.n	80090da <UART_SetConfig+0x31e>
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b2:	d212      	bcs.n	80090da <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	f023 030f 	bic.w	r3, r3, #15
 80090bc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	085b      	lsrs	r3, r3, #1
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	897b      	ldrh	r3, [r7, #10]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	897a      	ldrh	r2, [r7, #10]
 80090d6:	60da      	str	r2, [r3, #12]
 80090d8:	e07e      	b.n	80091d8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
 80090de:	e07b      	b.n	80091d8 <UART_SetConfig+0x41c>
 80090e0:	40013800 	.word	0x40013800
 80090e4:	40021000 	.word	0x40021000
 80090e8:	40004400 	.word	0x40004400
 80090ec:	40004800 	.word	0x40004800
 80090f0:	40004c00 	.word	0x40004c00
 80090f4:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80090f8:	7ffb      	ldrb	r3, [r7, #31]
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d85b      	bhi.n	80091b6 <UART_SetConfig+0x3fa>
 80090fe:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <UART_SetConfig+0x348>)
 8009100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009104:	08009129 	.word	0x08009129
 8009108:	08009147 	.word	0x08009147
 800910c:	08009165 	.word	0x08009165
 8009110:	080091b7 	.word	0x080091b7
 8009114:	08009181 	.word	0x08009181
 8009118:	080091b7 	.word	0x080091b7
 800911c:	080091b7 	.word	0x080091b7
 8009120:	080091b7 	.word	0x080091b7
 8009124:	0800919f 	.word	0x0800919f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009128:	f7fd ff0e 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 800912c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	085a      	lsrs	r2, r3, #1
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	441a      	add	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009140:	b29b      	uxth	r3, r3
 8009142:	61bb      	str	r3, [r7, #24]
        break;
 8009144:	e03a      	b.n	80091bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009146:	f7fd ff21 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 800914a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	085a      	lsrs	r2, r3, #1
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	441a      	add	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	fbb2 f3f3 	udiv	r3, r2, r3
 800915e:	b29b      	uxth	r3, r3
 8009160:	61bb      	str	r3, [r7, #24]
        break;
 8009162:	e02b      	b.n	80091bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	085b      	lsrs	r3, r3, #1
 800916a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800916e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6852      	ldr	r2, [r2, #4]
 8009176:	fbb3 f3f2 	udiv	r3, r3, r2
 800917a:	b29b      	uxth	r3, r3
 800917c:	61bb      	str	r3, [r7, #24]
        break;
 800917e:	e01d      	b.n	80091bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009180:	f7fd fe6c 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8009184:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	085a      	lsrs	r2, r3, #1
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	441a      	add	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	b29b      	uxth	r3, r3
 800919a:	61bb      	str	r3, [r7, #24]
        break;
 800919c:	e00e      	b.n	80091bc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	61bb      	str	r3, [r7, #24]
        break;
 80091b4:	e002      	b.n	80091bc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
        break;
 80091ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b0f      	cmp	r3, #15
 80091c0:	d908      	bls.n	80091d4 <UART_SetConfig+0x418>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c8:	d204      	bcs.n	80091d4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	60da      	str	r2, [r3, #12]
 80091d2:	e001      	b.n	80091d8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop

080091f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01a      	beq.n	8009306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ee:	d10a      	bne.n	8009306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	605a      	str	r2, [r3, #4]
  }
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af02      	add	r7, sp, #8
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009342:	f7f9 fc57 	bl	8002bf4 <HAL_GetTick>
 8009346:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b08      	cmp	r3, #8
 8009354:	d10e      	bne.n	8009374 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f82a 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e020      	b.n	80093b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b04      	cmp	r3, #4
 8009380:	d10e      	bne.n	80093a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f814 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e00a      	b.n	80093b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ce:	e05d      	b.n	800948c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d6:	d059      	beq.n	800948c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093d8:	f7f9 fc0c 	bl	8002bf4 <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d302      	bcc.n	80093ee <UART_WaitOnFlagUntilTimeout+0x30>
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d11b      	bne.n	8009426 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0201 	bic.w	r2, r2, #1
 800940c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2220      	movs	r2, #32
 8009412:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e042      	b.n	80094ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d02b      	beq.n	800948c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800943e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009442:	d123      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800944c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800945c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2220      	movs	r2, #32
 8009472:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2220      	movs	r2, #32
 8009478:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e00f      	b.n	80094ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69da      	ldr	r2, [r3, #28]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	bf0c      	ite	eq
 800949c:	2301      	moveq	r3, #1
 800949e:	2300      	movne	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d092      	beq.n	80093d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094b4:	b490      	push	{r4, r7}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80094d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d8:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	78db      	ldrb	r3, [r3, #3]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d819      	bhi.n	8009516 <USB_ActivateEndpoint+0x62>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <USB_ActivateEndpoint+0x34>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	0800950d 	.word	0x0800950d
 80094f0:	0800951d 	.word	0x0800951d
 80094f4:	08009503 	.word	0x08009503
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80094f8:	8abb      	ldrh	r3, [r7, #20]
 80094fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094fe:	82bb      	strh	r3, [r7, #20]
      break;
 8009500:	e00d      	b.n	800951e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009502:	8abb      	ldrh	r3, [r7, #20]
 8009504:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009508:	82bb      	strh	r3, [r7, #20]
      break;
 800950a:	e008      	b.n	800951e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800950c:	8abb      	ldrh	r3, [r7, #20]
 800950e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009512:	82bb      	strh	r3, [r7, #20]
      break;
 8009514:	e003      	b.n	800951e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]
      break;
 800951a:	e000      	b.n	800951e <USB_ActivateEndpoint+0x6a>
      break;
 800951c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	441a      	add	r2, r3
 8009528:	8abb      	ldrh	r3, [r7, #20]
 800952a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800952e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	b29b      	uxth	r3, r3
 800953c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	b21b      	sxth	r3, r3
 800954e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009556:	b21a      	sxth	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	b21b      	sxth	r3, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	b21b      	sxth	r3, r3
 8009562:	b29c      	uxth	r4, r3
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	441a      	add	r2, r3
 800956e:	4b8c      	ldr	r3, [pc, #560]	; (80097a0 <USB_ActivateEndpoint+0x2ec>)
 8009570:	4323      	orrs	r3, r4
 8009572:	b29b      	uxth	r3, r3
 8009574:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	7b1b      	ldrb	r3, [r3, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f040 8116 	bne.w	80097ac <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d067      	beq.n	8009658 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009588:	687c      	ldr	r4, [r7, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009590:	b29b      	uxth	r3, r3
 8009592:	441c      	add	r4, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	4423      	add	r3, r4
 800959c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095a0:	461c      	mov	r4, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	88db      	ldrh	r3, [r3, #6]
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	b29c      	uxth	r4, r3
 80095be:	4623      	mov	r3, r4
 80095c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d014      	beq.n	80095f2 <USB_ActivateEndpoint+0x13e>
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095de:	b29c      	uxth	r4, r3
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	441a      	add	r2, r3
 80095ea:	4b6e      	ldr	r3, [pc, #440]	; (80097a4 <USB_ActivateEndpoint+0x2f0>)
 80095ec:	4323      	orrs	r3, r4
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	78db      	ldrb	r3, [r3, #3]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d018      	beq.n	800962c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009610:	b29c      	uxth	r4, r3
 8009612:	f084 0320 	eor.w	r3, r4, #32
 8009616:	b29c      	uxth	r4, r3
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	441a      	add	r2, r3
 8009622:	4b5f      	ldr	r3, [pc, #380]	; (80097a0 <USB_ActivateEndpoint+0x2ec>)
 8009624:	4323      	orrs	r3, r4
 8009626:	b29b      	uxth	r3, r3
 8009628:	8013      	strh	r3, [r2, #0]
 800962a:	e22f      	b.n	8009a8c <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29b      	uxth	r3, r3
 800963a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009642:	b29c      	uxth	r4, r3
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	441a      	add	r2, r3
 800964e:	4b54      	ldr	r3, [pc, #336]	; (80097a0 <USB_ActivateEndpoint+0x2ec>)
 8009650:	4323      	orrs	r3, r4
 8009652:	b29b      	uxth	r3, r3
 8009654:	8013      	strh	r3, [r2, #0]
 8009656:	e219      	b.n	8009a8c <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009658:	687c      	ldr	r4, [r7, #4]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009660:	b29b      	uxth	r3, r3
 8009662:	441c      	add	r4, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	011b      	lsls	r3, r3, #4
 800966a:	4423      	add	r3, r4
 800966c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009670:	461c      	mov	r4, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	88db      	ldrh	r3, [r3, #6]
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	b29b      	uxth	r3, r3
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	b29b      	uxth	r3, r3
 800967e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009680:	687c      	ldr	r4, [r7, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009688:	b29b      	uxth	r3, r3
 800968a:	441c      	add	r4, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	4423      	add	r3, r4
 8009694:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d110      	bne.n	80096c4 <USB_ActivateEndpoint+0x210>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	801a      	strh	r2, [r3, #0]
 80096c2:	e02f      	b.n	8009724 <USB_ActivateEndpoint+0x270>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b3e      	cmp	r3, #62	; 0x3e
 80096ca:	d813      	bhi.n	80096f4 <USB_ActivateEndpoint+0x240>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	085b      	lsrs	r3, r3, #1
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <USB_ActivateEndpoint+0x232>
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	3301      	adds	r3, #1
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	029b      	lsls	r3, r3, #10
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	e017      	b.n	8009724 <USB_ActivateEndpoint+0x270>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f003 031f 	and.w	r3, r3, #31
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <USB_ActivateEndpoint+0x25a>
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	3b01      	subs	r3, #1
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	b29b      	uxth	r3, r3
 8009712:	029b      	lsls	r3, r3, #10
 8009714:	b29b      	uxth	r3, r3
 8009716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800971a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	b29c      	uxth	r4, r3
 8009732:	4623      	mov	r3, r4
 8009734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d014      	beq.n	8009766 <USB_ActivateEndpoint+0x2b2>
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800974e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009752:	b29c      	uxth	r4, r3
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	441a      	add	r2, r3
 800975e:	4b12      	ldr	r3, [pc, #72]	; (80097a8 <USB_ActivateEndpoint+0x2f4>)
 8009760:	4323      	orrs	r3, r4
 8009762:	b29b      	uxth	r3, r3
 8009764:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977c:	b29c      	uxth	r4, r3
 800977e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009782:	b29c      	uxth	r4, r3
 8009784:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009788:	b29c      	uxth	r4, r3
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	441a      	add	r2, r3
 8009794:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <USB_ActivateEndpoint+0x2ec>)
 8009796:	4323      	orrs	r3, r4
 8009798:	b29b      	uxth	r3, r3
 800979a:	8013      	strh	r3, [r2, #0]
 800979c:	e176      	b.n	8009a8c <USB_ActivateEndpoint+0x5d8>
 800979e:	bf00      	nop
 80097a0:	ffff8080 	.word	0xffff8080
 80097a4:	ffff80c0 	.word	0xffff80c0
 80097a8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c2:	b29c      	uxth	r4, r3
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	441a      	add	r2, r3
 80097ce:	4b96      	ldr	r3, [pc, #600]	; (8009a28 <USB_ActivateEndpoint+0x574>)
 80097d0:	4323      	orrs	r3, r4
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80097d6:	687c      	ldr	r4, [r7, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097de:	b29b      	uxth	r3, r3
 80097e0:	441c      	add	r4, r3
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	4423      	add	r3, r4
 80097ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ee:	461c      	mov	r4, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	891b      	ldrh	r3, [r3, #8]
 80097f4:	085b      	lsrs	r3, r3, #1
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	8023      	strh	r3, [r4, #0]
 80097fe:	687c      	ldr	r4, [r7, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009806:	b29b      	uxth	r3, r3
 8009808:	441c      	add	r4, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	4423      	add	r3, r4
 8009812:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009816:	461c      	mov	r4, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	895b      	ldrh	r3, [r3, #10]
 800981c:	085b      	lsrs	r3, r3, #1
 800981e:	b29b      	uxth	r3, r3
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	b29b      	uxth	r3, r3
 8009824:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 8088 	bne.w	8009940 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	b29c      	uxth	r4, r3
 800983e:	4623      	mov	r3, r4
 8009840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d014      	beq.n	8009872 <USB_ActivateEndpoint+0x3be>
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800985a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985e:	b29c      	uxth	r4, r3
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	441a      	add	r2, r3
 800986a:	4b70      	ldr	r3, [pc, #448]	; (8009a2c <USB_ActivateEndpoint+0x578>)
 800986c:	4323      	orrs	r3, r4
 800986e:	b29b      	uxth	r3, r3
 8009870:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	b29c      	uxth	r4, r3
 8009880:	4623      	mov	r3, r4
 8009882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d014      	beq.n	80098b4 <USB_ActivateEndpoint+0x400>
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a0:	b29c      	uxth	r4, r3
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	441a      	add	r2, r3
 80098ac:	4b60      	ldr	r3, [pc, #384]	; (8009a30 <USB_ActivateEndpoint+0x57c>)
 80098ae:	4323      	orrs	r3, r4
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ca:	b29c      	uxth	r4, r3
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	441a      	add	r2, r3
 80098d6:	4b56      	ldr	r3, [pc, #344]	; (8009a30 <USB_ActivateEndpoint+0x57c>)
 80098d8:	4323      	orrs	r3, r4
 80098da:	b29b      	uxth	r3, r3
 80098dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f4:	b29c      	uxth	r4, r3
 80098f6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80098fa:	b29c      	uxth	r4, r3
 80098fc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009900:	b29c      	uxth	r4, r3
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	441a      	add	r2, r3
 800990c:	4b49      	ldr	r3, [pc, #292]	; (8009a34 <USB_ActivateEndpoint+0x580>)
 800990e:	4323      	orrs	r3, r4
 8009910:	b29b      	uxth	r3, r3
 8009912:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800992a:	b29c      	uxth	r4, r3
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	441a      	add	r2, r3
 8009936:	4b3f      	ldr	r3, [pc, #252]	; (8009a34 <USB_ActivateEndpoint+0x580>)
 8009938:	4323      	orrs	r3, r4
 800993a:	b29b      	uxth	r3, r3
 800993c:	8013      	strh	r3, [r2, #0]
 800993e:	e0a5      	b.n	8009a8c <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	b29c      	uxth	r4, r3
 800994e:	4623      	mov	r3, r4
 8009950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d014      	beq.n	8009982 <USB_ActivateEndpoint+0x4ce>
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996e:	b29c      	uxth	r4, r3
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	441a      	add	r2, r3
 800997a:	4b2c      	ldr	r3, [pc, #176]	; (8009a2c <USB_ActivateEndpoint+0x578>)
 800997c:	4323      	orrs	r3, r4
 800997e:	b29b      	uxth	r3, r3
 8009980:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29c      	uxth	r4, r3
 8009990:	4623      	mov	r3, r4
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d014      	beq.n	80099c4 <USB_ActivateEndpoint+0x510>
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b0:	b29c      	uxth	r4, r3
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	441a      	add	r2, r3
 80099bc:	4b1c      	ldr	r3, [pc, #112]	; (8009a30 <USB_ActivateEndpoint+0x57c>)
 80099be:	4323      	orrs	r3, r4
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099da:	b29c      	uxth	r4, r3
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	441a      	add	r2, r3
 80099e6:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <USB_ActivateEndpoint+0x578>)
 80099e8:	4323      	orrs	r3, r4
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	78db      	ldrb	r3, [r3, #3]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d020      	beq.n	8009a38 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a0c:	b29c      	uxth	r4, r3
 8009a0e:	f084 0320 	eor.w	r3, r4, #32
 8009a12:	b29c      	uxth	r4, r3
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	441a      	add	r2, r3
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <USB_ActivateEndpoint+0x580>)
 8009a20:	4323      	orrs	r3, r4
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8013      	strh	r3, [r2, #0]
 8009a26:	e01c      	b.n	8009a62 <USB_ActivateEndpoint+0x5ae>
 8009a28:	ffff8180 	.word	0xffff8180
 8009a2c:	ffffc080 	.word	0xffffc080
 8009a30:	ffff80c0 	.word	0xffff80c0
 8009a34:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4e:	b29c      	uxth	r4, r3
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	441a      	add	r2, r3
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <USB_ActivateEndpoint+0x5e4>)
 8009a5c:	4323      	orrs	r3, r4
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	b29c      	uxth	r4, r3
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	441a      	add	r2, r3
 8009a84:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <USB_ActivateEndpoint+0x5e4>)
 8009a86:	4323      	orrs	r3, r4
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc90      	pop	{r4, r7}
 8009a96:	4770      	bx	lr
 8009a98:	ffff8080 	.word	0xffff8080

08009a9c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b095      	sub	sp, #84	; 0x54
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	f040 816d 	bne.w	8009d8a <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d909      	bls.n	8009ad0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ac8:	1ad2      	subs	r2, r2, r3
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	619a      	str	r2, [r3, #24]
 8009ace:	e005      	b.n	8009adc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	7b1b      	ldrb	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11a      	bne.n	8009b1a <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	6959      	ldr	r1, [r3, #20]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	88da      	ldrh	r2, [r3, #6]
 8009aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fbab 	bl	800a24c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009af6:	687c      	ldr	r4, [r7, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	441c      	add	r4, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	4423      	add	r3, r4
 8009b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e11b      	b.n	8009d52 <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d06a      	beq.n	8009c06 <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b30:	687c      	ldr	r4, [r7, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d14c      	bne.n	8009bd4 <USB_EPStartXfer+0x138>
 8009b3a:	687c      	ldr	r4, [r7, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	441c      	add	r4, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	4423      	add	r3, r4
 8009b4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d110      	bne.n	8009b7c <USB_EPStartXfer+0xe0>
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	801a      	strh	r2, [r3, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	e03f      	b.n	8009bfc <USB_EPStartXfer+0x160>
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009b80:	d811      	bhi.n	8009ba6 <USB_EPStartXfer+0x10a>
 8009b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	647b      	str	r3, [r7, #68]	; 0x44
 8009b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <USB_EPStartXfer+0xfc>
 8009b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b94:	3301      	adds	r3, #1
 8009b96:	647b      	str	r3, [r7, #68]	; 0x44
 8009b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	029b      	lsls	r3, r3, #10
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	801a      	strh	r2, [r3, #0]
 8009ba4:	e02a      	b.n	8009bfc <USB_EPStartXfer+0x160>
 8009ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba8:	095b      	lsrs	r3, r3, #5
 8009baa:	647b      	str	r3, [r7, #68]	; 0x44
 8009bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bae:	f003 031f 	and.w	r3, r3, #31
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <USB_EPStartXfer+0x120>
 8009bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	647b      	str	r3, [r7, #68]	; 0x44
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	029b      	lsls	r3, r3, #10
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	801a      	strh	r2, [r3, #0]
 8009bd2:	e013      	b.n	8009bfc <USB_EPStartXfer+0x160>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	785b      	ldrb	r3, [r3, #1]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d10f      	bne.n	8009bfc <USB_EPStartXfer+0x160>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	441c      	add	r4, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	4423      	add	r3, r4
 8009bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	895b      	ldrh	r3, [r3, #10]
 8009c00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c04:	e069      	b.n	8009cda <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d14c      	bne.n	8009ca8 <USB_EPStartXfer+0x20c>
 8009c0e:	687c      	ldr	r4, [r7, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	441c      	add	r4, r3
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	4423      	add	r3, r4
 8009c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c26:	61bb      	str	r3, [r7, #24]
 8009c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d110      	bne.n	8009c50 <USB_EPStartXfer+0x1b4>
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	e040      	b.n	8009cd2 <USB_EPStartXfer+0x236>
 8009c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c52:	2b3e      	cmp	r3, #62	; 0x3e
 8009c54:	d811      	bhi.n	8009c7a <USB_EPStartXfer+0x1de>
 8009c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c58:	085b      	lsrs	r3, r3, #1
 8009c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <USB_EPStartXfer+0x1d0>
 8009c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c68:	3301      	adds	r3, #1
 8009c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	029b      	lsls	r3, r3, #10
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	e02b      	b.n	8009cd2 <USB_EPStartXfer+0x236>
 8009c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8009c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c82:	f003 031f 	and.w	r3, r3, #31
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <USB_EPStartXfer+0x1f4>
 8009c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	029b      	lsls	r3, r3, #10
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	e014      	b.n	8009cd2 <USB_EPStartXfer+0x236>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d110      	bne.n	8009cd2 <USB_EPStartXfer+0x236>
 8009cb0:	687c      	ldr	r4, [r7, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	441c      	add	r4, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	011b      	lsls	r3, r3, #4
 8009cc2:	4423      	add	r3, r4
 8009cc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	891b      	ldrh	r3, [r3, #8]
 8009cd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6959      	ldr	r1, [r3, #20]
 8009cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fab0 	bl	800a24c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d115      	bne.n	8009d20 <USB_EPStartXfer+0x284>
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	b29c      	uxth	r4, r3
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	441a      	add	r2, r3
 8009d16:	4b96      	ldr	r3, [pc, #600]	; (8009f70 <USB_EPStartXfer+0x4d4>)
 8009d18:	4323      	orrs	r3, r4
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	8013      	strh	r3, [r2, #0]
 8009d1e:	e018      	b.n	8009d52 <USB_EPStartXfer+0x2b6>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d114      	bne.n	8009d52 <USB_EPStartXfer+0x2b6>
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3e:	b29c      	uxth	r4, r3
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	441a      	add	r2, r3
 8009d4a:	4b8a      	ldr	r3, [pc, #552]	; (8009f74 <USB_EPStartXfer+0x4d8>)
 8009d4c:	4323      	orrs	r3, r4
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d68:	b29c      	uxth	r4, r3
 8009d6a:	f084 0310 	eor.w	r3, r4, #16
 8009d6e:	b29c      	uxth	r4, r3
 8009d70:	f084 0320 	eor.w	r3, r4, #32
 8009d74:	b29c      	uxth	r4, r3
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	441a      	add	r2, r3
 8009d80:	4b7d      	ldr	r3, [pc, #500]	; (8009f78 <USB_EPStartXfer+0x4dc>)
 8009d82:	4323      	orrs	r3, r4
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	8013      	strh	r3, [r2, #0]
 8009d88:	e153      	b.n	800a032 <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d909      	bls.n	8009daa <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	619a      	str	r2, [r3, #24]
 8009da8:	e005      	b.n	8009db6 <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2200      	movs	r2, #0
 8009db4:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	7b1b      	ldrb	r3, [r3, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d14c      	bne.n	8009e58 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009dbe:	687c      	ldr	r4, [r7, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	441c      	add	r4, r3
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	4423      	add	r3, r4
 8009dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009dd6:	623b      	str	r3, [r7, #32]
 8009dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d110      	bne.n	8009e00 <USB_EPStartXfer+0x364>
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	801a      	strh	r2, [r3, #0]
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	e0fd      	b.n	8009ffc <USB_EPStartXfer+0x560>
 8009e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e02:	2b3e      	cmp	r3, #62	; 0x3e
 8009e04:	d811      	bhi.n	8009e2a <USB_EPStartXfer+0x38e>
 8009e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <USB_EPStartXfer+0x380>
 8009e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e18:	3301      	adds	r3, #1
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	029b      	lsls	r3, r3, #10
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	801a      	strh	r2, [r3, #0]
 8009e28:	e0e8      	b.n	8009ffc <USB_EPStartXfer+0x560>
 8009e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e2c:	095b      	lsrs	r3, r3, #5
 8009e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d102      	bne.n	8009e40 <USB_EPStartXfer+0x3a4>
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	029b      	lsls	r3, r3, #10
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	e0d1      	b.n	8009ffc <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	785b      	ldrb	r3, [r3, #1]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d14c      	bne.n	8009efa <USB_EPStartXfer+0x45e>
 8009e60:	687c      	ldr	r4, [r7, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	441c      	add	r4, r3
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	4423      	add	r3, r4
 8009e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d110      	bne.n	8009ea2 <USB_EPStartXfer+0x406>
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	801a      	strh	r2, [r3, #0]
 8009ea0:	e040      	b.n	8009f24 <USB_EPStartXfer+0x488>
 8009ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ea6:	d811      	bhi.n	8009ecc <USB_EPStartXfer+0x430>
 8009ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eaa:	085b      	lsrs	r3, r3, #1
 8009eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <USB_EPStartXfer+0x422>
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	3301      	adds	r3, #1
 8009ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	029b      	lsls	r3, r3, #10
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	e02b      	b.n	8009f24 <USB_EPStartXfer+0x488>
 8009ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ed4:	f003 031f 	and.w	r3, r3, #31
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <USB_EPStartXfer+0x446>
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	029b      	lsls	r3, r3, #10
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef6:	801a      	strh	r2, [r3, #0]
 8009ef8:	e014      	b.n	8009f24 <USB_EPStartXfer+0x488>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d110      	bne.n	8009f24 <USB_EPStartXfer+0x488>
 8009f02:	687c      	ldr	r4, [r7, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	441c      	add	r4, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	4423      	add	r3, r4
 8009f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	801a      	strh	r2, [r3, #0]
 8009f24:	687c      	ldr	r4, [r7, #4]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d152      	bne.n	8009fd4 <USB_EPStartXfer+0x538>
 8009f2e:	687c      	ldr	r4, [r7, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	441c      	add	r4, r3
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	4423      	add	r3, r4
 8009f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f46:	627b      	str	r3, [r7, #36]	; 0x24
 8009f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d116      	bne.n	8009f7c <USB_EPStartXfer+0x4e0>
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	e045      	b.n	8009ffc <USB_EPStartXfer+0x560>
 8009f70:	ffff80c0 	.word	0xffff80c0
 8009f74:	ffffc080 	.word	0xffffc080
 8009f78:	ffff8080 	.word	0xffff8080
 8009f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f80:	d811      	bhi.n	8009fa6 <USB_EPStartXfer+0x50a>
 8009f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f84:	085b      	lsrs	r3, r3, #1
 8009f86:	637b      	str	r3, [r7, #52]	; 0x34
 8009f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <USB_EPStartXfer+0x4fc>
 8009f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f94:	3301      	adds	r3, #1
 8009f96:	637b      	str	r3, [r7, #52]	; 0x34
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	029b      	lsls	r3, r3, #10
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	801a      	strh	r2, [r3, #0]
 8009fa4:	e02a      	b.n	8009ffc <USB_EPStartXfer+0x560>
 8009fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa8:	095b      	lsrs	r3, r3, #5
 8009faa:	637b      	str	r3, [r7, #52]	; 0x34
 8009fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fae:	f003 031f 	and.w	r3, r3, #31
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <USB_EPStartXfer+0x520>
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	029b      	lsls	r3, r3, #10
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	e013      	b.n	8009ffc <USB_EPStartXfer+0x560>
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d10f      	bne.n	8009ffc <USB_EPStartXfer+0x560>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	441c      	add	r4, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	4423      	add	r3, r4
 8009fee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	881b      	ldrh	r3, [r3, #0]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a012:	b29c      	uxth	r4, r3
 800a014:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a018:	b29c      	uxth	r4, r3
 800a01a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a01e:	b29c      	uxth	r4, r3
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	441a      	add	r2, r3
 800a02a:	4b04      	ldr	r3, [pc, #16]	; (800a03c <USB_EPStartXfer+0x5a0>)
 800a02c:	4323      	orrs	r3, r4
 800a02e:	b29b      	uxth	r3, r3
 800a030:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3754      	adds	r7, #84	; 0x54
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd90      	pop	{r4, r7, pc}
 800a03c:	ffff8080 	.word	0xffff8080

0800a040 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a040:	b490      	push	{r4, r7}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	785b      	ldrb	r3, [r3, #1]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d018      	beq.n	800a084 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a068:	b29c      	uxth	r4, r3
 800a06a:	f084 0310 	eor.w	r3, r4, #16
 800a06e:	b29c      	uxth	r4, r3
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	441a      	add	r2, r3
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <USB_EPSetStall+0x80>)
 800a07c:	4323      	orrs	r3, r4
 800a07e:	b29b      	uxth	r3, r3
 800a080:	8013      	strh	r3, [r2, #0]
 800a082:	e017      	b.n	800a0b4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	b29b      	uxth	r3, r3
 800a092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09a:	b29c      	uxth	r4, r3
 800a09c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a0a0:	b29c      	uxth	r4, r3
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	441a      	add	r2, r3
 800a0ac:	4b04      	ldr	r3, [pc, #16]	; (800a0c0 <USB_EPSetStall+0x80>)
 800a0ae:	4323      	orrs	r3, r4
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bc90      	pop	{r4, r7}
 800a0be:	4770      	bx	lr
 800a0c0:	ffff8080 	.word	0xffff8080

0800a0c4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0c4:	b490      	push	{r4, r7}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	7b1b      	ldrb	r3, [r3, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d17d      	bne.n	800a1d2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	785b      	ldrb	r3, [r3, #1]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d03d      	beq.n	800a15a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	b29c      	uxth	r4, r3
 800a0ec:	4623      	mov	r3, r4
 800a0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d014      	beq.n	800a120 <USB_EPClearStall+0x5c>
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10c:	b29c      	uxth	r4, r3
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	441a      	add	r2, r3
 800a118:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <USB_EPClearStall+0x11c>)
 800a11a:	4323      	orrs	r3, r4
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	78db      	ldrb	r3, [r3, #3]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d054      	beq.n	800a1d2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a13a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a13e:	b29c      	uxth	r4, r3
 800a140:	f084 0320 	eor.w	r3, r4, #32
 800a144:	b29c      	uxth	r4, r3
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	441a      	add	r2, r3
 800a150:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <USB_EPClearStall+0x120>)
 800a152:	4323      	orrs	r3, r4
 800a154:	b29b      	uxth	r3, r3
 800a156:	8013      	strh	r3, [r2, #0]
 800a158:	e03b      	b.n	800a1d2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29c      	uxth	r4, r3
 800a168:	4623      	mov	r3, r4
 800a16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d014      	beq.n	800a19c <USB_EPClearStall+0xd8>
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	b29b      	uxth	r3, r3
 800a180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a188:	b29c      	uxth	r4, r3
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	441a      	add	r2, r3
 800a194:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <USB_EPClearStall+0x124>)
 800a196:	4323      	orrs	r3, r4
 800a198:	b29b      	uxth	r3, r3
 800a19a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	b29c      	uxth	r4, r3
 800a1b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a1b8:	b29c      	uxth	r4, r3
 800a1ba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a1be:	b29c      	uxth	r4, r3
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	441a      	add	r2, r3
 800a1ca:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <USB_EPClearStall+0x120>)
 800a1cc:	4323      	orrs	r3, r4
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bc90      	pop	{r4, r7}
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	ffff80c0 	.word	0xffff80c0
 800a1e4:	ffff8080 	.word	0xffff8080
 800a1e8:	ffffc080 	.word	0xffffc080

0800a1ec <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2280      	movs	r2, #128	; 0x80
 800a202:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a222:	b29b      	uxth	r3, r3
 800a224:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a226:	68fb      	ldr	r3, [r7, #12]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b08d      	sub	sp, #52	; 0x34
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4611      	mov	r1, r2
 800a258:	461a      	mov	r2, r3
 800a25a:	460b      	mov	r3, r1
 800a25c:	80fb      	strh	r3, [r7, #6]
 800a25e:	4613      	mov	r3, r2
 800a260:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a262:	88bb      	ldrh	r3, [r7, #4]
 800a264:	3301      	adds	r3, #1
 800a266:	085b      	lsrs	r3, r3, #1
 800a268:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	005a      	lsls	r2, r3, #1
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a284:	e01e      	b.n	800a2c4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	3301      	adds	r3, #1
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	021b      	lsls	r3, r3, #8
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	461a      	mov	r2, r3
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	3302      	adds	r3, #2
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1dd      	bne.n	800a286 <USB_WritePMA+0x3a>
  }
}
 800a2ca:	bf00      	nop
 800a2cc:	3734      	adds	r7, #52	; 0x34
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b08b      	sub	sp, #44	; 0x2c
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	80fb      	strh	r3, [r7, #6]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2ec:	88bb      	ldrh	r3, [r7, #4]
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2fc:	88fb      	ldrh	r3, [r7, #6]
 800a2fe:	005a      	lsls	r2, r3, #1
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a308:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
 800a30e:	e01b      	b.n	800a348 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	b29b      	uxth	r3, r3
 800a316:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	3302      	adds	r3, #2
 800a31c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	b2da      	uxtb	r2, r3
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	3301      	adds	r3, #1
 800a32a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	0a1b      	lsrs	r3, r3, #8
 800a330:	b2da      	uxtb	r2, r3
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	3301      	adds	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	3302      	adds	r3, #2
 800a340:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	3b01      	subs	r3, #1
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e0      	bne.n	800a310 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a34e:	88bb      	ldrh	r3, [r7, #4]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d007      	beq.n	800a36a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	b2da      	uxtb	r2, r3
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	701a      	strb	r2, [r3, #0]
  }
}
 800a36a:	bf00      	nop
 800a36c:	372c      	adds	r7, #44	; 0x2c
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a398:	2302      	movs	r3, #2
 800a39a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00c      	beq.n	800a3c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	78fa      	ldrb	r2, [r7, #3]
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	4798      	blx	r3
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3

  return USBD_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fece 	bl	800b1a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a416:	461a      	mov	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a424:	f003 031f 	and.w	r3, r3, #31
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d00c      	beq.n	800a446 <USBD_LL_SetupStage+0x56>
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d302      	bcc.n	800a436 <USBD_LL_SetupStage+0x46>
 800a430:	2b02      	cmp	r3, #2
 800a432:	d010      	beq.n	800a456 <USBD_LL_SetupStage+0x66>
 800a434:	e017      	b.n	800a466 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f9ce 	bl	800a7e0 <USBD_StdDevReq>
      break;
 800a444:	e01a      	b.n	800a47c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fa30 	bl	800a8b4 <USBD_StdItfReq>
      break;
 800a454:	e012      	b.n	800a47c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa6e 	bl	800a940 <USBD_StdEPReq>
      break;
 800a464:	e00a      	b.n	800a47c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a46c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a470:	b2db      	uxtb	r3, r3
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 fa03 	bl	800b880 <USBD_LL_StallEP>
      break;
 800a47a:	bf00      	nop
  }

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b086      	sub	sp, #24
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	460b      	mov	r3, r1
 800a490:	607a      	str	r2, [r7, #4]
 800a492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d14b      	bne.n	800a532 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d134      	bne.n	800a516 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d919      	bls.n	800a4ec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	1ad2      	subs	r2, r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d203      	bcs.n	800a4da <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	e002      	b.n	800a4e0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 fed9 	bl	800b29c <USBD_CtlContinueRx>
 800a4ea:	e038      	b.n	800a55e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d105      	bne.n	800a50e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fed6 	bl	800b2c0 <USBD_CtlSendStatus>
 800a514:	e023      	b.n	800a55e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a51c:	2b05      	cmp	r3, #5
 800a51e:	d11e      	bne.n	800a55e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a528:	2100      	movs	r1, #0
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f001 f9a8 	bl	800b880 <USBD_LL_StallEP>
 800a530:	e015      	b.n	800a55e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a544:	2b03      	cmp	r3, #3
 800a546:	d108      	bne.n	800a55a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	7afa      	ldrb	r2, [r7, #11]
 800a552:	4611      	mov	r1, r2
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	4798      	blx	r3
 800a558:	e001      	b.n	800a55e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a55a:	2302      	movs	r3, #2
 800a55c:	e000      	b.n	800a560 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	460b      	mov	r3, r1
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d17f      	bne.n	800a67c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3314      	adds	r3, #20
 800a580:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d15c      	bne.n	800a646 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	429a      	cmp	r2, r3
 800a596:	d915      	bls.n	800a5c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	1ad2      	subs	r2, r2, r3
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 fe61 	bl	800b278 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f001 fa05 	bl	800b9cc <USBD_LL_PrepareReceive>
 800a5c2:	e04e      	b.n	800a662 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	6912      	ldr	r2, [r2, #16]
 800a5cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5d0:	fb02 f201 	mul.w	r2, r2, r1
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d11c      	bne.n	800a614 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d316      	bcc.n	800a614 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d20f      	bcs.n	800a614 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fe3d 	bl	800b278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a606:	2300      	movs	r3, #0
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f001 f9dd 	bl	800b9cc <USBD_LL_PrepareReceive>
 800a612:	e026      	b.n	800a662 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00a      	beq.n	800a636 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a626:	2b03      	cmp	r3, #3
 800a628:	d105      	bne.n	800a636 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a636:	2180      	movs	r1, #128	; 0x80
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f001 f921 	bl	800b880 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fe51 	bl	800b2e6 <USBD_CtlReceiveStatus>
 800a644:	e00d      	b.n	800a662 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d004      	beq.n	800a65a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a656:	2b00      	cmp	r3, #0
 800a658:	d103      	bne.n	800a662 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a65a:	2180      	movs	r1, #128	; 0x80
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f001 f90f 	bl	800b880 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d11d      	bne.n	800a6a8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f7ff fe82 	bl	800a376 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a67a:	e015      	b.n	800a6a8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00d      	beq.n	800a6a4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d108      	bne.n	800a6a4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	7afa      	ldrb	r2, [r7, #11]
 800a69c:	4611      	mov	r1, r2
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	4798      	blx	r3
 800a6a2:	e001      	b.n	800a6a8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	e000      	b.n	800a6aa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6ba:	2340      	movs	r3, #64	; 0x40
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f8b7 	bl	800b834 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2240      	movs	r2, #64	; 0x40
 800a6d2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6d6:	2340      	movs	r3, #64	; 0x40
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2180      	movs	r1, #128	; 0x80
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 f8a9 	bl	800b834 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2240      	movs	r2, #64	; 0x40
 800a6ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6852      	ldr	r2, [r2, #4]
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	4611      	mov	r1, r2
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	4798      	blx	r3
  }

  return USBD_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2204      	movs	r2, #4
 800a76c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d105      	bne.n	800a79c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d10b      	bne.n	800a7d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d005      	beq.n	800a7d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d004      	beq.n	800a804 <USBD_StdDevReq+0x24>
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	d002      	beq.n	800a804 <USBD_StdDevReq+0x24>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d008      	beq.n	800a814 <USBD_StdDevReq+0x34>
 800a802:	e04c      	b.n	800a89e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4798      	blx	r3
      break;
 800a812:	e049      	b.n	800a8a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	785b      	ldrb	r3, [r3, #1]
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d83a      	bhi.n	800a892 <USBD_StdDevReq+0xb2>
 800a81c:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <USBD_StdDevReq+0x44>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a875 	.word	0x0800a875
 800a828:	0800a889 	.word	0x0800a889
 800a82c:	0800a893 	.word	0x0800a893
 800a830:	0800a87f 	.word	0x0800a87f
 800a834:	0800a893 	.word	0x0800a893
 800a838:	0800a857 	.word	0x0800a857
 800a83c:	0800a84d 	.word	0x0800a84d
 800a840:	0800a893 	.word	0x0800a893
 800a844:	0800a86b 	.word	0x0800a86b
 800a848:	0800a861 	.word	0x0800a861
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f9d4 	bl	800abfc <USBD_GetDescriptor>
          break;
 800a854:	e022      	b.n	800a89c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fb37 	bl	800aecc <USBD_SetAddress>
          break;
 800a85e:	e01d      	b.n	800a89c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fb74 	bl	800af50 <USBD_SetConfig>
          break;
 800a868:	e018      	b.n	800a89c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fbfd 	bl	800b06c <USBD_GetConfig>
          break;
 800a872:	e013      	b.n	800a89c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fc2c 	bl	800b0d4 <USBD_GetStatus>
          break;
 800a87c:	e00e      	b.n	800a89c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fc5a 	bl	800b13a <USBD_SetFeature>
          break;
 800a886:	e009      	b.n	800a89c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fc69 	bl	800b162 <USBD_ClrFeature>
          break;
 800a890:	e004      	b.n	800a89c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fcc2 	bl	800b21e <USBD_CtlError>
          break;
 800a89a:	bf00      	nop
      }
      break;
 800a89c:	e004      	b.n	800a8a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fcbc 	bl	800b21e <USBD_CtlError>
      break;
 800a8a6:	bf00      	nop
  }

  return ret;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop

0800a8b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d003      	beq.n	800a8d6 <USBD_StdItfReq+0x22>
 800a8ce:	2b40      	cmp	r3, #64	; 0x40
 800a8d0:	d001      	beq.n	800a8d6 <USBD_StdItfReq+0x22>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d12a      	bne.n	800a92c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d81d      	bhi.n	800a91e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	889b      	ldrh	r3, [r3, #4]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d813      	bhi.n	800a914 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	4798      	blx	r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	88db      	ldrh	r3, [r3, #6]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d110      	bne.n	800a928 <USBD_StdItfReq+0x74>
 800a906:	7bfb      	ldrb	r3, [r7, #15]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10d      	bne.n	800a928 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fcd7 	bl	800b2c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a912:	e009      	b.n	800a928 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fc81 	bl	800b21e <USBD_CtlError>
          break;
 800a91c:	e004      	b.n	800a928 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fc7c 	bl	800b21e <USBD_CtlError>
          break;
 800a926:	e000      	b.n	800a92a <USBD_StdItfReq+0x76>
          break;
 800a928:	bf00      	nop
      }
      break;
 800a92a:	e004      	b.n	800a936 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fc75 	bl	800b21e <USBD_CtlError>
      break;
 800a934:	bf00      	nop
  }

  return USBD_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	889b      	ldrh	r3, [r3, #4]
 800a952:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a95c:	2b20      	cmp	r3, #32
 800a95e:	d004      	beq.n	800a96a <USBD_StdEPReq+0x2a>
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d002      	beq.n	800a96a <USBD_StdEPReq+0x2a>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d008      	beq.n	800a97a <USBD_StdEPReq+0x3a>
 800a968:	e13d      	b.n	800abe6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	4798      	blx	r3
      break;
 800a978:	e13a      	b.n	800abf0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a982:	2b20      	cmp	r3, #32
 800a984:	d10a      	bne.n	800a99c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	4798      	blx	r3
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	e12a      	b.n	800abf2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	785b      	ldrb	r3, [r3, #1]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d03e      	beq.n	800aa22 <USBD_StdEPReq+0xe2>
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d002      	beq.n	800a9ae <USBD_StdEPReq+0x6e>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d070      	beq.n	800aa8e <USBD_StdEPReq+0x14e>
 800a9ac:	e115      	b.n	800abda <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d002      	beq.n	800a9be <USBD_StdEPReq+0x7e>
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d015      	beq.n	800a9e8 <USBD_StdEPReq+0xa8>
 800a9bc:	e02b      	b.n	800aa16 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00c      	beq.n	800a9de <USBD_StdEPReq+0x9e>
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	2b80      	cmp	r3, #128	; 0x80
 800a9c8:	d009      	beq.n	800a9de <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9ca:	7bbb      	ldrb	r3, [r7, #14]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 ff56 	bl	800b880 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9d4:	2180      	movs	r1, #128	; 0x80
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 ff52 	bl	800b880 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9dc:	e020      	b.n	800aa20 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fc1c 	bl	800b21e <USBD_CtlError>
              break;
 800a9e6:	e01b      	b.n	800aa20 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	885b      	ldrh	r3, [r3, #2]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10e      	bne.n	800aa0e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00b      	beq.n	800aa0e <USBD_StdEPReq+0xce>
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	2b80      	cmp	r3, #128	; 0x80
 800a9fa:	d008      	beq.n	800aa0e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	88db      	ldrh	r3, [r3, #6]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d104      	bne.n	800aa0e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 ff39 	bl	800b880 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fc56 	bl	800b2c0 <USBD_CtlSendStatus>

              break;
 800aa14:	e004      	b.n	800aa20 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fc00 	bl	800b21e <USBD_CtlError>
              break;
 800aa1e:	bf00      	nop
          }
          break;
 800aa20:	e0e0      	b.n	800abe4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d002      	beq.n	800aa32 <USBD_StdEPReq+0xf2>
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d015      	beq.n	800aa5c <USBD_StdEPReq+0x11c>
 800aa30:	e026      	b.n	800aa80 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00c      	beq.n	800aa52 <USBD_StdEPReq+0x112>
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	2b80      	cmp	r3, #128	; 0x80
 800aa3c:	d009      	beq.n	800aa52 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 ff1c 	bl	800b880 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa48:	2180      	movs	r1, #128	; 0x80
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 ff18 	bl	800b880 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa50:	e01c      	b.n	800aa8c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fbe2 	bl	800b21e <USBD_CtlError>
              break;
 800aa5a:	e017      	b.n	800aa8c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	885b      	ldrh	r3, [r3, #2]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d112      	bne.n	800aa8a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d004      	beq.n	800aa78 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 ff23 	bl	800b8be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fc21 	bl	800b2c0 <USBD_CtlSendStatus>
              }
              break;
 800aa7e:	e004      	b.n	800aa8a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fbcb 	bl	800b21e <USBD_CtlError>
              break;
 800aa88:	e000      	b.n	800aa8c <USBD_StdEPReq+0x14c>
              break;
 800aa8a:	bf00      	nop
          }
          break;
 800aa8c:	e0aa      	b.n	800abe4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d002      	beq.n	800aa9e <USBD_StdEPReq+0x15e>
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d032      	beq.n	800ab02 <USBD_StdEPReq+0x1c2>
 800aa9c:	e097      	b.n	800abce <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d007      	beq.n	800aab4 <USBD_StdEPReq+0x174>
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b80      	cmp	r3, #128	; 0x80
 800aaa8:	d004      	beq.n	800aab4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fbb6 	bl	800b21e <USBD_CtlError>
                break;
 800aab2:	e091      	b.n	800abd8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da0b      	bge.n	800aad4 <USBD_StdEPReq+0x194>
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	3310      	adds	r3, #16
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	4413      	add	r3, r2
 800aad0:	3304      	adds	r3, #4
 800aad2:	e00b      	b.n	800aaec <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	4413      	add	r3, r2
 800aaea:	3304      	adds	r3, #4
 800aaec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fba0 	bl	800b240 <USBD_CtlSendData>
              break;
 800ab00:	e06a      	b.n	800abd8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	da11      	bge.n	800ab2e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3318      	adds	r3, #24
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d117      	bne.n	800ab54 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fb79 	bl	800b21e <USBD_CtlError>
                  break;
 800ab2c:	e054      	b.n	800abd8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	f003 020f 	and.w	r2, r3, #15
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	440b      	add	r3, r1
 800ab40:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d104      	bne.n	800ab54 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fb66 	bl	800b21e <USBD_CtlError>
                  break;
 800ab52:	e041      	b.n	800abd8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da0b      	bge.n	800ab74 <USBD_StdEPReq+0x234>
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	3310      	adds	r3, #16
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	4413      	add	r3, r2
 800ab70:	3304      	adds	r3, #4
 800ab72:	e00b      	b.n	800ab8c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <USBD_StdEPReq+0x25a>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d103      	bne.n	800aba2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e00e      	b.n	800abc0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fea8 	bl	800b8fc <USBD_LL_IsStallEP>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	e002      	b.n	800abc0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2202      	movs	r2, #2
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fb3a 	bl	800b240 <USBD_CtlSendData>
              break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fb24 	bl	800b21e <USBD_CtlError>
              break;
 800abd6:	bf00      	nop
          }
          break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fb1e 	bl	800b21e <USBD_CtlError>
          break;
 800abe2:	bf00      	nop
      }
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fb18 	bl	800b21e <USBD_CtlError>
      break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	2b06      	cmp	r3, #6
 800ac1e:	f200 8128 	bhi.w	800ae72 <USBD_GetDescriptor+0x276>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USBD_GetDescriptor+0x2c>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac45 	.word	0x0800ac45
 800ac2c:	0800ac5d 	.word	0x0800ac5d
 800ac30:	0800ac9d 	.word	0x0800ac9d
 800ac34:	0800ae73 	.word	0x0800ae73
 800ac38:	0800ae73 	.word	0x0800ae73
 800ac3c:	0800ae13 	.word	0x0800ae13
 800ac40:	0800ae3f 	.word	0x0800ae3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	7c12      	ldrb	r2, [r2, #16]
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
      break;
 800ac5a:	e112      	b.n	800ae82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	7c1b      	ldrb	r3, [r3, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10d      	bne.n	800ac80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6c:	f107 0208 	add.w	r2, r7, #8
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3
 800ac74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac7e:	e100      	b.n	800ae82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac88:	f107 0208 	add.w	r2, r7, #8
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	4798      	blx	r3
 800ac90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3301      	adds	r3, #1
 800ac96:	2202      	movs	r2, #2
 800ac98:	701a      	strb	r2, [r3, #0]
      break;
 800ac9a:	e0f2      	b.n	800ae82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	885b      	ldrh	r3, [r3, #2]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b05      	cmp	r3, #5
 800aca4:	f200 80ac 	bhi.w	800ae00 <USBD_GetDescriptor+0x204>
 800aca8:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <USBD_GetDescriptor+0xb4>)
 800acaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acae:	bf00      	nop
 800acb0:	0800acc9 	.word	0x0800acc9
 800acb4:	0800acfd 	.word	0x0800acfd
 800acb8:	0800ad31 	.word	0x0800ad31
 800acbc:	0800ad65 	.word	0x0800ad65
 800acc0:	0800ad99 	.word	0x0800ad99
 800acc4:	0800adcd 	.word	0x0800adcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7c12      	ldrb	r2, [r2, #16]
 800ace0:	f107 0108 	add.w	r1, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acea:	e091      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa95 	bl	800b21e <USBD_CtlError>
            err++;
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	3301      	adds	r3, #1
 800acf8:	72fb      	strb	r3, [r7, #11]
          break;
 800acfa:	e089      	b.n	800ae10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00b      	beq.n	800ad20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	7c12      	ldrb	r2, [r2, #16]
 800ad14:	f107 0108 	add.w	r1, r7, #8
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4798      	blx	r3
 800ad1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1e:	e077      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa7b 	bl	800b21e <USBD_CtlError>
            err++;
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2e:	e06f      	b.n	800ae10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	7c12      	ldrb	r2, [r2, #16]
 800ad48:	f107 0108 	add.w	r1, r7, #8
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3
 800ad50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad52:	e05d      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa61 	bl	800b21e <USBD_CtlError>
            err++;
 800ad5c:	7afb      	ldrb	r3, [r7, #11]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	72fb      	strb	r3, [r7, #11]
          break;
 800ad62:	e055      	b.n	800ae10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00b      	beq.n	800ad88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	7c12      	ldrb	r2, [r2, #16]
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad86:	e043      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fa47 	bl	800b21e <USBD_CtlError>
            err++;
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	3301      	adds	r3, #1
 800ad94:	72fb      	strb	r3, [r7, #11]
          break;
 800ad96:	e03b      	b.n	800ae10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	7c12      	ldrb	r2, [r2, #16]
 800adb0:	f107 0108 	add.w	r1, r7, #8
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adba:	e029      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fa2d 	bl	800b21e <USBD_CtlError>
            err++;
 800adc4:	7afb      	ldrb	r3, [r7, #11]
 800adc6:	3301      	adds	r3, #1
 800adc8:	72fb      	strb	r3, [r7, #11]
          break;
 800adca:	e021      	b.n	800ae10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00b      	beq.n	800adf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	7c12      	ldrb	r2, [r2, #16]
 800ade4:	f107 0108 	add.w	r1, r7, #8
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adee:	e00f      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa13 	bl	800b21e <USBD_CtlError>
            err++;
 800adf8:	7afb      	ldrb	r3, [r7, #11]
 800adfa:	3301      	adds	r3, #1
 800adfc:	72fb      	strb	r3, [r7, #11]
          break;
 800adfe:	e007      	b.n	800ae10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fa0b 	bl	800b21e <USBD_CtlError>
          err++;
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ae0e:	e038      	b.n	800ae82 <USBD_GetDescriptor+0x286>
 800ae10:	e037      	b.n	800ae82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7c1b      	ldrb	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae22:	f107 0208 	add.w	r2, r7, #8
 800ae26:	4610      	mov	r0, r2
 800ae28:	4798      	blx	r3
 800ae2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae2c:	e029      	b.n	800ae82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f9f4 	bl	800b21e <USBD_CtlError>
        err++;
 800ae36:	7afb      	ldrb	r3, [r7, #11]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae3c:	e021      	b.n	800ae82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7c1b      	ldrb	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10d      	bne.n	800ae62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4e:	f107 0208 	add.w	r2, r7, #8
 800ae52:	4610      	mov	r0, r2
 800ae54:	4798      	blx	r3
 800ae56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	2207      	movs	r2, #7
 800ae5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae60:	e00f      	b.n	800ae82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f9da 	bl	800b21e <USBD_CtlError>
        err++;
 800ae6a:	7afb      	ldrb	r3, [r7, #11]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae70:	e007      	b.n	800ae82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f9d2 	bl	800b21e <USBD_CtlError>
      err++;
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae80:	bf00      	nop
  }

  if (err != 0U)
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d11c      	bne.n	800aec2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ae88:	893b      	ldrh	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d011      	beq.n	800aeb2 <USBD_GetDescriptor+0x2b6>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	88db      	ldrh	r3, [r3, #6]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00d      	beq.n	800aeb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	88da      	ldrh	r2, [r3, #6]
 800ae9a:	893b      	ldrh	r3, [r7, #8]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	bf28      	it	cs
 800aea0:	4613      	movcs	r3, r2
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aea6:	893b      	ldrh	r3, [r7, #8]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	68f9      	ldr	r1, [r7, #12]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9c7 	bl	800b240 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d104      	bne.n	800aec4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa00 	bl	800b2c0 <USBD_CtlSendStatus>
 800aec0:	e000      	b.n	800aec4 <USBD_GetDescriptor+0x2c8>
    return;
 800aec2:	bf00      	nop
    }
  }
}
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop

0800aecc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	889b      	ldrh	r3, [r3, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d130      	bne.n	800af40 <USBD_SetAddress+0x74>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	88db      	ldrh	r3, [r3, #6]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d12c      	bne.n	800af40 <USBD_SetAddress+0x74>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	885b      	ldrh	r3, [r3, #2]
 800aeea:	2b7f      	cmp	r3, #127	; 0x7f
 800aeec:	d828      	bhi.n	800af40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	885b      	ldrh	r3, [r3, #2]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af00:	2b03      	cmp	r3, #3
 800af02:	d104      	bne.n	800af0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f989 	bl	800b21e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0c:	e01c      	b.n	800af48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	7bfa      	ldrb	r2, [r7, #15]
 800af12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fd14 	bl	800b948 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f9cd 	bl	800b2c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af34:	e008      	b.n	800af48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3e:	e003      	b.n	800af48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f96b 	bl	800b21e <USBD_CtlError>
  }
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	885b      	ldrh	r3, [r3, #2]
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	4b41      	ldr	r3, [pc, #260]	; (800b068 <USBD_SetConfig+0x118>)
 800af62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af64:	4b40      	ldr	r3, [pc, #256]	; (800b068 <USBD_SetConfig+0x118>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d904      	bls.n	800af76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f955 	bl	800b21e <USBD_CtlError>
 800af74:	e075      	b.n	800b062 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d002      	beq.n	800af86 <USBD_SetConfig+0x36>
 800af80:	2b03      	cmp	r3, #3
 800af82:	d023      	beq.n	800afcc <USBD_SetConfig+0x7c>
 800af84:	e062      	b.n	800b04c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800af86:	4b38      	ldr	r3, [pc, #224]	; (800b068 <USBD_SetConfig+0x118>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d01a      	beq.n	800afc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800af8e:	4b36      	ldr	r3, [pc, #216]	; (800b068 <USBD_SetConfig+0x118>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2203      	movs	r2, #3
 800af9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afa0:	4b31      	ldr	r3, [pc, #196]	; (800b068 <USBD_SetConfig+0x118>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff f9f0 	bl	800a38c <USBD_SetClassConfig>
 800afac:	4603      	mov	r3, r0
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d104      	bne.n	800afbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f932 	bl	800b21e <USBD_CtlError>
            return;
 800afba:	e052      	b.n	800b062 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f97f 	bl	800b2c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afc2:	e04e      	b.n	800b062 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f97b 	bl	800b2c0 <USBD_CtlSendStatus>
        break;
 800afca:	e04a      	b.n	800b062 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800afcc:	4b26      	ldr	r3, [pc, #152]	; (800b068 <USBD_SetConfig+0x118>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d112      	bne.n	800affa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800afdc:	4b22      	ldr	r3, [pc, #136]	; (800b068 <USBD_SetConfig+0x118>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	461a      	mov	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800afe6:	4b20      	ldr	r3, [pc, #128]	; (800b068 <USBD_SetConfig+0x118>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff f9ec 	bl	800a3ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f964 	bl	800b2c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aff8:	e033      	b.n	800b062 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800affa:	4b1b      	ldr	r3, [pc, #108]	; (800b068 <USBD_SetConfig+0x118>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d01d      	beq.n	800b044 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff f9da 	bl	800a3ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b016:	4b14      	ldr	r3, [pc, #80]	; (800b068 <USBD_SetConfig+0x118>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b020:	4b11      	ldr	r3, [pc, #68]	; (800b068 <USBD_SetConfig+0x118>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff f9b0 	bl	800a38c <USBD_SetClassConfig>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d104      	bne.n	800b03c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f8f2 	bl	800b21e <USBD_CtlError>
            return;
 800b03a:	e012      	b.n	800b062 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f93f 	bl	800b2c0 <USBD_CtlSendStatus>
        break;
 800b042:	e00e      	b.n	800b062 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f93b 	bl	800b2c0 <USBD_CtlSendStatus>
        break;
 800b04a:	e00a      	b.n	800b062 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8e5 	bl	800b21e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b054:	4b04      	ldr	r3, [pc, #16]	; (800b068 <USBD_SetConfig+0x118>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff f9b5 	bl	800a3ca <USBD_ClrClassConfig>
        break;
 800b060:	bf00      	nop
    }
  }
}
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000058 	.word	0x20000058

0800b06c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d004      	beq.n	800b088 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f8cc 	bl	800b21e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b086:	e021      	b.n	800b0cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08e:	2b01      	cmp	r3, #1
 800b090:	db17      	blt.n	800b0c2 <USBD_GetConfig+0x56>
 800b092:	2b02      	cmp	r3, #2
 800b094:	dd02      	ble.n	800b09c <USBD_GetConfig+0x30>
 800b096:	2b03      	cmp	r3, #3
 800b098:	d00b      	beq.n	800b0b2 <USBD_GetConfig+0x46>
 800b09a:	e012      	b.n	800b0c2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f8c8 	bl	800b240 <USBD_CtlSendData>
        break;
 800b0b0:	e00c      	b.n	800b0cc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f8c0 	bl	800b240 <USBD_CtlSendData>
        break;
 800b0c0:	e004      	b.n	800b0cc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f8aa 	bl	800b21e <USBD_CtlError>
        break;
 800b0ca:	bf00      	nop
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d81e      	bhi.n	800b128 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	88db      	ldrh	r3, [r3, #6]
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d004      	beq.n	800b0fc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f892 	bl	800b21e <USBD_CtlError>
        break;
 800b0fa:	e01a      	b.n	800b132 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	f043 0202 	orr.w	r2, r3, #2
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	330c      	adds	r3, #12
 800b11c:	2202      	movs	r2, #2
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f88d 	bl	800b240 <USBD_CtlSendData>
      break;
 800b126:	e004      	b.n	800b132 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f877 	bl	800b21e <USBD_CtlError>
      break;
 800b130:	bf00      	nop
  }
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	885b      	ldrh	r3, [r3, #2]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d106      	bne.n	800b15a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f8b3 	bl	800b2c0 <USBD_CtlSendStatus>
  }
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b172:	3b01      	subs	r3, #1
 800b174:	2b02      	cmp	r3, #2
 800b176:	d80b      	bhi.n	800b190 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	885b      	ldrh	r3, [r3, #2]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d10c      	bne.n	800b19a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f899 	bl	800b2c0 <USBD_CtlSendStatus>
      }
      break;
 800b18e:	e004      	b.n	800b19a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f843 	bl	800b21e <USBD_CtlError>
      break;
 800b198:	e000      	b.n	800b19c <USBD_ClrFeature+0x3a>
      break;
 800b19a:	bf00      	nop
  }
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	781a      	ldrb	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	785a      	ldrb	r2, [r3, #1]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	3302      	adds	r3, #2
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	3303      	adds	r3, #3
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4413      	add	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	3305      	adds	r3, #5
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	3306      	adds	r3, #6
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	3307      	adds	r3, #7
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	b29b      	uxth	r3, r3
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	b29b      	uxth	r3, r3
 800b20a:	4413      	add	r3, r2
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	80da      	strh	r2, [r3, #6]

}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b228:	2180      	movs	r1, #128	; 0x80
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fb28 	bl	800b880 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b230:	2100      	movs	r1, #0
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fb24 	bl	800b880 <USBD_LL_StallEP>
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2202      	movs	r2, #2
 800b252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b256:	88fa      	ldrh	r2, [r7, #6]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b25c:	88fa      	ldrh	r2, [r7, #6]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b262:	88fb      	ldrh	r3, [r7, #6]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	2100      	movs	r1, #0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 fb8c 	bl	800b986 <USBD_LL_Transmit>

  return USBD_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	4613      	mov	r3, r2
 800b284:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	2100      	movs	r1, #0
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 fb7a 	bl	800b986 <USBD_LL_Transmit>

  return USBD_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 fb8b 	bl	800b9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fb55 	bl	800b986 <USBD_LL_Transmit>

  return USBD_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fb65 	bl	800b9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	601a      	str	r2, [r3, #0]
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6892      	ldr	r2, [r2, #8]
 800b36a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	6852      	ldr	r2, [r2, #4]
 800b374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d103      	bne.n	800b388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	1e5a      	subs	r2, r3, #1
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b2:	4b51      	ldr	r3, [pc, #324]	; (800b4f8 <xTaskIncrementTick+0x150>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 808d 	bne.w	800b4d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3bc:	4b4f      	ldr	r3, [pc, #316]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3c4:	4a4d      	ldr	r2, [pc, #308]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d11f      	bne.n	800b410 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3d0:	4b4b      	ldr	r3, [pc, #300]	; (800b500 <xTaskIncrementTick+0x158>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d009      	beq.n	800b3ee <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	e7fe      	b.n	800b3ec <xTaskIncrementTick+0x44>
 800b3ee:	4b44      	ldr	r3, [pc, #272]	; (800b500 <xTaskIncrementTick+0x158>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	4b43      	ldr	r3, [pc, #268]	; (800b504 <xTaskIncrementTick+0x15c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a41      	ldr	r2, [pc, #260]	; (800b500 <xTaskIncrementTick+0x158>)
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	4a41      	ldr	r2, [pc, #260]	; (800b504 <xTaskIncrementTick+0x15c>)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	4b41      	ldr	r3, [pc, #260]	; (800b508 <xTaskIncrementTick+0x160>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	4a3f      	ldr	r2, [pc, #252]	; (800b508 <xTaskIncrementTick+0x160>)
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	f000 f8e6 	bl	800b5dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b410:	4b3e      	ldr	r3, [pc, #248]	; (800b50c <xTaskIncrementTick+0x164>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	429a      	cmp	r2, r3
 800b418:	d34e      	bcc.n	800b4b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b41a:	4b39      	ldr	r3, [pc, #228]	; (800b500 <xTaskIncrementTick+0x158>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <xTaskIncrementTick+0x80>
 800b424:	2301      	movs	r3, #1
 800b426:	e000      	b.n	800b42a <xTaskIncrementTick+0x82>
 800b428:	2300      	movs	r3, #0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d004      	beq.n	800b438 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b42e:	4b37      	ldr	r3, [pc, #220]	; (800b50c <xTaskIncrementTick+0x164>)
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	601a      	str	r2, [r3, #0]
					break;
 800b436:	e03f      	b.n	800b4b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b438:	4b31      	ldr	r3, [pc, #196]	; (800b500 <xTaskIncrementTick+0x158>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d203      	bcs.n	800b458 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b450:	4a2e      	ldr	r2, [pc, #184]	; (800b50c <xTaskIncrementTick+0x164>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6013      	str	r3, [r2, #0]
						break;
 800b456:	e02f      	b.n	800b4b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3304      	adds	r3, #4
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff ff79 	bl	800b354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3318      	adds	r3, #24
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff ff70 	bl	800b354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <xTaskIncrementTick+0x168>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d903      	bls.n	800b488 <xTaskIncrementTick+0xe0>
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	4a22      	ldr	r2, [pc, #136]	; (800b510 <xTaskIncrementTick+0x168>)
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4a1f      	ldr	r2, [pc, #124]	; (800b514 <xTaskIncrementTick+0x16c>)
 800b496:	441a      	add	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	3304      	adds	r3, #4
 800b49c:	4619      	mov	r1, r3
 800b49e:	4610      	mov	r0, r2
 800b4a0:	f7ff ff34 	bl	800b30c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a8:	4b1b      	ldr	r3, [pc, #108]	; (800b518 <xTaskIncrementTick+0x170>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d3b3      	bcc.n	800b41a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4b6:	e7b0      	b.n	800b41a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4b8:	4b17      	ldr	r3, [pc, #92]	; (800b518 <xTaskIncrementTick+0x170>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4be:	4915      	ldr	r1, [pc, #84]	; (800b514 <xTaskIncrementTick+0x16c>)
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	440b      	add	r3, r1
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d907      	bls.n	800b4e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e004      	b.n	800b4e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b4d6:	4b11      	ldr	r3, [pc, #68]	; (800b51c <xTaskIncrementTick+0x174>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	4a0f      	ldr	r2, [pc, #60]	; (800b51c <xTaskIncrementTick+0x174>)
 800b4de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b4e0:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <xTaskIncrementTick+0x178>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b4ec:	697b      	ldr	r3, [r7, #20]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200004e0 	.word	0x200004e0
 800b4fc:	200004c8 	.word	0x200004c8
 800b500:	200004c0 	.word	0x200004c0
 800b504:	200004c4 	.word	0x200004c4
 800b508:	200004d8 	.word	0x200004d8
 800b50c:	200004dc 	.word	0x200004dc
 800b510:	200004cc 	.word	0x200004cc
 800b514:	20000060 	.word	0x20000060
 800b518:	2000005c 	.word	0x2000005c
 800b51c:	200004d0 	.word	0x200004d0
 800b520:	200004d4 	.word	0x200004d4

0800b524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b52a:	4b27      	ldr	r3, [pc, #156]	; (800b5c8 <vTaskSwitchContext+0xa4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b532:	4b26      	ldr	r3, [pc, #152]	; (800b5cc <vTaskSwitchContext+0xa8>)
 800b534:	2201      	movs	r2, #1
 800b536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b538:	e040      	b.n	800b5bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b53a:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <vTaskSwitchContext+0xa8>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b540:	4b23      	ldr	r3, [pc, #140]	; (800b5d0 <vTaskSwitchContext+0xac>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60fb      	str	r3, [r7, #12]
 800b546:	e00f      	b.n	800b568 <vTaskSwitchContext+0x44>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <vTaskSwitchContext+0x3e>
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	607b      	str	r3, [r7, #4]
 800b560:	e7fe      	b.n	800b560 <vTaskSwitchContext+0x3c>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3b01      	subs	r3, #1
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	491a      	ldr	r1, [pc, #104]	; (800b5d4 <vTaskSwitchContext+0xb0>)
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	440b      	add	r3, r1
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0e5      	beq.n	800b548 <vTaskSwitchContext+0x24>
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4a13      	ldr	r2, [pc, #76]	; (800b5d4 <vTaskSwitchContext+0xb0>)
 800b588:	4413      	add	r3, r2
 800b58a:	60bb      	str	r3, [r7, #8]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	605a      	str	r2, [r3, #4]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	3308      	adds	r3, #8
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d104      	bne.n	800b5ac <vTaskSwitchContext+0x88>
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	605a      	str	r2, [r3, #4]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	4a09      	ldr	r2, [pc, #36]	; (800b5d8 <vTaskSwitchContext+0xb4>)
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	4a06      	ldr	r2, [pc, #24]	; (800b5d0 <vTaskSwitchContext+0xac>)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6013      	str	r3, [r2, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	200004e0 	.word	0x200004e0
 800b5cc:	200004d4 	.word	0x200004d4
 800b5d0:	200004cc 	.word	0x200004cc
 800b5d4:	20000060 	.word	0x20000060
 800b5d8:	2000005c 	.word	0x2000005c

0800b5dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e2:	4b0f      	ldr	r3, [pc, #60]	; (800b620 <prvResetNextTaskUnblockTime+0x44>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <prvResetNextTaskUnblockTime+0x14>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e000      	b.n	800b5f2 <prvResetNextTaskUnblockTime+0x16>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d004      	beq.n	800b600 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <prvResetNextTaskUnblockTime+0x48>)
 800b5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5fe:	e008      	b.n	800b612 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <prvResetNextTaskUnblockTime+0x44>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	4a05      	ldr	r2, [pc, #20]	; (800b624 <prvResetNextTaskUnblockTime+0x48>)
 800b610:	6013      	str	r3, [r2, #0]
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	200004c0 	.word	0x200004c0
 800b624:	200004dc 	.word	0x200004dc
	...

0800b630 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b630:	4b07      	ldr	r3, [pc, #28]	; (800b650 <pxCurrentTCBConst2>)
 800b632:	6819      	ldr	r1, [r3, #0]
 800b634:	6808      	ldr	r0, [r1, #0]
 800b636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63a:	f380 8809 	msr	PSP, r0
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f04f 0000 	mov.w	r0, #0
 800b646:	f380 8811 	msr	BASEPRI, r0
 800b64a:	4770      	bx	lr
 800b64c:	f3af 8000 	nop.w

0800b650 <pxCurrentTCBConst2>:
 800b650:	2000005c 	.word	0x2000005c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop
	...

0800b660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b660:	f3ef 8009 	mrs	r0, PSP
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	4b15      	ldr	r3, [pc, #84]	; (800b6c0 <pxCurrentTCBConst>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	f01e 0f10 	tst.w	lr, #16
 800b670:	bf08      	it	eq
 800b672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	6010      	str	r0, [r2, #0]
 800b67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b684:	f380 8811 	msr	BASEPRI, r0
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f7ff ff48 	bl	800b524 <vTaskSwitchContext>
 800b694:	f04f 0000 	mov.w	r0, #0
 800b698:	f380 8811 	msr	BASEPRI, r0
 800b69c:	bc09      	pop	{r0, r3}
 800b69e:	6819      	ldr	r1, [r3, #0]
 800b6a0:	6808      	ldr	r0, [r1, #0]
 800b6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a6:	f01e 0f10 	tst.w	lr, #16
 800b6aa:	bf08      	it	eq
 800b6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6b0:	f380 8809 	msr	PSP, r0
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	f3af 8000 	nop.w

0800b6c0 <pxCurrentTCBConst>:
 800b6c0:	2000005c 	.word	0x2000005c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6c4:	bf00      	nop
 800b6c6:	bf00      	nop

0800b6c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6e0:	f7ff fe62 	bl	800b3a8 <xTaskIncrementTick>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6ea:	4b06      	ldr	r3, [pc, #24]	; (800b704 <SysTick_Handler+0x3c>)
 800b6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b71c:	4619      	mov	r1, r3
 800b71e:	4610      	mov	r0, r2
 800b720:	f7fe fe66 	bl	800a3f0 <USBD_LL_SetupStage>
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	460b      	mov	r3, r1
 800b736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	015b      	lsls	r3, r3, #5
 800b744:	4413      	add	r3, r2
 800b746:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	78fb      	ldrb	r3, [r7, #3]
 800b74e:	4619      	mov	r1, r3
 800b750:	f7fe fe99 	bl	800a486 <USBD_LL_DataOutStage>
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	015b      	lsls	r3, r3, #5
 800b774:	4413      	add	r3, r2
 800b776:	333c      	adds	r3, #60	; 0x3c
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	4619      	mov	r1, r3
 800b77e:	f7fe fef3 	bl	800a568 <USBD_LL_DataInStage>
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff f806 	bl	800a7aa <USBD_LL_SOF>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d001      	beq.n	800b7be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b7ba:	f7f6 fbe1 	bl	8001f80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b7c4:	7bfa      	ldrb	r2, [r7, #15]
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe ffb3 	bl	800a734 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe ff6c 	bl	800a6b2 <USBD_LL_Reset>
}
 800b7da:	bf00      	nop
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe ffae 	bl	800a754 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b800:	4b04      	ldr	r3, [pc, #16]	; (800b814 <HAL_PCD_SuspendCallback+0x30>)
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	4a03      	ldr	r2, [pc, #12]	; (800b814 <HAL_PCD_SuspendCallback+0x30>)
 800b806:	f043 0306 	orr.w	r3, r3, #6
 800b80a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	e000ed00 	.word	0xe000ed00

0800b818 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe ffa9 	bl	800a77e <USBD_LL_Resume>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	4608      	mov	r0, r1
 800b83e:	4611      	mov	r1, r2
 800b840:	461a      	mov	r2, r3
 800b842:	4603      	mov	r3, r0
 800b844:	70fb      	strb	r3, [r7, #3]
 800b846:	460b      	mov	r3, r1
 800b848:	70bb      	strb	r3, [r7, #2]
 800b84a:	4613      	mov	r3, r2
 800b84c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b85c:	78bb      	ldrb	r3, [r7, #2]
 800b85e:	883a      	ldrh	r2, [r7, #0]
 800b860:	78f9      	ldrb	r1, [r7, #3]
 800b862:	f7f9 fe5d 	bl	8005520 <HAL_PCD_EP_Open>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 f8d1 	bl	800ba14 <USBD_Get_USB_Status>
 800b872:	4603      	mov	r3, r0
 800b874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b876:	7bbb      	ldrb	r3, [r7, #14]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b89a:	78fa      	ldrb	r2, [r7, #3]
 800b89c:	4611      	mov	r1, r2
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7f9 ff11 	bl	80056c6 <HAL_PCD_EP_SetStall>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 f8b2 	bl	800ba14 <USBD_Get_USB_Status>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8d8:	78fa      	ldrb	r2, [r7, #3]
 800b8da:	4611      	mov	r1, r2
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7f9 ff4c 	bl	800577a <HAL_PCD_EP_ClrStall>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 f893 	bl	800ba14 <USBD_Get_USB_Status>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b90e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b914:	2b00      	cmp	r3, #0
 800b916:	da08      	bge.n	800b92a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	015b      	lsls	r3, r3, #5
 800b922:	4413      	add	r3, r2
 800b924:	332a      	adds	r3, #42	; 0x2a
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	e008      	b.n	800b93c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	015b      	lsls	r3, r3, #5
 800b934:	4413      	add	r3, r2
 800b936:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b93a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b962:	78fa      	ldrb	r2, [r7, #3]
 800b964:	4611      	mov	r1, r2
 800b966:	4618      	mov	r0, r3
 800b968:	f7f9 fdb5 	bl	80054d6 <HAL_PCD_SetAddress>
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 f84e 	bl	800ba14 <USBD_Get_USB_Status>
 800b978:	4603      	mov	r3, r0
 800b97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b086      	sub	sp, #24
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	60f8      	str	r0, [r7, #12]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	461a      	mov	r2, r3
 800b992:	460b      	mov	r3, r1
 800b994:	72fb      	strb	r3, [r7, #11]
 800b996:	4613      	mov	r3, r2
 800b998:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9a8:	893b      	ldrh	r3, [r7, #8]
 800b9aa:	7af9      	ldrb	r1, [r7, #11]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	f7f9 fe51 	bl	8005654 <HAL_PCD_EP_Transmit>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 f82b 	bl	800ba14 <USBD_Get_USB_Status>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	607a      	str	r2, [r7, #4]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	460b      	mov	r3, r1
 800b9da:	72fb      	strb	r3, [r7, #11]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ee:	893b      	ldrh	r3, [r7, #8]
 800b9f0:	7af9      	ldrb	r1, [r7, #11]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	f7f9 fdf4 	bl	80055e0 <HAL_PCD_EP_Receive>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 f808 	bl	800ba14 <USBD_Get_USB_Status>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba08:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d817      	bhi.n	800ba58 <USBD_Get_USB_Status+0x44>
 800ba28:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <USBD_Get_USB_Status+0x1c>)
 800ba2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2e:	bf00      	nop
 800ba30:	0800ba41 	.word	0x0800ba41
 800ba34:	0800ba47 	.word	0x0800ba47
 800ba38:	0800ba4d 	.word	0x0800ba4d
 800ba3c:	0800ba53 	.word	0x0800ba53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	e00b      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba46:	2302      	movs	r3, #2
 800ba48:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4a:	e008      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba50:	e005      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba52:	2302      	movs	r3, #2
 800ba54:	73fb      	strb	r3, [r7, #15]
    break;
 800ba56:	e002      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5c:	bf00      	nop
  }
  return usb_status;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <__libc_init_array>:
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	4e0d      	ldr	r6, [pc, #52]	; (800baa4 <__libc_init_array+0x38>)
 800ba70:	4c0d      	ldr	r4, [pc, #52]	; (800baa8 <__libc_init_array+0x3c>)
 800ba72:	1ba4      	subs	r4, r4, r6
 800ba74:	10a4      	asrs	r4, r4, #2
 800ba76:	2500      	movs	r5, #0
 800ba78:	42a5      	cmp	r5, r4
 800ba7a:	d109      	bne.n	800ba90 <__libc_init_array+0x24>
 800ba7c:	4e0b      	ldr	r6, [pc, #44]	; (800baac <__libc_init_array+0x40>)
 800ba7e:	4c0c      	ldr	r4, [pc, #48]	; (800bab0 <__libc_init_array+0x44>)
 800ba80:	f000 f820 	bl	800bac4 <_init>
 800ba84:	1ba4      	subs	r4, r4, r6
 800ba86:	10a4      	asrs	r4, r4, #2
 800ba88:	2500      	movs	r5, #0
 800ba8a:	42a5      	cmp	r5, r4
 800ba8c:	d105      	bne.n	800ba9a <__libc_init_array+0x2e>
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba94:	4798      	blx	r3
 800ba96:	3501      	adds	r5, #1
 800ba98:	e7ee      	b.n	800ba78 <__libc_init_array+0xc>
 800ba9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba9e:	4798      	blx	r3
 800baa0:	3501      	adds	r5, #1
 800baa2:	e7f2      	b.n	800ba8a <__libc_init_array+0x1e>
 800baa4:	0800bb58 	.word	0x0800bb58
 800baa8:	0800bb58 	.word	0x0800bb58
 800baac:	0800bb58 	.word	0x0800bb58
 800bab0:	0800bb5c 	.word	0x0800bb5c

0800bab4 <memset>:
 800bab4:	4402      	add	r2, r0
 800bab6:	4603      	mov	r3, r0
 800bab8:	4293      	cmp	r3, r2
 800baba:	d100      	bne.n	800babe <memset+0xa>
 800babc:	4770      	bx	lr
 800babe:	f803 1b01 	strb.w	r1, [r3], #1
 800bac2:	e7f9      	b.n	800bab8 <memset+0x4>

0800bac4 <_init>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr

0800bad0 <_fini>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	bf00      	nop
 800bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad6:	bc08      	pop	{r3}
 800bad8:	469e      	mov	lr, r3
 800bada:	4770      	bx	lr
