
MESC_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a63c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a7cc  0800a7cc  0001a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a804  0800a804  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a804  0800a804  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a804  0800a804  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a808  0800a808  0001a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  20000010  0800a81c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  0800a81c  00020dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022657  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040ef  00000000  00000000  00042697  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b98  00000000  00000000  00046788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c0  00000000  00000000  00048320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f969  00000000  00000000  00049ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000189a0  00000000  00000000  00069649  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9dc7  00000000  00000000  00081fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bdb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f4  00000000  00000000  0013be2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7b4 	.word	0x0800a7b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800a7b4 	.word	0x0800a7b4

080001d0 <BLDCInit>:
#include "MESChw_setup.h"

extern TIM_HandleTypeDef htim1;


void BLDCInit(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	BLDCVars.ReqCurrent=0;					//Start the motor at 0 current
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <BLDCInit+0x58>)
 80001d6:	f04f 0200 	mov.w	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
	BLDCVars.BLDCduty=0;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <BLDCInit+0x58>)
 80001de:	2200      	movs	r2, #0
 80001e0:	605a      	str	r2, [r3, #4]
	BLDCVars.CurrentChannel=0;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <BLDCInit+0x58>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
	BLDCVars.pGain=1023*motor.Rphase/48; 	//wtf should I set the gain as by default... V/Amp error...Perhaps base it on Rphase and the bus voltage (nominally 48V)? But we don;t know the exact bus voltage yet...
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <BLDCInit+0x5c>)
 80001ea:	edd3 7a00 	vldr	s15, [r3]
 80001ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000230 <BLDCInit+0x60>
 80001f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80001f6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000234 <BLDCInit+0x64>
 80001fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80001fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000202:	ee17 2a90 	vmov	r2, s15
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <BLDCInit+0x58>)
 8000208:	611a      	str	r2, [r3, #16]
	BLDCVars.iGain=BLDCVars.pGain;			//Initially, let's just make the iGain the same as the pGain, so after 1 second their contributions will be equal.
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <BLDCInit+0x58>)
 800020c:	691b      	ldr	r3, [r3, #16]
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <BLDCInit+0x58>)
 8000210:	6153      	str	r3, [r2, #20]
	BLDCVars.BLDCEstate=GetHallState();
 8000212:	f000 f941 	bl	8000498 <GetHallState>
 8000216:	4602      	mov	r2, r0
 8000218:	4b03      	ldr	r3, [pc, #12]	; (8000228 <BLDCInit+0x58>)
 800021a:	609a      	str	r2, [r3, #8]
	BLDCState=BLDC_FORWARDS;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <BLDCInit+0x68>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200004fc 	.word	0x200004fc
 800022c:	20000518 	.word	0x20000518
 8000230:	447fc000 	.word	0x447fc000
 8000234:	42400000 	.word	0x42400000
 8000238:	20000515 	.word	0x20000515

0800023c <BLDCCommuteHall>:


void BLDCCommuteHall(){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
int CurrentHallState=GetHallState(); //Borrow the hall state detection from the FOC system
 8000242:	f000 f929 	bl	8000498 <GetHallState>
 8000246:	6078      	str	r0, [r7, #4]

static int LastHallState=7;	//Initialise the LastHallState at a value that means it will call the commutation and correctly set the current measurement channel, avoiding a runaway on the PI loop

if(BLDCState==BLDC_FORWARDS){
 8000248:	4b48      	ldr	r3, [pc, #288]	; (800036c <BLDCCommuteHall+0x130>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d119      	bne.n	8000284 <BLDCCommuteHall+0x48>
	if(!(LastHallState==CurrentHallState)){
 8000250:	4b47      	ldr	r3, [pc, #284]	; (8000370 <BLDCCommuteHall+0x134>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	429a      	cmp	r2, r3
 8000258:	f000 8084 	beq.w	8000364 <BLDCCommuteHall+0x128>
		BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	1c59      	adds	r1, r3, #1
 8000260:	4b44      	ldr	r3, [pc, #272]	; (8000374 <BLDCCommuteHall+0x138>)
 8000262:	fb83 3201 	smull	r3, r2, r3, r1
 8000266:	17cb      	asrs	r3, r1, #31
 8000268:	1ad2      	subs	r2, r2, r3
 800026a:	4613      	mov	r3, r2
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	4413      	add	r3, r2
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	1aca      	subs	r2, r1, r3
 8000274:	4b40      	ldr	r3, [pc, #256]	; (8000378 <BLDCCommuteHall+0x13c>)
 8000276:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the next state to generate forward torque
 8000278:	f000 f880 	bl	800037c <writeBLDC>
		LastHallState=CurrentHallState;		//Avoid repeatedly writing the registers
 800027c:	4a3c      	ldr	r2, [pc, #240]	; (8000370 <BLDCCommuteHall+0x134>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]
//Disable the drivers, freewheel
phU_Break();
phV_Break();
phW_Break();
}
}
 8000282:	e06f      	b.n	8000364 <BLDCCommuteHall+0x128>
else if(BLDCState==BLDC_BACKWARDS){
 8000284:	4b39      	ldr	r3, [pc, #228]	; (800036c <BLDCCommuteHall+0x130>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b02      	cmp	r3, #2
 800028a:	d118      	bne.n	80002be <BLDCCommuteHall+0x82>
	if(!(LastHallState==CurrentHallState)){
 800028c:	4b38      	ldr	r3, [pc, #224]	; (8000370 <BLDCCommuteHall+0x134>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	429a      	cmp	r2, r3
 8000294:	d066      	beq.n	8000364 <BLDCCommuteHall+0x128>
		BLDCVars.BLDCEstate=(CurrentHallState+5)%6;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	1d59      	adds	r1, r3, #5
 800029a:	4b36      	ldr	r3, [pc, #216]	; (8000374 <BLDCCommuteHall+0x138>)
 800029c:	fb83 3201 	smull	r3, r2, r3, r1
 80002a0:	17cb      	asrs	r3, r1, #31
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	4613      	mov	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	4413      	add	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	1aca      	subs	r2, r1, r3
 80002ae:	4b32      	ldr	r3, [pc, #200]	; (8000378 <BLDCCommuteHall+0x13c>)
 80002b0:	609a      	str	r2, [r3, #8]
		writeBLDC();	//Write the PWM values for the previous state to generate reverse torque
 80002b2:	f000 f863 	bl	800037c <writeBLDC>
		LastHallState=CurrentHallState;
 80002b6:	4a2e      	ldr	r2, [pc, #184]	; (8000370 <BLDCCommuteHall+0x134>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	e052      	b.n	8000364 <BLDCCommuteHall+0x128>
else if(BLDCState==BLDC_BRAKE){
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <BLDCCommuteHall+0x130>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d148      	bne.n	8000358 <BLDCCommuteHall+0x11c>
		if(((CurrentHallState-LastHallState)%6)>1){
 80002c6:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <BLDCCommuteHall+0x134>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	1ad1      	subs	r1, r2, r3
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <BLDCCommuteHall+0x138>)
 80002d0:	fb83 3201 	smull	r3, r2, r3, r1
 80002d4:	17cb      	asrs	r3, r1, #31
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	1aca      	subs	r2, r1, r3
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	dd13      	ble.n	800030e <BLDCCommuteHall+0xd2>
			BLDCVars.BLDCEstate=(CurrentHallState-1)%6;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	1e59      	subs	r1, r3, #1
 80002ea:	4b22      	ldr	r3, [pc, #136]	; (8000374 <BLDCCommuteHall+0x138>)
 80002ec:	fb83 3201 	smull	r3, r2, r3, r1
 80002f0:	17cb      	asrs	r3, r1, #31
 80002f2:	1ad2      	subs	r2, r2, r3
 80002f4:	4613      	mov	r3, r2
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	4413      	add	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	1aca      	subs	r2, r1, r3
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <BLDCCommuteHall+0x13c>)
 8000300:	609a      	str	r2, [r3, #8]
			writeBLDC();
 8000302:	f000 f83b 	bl	800037c <writeBLDC>
			LastHallState=CurrentHallState;
 8000306:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <BLDCCommuteHall+0x134>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	e02a      	b.n	8000364 <BLDCCommuteHall+0x128>
		else if(((CurrentHallState-LastHallState)%6)<-1){
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <BLDCCommuteHall+0x134>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	1ad1      	subs	r1, r2, r3
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <BLDCCommuteHall+0x138>)
 8000318:	fb83 3201 	smull	r3, r2, r3, r1
 800031c:	17cb      	asrs	r3, r1, #31
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	1aca      	subs	r2, r1, r3
 800032a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800032e:	da19      	bge.n	8000364 <BLDCCommuteHall+0x128>
			BLDCVars.BLDCEstate=(CurrentHallState+1)%6;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	1c59      	adds	r1, r3, #1
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <BLDCCommuteHall+0x138>)
 8000336:	fb83 3201 	smull	r3, r2, r3, r1
 800033a:	17cb      	asrs	r3, r1, #31
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4613      	mov	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4413      	add	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1aca      	subs	r2, r1, r3
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <BLDCCommuteHall+0x13c>)
 800034a:	609a      	str	r2, [r3, #8]
			writeBLDC();
 800034c:	f000 f816 	bl	800037c <writeBLDC>
			LastHallState=CurrentHallState;
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <BLDCCommuteHall+0x134>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
}
 8000356:	e005      	b.n	8000364 <BLDCCommuteHall+0x128>
phU_Break();
 8000358:	f000 f8e8 	bl	800052c <phU_Break>
phV_Break();
 800035c:	f000 f95a 	bl	8000614 <phV_Break>
phW_Break();
 8000360:	f000 f9cc 	bl	80006fc <phW_Break>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000515 	.word	0x20000515
 8000370:	20000000 	.word	0x20000000
 8000374:	2aaaaaab 	.word	0x2aaaaaab
 8000378:	200004fc 	.word	0x200004fc

0800037c <writeBLDC>:

	BLDCVars.BLDCduty=Duty;

}

void writeBLDC(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	switch(BLDCVars.BLDCEstate){
 8000380:	4b43      	ldr	r3, [pc, #268]	; (8000490 <writeBLDC+0x114>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	2b05      	cmp	r3, #5
 8000386:	f200 8081 	bhi.w	800048c <writeBLDC+0x110>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <writeBLDC+0x14>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a9 	.word	0x080003a9
 8000394:	080003cf 	.word	0x080003cf
 8000398:	080003f5 	.word	0x080003f5
 800039c:	0800041b 	.word	0x0800041b
 80003a0:	08000441 	.word	0x08000441
 80003a4:	08000467 	.word	0x08000467
	case 0:
		//disable phase first
		phW_Break();
 80003a8:	f000 f9a8 	bl	80006fc <phW_Break>
		//WritePWM values
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 80003ac:	4b38      	ldr	r3, [pc, #224]	; (8000490 <writeBLDC+0x114>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	4b38      	ldr	r3, [pc, #224]	; (8000494 <writeBLDC+0x118>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=0;
 80003b6:	4b37      	ldr	r3, [pc, #220]	; (8000494 <writeBLDC+0x118>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2200      	movs	r2, #0
 80003bc:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 80003be:	f000 f8ef 	bl	80005a0 <phU_Enable>
		phV_Enable();
 80003c2:	f000 f961 	bl	8000688 <phV_Enable>
		BLDCVars.CurrentChannel=1; //Write the field into which the lowside current will flow, to be retrieved from the FOC_measurement_vars
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <writeBLDC+0x114>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	60da      	str	r2, [r3, #12]
		break;
 80003cc:	e05e      	b.n	800048c <writeBLDC+0x110>

	case 1:
		phV_Break();
 80003ce:	f000 f921 	bl	8000614 <phV_Break>
		htim1.Instance->CCR1=BLDCVars.BLDCduty;
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <writeBLDC+0x114>)
 80003d4:	685a      	ldr	r2, [r3, #4]
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <writeBLDC+0x118>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=0;
 80003dc:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <writeBLDC+0x118>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2200      	movs	r2, #0
 80003e2:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 80003e4:	f000 f8dc 	bl	80005a0 <phU_Enable>
		phW_Enable();
 80003e8:	f000 f9c2 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=2;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <writeBLDC+0x114>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	60da      	str	r2, [r3, #12]
		break;
 80003f2:	e04b      	b.n	800048c <writeBLDC+0x110>

	case 2:
		phU_Break();
 80003f4:	f000 f89a 	bl	800052c <phU_Break>
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <writeBLDC+0x114>)
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <writeBLDC+0x118>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=0;
 8000402:	4b24      	ldr	r3, [pc, #144]	; (8000494 <writeBLDC+0x118>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2200      	movs	r2, #0
 8000408:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 800040a:	f000 f93d 	bl	8000688 <phV_Enable>
		phW_Enable();
 800040e:	f000 f9af 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=2;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <writeBLDC+0x114>)
 8000414:	2202      	movs	r2, #2
 8000416:	60da      	str	r2, [r3, #12]
		break;
 8000418:	e038      	b.n	800048c <writeBLDC+0x110>

	case 3:
		phW_Break();
 800041a:	f000 f96f 	bl	80006fc <phW_Break>
		htim1.Instance->CCR1=0;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <writeBLDC+0x118>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2200      	movs	r2, #0
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2=BLDCVars.BLDCduty;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <writeBLDC+0x114>)
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <writeBLDC+0x118>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	639a      	str	r2, [r3, #56]	; 0x38
		phU_Enable();
 8000430:	f000 f8b6 	bl	80005a0 <phU_Enable>
		phV_Enable();
 8000434:	f000 f928 	bl	8000688 <phV_Enable>
		BLDCVars.CurrentChannel=0;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <writeBLDC+0x114>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
		break;
 800043e:	e025      	b.n	800048c <writeBLDC+0x110>

	case 4:
		phV_Break();
 8000440:	f000 f8e8 	bl	8000614 <phV_Break>
		htim1.Instance->CCR1=0;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <writeBLDC+0x118>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <writeBLDC+0x114>)
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <writeBLDC+0x118>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	63da      	str	r2, [r3, #60]	; 0x3c
		phU_Enable();
 8000456:	f000 f8a3 	bl	80005a0 <phU_Enable>
		phW_Enable();
 800045a:	f000 f989 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=0;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <writeBLDC+0x114>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
		break;
 8000464:	e012      	b.n	800048c <writeBLDC+0x110>

	case 5:
		phU_Break();
 8000466:	f000 f861 	bl	800052c <phU_Break>
		htim1.Instance->CCR2=0;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <writeBLDC+0x118>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3=BLDCVars.BLDCduty;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <writeBLDC+0x114>)
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <writeBLDC+0x118>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	63da      	str	r2, [r3, #60]	; 0x3c
		phV_Enable();
 800047c:	f000 f904 	bl	8000688 <phV_Enable>
		phW_Enable();
 8000480:	f000 f976 	bl	8000770 <phW_Enable>
		BLDCVars.CurrentChannel=1;
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <writeBLDC+0x114>)
 8000486:	2201      	movs	r2, #1
 8000488:	60da      	str	r2, [r3, #12]
		break;
 800048a:	bf00      	nop

	}
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200004fc 	.word	0x200004fc
 8000494:	20000a18 	.word	0x20000a18

08000498 <GetHallState>:
	phU_Break();
	phV_Break();
	phW_Break();
}

int GetHallState(){
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0


	int hallState=0;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
	hallState=((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))<<1)|((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))<<2));
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	4820      	ldr	r0, [pc, #128]	; (8000528 <GetHallState+0x90>)
 80004a6:	f003 fcb7 	bl	8003e18 <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461c      	mov	r4, r3
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <GetHallState+0x90>)
 80004b2:	f003 fcb1 	bl	8003e18 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	431c      	orrs	r4, r3
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <GetHallState+0x90>)
 80004c2:	f003 fca9 	bl	8003e18 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4323      	orrs	r3, r4
 80004cc:	607b      	str	r3, [r7, #4]
	switch(hallState)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b07      	cmp	r3, #7
 80004d2:	d823      	bhi.n	800051c <GetHallState+0x84>
 80004d4:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <GetHallState+0x44>)
 80004d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004da:	bf00      	nop
 80004dc:	080004fd 	.word	0x080004fd
 80004e0:	08000505 	.word	0x08000505
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	08000509 	.word	0x08000509
 80004ec:	08000515 	.word	0x08000515
 80004f0:	08000519 	.word	0x08000519
 80004f4:	08000511 	.word	0x08000511
 80004f8:	08000501 	.word	0x08000501
		{
			case 0:
				return 7; //7 is the no hall sensor detected state (all low)
 80004fc:	2307      	movs	r3, #7
 80004fe:	e00e      	b.n	800051e <GetHallState+0x86>
				break;
			case 7:
				return 6; //6 is the no hall sensor detected state (all high)
 8000500:	2306      	movs	r3, #6
 8000502:	e00c      	b.n	800051e <GetHallState+0x86>
				break;
//Implement the hall table order here, depending how the hall sensors are configured
			case 1:
				return 0;
 8000504:	2300      	movs	r3, #0
 8000506:	e00a      	b.n	800051e <GetHallState+0x86>
				break;
			case 3:
				return 1;
 8000508:	2301      	movs	r3, #1
 800050a:	e008      	b.n	800051e <GetHallState+0x86>
				break;
			case 2:
				return 2;
 800050c:	2302      	movs	r3, #2
 800050e:	e006      	b.n	800051e <GetHallState+0x86>
				break;
			case 6:
				return 3;
 8000510:	2303      	movs	r3, #3
 8000512:	e004      	b.n	800051e <GetHallState+0x86>
				break;
			case 4:
				return 4;
 8000514:	2304      	movs	r3, #4
 8000516:	e002      	b.n	800051e <GetHallState+0x86>
				break;
			case 5:
				return 5;
 8000518:	2305      	movs	r3, #5
 800051a:	e000      	b.n	800051e <GetHallState+0x86>
				break;
			default:
				return 8;
 800051c:	2308      	movs	r3, #8
				break;
		}
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	bf00      	nop
 8000528:	48000400 	.word	0x48000400

0800052c <phU_Break>:


uint32_t tmpccmrx;	//Temporary buffer which is used to turn on/off phase PWMs
//Turn all phase U FETs off, Tristate the HBridge output - For BLDC mode mainly, but also used for measuring, software fault detection and recovery
//ToDo TEST THOROUGHLY The register manipulations for the break functions were used previously on an STM32F042K6 for my first BLDC drive, on TIM1, which should be identical, but definitely needs checking
void phU_Break(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <phU_Break+0x6c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <phU_Break+0x70>)
 8000538:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <phU_Break+0x70>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <phU_Break+0x70>)
 8000548:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <phU_Break+0x70>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f023 0303 	bic.w	r3, r3, #3
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <phU_Break+0x70>)
 8000554:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <phU_Break+0x70>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800055e:	4a0f      	ldr	r2, [pc, #60]	; (800059c <phU_Break+0x70>)
 8000560:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <phU_Break+0x6c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <phU_Break+0x70>)
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <phU_Break+0x6c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6a1a      	ldr	r2, [r3, #32]
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <phU_Break+0x6c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f022 0201 	bic.w	r2, r2, #1
 800057a:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <phU_Break+0x6c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <phU_Break+0x6c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 0204 	bic.w	r2, r2, #4
 800058a:	621a      	str	r2, [r3, #32]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000a18 	.word	0x20000a18
 800059c:	2000054c 	.word	0x2000054c

080005a0 <phU_Enable>:
//Basically un-break phase U, opposite of above...
void phU_Enable(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <phU_Enable+0x6c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a19      	ldr	r2, [pc, #100]	; (8000610 <phU_Enable+0x70>)
 80005ac:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <phU_Enable+0x70>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005ba:	4a15      	ldr	r2, [pc, #84]	; (8000610 <phU_Enable+0x70>)
 80005bc:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <phU_Enable+0x70>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f023 0303 	bic.w	r3, r3, #3
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <phU_Enable+0x70>)
 80005c8:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <phU_Enable+0x70>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <phU_Enable+0x70>)
 80005d4:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <phU_Enable+0x6c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <phU_Enable+0x70>)
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER |= TIM_CCER_CC1E;   //enable
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <phU_Enable+0x6c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a1a      	ldr	r2, [r3, #32]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <phU_Enable+0x6c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_CCER_CC1NE;   //enable
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <phU_Enable+0x6c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a1a      	ldr	r2, [r3, #32]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <phU_Enable+0x6c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f042 0204 	orr.w	r2, r2, #4
 80005fe:	621a      	str	r2, [r3, #32]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000a18 	.word	0x20000a18
 8000610:	2000054c 	.word	0x2000054c

08000614 <phV_Break>:

void phV_Break(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <phV_Break+0x6c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <phV_Break+0x70>)
 8000620:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <phV_Break+0x70>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800062a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <phV_Break+0x70>)
 8000630:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <phV_Break+0x70>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <phV_Break+0x70>)
 800063c:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE<<8;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <phV_Break+0x70>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <phV_Break+0x70>)
 8000648:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCMR1 = tmpccmrx;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <phV_Break+0x6c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <phV_Break+0x70>)
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	619a      	str	r2, [r3, #24]
	htim1.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <phV_Break+0x6c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <phV_Break+0x6c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f022 0210 	bic.w	r2, r2, #16
 8000662:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <phV_Break+0x6c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <phV_Break+0x6c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000672:	621a      	str	r2, [r3, #32]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000a18 	.word	0x20000a18
 8000684:	2000054c 	.word	0x2000054c

08000688 <phV_Enable>:

void phV_Enable(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	tmpccmrx = htim1.Instance->CCMR1;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <phV_Enable+0x6c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <phV_Enable+0x70>)
 8000694:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <phV_Enable+0x70>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800069e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <phV_Enable+0x70>)
 80006a4:	6013      	str	r3, [r2, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <phV_Enable+0x70>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <phV_Enable+0x70>)
 80006b0:	6013      	str	r3, [r2, #0]
	tmpccmrx |= TIM_OCMODE_PWM1<<8;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <phV_Enable+0x70>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <phV_Enable+0x70>)
 80006bc:	6013      	str	r3, [r2, #0]
htim1.Instance->CCMR1 = tmpccmrx;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <phV_Enable+0x6c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <phV_Enable+0x70>)
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	619a      	str	r2, [r3, #24]
htim1.Instance->CCER |= TIM_CCER_CC2E;   //enable
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <phV_Enable+0x6c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6a1a      	ldr	r2, [r3, #32]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <phV_Enable+0x6c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0210 	orr.w	r2, r2, #16
 80006d6:	621a      	str	r2, [r3, #32]
htim1.Instance->CCER |= TIM_CCER_CC2NE;   //enable
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <phV_Enable+0x6c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a1a      	ldr	r2, [r3, #32]
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <phV_Enable+0x6c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e6:	621a      	str	r2, [r3, #32]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000a18 	.word	0x20000a18
 80006f8:	2000054c 	.word	0x2000054c

080006fc <phW_Break>:

void phW_Break(){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	   tmpccmrx = htim1.Instance->CCMR2;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <phW_Break+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <phW_Break+0x70>)
 8000708:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_OC3M;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <phW_Break+0x70>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <phW_Break+0x70>)
 8000718:	6013      	str	r3, [r2, #0]
	   tmpccmrx &= ~TIM_CCMR2_CC3S;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <phW_Break+0x70>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 0303 	bic.w	r3, r3, #3
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <phW_Break+0x70>)
 8000724:	6013      	str	r3, [r2, #0]
	   tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <phW_Break+0x70>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <phW_Break+0x70>)
 8000730:	6013      	str	r3, [r2, #0]
	   htim1.Instance->CCMR2 = tmpccmrx;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <phW_Break+0x6c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <phW_Break+0x70>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	61da      	str	r2, [r3, #28]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <phW_Break+0x6c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a1a      	ldr	r2, [r3, #32]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <phW_Break+0x6c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800074a:	621a      	str	r2, [r3, #32]
	   htim1.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <phW_Break+0x6c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a1a      	ldr	r2, [r3, #32]
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <phW_Break+0x6c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800075a:	621a      	str	r2, [r3, #32]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000a18 	.word	0x20000a18
 800076c:	2000054c 	.word	0x2000054c

08000770 <phW_Enable>:

void phW_Enable(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  	tmpccmrx = htim1.Instance->CCMR2;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <phW_Enable+0x6c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <phW_Enable+0x70>)
 800077c:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <phW_Enable+0x70>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <phW_Enable+0x70>)
 800078c:	6013      	str	r3, [r2, #0]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <phW_Enable+0x70>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <phW_Enable+0x70>)
 8000798:	6013      	str	r3, [r2, #0]
    tmpccmrx |= TIM_OCMODE_PWM1;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <phW_Enable+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <phW_Enable+0x70>)
 80007a4:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCMR2 = tmpccmrx;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <phW_Enable+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <phW_Enable+0x70>)
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	61da      	str	r2, [r3, #28]
    htim1.Instance->CCER |= TIM_CCER_CC3E;   //enable
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <phW_Enable+0x6c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <phW_Enable+0x6c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007be:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER |= TIM_CCER_CC3NE;   //enable
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <phW_Enable+0x6c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6a1a      	ldr	r2, [r3, #32]
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <phW_Enable+0x6c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007ce:	621a      	str	r2, [r3, #32]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000a18 	.word	0x20000a18
 80007e0:	2000054c 	.word	0x2000054c

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f001 fc5c 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f882 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 fe3a 	bl	8001468 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f4:	f000 fdde 	bl	80013b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80007f8:	f000 f8e6 	bl	80009c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007fc:	f000 f974 	bl	8000ae8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000800:	f000 f9f0 	bl	8000be4 <MX_ADC3_Init>
  MX_COMP1_Init();
 8000804:	f000 fa60 	bl	8000cc8 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000808:	f000 fa8e 	bl	8000d28 <MX_COMP2_Init>
  MX_COMP4_Init();
 800080c:	f000 fabc 	bl	8000d88 <MX_COMP4_Init>
  MX_COMP7_Init();
 8000810:	f000 faea 	bl	8000de8 <MX_COMP7_Init>
  MX_I2C1_Init();
 8000814:	f000 fb18 	bl	8000e48 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8000818:	f000 fb54 	bl	8000ec4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800081c:	f000 fb78 	bl	8000f10 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000820:	f000 fb9c 	bl	8000f5c <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000824:	f000 fbc0 	bl	8000fa8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000828:	f000 fc78 	bl	800111c <MX_TIM3_Init>
  MX_TIM4_Init();
 800082c:	f000 fcfc 	bl	8001228 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000830:	f000 fd90 	bl	8001354 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_OPAMP_Start(&hopamp1);
 8000834:	4826      	ldr	r0, [pc, #152]	; (80008d0 <main+0xec>)
 8000836:	f003 fcd3 	bl	80041e0 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp2);
 800083a:	4826      	ldr	r0, [pc, #152]	; (80008d4 <main+0xf0>)
 800083c:	f003 fcd0 	bl	80041e0 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8000840:	4825      	ldr	r0, [pc, #148]	; (80008d8 <main+0xf4>)
 8000842:	f003 fccd 	bl	80041e0 <HAL_OPAMP_Start>

HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4824      	ldr	r0, [pc, #144]	; (80008dc <main+0xf8>)
 800084a:	f005 fddd 	bl	8006408 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800084e:	2100      	movs	r1, #0
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <main+0xf8>)
 8000852:	f006 ff6f 	bl	8007734 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000856:	2104      	movs	r1, #4
 8000858:	4820      	ldr	r0, [pc, #128]	; (80008dc <main+0xf8>)
 800085a:	f005 fdd5 	bl	8006408 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800085e:	2104      	movs	r1, #4
 8000860:	481e      	ldr	r0, [pc, #120]	; (80008dc <main+0xf8>)
 8000862:	f006 ff67 	bl	8007734 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000866:	2108      	movs	r1, #8
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <main+0xf8>)
 800086a:	f005 fdcd 	bl	8006408 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800086e:	2108      	movs	r1, #8
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <main+0xf8>)
 8000872:	f006 ff5f 	bl	8007734 <HAL_TIMEx_PWMN_Start>

HAL_Delay(1000);
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	f001 fc49 	bl	8002110 <HAL_Delay>
HAL_COMP_Start(&hcomp1);
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <main+0xfc>)
 8000880:	f002 fe58 	bl	8003534 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp2);
 8000884:	4817      	ldr	r0, [pc, #92]	; (80008e4 <main+0x100>)
 8000886:	f002 fe55 	bl	8003534 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp4);
 800088a:	4817      	ldr	r0, [pc, #92]	; (80008e8 <main+0x104>)
 800088c:	f002 fe52 	bl	8003534 <HAL_COMP_Start>
HAL_COMP_Start(&hcomp7);
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <main+0x108>)
 8000892:	f002 fe4f 	bl	8003534 <HAL_COMP_Start>
HAL_Delay(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f001 fc39 	bl	8002110 <HAL_Delay>
__HAL_TIM_MOE_ENABLE(&htim1); // initialising the comparators triggers the break state
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <main+0xf8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <main+0xf8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
BLDCInit();
 80008ae:	f7ff fc8f 	bl	80001d0 <BLDCInit>

while(1){
	__HAL_TIM_MOE_ENABLE(&htim1); // initialising the comparators triggers the break state
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <main+0xf8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <main+0xf8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008c0:	645a      	str	r2, [r3, #68]	; 0x44

	BLDCVars.BLDCduty=70;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <main+0x10c>)
 80008c4:	2246      	movs	r2, #70	; 0x46
 80008c6:	605a      	str	r2, [r3, #4]
	BLDCCommuteHall();
 80008c8:	f7ff fcb8 	bl	800023c <BLDCCommuteHall>
	__HAL_TIM_MOE_ENABLE(&htim1); // initialising the comparators triggers the break state
 80008cc:	e7f1      	b.n	80008b2 <main+0xce>
 80008ce:	bf00      	nop
 80008d0:	20000898 	.word	0x20000898
 80008d4:	20000554 	.word	0x20000554
 80008d8:	200007f4 	.word	0x200007f4
 80008dc:	20000a18 	.word	0x20000a18
 80008e0:	20000828 	.word	0x20000828
 80008e4:	20000aa0 	.word	0x20000aa0
 80008e8:	200008cc 	.word	0x200008cc
 80008ec:	2000099c 	.word	0x2000099c
 80008f0:	200004fc 	.word	0x200004fc

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09e      	sub	sp, #120	; 0x78
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008fe:	2228      	movs	r2, #40	; 0x28
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f009 ff4e 	bl	800a7a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	223c      	movs	r2, #60	; 0x3c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f009 ff40 	bl	800a7a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000924:	2303      	movs	r3, #3
 8000926:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000932:	2301      	movs	r3, #1
 8000934:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2310      	movs	r3, #16
 8000938:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000942:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000944:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000948:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800094e:	4618      	mov	r0, r3
 8000950:	f004 f9b8 	bl	8004cc4 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800095a:	f000 fdc7 	bl	80014ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2302      	movs	r3, #2
 8000964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000974:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f005 f8aa 	bl	8005ad4 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000986:	f000 fdb1 	bl	80014ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <SystemClock_Config+0xd0>)
 800098c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 faf9 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009b8:	f000 fd98 	bl	80014ec <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3778      	adds	r7, #120	; 0x78
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	000211a4 	.word	0x000211a4

080009c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 80009ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009f2:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f8:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0a:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a1a:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a1c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a4a:	f001 fba1 	bl	8002190 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a54:	f000 fd4a 	bl	80014ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a64:	f002 fb94 	bl	8003190 <HAL_ADCEx_MultiModeConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a6e:	f000 fd3d 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000a72:	230f      	movs	r3, #15
 8000a74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4815      	ldr	r0, [pc, #84]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000a90:	f002 f892 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000a9a:	f000 fd27 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000ab0:	f002 f882 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000aba:	f000 fd17 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_ADC1_Init+0x11c>)
 8000acc:	f002 f874 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000ad6:	f000 fd09 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200008fc 	.word	0x200008fc

08000ae8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b00:	4a37      	ldr	r2, [pc, #220]	; (8000be0 <MX_ADC2_Init+0xf8>)
 8000b02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b2e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b5c:	f001 fb18 	bl	8002190 <HAL_ADC_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000b66:	f000 fcc1 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8000b6a:	2311      	movs	r3, #17
 8000b6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000b76:	2305      	movs	r3, #5
 8000b78:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000b88:	f002 f816 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000b92:	f000 fcab 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000ba8:	f002 f806 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000bb2:	f000 fc9b 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_ADC2_Init+0xf4>)
 8000bc4:	f001 fff8 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8000bce:	f000 fc8d 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000068c 	.word	0x2000068c
 8000be0:	50000100 	.word	0x50000100

08000be4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c08:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <MX_ADC3_Init+0xe0>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c36:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c62:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c64:	f001 fa94 	bl	8002190 <HAL_ADC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000c6e:	f000 fc3d 	bl	80014ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000c7e:	f002 fa87 	bl	8003190 <HAL_ADCEx_MultiModeConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000c88:	f000 fc30 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3;
 8000c8c:	2311      	movs	r3, #17
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000c98:	2305      	movs	r3, #5
 8000c9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_ADC3_Init+0xdc>)
 8000caa:	f001 ff85 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000cb4:	f000 fc1a 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000094c 	.word	0x2000094c
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <MX_COMP1_Init+0x5c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000ce0:	f640 027f 	movw	r2, #2175	; 0x87f
 8000ce4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_COMP1_Init+0x58>)
 8000d0c:	f002 fb92 	bl	8003434 <HAL_COMP_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 8000d16:	f000 fbe9 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000828 	.word	0x20000828
 8000d24:	4001001c 	.word	0x4001001c

08000d28 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d2e:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <MX_COMP2_Init+0x5c>)
 8000d30:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d40:	f640 027f 	movw	r2, #2175	; 0x87f
 8000d44:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_COMP2_Init+0x58>)
 8000d6c:	f002 fb62 	bl	8003434 <HAL_COMP_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8000d76:	f000 fbb9 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000aa0 	.word	0x20000aa0
 8000d84:	40010020 	.word	0x40010020

08000d88 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_COMP4_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_4VREFINT;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000da0:	f640 027f 	movw	r2, #2175	; 0x87f
 8000da4:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_COMP4_Init+0x58>)
 8000dcc:	f002 fb32 	bl	8003434 <HAL_COMP_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 fb89 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200008cc 	.word	0x200008cc
 8000de4:	40010028 	.word	0x40010028

08000de8 <MX_COMP7_Init>:
  * @brief COMP7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP7_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP7_Init 0 */

  /* USER CODE BEGIN COMP7_Init 1 */

  /* USER CODE END COMP7_Init 1 */
  hcomp7.Instance = COMP7;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <MX_COMP7_Init+0x5c>)
 8000df0:	601a      	str	r2, [r3, #0]
  hcomp7.Init.InvertingInput = COMP_INVERTINGINPUT_3_4VREFINT;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000df4:	2220      	movs	r2, #32
 8000df6:	605a      	str	r2, [r3, #4]
  hcomp7.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hcomp7.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e00:	f640 027f 	movw	r2, #2175	; 0x87f
 8000e04:	60da      	str	r2, [r3, #12]
  hcomp7.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hcomp7.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hcomp7.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hcomp7.Init.Mode = COMP_MODE_HIGHSPEED;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  hcomp7.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hcomp7.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp7) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_COMP7_Init+0x58>)
 8000e2c:	f002 fb02 	bl	8003434 <HAL_COMP_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_COMP7_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 fb59 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP7_Init 2 */

  /* USER CODE END COMP7_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000099c 	.word	0x2000099c
 8000e44:	40010034 	.word	0x40010034

08000e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e54:	f240 220b 	movw	r2, #523	; 0x20b
 8000e58:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e86:	f002 ffdf 	bl	8003e48 <HAL_I2C_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e90:	f000 fb2c 	bl	80014ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e98:	f003 f865 	bl	8003f66 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ea2:	f000 fb23 	bl	80014ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000eaa:	f003 f8a7 	bl	8003ffc <HAL_I2CEx_ConfigDigitalFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 fb1a 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000720 	.word	0x20000720
 8000ec0:	40005400 	.word	0x40005400

08000ec4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <MX_OPAMP1_Init+0x48>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000ee8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000eec:	621a      	str	r2, [r3, #32]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_OPAMP1_Init+0x44>)
 8000ef6:	f003 f8cd 	bl	8004094 <HAL_OPAMP_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 8000f00:	f000 faf4 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000898 	.word	0x20000898
 8000f0c:	40010038 	.word	0x40010038

08000f10 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <MX_OPAMP2_Init+0x48>)
 8000f18:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f34:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f38:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_OPAMP2_Init+0x44>)
 8000f42:	f003 f8a7 	bl	8004094 <HAL_OPAMP_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 8000f4c:	f000 face 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000554 	.word	0x20000554
 8000f58:	4001003c 	.word	0x4001003c

08000f5c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <MX_OPAMP3_Init+0x48>)
 8000f64:	601a      	str	r2, [r3, #0]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f68:	2240      	movs	r2, #64	; 0x40
 8000f6a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	60da      	str	r2, [r3, #12]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f84:	621a      	str	r2, [r3, #32]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f8e:	f003 f881 	bl	8004094 <HAL_OPAMP_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_OPAMP3_Init+0x40>
  {
    Error_Handler();
 8000f98:	f000 faa8 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200007f4 	.word	0x200007f4
 8000fa4:	40010040 	.word	0x40010040

08000fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b096      	sub	sp, #88	; 0x58
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	222c      	movs	r2, #44	; 0x2c
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 fbe5 	bl	800a7a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fda:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <MX_TIM1_Init+0x16c>)
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <MX_TIM1_Init+0x170>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fe0:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <MX_TIM1_Init+0x16c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <MX_TIM1_Init+0x16c>)
 8000fe8:	2220      	movs	r2, #32
 8000fea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000fec:	4b49      	ldr	r3, [pc, #292]	; (8001114 <MX_TIM1_Init+0x16c>)
 8000fee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ff2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <MX_TIM1_Init+0x16c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <MX_TIM1_Init+0x16c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <MX_TIM1_Init+0x16c>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001006:	4843      	ldr	r0, [pc, #268]	; (8001114 <MX_TIM1_Init+0x16c>)
 8001008:	f005 f9d2 	bl	80063b0 <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fa6b 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001016:	2370      	movs	r3, #112	; 0x70
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001022:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001026:	4619      	mov	r1, r3
 8001028:	483a      	ldr	r0, [pc, #232]	; (8001114 <MX_TIM1_Init+0x16c>)
 800102a:	f006 fbb3 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001034:	f000 fa5a 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 512;
 800103c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001046:	2300      	movs	r3, #0
 8001048:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001056:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	482d      	ldr	r0, [pc, #180]	; (8001114 <MX_TIM1_Init+0x16c>)
 8001060:	f005 fc1a 	bl	8006898 <HAL_TIM_PWM_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800106a:	f000 fa3f 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2204      	movs	r2, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4827      	ldr	r0, [pc, #156]	; (8001114 <MX_TIM1_Init+0x16c>)
 8001078:	f005 fc0e 	bl	8006898 <HAL_TIM_PWM_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001082:	f000 fa33 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108a:	2208      	movs	r2, #8
 800108c:	4619      	mov	r1, r3
 800108e:	4821      	ldr	r0, [pc, #132]	; (8001114 <MX_TIM1_Init+0x16c>)
 8001090:	f005 fc02 	bl	8006898 <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800109a:	f000 fa27 	bl	80014ec <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 800109e:	2305      	movs	r3, #5
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a6:	220c      	movs	r2, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	481a      	ldr	r0, [pc, #104]	; (8001114 <MX_TIM1_Init+0x16c>)
 80010ac:	f005 fbf4 	bl	8006898 <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80010b6:	f000 fa19 	bl	80014ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80010ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 80010ca:	231e      	movs	r3, #30
 80010cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80010dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 6;
 80010e8:	2306      	movs	r3, #6
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_TIM1_Init+0x16c>)
 80010f6:	f006 fbcd 	bl	8007894 <HAL_TIMEx_ConfigBreakDeadTime>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001100:	f000 f9f4 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <MX_TIM1_Init+0x16c>)
 8001106:	f000 fda9 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 800110a:	bf00      	nop
 800110c:	3758      	adds	r7, #88	; 0x58
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000a18 	.word	0x20000a18
 8001118:	40012c00 	.word	0x40012c00

0800111c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <MX_TIM3_Init+0x104>)
 800114c:	4a35      	ldr	r2, [pc, #212]	; (8001224 <MX_TIM3_Init+0x108>)
 800114e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <MX_TIM3_Init+0x104>)
 8001152:	2247      	movs	r2, #71	; 0x47
 8001154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <MX_TIM3_Init+0x104>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <MX_TIM3_Init+0x104>)
 800115e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <MX_TIM3_Init+0x104>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <MX_TIM3_Init+0x104>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001170:	482b      	ldr	r0, [pc, #172]	; (8001220 <MX_TIM3_Init+0x104>)
 8001172:	f005 f8c7 	bl	8006304 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800117c:	f000 f9b6 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001180:	4827      	ldr	r0, [pc, #156]	; (8001220 <MX_TIM3_Init+0x104>)
 8001182:	f005 f999 	bl	80064b8 <HAL_TIM_IC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800118c:	f000 f9ae 	bl	80014ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001190:	2304      	movs	r3, #4
 8001192:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001194:	2350      	movs	r3, #80	; 0x50
 8001196:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	481e      	ldr	r0, [pc, #120]	; (8001220 <MX_TIM3_Init+0x104>)
 80011a8:	f005 fcaa 	bl	8006b00 <HAL_TIM_SlaveConfigSynchro>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011b2:	f000 f99b 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_TIM3_Init+0x104>)
 80011c6:	f006 fae5 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80011d0:	f000 f98c 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_TIM3_Init+0x104>)
 80011ec:	f005 fab8 	bl	8006760 <HAL_TIM_IC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80011f6:	f000 f979 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011fa:	2302      	movs	r3, #2
 80011fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011fe:	2302      	movs	r3, #2
 8001200:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	2204      	movs	r2, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_TIM3_Init+0x104>)
 800120a:	f005 faa9 	bl	8006760 <HAL_TIM_IC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001214:	f000 f96a 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000858 	.word	0x20000858
 8001224:	40000400 	.word	0x40000400

08001228 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <MX_TIM4_Init+0x124>)
 8001258:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <MX_TIM4_Init+0x128>)
 800125a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 109;
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <MX_TIM4_Init+0x124>)
 800125e:	226d      	movs	r2, #109	; 0x6d
 8001260:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <MX_TIM4_Init+0x124>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <MX_TIM4_Init+0x124>)
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <MX_TIM4_Init+0x124>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <MX_TIM4_Init+0x124>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800127c:	4833      	ldr	r0, [pc, #204]	; (800134c <MX_TIM4_Init+0x124>)
 800127e:	f005 f841 	bl	8006304 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001288:	f000 f930 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800128c:	482f      	ldr	r0, [pc, #188]	; (800134c <MX_TIM4_Init+0x124>)
 800128e:	f005 f913 	bl	80064b8 <HAL_TIM_IC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001298:	f000 f928 	bl	80014ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800129c:	2304      	movs	r3, #4
 800129e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4826      	ldr	r0, [pc, #152]	; (800134c <MX_TIM4_Init+0x124>)
 80012b4:	f005 fc24 	bl	8006b00 <HAL_TIM_SlaveConfigSynchro>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012be:	f000 f915 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <MX_TIM4_Init+0x124>)
 80012d2:	f006 fa5f 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80012dc:	f000 f906 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e4:	2301      	movs	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <MX_TIM4_Init+0x124>)
 80012f8:	f005 fa32 	bl	8006760 <HAL_TIM_IC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001302:	f000 f8f3 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	2204      	movs	r2, #4
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_TIM4_Init+0x124>)
 800130e:	f005 fa27 	bl	8006760 <HAL_TIM_IC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001318:	f000 f8e8 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2208      	movs	r2, #8
 8001320:	4619      	mov	r1, r3
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <MX_TIM4_Init+0x124>)
 8001324:	f005 fa1c 	bl	8006760 <HAL_TIM_IC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 800132e:	f000 f8dd 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim4, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM4_Init+0x124>)
 8001336:	f005 fbc7 	bl	8006ac8 <HAL_TIM_ConfigTI1Input>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001340:	f000 f8d4 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000588 	.word	0x20000588
 8001350:	40000800 	.word	0x40000800

08001354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART3_UART_Init+0x58>)
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <MX_USART3_UART_Init+0x5c>)
 800135c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_USART3_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART3_UART_Init+0x58>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART3_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART3_UART_Init+0x58>)
 8001398:	f006 fb3d 	bl	8007a16 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013a2:	f000 f8a3 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000060c 	.word	0x2000060c
 80013b0:	40004800 	.word	0x40004800

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_DMA_Init+0xb0>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <MX_DMA_Init+0xb0>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_DMA_Init+0xb0>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_DMA_Init+0xb0>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <MX_DMA_Init+0xb0>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_DMA_Init+0xb0>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200b      	movs	r0, #11
 80013f0:	f002 fa48 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f4:	200b      	movs	r0, #11
 80013f6:	f002 fa61 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	200c      	movs	r0, #12
 8001400:	f002 fa40 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001404:	200c      	movs	r0, #12
 8001406:	f002 fa59 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200d      	movs	r0, #13
 8001410:	f002 fa38 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001414:	200d      	movs	r0, #13
 8001416:	f002 fa51 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2010      	movs	r0, #16
 8001420:	f002 fa30 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001424:	2010      	movs	r0, #16
 8001426:	f002 fa49 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2011      	movs	r0, #17
 8001430:	f002 fa28 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001434:	2011      	movs	r0, #17
 8001436:	f002 fa41 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2038      	movs	r0, #56	; 0x38
 8001440:	f002 fa20 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001444:	2038      	movs	r0, #56	; 0x38
 8001446:	f002 fa39 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	203c      	movs	r0, #60	; 0x3c
 8001450:	f002 fa18 	bl	8003884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001454:	203c      	movs	r0, #60	; 0x3c
 8001456:	f002 fa31 	bl	80038bc <HAL_NVIC_EnableIRQ>

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_GPIO_Init+0x5c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <MX_GPIO_Init+0x5c>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_GPIO_Init+0x5c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x5c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <MX_GPIO_Init+0x5c>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	6153      	str	r3, [r2, #20]
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_GPIO_Init+0x5c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_GPIO_Init+0x5c>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <MX_GPIO_Init+0x5c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_GPIO_Init+0x5c>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014da:	f000 fdf9 	bl	80020d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40001400 	.word	0x40001400

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_MspInit+0x4c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_MspInit+0x4c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_MspInit+0x4c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_MspInit+0x4c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_MspInit+0x4c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	210f      	movs	r1, #15
 8001536:	f06f 0001 	mvn.w	r0, #1
 800153a:	f002 f9a3 	bl	8003884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	; 0x30
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156c:	d15f      	bne.n	800162e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_ADC_MspInit+0x228>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <HAL_ADC_MspInit+0x228>)
 8001576:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001578:	4b7e      	ldr	r3, [pc, #504]	; (8001774 <HAL_ADC_MspInit+0x228>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10b      	bne.n	8001598 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001580:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a7c      	ldr	r2, [pc, #496]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158a:	6153      	str	r3, [r2, #20]
 800158c:	4b7a      	ldr	r3, [pc, #488]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a76      	ldr	r2, [pc, #472]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a2:	6153      	str	r3, [r2, #20]
 80015a4:	4b74      	ldr	r3, [pc, #464]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80015b0:	2309      	movs	r3, #9
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b4:	2303      	movs	r3, #3
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f002 faad 	bl	8003b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015ca:	4b6c      	ldr	r3, [pc, #432]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015cc:	4a6c      	ldr	r2, [pc, #432]	; (8001780 <HAL_ADC_MspInit+0x234>)
 80015ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d6:	4b69      	ldr	r3, [pc, #420]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015dc:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e2:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ea:	4b64      	ldr	r3, [pc, #400]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015f2:	4b62      	ldr	r3, [pc, #392]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80015f8:	4b60      	ldr	r3, [pc, #384]	; (800177c <HAL_ADC_MspInit+0x230>)
 80015fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001600:	485e      	ldr	r0, [pc, #376]	; (800177c <HAL_ADC_MspInit+0x230>)
 8001602:	f002 f969 	bl	80038d8 <HAL_DMA_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800160c:	f7ff ff6e 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a5a      	ldr	r2, [pc, #360]	; (800177c <HAL_ADC_MspInit+0x230>)
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
 8001616:	4a59      	ldr	r2, [pc, #356]	; (800177c <HAL_ADC_MspInit+0x230>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2012      	movs	r0, #18
 8001622:	f002 f92f 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001626:	2012      	movs	r0, #18
 8001628:	f002 f948 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800162c:	e09e      	b.n	800176c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_ADC_MspInit+0x238>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d15f      	bne.n	80016f8 <HAL_ADC_MspInit+0x1ac>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_ADC_MspInit+0x228>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_ADC_MspInit+0x228>)
 8001640:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_ADC_MspInit+0x228>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10b      	bne.n	8001662 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800164a:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b48      	ldr	r3, [pc, #288]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a44      	ldr	r2, [pc, #272]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800167a:	2330      	movs	r3, #48	; 0x30
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f002 fa48 	bl	8003b24 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 8001696:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_ADC_MspInit+0x240>)
 8001698:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b4:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80016bc:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80016ca:	482f      	ldr	r0, [pc, #188]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016cc:	f002 f904 	bl	80038d8 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 80016d6:	f7ff ff09 	bl	80014ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a2a      	ldr	r2, [pc, #168]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <HAL_ADC_MspInit+0x23c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2012      	movs	r0, #18
 80016ec:	f002 f8ca 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016f0:	2012      	movs	r0, #18
 80016f2:	f002 f8e3 	bl	80038bc <HAL_NVIC_EnableIRQ>
}
 80016f6:	e039      	b.n	800176c <HAL_ADC_MspInit+0x220>
  else if(hadc->Instance==ADC3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_ADC_MspInit+0x244>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d134      	bne.n	800176c <HAL_ADC_MspInit+0x220>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_ADC_MspInit+0x22c>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA2_Channel5;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_ADC_MspInit+0x248>)
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_ADC_MspInit+0x24c>)
 800171e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_ADC_MspInit+0x248>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001738:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_ADC_MspInit+0x248>)
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_ADC_MspInit+0x248>)
 800174a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001750:	4810      	ldr	r0, [pc, #64]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001752:	f002 f8c1 	bl	80038d8 <HAL_DMA_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 800175c:	f7ff fec6 	bl	80014ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_ADC_MspInit+0x248>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000002c 	.word	0x2000002c
 8001778:	40021000 	.word	0x40021000
 800177c:	200009cc 	.word	0x200009cc
 8001780:	40020008 	.word	0x40020008
 8001784:	50000100 	.word	0x50000100
 8001788:	20000ad0 	.word	0x20000ad0
 800178c:	40020408 	.word	0x40020408
 8001790:	50000400 	.word	0x50000400
 8001794:	2000076c 	.word	0x2000076c
 8001798:	40020458 	.word	0x40020458

0800179c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <HAL_COMP_MspInit+0x114>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d119      	bne.n	80017f2 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f002 f99a 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80017f0:	e05a      	b.n	80018a8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <HAL_COMP_MspInit+0x11c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d119      	bne.n	8001830 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 8001802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001806:	6153      	str	r3, [r2, #20]
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f002 f97b 	bl	8003b24 <HAL_GPIO_Init>
}
 800182e:	e03b      	b.n	80018a8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_COMP_MspInit+0x120>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d118      	bne.n	800186c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <HAL_COMP_MspInit+0x124>)
 8001866:	f002 f95d 	bl	8003b24 <HAL_GPIO_Init>
}
 800186a:	e01d      	b.n	80018a8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_COMP_MspInit+0x128>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d118      	bne.n	80018a8 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_COMP_MspInit+0x118>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f002 f93e 	bl	8003b24 <HAL_GPIO_Init>
}
 80018a8:	bf00      	nop
 80018aa:	3730      	adds	r7, #48	; 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	4001001c 	.word	0x4001001c
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010020 	.word	0x40010020
 80018bc:	40010028 	.word	0x40010028
 80018c0:	48000400 	.word	0x48000400
 80018c4:	40010034 	.word	0x40010034

080018c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_I2C_MspInit+0x154>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	f040 8093 	bne.w	8001a12 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4a4b      	ldr	r2, [pc, #300]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f6:	6153      	str	r3, [r2, #20]
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 800190a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190e:	6153      	str	r3, [r2, #20]
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800191c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2312      	movs	r3, #18
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192e:	2304      	movs	r3, #4
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f002 f8f2 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194a:	2301      	movs	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001952:	2304      	movs	r3, #4
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4831      	ldr	r0, [pc, #196]	; (8001a24 <HAL_I2C_MspInit+0x15c>)
 800195e:	f002 f8e1 	bl	8003b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001962:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 8001968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <HAL_I2C_MspInit+0x158>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 800197c:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_I2C_MspInit+0x164>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019aa:	481f      	ldr	r0, [pc, #124]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 80019ac:	f001 ff94 	bl	80038d8 <HAL_DMA_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_MspInit+0xf2>
    {
      Error_Handler();
 80019b6:	f7ff fd99 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_I2C_MspInit+0x160>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019c8:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <HAL_I2C_MspInit+0x16c>)
 80019ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019ce:	2210      	movs	r2, #16
 80019d0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019f6:	480e      	ldr	r0, [pc, #56]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 80019f8:	f001 ff6e 	bl	80038d8 <HAL_DMA_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001a02:	f7ff fd73 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_I2C_MspInit+0x168>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40021000 	.word	0x40021000
 8001a24:	48000400 	.word	0x48000400
 8001a28:	20000a5c 	.word	0x20000a5c
 8001a2c:	40020080 	.word	0x40020080
 8001a30:	200006dc 	.word	0x200006dc
 8001a34:	4002006c 	.word	0x4002006c

08001a38 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_OPAMP_MspInit+0xd8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d119      	bne.n	8001a8e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a72:	2306      	movs	r3, #6
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a76:	2303      	movs	r3, #3
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f002 f84c 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001a8c:	e03b      	b.n	8001b06 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <HAL_OPAMP_MspInit+0xe0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d119      	bne.n	8001acc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa2:	6153      	str	r3, [r2, #20]
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f002 f82d 	bl	8003b24 <HAL_GPIO_Init>
}
 8001aca:	e01c      	b.n	8001b06 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <HAL_OPAMP_MspInit+0xe4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d117      	bne.n	8001b06 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6153      	str	r3, [r2, #20]
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_OPAMP_MspInit+0xdc>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aee:	2303      	movs	r3, #3
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af2:	2303      	movs	r3, #3
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <HAL_OPAMP_MspInit+0xe8>)
 8001b02:	f002 f80f 	bl	8003b24 <HAL_GPIO_Init>
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010038 	.word	0x40010038
 8001b14:	40021000 	.word	0x40021000
 8001b18:	4001003c 	.word	0x4001003c
 8001b1c:	40010040 	.word	0x40010040
 8001b20:	48000400 	.word	0x48000400

08001b24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_TIM_PWM_MspInit+0x38>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10b      	bne.n	8001b4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_TIM_Base_MspInit+0xe8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d130      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bb6:	2310      	movs	r3, #16
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4820      	ldr	r0, [pc, #128]	; (8001c54 <HAL_TIM_Base_MspInit+0xf0>)
 8001bd2:	f001 ffa7 	bl	8003b24 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	201d      	movs	r0, #29
 8001bdc:	f001 fe52 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001be0:	201d      	movs	r0, #29
 8001be2:	f001 fe6b 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001be6:	e02d      	b.n	8001c44 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_TIM_Base_MspInit+0xf4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d128      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_TIM_Base_MspInit+0xec>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001c22:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c34:	2302      	movs	r3, #2
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_TIM_Base_MspInit+0xf0>)
 8001c40:	f001 ff70 	bl	8003b24 <HAL_GPIO_Init>
}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40000400 	.word	0x40000400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000400 	.word	0x48000400
 8001c58:	40000800 	.word	0x40000800

08001c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <HAL_TIM_MspPostInit+0xc4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d14b      	bne.n	8001d16 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_TIM_MspPostInit+0xc8>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_TIM_MspPostInit+0xc8>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6153      	str	r3, [r2, #20]
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_TIM_MspPostInit+0xc8>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_TIM_MspPostInit+0xc8>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <HAL_TIM_MspPostInit+0xc8>)
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_TIM_MspPostInit+0xc8>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001cae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cc0:	2306      	movs	r3, #6
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4817      	ldr	r0, [pc, #92]	; (8001d28 <HAL_TIM_MspPostInit+0xcc>)
 8001ccc:	f001 ff2a 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480e      	ldr	r0, [pc, #56]	; (8001d28 <HAL_TIM_MspPostInit+0xcc>)
 8001cee:	f001 ff19 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001cf2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d04:	2306      	movs	r3, #6
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f001 ff07 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000400 	.word	0x48000400

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3d      	ldr	r2, [pc, #244]	; (8001e40 <HAL_UART_MspInit+0x114>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d174      	bne.n	8001e38 <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_UART_MspInit+0x118>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a3c      	ldr	r2, [pc, #240]	; (8001e44 <HAL_UART_MspInit+0x118>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <HAL_UART_MspInit+0x118>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_UART_MspInit+0x118>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	4a36      	ldr	r2, [pc, #216]	; (8001e44 <HAL_UART_MspInit+0x118>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6153      	str	r3, [r2, #20]
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_UART_MspInit+0x118>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d90:	2307      	movs	r3, #7
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482b      	ldr	r0, [pc, #172]	; (8001e48 <HAL_UART_MspInit+0x11c>)
 8001d9c:	f001 fec2 	bl	8003b24 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001da2:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_UART_MspInit+0x124>)
 8001da4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dd0:	481e      	ldr	r0, [pc, #120]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001dd2:	f001 fd81 	bl	80038d8 <HAL_DMA_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001ddc:	f7ff fb86 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001de4:	66da      	str	r2, [r3, #108]	; 0x6c
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_UART_MspInit+0x120>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001dee:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_UART_MspInit+0x12c>)
 8001df0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001df4:	2210      	movs	r2, #16
 8001df6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e1e:	f001 fd5b 	bl	80038d8 <HAL_DMA_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001e28:	f7ff fb60 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e30:	669a      	str	r2, [r3, #104]	; 0x68
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_UART_MspInit+0x128>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40004800 	.word	0x40004800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	200005c8 	.word	0x200005c8
 8001e50:	40020030 	.word	0x40020030
 8001e54:	200007b0 	.word	0x200007b0
 8001e58:	4002001c 	.word	0x4002001c

08001e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	2037      	movs	r0, #55	; 0x37
 8001e72:	f001 fd07 	bl	8003884 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e76:	2037      	movs	r0, #55	; 0x37
 8001e78:	f001 fd20 	bl	80038bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_InitTick+0xa0>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_InitTick+0xa0>)
 8001e82:	f043 0320 	orr.w	r3, r3, #32
 8001e86:	61d3      	str	r3, [r2, #28]
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_InitTick+0xa0>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e94:	f107 0210 	add.w	r2, r7, #16
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 f84e 	bl	8005f40 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ea4:	f004 f808 	bl	8005eb8 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_InitTick+0xa4>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0c9b      	lsrs	r3, r3, #18
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_InitTick+0xa8>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_InitTick+0xac>)
 8001ec0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_InitTick+0xa8>)
 8001ec4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_InitTick+0xa8>)
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_InitTick+0xa8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_InitTick+0xa8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <HAL_InitTick+0xa8>)
 8001ede:	f004 fa11 	bl	8006304 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001ee8:	4806      	ldr	r0, [pc, #24]	; (8001f04 <HAL_InitTick+0xa8>)
 8001eea:	f004 fa37 	bl	800635c <HAL_TIM_Base_Start_IT>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3730      	adds	r7, #48	; 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	20000b14 	.word	0x20000b14
 8001f08:	40001400 	.word	0x40001400

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler+0x4>

08001f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <DMA1_Channel1_IRQHandler+0x10>)
 8001f46:	f001 fd0e 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200009cc 	.word	0x200009cc

08001f54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <DMA1_Channel2_IRQHandler+0x10>)
 8001f5a:	f001 fd04 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200007b0 	.word	0x200007b0

08001f68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <DMA1_Channel3_IRQHandler+0x10>)
 8001f6e:	f001 fcfa 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200005c8 	.word	0x200005c8

08001f7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA1_Channel6_IRQHandler+0x10>)
 8001f82:	f001 fcf0 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200006dc 	.word	0x200006dc

08001f90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA1_Channel7_IRQHandler+0x10>)
 8001f96:	f001 fce6 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000a5c 	.word	0x20000a5c

08001fa4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ADC1_2_IRQHandler+0x14>)
 8001faa:	f000 fad1 	bl	8002550 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001fae:	4803      	ldr	r0, [pc, #12]	; (8001fbc <ADC1_2_IRQHandler+0x18>)
 8001fb0:	f000 face 	bl	8002550 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200008fc 	.word	0x200008fc
 8001fbc:	2000068c 	.word	0x2000068c

08001fc0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001fc6:	f002 f93c 	bl	8004242 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000b58 	.word	0x20000b58

08001fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM3_IRQHandler+0x10>)
 8001fda:	f004 faa2 	bl	8006522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000858 	.word	0x20000858

08001fe8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM7_IRQHandler+0x10>)
 8001fee:	f004 fa98 	bl	8006522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000b14 	.word	0x20000b14

08001ffc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA2_Channel1_IRQHandler+0x10>)
 8002002:	f001 fcb0 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000ad0 	.word	0x20000ad0

08002010 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA2_Channel5_IRQHandler+0x10>)
 8002016:	f001 fca6 	bl	8003966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000076c 	.word	0x2000076c

08002024 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <SystemInit+0x28>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <SystemInit+0x28>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <SystemInit+0x28>)
 800203a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800203e:	609a      	str	r2, [r3, #8]
#endif
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002054:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002056:	e003      	b.n	8002060 <LoopCopyDataInit>

08002058 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800205a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800205c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800205e:	3104      	adds	r1, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002060:	480b      	ldr	r0, [pc, #44]	; (8002090 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002064:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002066:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002068:	d3f6      	bcc.n	8002058 <CopyDataInit>
	ldr	r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopForever+0x12>)
	b	LoopFillZerobss
 800206c:	e002      	b.n	8002074 <LoopFillZerobss>

0800206e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800206e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002070:	f842 3b04 	str.w	r3, [r2], #4

08002074 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <LoopForever+0x16>)
	cmp	r2, r3
 8002076:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002078:	d3f9      	bcc.n	800206e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800207a:	f7ff ffd3 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f008 fb6d 	bl	800a75c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002082:	f7fe fbaf 	bl	80007e4 <main>

08002086 <LoopForever>:

LoopForever:
    b LoopForever
 8002086:	e7fe      	b.n	8002086 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002088:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800208c:	0800a80c 	.word	0x0800a80c
	ldr	r0, =_sdata
 8002090:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002094:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002098:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800209c:	20000dc4 	.word	0x20000dc4

080020a0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC3_IRQHandler>
	...

080020a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_Init+0x28>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_Init+0x28>)
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f001 fbda 	bl	800386e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff fece 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fa1c 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000

080020d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	20000b54 	.word	0x20000b54

080020f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000b54 	.word	0x20000b54

08002110 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_Delay+0x40>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffde 	bl	80020f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000000c 	.word	0x2000000c

08002154 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b09a      	sub	sp, #104	; 0x68
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e1c9      	b.n	8002544 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d176      	bne.n	80022b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d152      	bne.n	8002270 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff f9b1 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d13b      	bne.n	8002270 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 f8bb 	bl	8003374 <ADC_Disable>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d12f      	bne.n	8002270 <HAL_ADC_Init+0xe0>
 8002210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002214:	2b00      	cmp	r3, #0
 8002216:	d12b      	bne.n	8002270 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002220:	f023 0302 	bic.w	r3, r3, #2
 8002224:	f043 0202 	orr.w	r2, r3, #2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800223a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800224a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800224c:	4b86      	ldr	r3, [pc, #536]	; (8002468 <HAL_ADC_Init+0x2d8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a86      	ldr	r2, [pc, #536]	; (800246c <HAL_ADC_Init+0x2dc>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9a      	lsrs	r2, r3, #18
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002262:	e002      	b.n	800226a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	3b01      	subs	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f9      	bne.n	8002264 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800228c:	d110      	bne.n	80022b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f023 0312 	bic.w	r3, r3, #18
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8136 	bne.w	800252a <HAL_ADC_Init+0x39a>
 80022be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8131 	bne.w	800252a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 8129 	bne.w	800252a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022e0:	f043 0202 	orr.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_Init+0x16c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5e      	ldr	r2, [pc, #376]	; (8002470 <HAL_ADC_Init+0x2e0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_Init+0x170>
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_ADC_Init+0x2e4>)
 80022fe:	e000      	b.n	8002302 <HAL_ADC_Init+0x172>
 8002300:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_ADC_Init+0x2e8>)
 8002302:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800230c:	d102      	bne.n	8002314 <HAL_ADC_Init+0x184>
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_ADC_Init+0x2e0>)
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e01a      	b.n	800234a <HAL_ADC_Init+0x1ba>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a55      	ldr	r2, [pc, #340]	; (8002470 <HAL_ADC_Init+0x2e0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d103      	bne.n	8002326 <HAL_ADC_Init+0x196>
 800231e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e011      	b.n	800234a <HAL_ADC_Init+0x1ba>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_ADC_Init+0x2ec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d102      	bne.n	8002336 <HAL_ADC_Init+0x1a6>
 8002330:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_ADC_Init+0x2f0>)
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e009      	b.n	800234a <HAL_ADC_Init+0x1ba>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a51      	ldr	r2, [pc, #324]	; (8002480 <HAL_ADC_Init+0x2f0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d102      	bne.n	8002346 <HAL_ADC_Init+0x1b6>
 8002340:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_ADC_Init+0x2ec>)
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e001      	b.n	800234a <HAL_ADC_Init+0x1ba>
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d108      	bne.n	800236a <HAL_ADC_Init+0x1da>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADC_Init+0x1da>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_ADC_Init+0x1dc>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11c      	bne.n	80023aa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002370:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d010      	beq.n	8002398 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HAL_ADC_Init+0x202>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x202>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_ADC_Init+0x204>
 8002392:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7e5b      	ldrb	r3, [r3, #25]
 80023ae:	035b      	lsls	r3, r3, #13
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023b4:	2a01      	cmp	r2, #1
 80023b6:	d002      	beq.n	80023be <HAL_ADC_Init+0x22e>
 80023b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023bc:	e000      	b.n	80023c0 <HAL_ADC_Init+0x230>
 80023be:	2200      	movs	r2, #0
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023d0:	4313      	orrs	r3, r2
 80023d2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d11b      	bne.n	8002416 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7e5b      	ldrb	r3, [r3, #25]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	3b01      	subs	r3, #1
 80023ec:	045a      	lsls	r2, r3, #17
 80023ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	663b      	str	r3, [r7, #96]	; 0x60
 80023f8:	e00d      	b.n	8002416 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	2b01      	cmp	r3, #1
 800241c:	d03a      	beq.n	8002494 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <HAL_ADC_Init+0x2ec>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Init+0x2a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_ADC_Init+0x2f0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d128      	bne.n	8002484 <HAL_ADC_Init+0x2f4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800243a:	d012      	beq.n	8002462 <HAL_ADC_Init+0x2d2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d00a      	beq.n	800245c <HAL_ADC_Init+0x2cc>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800244e:	d002      	beq.n	8002456 <HAL_ADC_Init+0x2c6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	e018      	b.n	8002488 <HAL_ADC_Init+0x2f8>
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	e015      	b.n	8002488 <HAL_ADC_Init+0x2f8>
 800245c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002460:	e012      	b.n	8002488 <HAL_ADC_Init+0x2f8>
 8002462:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002466:	e00f      	b.n	8002488 <HAL_ADC_Init+0x2f8>
 8002468:	20000004 	.word	0x20000004
 800246c:	431bde83 	.word	0x431bde83
 8002470:	50000100 	.word	0x50000100
 8002474:	50000300 	.word	0x50000300
 8002478:	50000700 	.word	0x50000700
 800247c:	50000400 	.word	0x50000400
 8002480:	50000500 	.word	0x50000500
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800248c:	4313      	orrs	r3, r2
 800248e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002490:	4313      	orrs	r3, r2
 8002492:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d114      	bne.n	80024cc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024b0:	f023 0302 	bic.w	r3, r3, #2
 80024b4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7e1b      	ldrb	r3, [r3, #24]
 80024ba:	039a      	lsls	r2, r3, #14
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4313      	orrs	r3, r2
 80024c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c8:	4313      	orrs	r3, r2
 80024ca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_ADC_Init+0x3bc>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024dc:	430b      	orrs	r3, r1
 80024de:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10c      	bne.n	8002502 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f023 010f 	bic.w	r1, r3, #15
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	1e5a      	subs	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002500:	e007      	b.n	8002512 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020f 	bic.w	r2, r2, #15
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f023 0303 	bic.w	r3, r3, #3
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
 8002528:	e00a      	b.n	8002540 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f023 0312 	bic.w	r3, r3, #18
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002540:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002544:	4618      	mov	r0, r3
 8002546:	3768      	adds	r7, #104	; 0x68
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	fff0c007 	.word	0xfff0c007

08002550 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d106      	bne.n	8002580 <HAL_ADC_IRQHandler+0x30>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d00f      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800258a:	2b08      	cmp	r3, #8
 800258c:	f040 80c0 	bne.w	8002710 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b08      	cmp	r3, #8
 800259c:	f040 80b8 	bne.w	8002710 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c0:	d004      	beq.n	80025cc <HAL_ADC_IRQHandler+0x7c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a95      	ldr	r2, [pc, #596]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d106      	bne.n	80025da <HAL_ADC_IRQHandler+0x8a>
 80025cc:	4b94      	ldr	r3, [pc, #592]	; (8002820 <HAL_ADC_IRQHandler+0x2d0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03e      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 80025d8:	e005      	b.n	80025e6 <HAL_ADC_IRQHandler+0x96>
 80025da:	4b92      	ldr	r3, [pc, #584]	; (8002824 <HAL_ADC_IRQHandler+0x2d4>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d037      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_IRQHandler+0xaa>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a89      	ldr	r2, [pc, #548]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d106      	bne.n	8002608 <HAL_ADC_IRQHandler+0xb8>
 80025fa:	4b89      	ldr	r3, [pc, #548]	; (8002820 <HAL_ADC_IRQHandler+0x2d0>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2b05      	cmp	r3, #5
 8002604:	d027      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 8002606:	e005      	b.n	8002614 <HAL_ADC_IRQHandler+0xc4>
 8002608:	4b86      	ldr	r3, [pc, #536]	; (8002824 <HAL_ADC_IRQHandler+0x2d4>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2b05      	cmp	r3, #5
 8002612:	d020      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261c:	d004      	beq.n	8002628 <HAL_ADC_IRQHandler+0xd8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d106      	bne.n	8002636 <HAL_ADC_IRQHandler+0xe6>
 8002628:	4b7d      	ldr	r3, [pc, #500]	; (8002820 <HAL_ADC_IRQHandler+0x2d0>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2b09      	cmp	r3, #9
 8002632:	d010      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 8002634:	e005      	b.n	8002642 <HAL_ADC_IRQHandler+0xf2>
 8002636:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_ADC_IRQHandler+0x2d4>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2b09      	cmp	r3, #9
 8002640:	d009      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264a:	d004      	beq.n	8002656 <HAL_ADC_IRQHandler+0x106>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a75      	ldr	r2, [pc, #468]	; (8002828 <HAL_ADC_IRQHandler+0x2d8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d104      	bne.n	8002660 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e00f      	b.n	8002680 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002668:	d004      	beq.n	8002674 <HAL_ADC_IRQHandler+0x124>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6b      	ldr	r2, [pc, #428]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <HAL_ADC_IRQHandler+0x12a>
 8002674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002678:	e000      	b.n	800267c <HAL_ADC_IRQHandler+0x12c>
 800267a:	4b6b      	ldr	r3, [pc, #428]	; (8002828 <HAL_ADC_IRQHandler+0x2d8>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800268a:	2b00      	cmp	r3, #0
 800268c:	d139      	bne.n	8002702 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002694:	2b00      	cmp	r3, #0
 8002696:	d134      	bne.n	8002702 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d12d      	bne.n	8002702 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11a      	bne.n	80026ea <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020c 	bic.w	r2, r2, #12
 80026c2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d112      	bne.n	8002702 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
 80026e8:	e00b      	b.n	8002702 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fd26 	bl	8002154 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	220c      	movs	r2, #12
 800270e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b20      	cmp	r3, #32
 800271c:	d106      	bne.n	800272c <HAL_ADC_IRQHandler+0x1dc>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b20      	cmp	r3, #32
 800272a:	d00f      	beq.n	800274c <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	f040 813c 	bne.w	80029b4 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	f040 8134 	bne.w	80029b4 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002760:	d004      	beq.n	800276c <HAL_ADC_IRQHandler+0x21c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d106      	bne.n	800277a <HAL_ADC_IRQHandler+0x22a>
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_ADC_IRQHandler+0x2d0>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b00      	cmp	r3, #0
 8002776:	d03e      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 8002778:	e005      	b.n	8002786 <HAL_ADC_IRQHandler+0x236>
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_ADC_IRQHandler+0x2d4>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2b00      	cmp	r3, #0
 8002784:	d037      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278e:	d004      	beq.n	800279a <HAL_ADC_IRQHandler+0x24a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d106      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x258>
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_ADC_IRQHandler+0x2d0>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d027      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 80027a6:	e005      	b.n	80027b4 <HAL_ADC_IRQHandler+0x264>
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_ADC_IRQHandler+0x2d4>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d020      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x278>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d106      	bne.n	80027d6 <HAL_ADC_IRQHandler+0x286>
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_ADC_IRQHandler+0x2d0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d010      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 80027d4:	e005      	b.n	80027e2 <HAL_ADC_IRQHandler+0x292>
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_ADC_IRQHandler+0x2d4>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2b09      	cmp	r3, #9
 80027e0:	d009      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ea:	d004      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x2a6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_ADC_IRQHandler+0x2d8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d104      	bne.n	8002800 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e018      	b.n	8002832 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002808:	d004      	beq.n	8002814 <HAL_ADC_IRQHandler+0x2c4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a03      	ldr	r2, [pc, #12]	; (800281c <HAL_ADC_IRQHandler+0x2cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10b      	bne.n	800282c <HAL_ADC_IRQHandler+0x2dc>
 8002814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002818:	e009      	b.n	800282e <HAL_ADC_IRQHandler+0x2de>
 800281a:	bf00      	nop
 800281c:	50000100 	.word	0x50000100
 8002820:	50000300 	.word	0x50000300
 8002824:	50000700 	.word	0x50000700
 8002828:	50000400 	.word	0x50000400
 800282c:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <HAL_ADC_IRQHandler+0x554>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 80ad 	bne.w	80029a6 <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80a5 	bne.w	80029a6 <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 809f 	bne.w	80029a6 <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	f040 8097 	bne.w	80029a6 <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002880:	d004      	beq.n	800288c <HAL_ADC_IRQHandler+0x33c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a88      	ldr	r2, [pc, #544]	; (8002aa8 <HAL_ADC_IRQHandler+0x558>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d106      	bne.n	800289a <HAL_ADC_IRQHandler+0x34a>
 800288c:	4b87      	ldr	r3, [pc, #540]	; (8002aac <HAL_ADC_IRQHandler+0x55c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03e      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 8002898:	e005      	b.n	80028a6 <HAL_ADC_IRQHandler+0x356>
 800289a:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <HAL_ADC_IRQHandler+0x560>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d037      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ae:	d004      	beq.n	80028ba <HAL_ADC_IRQHandler+0x36a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7c      	ldr	r2, [pc, #496]	; (8002aa8 <HAL_ADC_IRQHandler+0x558>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d106      	bne.n	80028c8 <HAL_ADC_IRQHandler+0x378>
 80028ba:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_ADC_IRQHandler+0x55c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d027      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 80028c6:	e005      	b.n	80028d4 <HAL_ADC_IRQHandler+0x384>
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_ADC_IRQHandler+0x560>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d020      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_IRQHandler+0x398>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_ADC_IRQHandler+0x558>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x3a6>
 80028e8:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_ADC_IRQHandler+0x55c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d010      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 80028f4:	e005      	b.n	8002902 <HAL_ADC_IRQHandler+0x3b2>
 80028f6:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <HAL_ADC_IRQHandler+0x560>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2b07      	cmp	r3, #7
 8002900:	d009      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290a:	d004      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3c6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a64      	ldr	r2, [pc, #400]	; (8002aa4 <HAL_ADC_IRQHandler+0x554>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d104      	bne.n	8002920 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e00f      	b.n	8002940 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002928:	d004      	beq.n	8002934 <HAL_ADC_IRQHandler+0x3e4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a5e      	ldr	r2, [pc, #376]	; (8002aa8 <HAL_ADC_IRQHandler+0x558>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d102      	bne.n	800293a <HAL_ADC_IRQHandler+0x3ea>
 8002934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002938:	e000      	b.n	800293c <HAL_ADC_IRQHandler+0x3ec>
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_ADC_IRQHandler+0x554>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d12d      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11a      	bne.n	800298e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002966:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d112      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
 800298c:	e00b      	b.n	80029a6 <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8de 	bl	8002b68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2260      	movs	r2, #96	; 0x60
 80029b2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b80      	cmp	r3, #128	; 0x80
 80029c0:	d113      	bne.n	80029ea <HAL_ADC_IRQHandler+0x49a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d10c      	bne.n	80029ea <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fbc3 	bl	8002168 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f8:	d115      	bne.n	8002a26 <HAL_ADC_IRQHandler+0x4d6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a08:	d10d      	bne.n	8002a26 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8ba 	bl	8002b90 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a24:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d115      	bne.n	8002a62 <HAL_ADC_IRQHandler+0x512>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a44:	d10d      	bne.n	8002a62 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8a6 	bl	8002ba4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d151      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x5c4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d14a      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002a86:	2301      	movs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	e02d      	b.n	8002ae8 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x550>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_ADC_IRQHandler+0x558>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0x564>
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <HAL_ADC_IRQHandler+0x55c>)
 8002aa2:	e008      	b.n	8002ab6 <HAL_ADC_IRQHandler+0x566>
 8002aa4:	50000400 	.word	0x50000400
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	50000300 	.word	0x50000300
 8002ab0:	50000700 	.word	0x50000700
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_ADC_IRQHandler+0x614>)
 8002ab6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e007      	b.n	8002ae8 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10e      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fb38 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b22:	d11b      	bne.n	8002b5c <HAL_ADC_IRQHandler+0x60c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d113      	bne.n	8002b5c <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	f043 0208 	orr.w	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b54:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f810 	bl	8002b7c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	50000700 	.word	0x50000700

08002b68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b09b      	sub	sp, #108	; 0x6c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x22>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e2cb      	b.n	8003172 <HAL_ADC_ConfigChannel+0x5ba>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 82af 	bne.w	8003150 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d81c      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	231f      	movs	r3, #31
 8002c10:	4093      	lsls	r3, r2
 8002c12:	43db      	mvns	r3, r3
 8002c14:	4019      	ands	r1, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
 8002c32:	e063      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d81e      	bhi.n	8002c7a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	3b1e      	subs	r3, #30
 8002c50:	221f      	movs	r2, #31
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4019      	ands	r1, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	3b1e      	subs	r3, #30
 8002c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
 8002c78:	e040      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b0e      	cmp	r3, #14
 8002c80:	d81e      	bhi.n	8002cc0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	3b3c      	subs	r3, #60	; 0x3c
 8002c96:	221f      	movs	r2, #31
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4019      	ands	r1, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	3b3c      	subs	r3, #60	; 0x3c
 8002cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8002cbe:	e01d      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	3b5a      	subs	r3, #90	; 0x5a
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	4019      	ands	r1, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	3b5a      	subs	r3, #90	; 0x5a
 8002cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80e5 	bne.w	8002ed6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d91c      	bls.n	8002d4e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	3b1e      	subs	r3, #30
 8002d26:	2207      	movs	r2, #7
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4019      	ands	r1, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6898      	ldr	r0, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b1e      	subs	r3, #30
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	619a      	str	r2, [r3, #24]
 8002d4c:	e019      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	2207      	movs	r2, #7
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	4019      	ands	r1, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6898      	ldr	r0, [r3, #8]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d84f      	bhi.n	8002e44 <HAL_ADC_ConfigChannel+0x28c>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_ADC_ConfigChannel+0x1f4>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002e01 	.word	0x08002e01
 8002db8:	08002e23 	.word	0x08002e23
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc2:	4b9f      	ldr	r3, [pc, #636]	; (8003040 <HAL_ADC_ConfigChannel+0x488>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	0691      	lsls	r1, r2, #26
 8002dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dda:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ddc:	e07e      	b.n	8002edc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_ADC_ConfigChannel+0x488>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	0691      	lsls	r1, r2, #26
 8002dee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002df0:	430a      	orrs	r2, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dfc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dfe:	e06d      	b.n	8002edc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e06:	4b8e      	ldr	r3, [pc, #568]	; (8003040 <HAL_ADC_ConfigChannel+0x488>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	0691      	lsls	r1, r2, #26
 8002e10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e12:	430a      	orrs	r2, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e1e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e20:	e05c      	b.n	8002edc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e28:	4b85      	ldr	r3, [pc, #532]	; (8003040 <HAL_ADC_ConfigChannel+0x488>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	0691      	lsls	r1, r2, #26
 8002e32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e34:	430a      	orrs	r2, r1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e40:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e42:	e04b      	b.n	8002edc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	069b      	lsls	r3, r3, #26
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	069b      	lsls	r3, r3, #26
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d107      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d10a      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ed4:	e001      	b.n	8002eda <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_ConfigChannel+0x324>
      break;
 8002eda:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x344>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x344>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_ADC_ConfigChannel+0x346>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 8131 	bne.w	8003166 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d00f      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	400a      	ands	r2, r1
 8002f26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f2a:	e049      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d91c      	bls.n	8002f88 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6999      	ldr	r1, [r3, #24]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b1b      	subs	r3, #27
 8002f60:	2207      	movs	r2, #7
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	4019      	ands	r1, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6898      	ldr	r0, [r3, #8]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1b      	subs	r3, #27
 8002f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	619a      	str	r2, [r3, #24]
 8002f86:	e01b      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6959      	ldr	r1, [r3, #20]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4019      	ands	r1, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6898      	ldr	r0, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x41c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_ADC_ConfigChannel+0x48c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x420>
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_ADC_ConfigChannel+0x490>)
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_ConfigChannel+0x422>
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <HAL_ADC_ConfigChannel+0x494>)
 8002fda:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d105      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ff4:	2b11      	cmp	r3, #17
 8002ff6:	d105      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003008:	2b12      	cmp	r3, #18
 800300a:	f040 80ac 	bne.w	8003166 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800300e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 80a5 	bne.w	8003166 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003024:	d102      	bne.n	800302c <HAL_ADC_ConfigChannel+0x474>
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_ADC_ConfigChannel+0x48c>)
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e023      	b.n	8003074 <HAL_ADC_ConfigChannel+0x4bc>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_ADC_ConfigChannel+0x48c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x498>
 8003036:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e01a      	b.n	8003074 <HAL_ADC_ConfigChannel+0x4bc>
 800303e:	bf00      	nop
 8003040:	83fff000 	.word	0x83fff000
 8003044:	50000100 	.word	0x50000100
 8003048:	50000300 	.word	0x50000300
 800304c:	50000700 	.word	0x50000700
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <HAL_ADC_ConfigChannel+0x5c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d102      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x4a8>
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_ADC_ConfigChannel+0x5cc>)
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e009      	b.n	8003074 <HAL_ADC_ConfigChannel+0x4bc>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a47      	ldr	r2, [pc, #284]	; (8003184 <HAL_ADC_ConfigChannel+0x5cc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d102      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x4b8>
 800306a:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_ADC_ConfigChannel+0x5c8>)
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e001      	b.n	8003074 <HAL_ADC_ConfigChannel+0x4bc>
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d108      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x4dc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x4dc>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_ADC_ConfigChannel+0x4de>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d150      	bne.n	800313c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800309a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d010      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x504>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x504>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_ADC_ConfigChannel+0x506>
 80030bc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d13c      	bne.n	800313c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d11d      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x54e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d2:	d118      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80030d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e0:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_ADC_ConfigChannel+0x5d0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_ADC_ConfigChannel+0x5d4>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0c9a      	lsrs	r2, r3, #18
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003104:	e02e      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b11      	cmp	r3, #17
 800310c:	d10b      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x56e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003116:	d106      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003122:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003124:	e01e      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b12      	cmp	r3, #18
 800312c:	d11a      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800312e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800313a:	e013      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800314e:	e00a      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003162:	e000      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003164:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800316e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003172:	4618      	mov	r0, r3
 8003174:	376c      	adds	r7, #108	; 0x6c
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	50000400 	.word	0x50000400
 8003184:	50000500 	.word	0x50000500
 8003188:	20000004 	.word	0x20000004
 800318c:	431bde83 	.word	0x431bde83

08003190 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003190:	b480      	push	{r7}
 8003192:	b099      	sub	sp, #100	; 0x64
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a8:	d102      	bne.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80031aa:	4b6d      	ldr	r3, [pc, #436]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	e01a      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a6a      	ldr	r2, [pc, #424]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d103      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80031ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e011      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e009      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a64      	ldr	r2, [pc, #400]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d102      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031dc:	4b61      	ldr	r3, [pc, #388]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e001      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b0      	b.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e0a9      	b.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 808d 	bne.w	8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 8086 	bne.w	8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d004      	beq.n	8003238 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800323a:	e000      	b.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800323c:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800323e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d040      	beq.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800325a:	035b      	lsls	r3, r3, #13
 800325c:	430b      	orrs	r3, r1
 800325e:	431a      	orrs	r2, r3
 8003260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003262:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d15c      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80032a6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d14b      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032b4:	f023 030f 	bic.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6811      	ldr	r1, [r2, #0]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	6892      	ldr	r2, [r2, #8]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	431a      	orrs	r2, r3
 80032c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c8:	e03c      	b.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d108      	bne.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d123      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003318:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d112      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800331e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003326:	f023 030f 	bic.w	r3, r3, #15
 800332a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800332c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800332e:	e009      	b.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003342:	e000      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003344:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800334e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003352:	4618      	mov	r0, r3
 8003354:	3764      	adds	r7, #100	; 0x64
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	50000100 	.word	0x50000100
 8003364:	50000400 	.word	0x50000400
 8003368:	50000500 	.word	0x50000500
 800336c:	50000300 	.word	0x50000300
 8003370:	50000700 	.word	0x50000700

08003374 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <ADC_Disable+0x2c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <ADC_Disable+0x2c>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <ADC_Disable+0x2e>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d040      	beq.n	8003428 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030d 	and.w	r3, r3, #13
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10f      	bne.n	80033d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0202 	orr.w	r2, r2, #2
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2203      	movs	r2, #3
 80033ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80033cc:	f7fe fe94 	bl	80020f8 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033d2:	e022      	b.n	800341a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e01c      	b.n	800342a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033f0:	f7fe fe82 	bl	80020f8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d90d      	bls.n	800341a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e007      	b.n	800342a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d0e3      	beq.n	80033f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_COMP_Init+0x22>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
 800345a:	e064      	b.n	8003526 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345c:	4b34      	ldr	r3, [pc, #208]	; (8003530 <HAL_COMP_Init+0xfc>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_COMP_Init+0xfc>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_COMP_Init+0xfc>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fe f991 	bl	800179c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f023 020c 	bic.w	r2, r3, #12
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_COMP_Start+0x26>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	e0c4      	b.n	80036ea <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 80bc 	bne.w	80036e6 <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a61      	ldr	r2, [pc, #388]	; (80036f8 <HAL_COMP_Start+0x1c4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d028      	beq.n	80035ca <HAL_COMP_Start+0x96>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5f      	ldr	r2, [pc, #380]	; (80036fc <HAL_COMP_Start+0x1c8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d020      	beq.n	80035c4 <HAL_COMP_Start+0x90>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5e      	ldr	r2, [pc, #376]	; (8003700 <HAL_COMP_Start+0x1cc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_COMP_Start+0x8a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <HAL_COMP_Start+0x1d0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d010      	beq.n	80035b8 <HAL_COMP_Start+0x84>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_COMP_Start+0x1d4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d008      	beq.n	80035b2 <HAL_COMP_Start+0x7e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a59      	ldr	r2, [pc, #356]	; (800370c <HAL_COMP_Start+0x1d8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_COMP_Start+0x7a>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <HAL_COMP_Start+0x9a>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e00d      	b.n	80035ce <HAL_COMP_Start+0x9a>
 80035b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035b6:	e00a      	b.n	80035ce <HAL_COMP_Start+0x9a>
 80035b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035bc:	e007      	b.n	80035ce <HAL_COMP_Start+0x9a>
 80035be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80035c2:	e004      	b.n	80035ce <HAL_COMP_Start+0x9a>
 80035c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035c8:	e001      	b.n	80035ce <HAL_COMP_Start+0x9a>
 80035ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035ce:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d077      	beq.n	80036cc <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_COMP_Start+0xcc>
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	4946      	ldr	r1, [pc, #280]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	628b      	str	r3, [r1, #40]	; 0x28
 80035fe:	e01a      	b.n	8003636 <HAL_COMP_Start+0x102>
 8003600:	4b43      	ldr	r3, [pc, #268]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4942      	ldr	r1, [pc, #264]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
 800360c:	e013      	b.n	8003636 <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_COMP_Start+0xf4>
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800361a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	43db      	mvns	r3, r3
 8003620:	493b      	ldr	r1, [pc, #236]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003622:	4013      	ands	r3, r2
 8003624:	628b      	str	r3, [r1, #40]	; 0x28
 8003626:	e006      	b.n	8003636 <HAL_COMP_Start+0x102>
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	43db      	mvns	r3, r3
 8003630:	4937      	ldr	r1, [pc, #220]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003632:	4013      	ands	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <HAL_COMP_Start+0x126>
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	492f      	ldr	r1, [pc, #188]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003658:	e01a      	b.n	8003690 <HAL_COMP_Start+0x15c>
 800365a:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	492c      	ldr	r1, [pc, #176]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]
 8003666:	e013      	b.n	8003690 <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_COMP_Start+0x14e>
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	43db      	mvns	r3, r3
 800367a:	4925      	ldr	r1, [pc, #148]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800367c:	4013      	ands	r3, r2
 800367e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003680:	e006      	b.n	8003690 <HAL_COMP_Start+0x15c>
 8003682:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_COMP_Start+0x1dc>)
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	43db      	mvns	r3, r3
 800368a:	4921      	ldr	r1, [pc, #132]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800368c:	4013      	ands	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <HAL_COMP_Start+0x174>
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_COMP_Start+0x1dc>)
 800369c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369e:	491c      	ldr	r1, [pc, #112]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	624b      	str	r3, [r1, #36]	; 0x24
 80036a6:	e005      	b.n	80036b4 <HAL_COMP_Start+0x180>
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_COMP_Start+0x192>
 80036be:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6353      	str	r3, [r2, #52]	; 0x34
 80036c4:	e002      	b.n	80036cc <HAL_COMP_Start+0x198>
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_COMP_Start+0x1dc>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80036e4:	e001      	b.n	80036ea <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	4001001c 	.word	0x4001001c
 80036fc:	40010020 	.word	0x40010020
 8003700:	40010024 	.word	0x40010024
 8003704:	40010028 	.word	0x40010028
 8003708:	4001002c 	.word	0x4001002c
 800370c:	40010030 	.word	0x40010030
 8003710:	40010400 	.word	0x40010400

08003714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800373c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	60d3      	str	r3, [r2, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <__NVIC_GetPriorityGrouping+0x18>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f003 0307 	and.w	r3, r3, #7
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	2b00      	cmp	r3, #0
 8003788:	db0b      	blt.n	80037a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <__NVIC_EnableIRQ+0x38>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2001      	movs	r0, #1
 800379a:	fa00 f202 	lsl.w	r2, r0, r2
 800379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e100 	.word	0xe000e100

080037b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db0a      	blt.n	80037de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <__NVIC_SetPriority+0x4c>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037dc:	e00a      	b.n	80037f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <__NVIC_SetPriority+0x50>)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3b04      	subs	r3, #4
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	440b      	add	r3, r1
 80037f2:	761a      	strb	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e100 	.word	0xe000e100
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf28      	it	cs
 8003826:	2304      	movcs	r3, #4
 8003828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3304      	adds	r3, #4
 800382e:	2b06      	cmp	r3, #6
 8003830:	d902      	bls.n	8003838 <NVIC_EncodePriority+0x30>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3b03      	subs	r3, #3
 8003836:	e000      	b.n	800383a <NVIC_EncodePriority+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43d9      	mvns	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	4313      	orrs	r3, r2
         );
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff4c 	bl	8003714 <__NVIC_SetPriorityGrouping>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003896:	f7ff ff61 	bl	800375c <__NVIC_GetPriorityGrouping>
 800389a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f7ff ffb1 	bl	8003808 <NVIC_EncodePriority>
 80038a6:	4602      	mov	r2, r0
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff80 	bl	80037b4 <__NVIC_SetPriority>
}
 80038b4:	bf00      	nop
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff54 	bl	8003778 <__NVIC_EnableIRQ>
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e037      	b.n	800395e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003904:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003908:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8b3 	bl	8003aac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}  
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2204      	movs	r2, #4
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d024      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x72>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01f      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d107      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0204 	bic.w	r2, r2, #4
 80039b4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2104      	movs	r1, #4
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d06a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80039d6:	e065      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2202      	movs	r2, #2
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdc>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 020a 	bic.w	r2, r2, #10
 8003a0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	2102      	movs	r1, #2
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d035      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a40:	e030      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2208      	movs	r2, #8
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d028      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d023      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020e 	bic.w	r2, r2, #14
 8003a6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
    }
  }
}  
 8003aa2:	e7ff      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x13e>
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <DMA_CalcBaseAndBitshift+0x60>)
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d80f      	bhi.n	8003ae0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <DMA_CalcBaseAndBitshift+0x64>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <DMA_CalcBaseAndBitshift+0x68>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <DMA_CalcBaseAndBitshift+0x6c>)
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003ade:	e00e      	b.n	8003afe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <DMA_CalcBaseAndBitshift+0x70>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <DMA_CalcBaseAndBitshift+0x68>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	009a      	lsls	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <DMA_CalcBaseAndBitshift+0x74>)
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40020407 	.word	0x40020407
 8003b10:	bffdfff8 	.word	0xbffdfff8
 8003b14:	cccccccd 	.word	0xcccccccd
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	bffdfbf8 	.word	0xbffdfbf8
 8003b20:	40020400 	.word	0x40020400

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b32:	e154      	b.n	8003dde <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8146 	beq.w	8003dd8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x38>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b12      	cmp	r3, #18
 8003b5a:	d123      	bne.n	8003ba4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	08da      	lsrs	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3208      	adds	r2, #8
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	220f      	movs	r2, #15
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	08da      	lsrs	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3208      	adds	r2, #8
 8003b9e:	6939      	ldr	r1, [r7, #16]
 8003ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d00b      	beq.n	8003bf8 <HAL_GPIO_Init+0xd4>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d007      	beq.n	8003bf8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bec:	2b11      	cmp	r3, #17
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b12      	cmp	r3, #18
 8003bf6:	d130      	bne.n	8003c5a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c2e:	2201      	movs	r2, #1
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0201 	and.w	r2, r3, #1
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80a0 	beq.w	8003dd8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c98:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <HAL_GPIO_Init+0x2d8>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	4a57      	ldr	r2, [pc, #348]	; (8003dfc <HAL_GPIO_Init+0x2d8>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6193      	str	r3, [r2, #24]
 8003ca4:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <HAL_GPIO_Init+0x2d8>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cb0:	4a53      	ldr	r2, [pc, #332]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cda:	d019      	beq.n	8003d10 <HAL_GPIO_Init+0x1ec>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a49      	ldr	r2, [pc, #292]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_GPIO_Init+0x1e8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a48      	ldr	r2, [pc, #288]	; (8003e08 <HAL_GPIO_Init+0x2e4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00d      	beq.n	8003d08 <HAL_GPIO_Init+0x1e4>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a47      	ldr	r2, [pc, #284]	; (8003e0c <HAL_GPIO_Init+0x2e8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <HAL_GPIO_Init+0x1e0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a46      	ldr	r2, [pc, #280]	; (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_GPIO_Init+0x1dc>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	e008      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d00:	2305      	movs	r3, #5
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d04:	2303      	movs	r3, #3
 8003d06:	e004      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d10:	2300      	movs	r3, #0
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	f002 0203 	and.w	r2, r2, #3
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d22:	4937      	ldr	r1, [pc, #220]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d30:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d54:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d7e:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003da8:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dd2:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f aea3 	bne.w	8003b34 <HAL_GPIO_Init+0x10>
  }
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40010000 	.word	0x40010000
 8003e04:	48000400 	.word	0x48000400
 8003e08:	48000800 	.word	0x48000800
 8003e0c:	48000c00 	.word	0x48000c00
 8003e10:	48001000 	.word	0x48001000
 8003e14:	40010400 	.word	0x40010400

08003e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e001      	b.n	8003e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e081      	b.n	8003f5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fd2a 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	e006      	b.n	8003ed0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ece:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d104      	bne.n	8003ee2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	ea42 0103 	orr.w	r1, r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d138      	bne.n	8003fee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e032      	b.n	8003ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2224      	movs	r2, #36	; 0x24
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	d139      	bne.n	8004086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800401c:	2302      	movs	r3, #2
 800401e:	e033      	b.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800404e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e092      	b.n	80041d0 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d101      	bne.n	80040ba <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e08a      	b.n	80041d0 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d101      	bne.n	80040ca <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e082      	b.n	80041d0 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d6:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <HAL_OPAMP_Init+0x144>)
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <HAL_OPAMP_Init+0x144>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6193      	str	r3, [r2, #24]
 80040e2:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <HAL_OPAMP_Init+0x144>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fc98 	bl	8001a38 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d003      	beq.n	8004118 <HAL_OPAMP_Init+0x84>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b60      	cmp	r3, #96	; 0x60
 8004116:	d125      	bne.n	8004164 <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <HAL_OPAMP_Init+0x148>)
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6851      	ldr	r1, [r2, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	4311      	orrs	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6912      	ldr	r2, [r2, #16]
 8004130:	4311      	orrs	r1, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6992      	ldr	r2, [r2, #24]
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	69d2      	ldr	r2, [r2, #28]
 800413c:	4311      	orrs	r1, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6a12      	ldr	r2, [r2, #32]
 8004142:	4311      	orrs	r1, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004148:	4311      	orrs	r1, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800414e:	04d2      	lsls	r2, r2, #19
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004156:	0612      	lsls	r2, r2, #24
 8004158:	4311      	orrs	r1, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	430b      	orrs	r3, r1
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e02a      	b.n	80041ba <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <HAL_OPAMP_Init+0x148>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6851      	ldr	r1, [r2, #4]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	4311      	orrs	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6912      	ldr	r2, [r2, #16]
 8004182:	4311      	orrs	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6952      	ldr	r2, [r2, #20]
 8004188:	4311      	orrs	r1, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6992      	ldr	r2, [r2, #24]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	69d2      	ldr	r2, [r2, #28]
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6a12      	ldr	r2, [r2, #32]
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041a6:	04d2      	lsls	r2, r2, #19
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041ae:	0612      	lsls	r2, r2, #24
 80041b0:	4311      	orrs	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000
 80041dc:	e0003811 	.word	0xe0003811

080041e0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e01d      	b.n	8004234 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b05      	cmp	r3, #5
 8004202:	d102      	bne.n	800420a <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	e014      	b.n	8004234 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10c      	bne.n	8004230 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800422e:	e001      	b.n	8004234 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f004 fe5c 	bl	8008f0c <USB_ReadInterrupts>
 8004254:	4603      	mov	r3, r0
 8004256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425e:	d102      	bne.n	8004266 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fa91 	bl	8004788 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f004 fe4e 	bl	8008f0c <USB_ReadInterrupts>
 8004270:	4603      	mov	r3, r0
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d112      	bne.n	80042a2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	b292      	uxth	r2, r2
 8004290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f006 f8fe 	bl	800a496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800429a:	2100      	movs	r1, #0
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8d2 	bl	8004446 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f004 fe30 	bl	8008f0c <USB_ReadInterrupts>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b6:	d10b      	bne.n	80042d0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042ca:	b292      	uxth	r2, r2
 80042cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fe19 	bl	8008f0c <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e4:	d10b      	bne.n	80042fe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f8:	b292      	uxth	r2, r2
 80042fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f004 fe02 	bl	8008f0c <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d126      	bne.n	8004362 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0204 	bic.w	r2, r2, #4
 8004326:	b292      	uxth	r2, r2
 8004328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0208 	bic.w	r2, r2, #8
 800433e:	b292      	uxth	r2, r2
 8004340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f006 f8df 	bl	800a508 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800435c:	b292      	uxth	r2, r2
 800435e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f004 fdd0 	bl	8008f0c <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004376:	d131      	bne.n	80043dc <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	b292      	uxth	r2, r2
 800438c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a2:	b292      	uxth	r2, r2
 80043a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0204 	orr.w	r2, r2, #4
 80043ba:	b292      	uxth	r2, r2
 80043bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f004 fda1 	bl	8008f0c <USB_ReadInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d002      	beq.n	80043dc <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f006 f87c 	bl	800a4d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f004 fd93 	bl	8008f0c <USB_ReadInterrupts>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d10e      	bne.n	8004410 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004404:	b292      	uxth	r2, r2
 8004406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f006 f835 	bl	800a47a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f004 fd79 	bl	8008f0c <USB_ReadInterrupts>
 800441a:	4603      	mov	r3, r0
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004424:	d10b      	bne.n	800443e <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004438:	b292      	uxth	r2, r2
 800443a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_PCD_SetAddress+0x1a>
 800445c:	2302      	movs	r3, #2
 800445e:	e013      	b.n	8004488 <HAL_PCD_SetAddress+0x42>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fd33 	bl	8008ee4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	70fb      	strb	r3, [r7, #3]
 80044a2:	460b      	mov	r3, r1
 80044a4:	803b      	strh	r3, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da0b      	bge.n	80044ce <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	015b      	lsls	r3, r3, #5
 80044be:	3328      	adds	r3, #40	; 0x28
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	705a      	strb	r2, [r3, #1]
 80044cc:	e00b      	b.n	80044e6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	015b      	lsls	r3, r3, #5
 80044d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044f2:	883a      	ldrh	r2, [r7, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	78ba      	ldrb	r2, [r7, #2]
 80044fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	785b      	ldrb	r3, [r3, #1]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004510:	78bb      	ldrb	r3, [r7, #2]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d102      	bne.n	800451c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_PCD_EP_Open+0x9a>
 8004526:	2302      	movs	r3, #2
 8004528:	e00e      	b.n	8004548 <HAL_PCD_EP_Open+0xb8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	4618      	mov	r0, r3
 800453a:	f003 fe37 	bl	80081ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004546:	7afb      	ldrb	r3, [r7, #11]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	460b      	mov	r3, r1
 800455e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2200      	movs	r2, #0
 8004582:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458a:	7afb      	ldrb	r3, [r7, #11]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	b2da      	uxtb	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004596:	7afb      	ldrb	r3, [r7, #11]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6979      	ldr	r1, [r7, #20]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f004 f8f4 	bl	8008794 <USB_EPStartXfer>
 80045ac:	e005      	b.n	80045ba <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f004 f8ed 	bl	8008794 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	460b      	mov	r3, r1
 80045d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	7afb      	ldrb	r3, [r7, #11]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	3328      	adds	r3, #40	; 0x28
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2201      	movs	r2, #1
 80045fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fc:	7afb      	ldrb	r3, [r7, #11]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	b2da      	uxtb	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004608:	7afb      	ldrb	r3, [r7, #11]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	4618      	mov	r0, r3
 800461a:	f004 f8bb 	bl	8008794 <USB_EPStartXfer>
 800461e:	e005      	b.n	800462c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	4618      	mov	r0, r3
 8004628:	f004 f8b4 	bl	8008794 <USB_EPStartXfer>
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 0207 	and.w	r2, r3, #7
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d901      	bls.n	8004654 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e046      	b.n	80046e2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004658:	2b00      	cmp	r3, #0
 800465a:	da0b      	bge.n	8004674 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	015b      	lsls	r3, r3, #5
 8004664:	3328      	adds	r3, #40	; 0x28
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	705a      	strb	r2, [r3, #1]
 8004672:	e009      	b.n	8004688 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	015b      	lsls	r3, r3, #5
 8004678:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_PCD_EP_SetStall+0x72>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e01c      	b.n	80046e2 <HAL_PCD_EP_SetStall+0xac>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f004 fb3e 	bl	8008d38 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f004 fc2a 	bl	8008f2c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d901      	bls.n	8004708 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e03a      	b.n	800477e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800470c:	2b00      	cmp	r3, #0
 800470e:	da0b      	bge.n	8004728 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	015b      	lsls	r3, r3, #5
 8004718:	3328      	adds	r3, #40	; 0x28
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	705a      	strb	r2, [r3, #1]
 8004726:	e00b      	b.n	8004740 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	015b      	lsls	r3, r3, #5
 8004730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	4413      	add	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_PCD_EP_ClrStall+0x76>
 800475c:	2302      	movs	r3, #2
 800475e:	e00e      	b.n	800477e <HAL_PCD_EP_ClrStall+0x94>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 fb24 	bl	8008dbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004790:	e286      	b.n	8004ca0 <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800479a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800479c:	8afb      	ldrh	r3, [r7, #22]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80047a6:	7d7b      	ldrb	r3, [r7, #21]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 8146 	bne.w	8004a3a <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047ae:	8afb      	ldrh	r3, [r7, #22]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d151      	bne.n	800485c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c8:	b29c      	uxth	r4, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80047d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3328      	adds	r3, #40	; 0x28
 80047de:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	3302      	adds	r3, #2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800481a:	2100      	movs	r1, #0
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f005 fe15 	bl	800a44c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8238 	beq.w	8004ca0 <PCD_EP_ISR_Handler+0x518>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f040 8233 	bne.w	8004ca0 <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004846:	b2da      	uxtb	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800485a:	e221      	b.n	8004ca0 <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004862:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800486c:	8a7b      	ldrh	r3, [r7, #18]
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	3306      	adds	r3, #6
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f004 fb8a 	bl	8008fce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29c      	uxth	r4, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80048d2:	b292      	uxth	r2, r2
 80048d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f005 fd8e 	bl	800a3f8 <HAL_PCD_SetupStageCallback>
 80048dc:	e1e0      	b.n	8004ca0 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f280 81dc 	bge.w	8004ca0 <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29c      	uxth	r4, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004900:	b292      	uxth	r2, r2
 8004902:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	3306      	adds	r3, #6
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d019      	beq.n	800496c <PCD_EP_ISR_Handler+0x1e4>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6959      	ldr	r1, [r3, #20]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004950:	b29b      	uxth	r3, r3
 8004952:	f004 fb3c 	bl	8008fce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004964:	2100      	movs	r1, #0
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f005 fd58 	bl	800a41c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461c      	mov	r4, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	441c      	add	r4, r3
 800497e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <PCD_EP_ISR_Handler+0x226>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004994:	b29a      	uxth	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e02f      	b.n	8004a0e <PCD_EP_ISR_Handler+0x286>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b3e      	cmp	r3, #62	; 0x3e
 80049b4:	d813      	bhi.n	80049de <PCD_EP_ISR_Handler+0x256>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <PCD_EP_ISR_Handler+0x248>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	e017      	b.n	8004a0e <PCD_EP_ISR_Handler+0x286>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <PCD_EP_ISR_Handler+0x270>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	b29c      	uxth	r4, r3
 8004a20:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a24:	b29c      	uxth	r4, r3
 8004a26:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004a2a:	b29c      	uxth	r4, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4ba2      	ldr	r3, [pc, #648]	; (8004cbc <PCD_EP_ISR_Handler+0x534>)
 8004a32:	4323      	orrs	r3, r4
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]
 8004a38:	e132      	b.n	8004ca0 <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	7d7b      	ldrb	r3, [r7, #21]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f280 80d1 	bge.w	8004bf6 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	7d7b      	ldrb	r3, [r7, #21]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a68:	4013      	ands	r3, r2
 8004a6a:	b29c      	uxth	r4, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	7d7b      	ldrb	r3, [r7, #21]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004a7c:	b292      	uxth	r2, r2
 8004a7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a80:	7d7b      	ldrb	r3, [r7, #21]
 8004a82:	015b      	lsls	r3, r3, #5
 8004a84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	7b1b      	ldrb	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d121      	bne.n	8004ada <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3306      	adds	r3, #6
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004abe:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004ac0:	8bfb      	ldrh	r3, [r7, #30]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d072      	beq.n	8004bac <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6959      	ldr	r1, [r3, #20]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88da      	ldrh	r2, [r3, #6]
 8004ad2:	8bfb      	ldrh	r3, [r7, #30]
 8004ad4:	f004 fa7b 	bl	8008fce <USB_ReadPMA>
 8004ad8:	e068      	b.n	8004bac <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d021      	beq.n	8004b38 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004b1e:	8bfb      	ldrh	r3, [r7, #30]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02a      	beq.n	8004b7a <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6959      	ldr	r1, [r3, #20]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	891a      	ldrh	r2, [r3, #8]
 8004b30:	8bfb      	ldrh	r3, [r7, #30]
 8004b32:	f004 fa4c 	bl	8008fce <USB_ReadPMA>
 8004b36:	e020      	b.n	8004b7a <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3306      	adds	r3, #6
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b60:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004b62:	8bfb      	ldrh	r3, [r7, #30]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6959      	ldr	r1, [r3, #20]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	895a      	ldrh	r2, [r3, #10]
 8004b74:	8bfb      	ldrh	r3, [r7, #30]
 8004b76:	f004 fa2a 	bl	8008fce <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b94:	b29c      	uxth	r4, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	4b46      	ldr	r3, [pc, #280]	; (8004cc0 <PCD_EP_ISR_Handler+0x538>)
 8004ba6:	4323      	orrs	r3, r4
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	8bfb      	ldrh	r3, [r7, #30]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	8bfb      	ldrh	r3, [r7, #30]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <PCD_EP_ISR_Handler+0x44e>
 8004bcc:	8bfa      	ldrh	r2, [r7, #30]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d206      	bcs.n	8004be4 <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f005 fc1d 	bl	800a41c <HAL_PCD_DataOutStageCallback>
 8004be2:	e008      	b.n	8004bf6 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	7819      	ldrb	r1, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fcad 	bl	8004550 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004bf6:	8a7b      	ldrh	r3, [r7, #18]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d04f      	beq.n	8004ca0 <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c00:	7d7b      	ldrb	r3, [r7, #21]
 8004c02:	015b      	lsls	r3, r3, #5
 8004c04:	3328      	adds	r3, #40	; 0x28
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	7d7b      	ldrb	r3, [r7, #21]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	b29c      	uxth	r4, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	7d7b      	ldrb	r3, [r7, #21]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	3302      	adds	r3, #2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f005 fbe0 	bl	800a44c <HAL_PCD_DataInStageCallback>
 8004c8c:	e008      	b.n	8004ca0 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	7819      	ldrb	r1, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fc92 	bl	80045c4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f6ff ad70 	blt.w	8004792 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3724      	adds	r7, #36	; 0x24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd90      	pop	{r4, r7, pc}
 8004cbc:	ffff8080 	.word	0xffff8080
 8004cc0:	ffff80c0 	.word	0xffff80c0

08004cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f000 bef4 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 816a 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004cee:	4bb3      	ldr	r3, [pc, #716]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d00c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cfa:	4bb0      	ldr	r3, [pc, #704]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d159      	bne.n	8004dba <HAL_RCC_OscConfig+0xf6>
 8004d06:	4bad      	ldr	r3, [pc, #692]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d12:	d152      	bne.n	8004dba <HAL_RCC_OscConfig+0xf6>
 8004d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_OscConfig+0x82>
 8004d40:	4b9e      	ldr	r3, [pc, #632]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0xae>
 8004d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004d62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004d6e:	4b93      	ldr	r3, [pc, #588]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004d7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004d7e:	fa92 f2a2 	rbit	r2, r2
 8004d82:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004d86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004d8a:	fab2 f282 	clz	r2, r2
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	f042 0220 	orr.w	r2, r2, #32
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f002 021f 	and.w	r2, r2, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 810c 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x2fc>
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 8106 	bne.w	8004fc0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f000 be86 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d106      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x110>
 8004dc6:	4b7d      	ldr	r3, [pc, #500]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a7c      	ldr	r2, [pc, #496]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e030      	b.n	8004e36 <HAL_RCC_OscConfig+0x172>
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x134>
 8004dde:	4b77      	ldr	r3, [pc, #476]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a76      	ldr	r2, [pc, #472]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b74      	ldr	r3, [pc, #464]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e01e      	b.n	8004e36 <HAL_RCC_OscConfig+0x172>
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x15a>
 8004e04:	4b6d      	ldr	r3, [pc, #436]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6c      	ldr	r2, [pc, #432]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4b6a      	ldr	r3, [pc, #424]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a69      	ldr	r2, [pc, #420]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e00b      	b.n	8004e36 <HAL_RCC_OscConfig+0x172>
 8004e1e:	4b67      	ldr	r3, [pc, #412]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a66      	ldr	r2, [pc, #408]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b64      	ldr	r3, [pc, #400]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a63      	ldr	r2, [pc, #396]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e36:	4b61      	ldr	r3, [pc, #388]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f023 020f 	bic.w	r2, r3, #15
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	495d      	ldr	r1, [pc, #372]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d059      	beq.n	8004f08 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd f950 	bl	80020f8 <HAL_GetTick>
 8004e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e5e:	f7fd f94b 	bl	80020f8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d902      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	f000 be29 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>
 8004e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004e80:	fa93 f3a3 	rbit	r3, r3
 8004e84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004e88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8c:	fab3 f383 	clz	r3, r3
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x1e2>
 8004ea0:	4b46      	ldr	r3, [pc, #280]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	e015      	b.n	8004ed2 <HAL_RCC_OscConfig+0x20e>
 8004ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eaa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ebe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ec2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ec6:	fa93 f3a3 	rbit	r3, r3
 8004eca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004ece:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ed6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004eda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004ede:	fa92 f2a2 	rbit	r2, r2
 8004ee2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004ee6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004eea:	fab2 f282 	clz	r2, r2
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	f042 0220 	orr.w	r2, r2, #32
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	f002 021f 	and.w	r2, r2, #31
 8004efa:	2101      	movs	r1, #1
 8004efc:	fa01 f202 	lsl.w	r2, r1, r2
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ab      	beq.n	8004e5e <HAL_RCC_OscConfig+0x19a>
 8004f06:	e05c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd f8f6 	bl	80020f8 <HAL_GetTick>
 8004f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f12:	f7fd f8f1 	bl	80020f8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d902      	bls.n	8004f28 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	f000 bdcf 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>
 8004f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004f3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f40:	fab3 f383 	clz	r3, r3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <HAL_RCC_OscConfig+0x296>
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	e015      	b.n	8004f86 <HAL_RCC_OscConfig+0x2c2>
 8004f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004f76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <HAL_RCC_OscConfig+0x2f8>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004f8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004f92:	fa92 f2a2 	rbit	r2, r2
 8004f96:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004f9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004f9e:	fab2 f282 	clz	r2, r2
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	f042 0220 	orr.w	r2, r2, #32
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	f002 021f 	and.w	r2, r2, #31
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ab      	bne.n	8004f12 <HAL_RCC_OscConfig+0x24e>
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2fe>
 8004fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 816f 	beq.w	80052b0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fd2:	4bd0      	ldr	r3, [pc, #832]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fde:	4bcd      	ldr	r3, [pc, #820]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d16c      	bne.n	80050c4 <HAL_RCC_OscConfig+0x400>
 8004fea:	4bca      	ldr	r3, [pc, #808]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d166      	bne.n	80050c4 <HAL_RCC_OscConfig+0x400>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005008:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500c:	fab3 f383 	clz	r3, r3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d102      	bne.n	8005026 <HAL_RCC_OscConfig+0x362>
 8005020:	4bbc      	ldr	r3, [pc, #752]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	e013      	b.n	800504e <HAL_RCC_OscConfig+0x38a>
 8005026:	2302      	movs	r3, #2
 8005028:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005030:	fa93 f3a3 	rbit	r3, r3
 8005034:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005038:	2302      	movs	r3, #2
 800503a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800503e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005042:	fa93 f3a3 	rbit	r3, r3
 8005046:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800504a:	4bb2      	ldr	r3, [pc, #712]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2202      	movs	r2, #2
 8005050:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005054:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005058:	fa92 f2a2 	rbit	r2, r2
 800505c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005060:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005064:	fab2 f282 	clz	r2, r2
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	f042 0220 	orr.w	r2, r2, #32
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	f002 021f 	and.w	r2, r2, #31
 8005074:	2101      	movs	r1, #1
 8005076:	fa01 f202 	lsl.w	r2, r1, r2
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_RCC_OscConfig+0x3cc>
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d002      	beq.n	8005090 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f000 bd1b 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	4ba0      	ldr	r3, [pc, #640]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	21f8      	movs	r1, #248	; 0xf8
 80050a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80050a8:	fa91 f1a1 	rbit	r1, r1
 80050ac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80050b0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80050b4:	fab1 f181 	clz	r1, r1
 80050b8:	b2c9      	uxtb	r1, r1
 80050ba:	408b      	lsls	r3, r1
 80050bc:	4995      	ldr	r1, [pc, #596]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c2:	e0f5      	b.n	80052b0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8085 	beq.w	80051da <HAL_RCC_OscConfig+0x516>
 80050d0:	2301      	movs	r3, #1
 80050d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80050da:	fa93 f3a3 	rbit	r3, r3
 80050de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80050e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	461a      	mov	r2, r3
 80050f8:	2301      	movs	r3, #1
 80050fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fc fffc 	bl	80020f8 <HAL_GetTick>
 8005100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005106:	f7fc fff7 	bl	80020f8 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d902      	bls.n	800511c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	f000 bcd5 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>
 800511c:	2302      	movs	r3, #2
 800511e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005126:	fa93 f3a3 	rbit	r3, r3
 800512a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800512e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_RCC_OscConfig+0x488>
 8005146:	4b73      	ldr	r3, [pc, #460]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	e013      	b.n	8005174 <HAL_RCC_OscConfig+0x4b0>
 800514c:	2302      	movs	r3, #2
 800514e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800515e:	2302      	movs	r3, #2
 8005160:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005164:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005168:	fa93 f3a3 	rbit	r3, r3
 800516c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005170:	4b68      	ldr	r3, [pc, #416]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2202      	movs	r2, #2
 8005176:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800517a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800517e:	fa92 f2a2 	rbit	r2, r2
 8005182:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005186:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800518a:	fab2 f282 	clz	r2, r2
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	f042 0220 	orr.w	r2, r2, #32
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	f002 021f 	and.w	r2, r2, #31
 800519a:	2101      	movs	r1, #1
 800519c:	fa01 f202 	lsl.w	r2, r1, r2
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0af      	beq.n	8005106 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b5b      	ldr	r3, [pc, #364]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	21f8      	movs	r1, #248	; 0xf8
 80051b6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80051be:	fa91 f1a1 	rbit	r1, r1
 80051c2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80051c6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80051ca:	fab1 f181 	clz	r1, r1
 80051ce:	b2c9      	uxtb	r1, r1
 80051d0:	408b      	lsls	r3, r1
 80051d2:	4950      	ldr	r1, [pc, #320]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]
 80051d8:	e06a      	b.n	80052b0 <HAL_RCC_OscConfig+0x5ec>
 80051da:	2301      	movs	r3, #1
 80051dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80051ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f0:	fab3 f383 	clz	r3, r3
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005206:	f7fc ff77 	bl	80020f8 <HAL_GetTick>
 800520a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005210:	f7fc ff72 	bl	80020f8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d902      	bls.n	8005226 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	f000 bc50 	b.w	8005ac6 <HAL_RCC_OscConfig+0xe02>
 8005226:	2302      	movs	r3, #2
 8005228:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d102      	bne.n	8005256 <HAL_RCC_OscConfig+0x592>
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	e013      	b.n	800527e <HAL_RCC_OscConfig+0x5ba>
 8005256:	2302      	movs	r3, #2
 8005258:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005260:	fa93 f3a3 	rbit	r3, r3
 8005264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005268:	2302      	movs	r3, #2
 800526a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800526e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800527a:	4b26      	ldr	r3, [pc, #152]	; (8005314 <HAL_RCC_OscConfig+0x650>)
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2202      	movs	r2, #2
 8005280:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005284:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005288:	fa92 f2a2 	rbit	r2, r2
 800528c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005290:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005294:	fab2 f282 	clz	r2, r2
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	f042 0220 	orr.w	r2, r2, #32
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	f002 021f 	and.w	r2, r2, #31
 80052a4:	2101      	movs	r1, #1
 80052a6:	fa01 f202 	lsl.w	r2, r1, r2
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1af      	bne.n	8005210 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b0:	1d3b      	adds	r3, r7, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80da 	beq.w	8005474 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d069      	beq.n	800539e <HAL_RCC_OscConfig+0x6da>
 80052ca:	2301      	movs	r3, #1
 80052cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052d4:	fa93 f3a3 	rbit	r3, r3
 80052d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80052dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_OscConfig+0x654>)
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	461a      	mov	r2, r3
 80052f0:	2301      	movs	r3, #1
 80052f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f4:	f7fc ff00 	bl	80020f8 <HAL_GetTick>
 80052f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fc:	e00e      	b.n	800531c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fc fefb 	bl	80020f8 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d906      	bls.n	800531c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e3d9      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000
 8005318:	10908120 	.word	0x10908120
 800531c:	2302      	movs	r3, #2
 800531e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005326:	fa93 f3a3 	rbit	r3, r3
 800532a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800532e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005332:	2202      	movs	r2, #2
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800534a:	2202      	movs	r2, #2
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	fa93 f2a3 	rbit	r2, r3
 8005358:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800535c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800535e:	4ba5      	ldr	r3, [pc, #660]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005362:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005366:	2102      	movs	r1, #2
 8005368:	6019      	str	r1, [r3, #0]
 800536a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	fa93 f1a3 	rbit	r1, r3
 8005374:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005378:	6019      	str	r1, [r3, #0]
  return result;
 800537a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2101      	movs	r1, #1
 8005392:	fa01 f303 	lsl.w	r3, r1, r3
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0b0      	beq.n	80052fe <HAL_RCC_OscConfig+0x63a>
 800539c:	e06a      	b.n	8005474 <HAL_RCC_OscConfig+0x7b0>
 800539e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	fa93 f2a3 	rbit	r2, r3
 80053b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80053b4:	601a      	str	r2, [r3, #0]
  return result;
 80053b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80053ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	4b8c      	ldr	r3, [pc, #560]	; (80055f8 <HAL_RCC_OscConfig+0x934>)
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d0:	f7fc fe92 	bl	80020f8 <HAL_GetTick>
 80053d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d8:	e009      	b.n	80053ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053da:	f7fc fe8d 	bl	80020f8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e36b      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 80053ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80053f2:	2202      	movs	r2, #2
 80053f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800540a:	2202      	movs	r2, #2
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f2a3 	rbit	r2, r3
 8005418:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005422:	2202      	movs	r2, #2
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fa93 f2a3 	rbit	r2, r3
 8005430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005434:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005436:	4b6f      	ldr	r3, [pc, #444]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800543e:	2102      	movs	r1, #2
 8005440:	6019      	str	r1, [r3, #0]
 8005442:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	fa93 f1a3 	rbit	r1, r3
 800544c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005450:	6019      	str	r1, [r3, #0]
  return result;
 8005452:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2101      	movs	r1, #1
 800546a:	fa01 f303 	lsl.w	r3, r1, r3
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1b2      	bne.n	80053da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8158 	beq.w	8005734 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005484:	2300      	movs	r3, #0
 8005486:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800548a:	4b5a      	ldr	r3, [pc, #360]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d112      	bne.n	80054bc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005496:	4b57      	ldr	r3, [pc, #348]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	4a56      	ldr	r2, [pc, #344]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800549c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a0:	61d3      	str	r3, [r2, #28]
 80054a2:	4b54      	ldr	r3, [pc, #336]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80054aa:	f107 0308 	add.w	r3, r7, #8
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f107 0308 	add.w	r3, r7, #8
 80054b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054bc:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <HAL_RCC_OscConfig+0x938>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d11a      	bne.n	80054fe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054c8:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <HAL_RCC_OscConfig+0x938>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a4b      	ldr	r2, [pc, #300]	; (80055fc <HAL_RCC_OscConfig+0x938>)
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d4:	f7fc fe10 	bl	80020f8 <HAL_GetTick>
 80054d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054dc:	e009      	b.n	80054f2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054de:	f7fc fe0b 	bl	80020f8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b64      	cmp	r3, #100	; 0x64
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e2e9      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCC_OscConfig+0x938>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ef      	beq.n	80054de <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d106      	bne.n	8005516 <HAL_RCC_OscConfig+0x852>
 8005508:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	4a39      	ldr	r2, [pc, #228]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6213      	str	r3, [r2, #32]
 8005514:	e02f      	b.n	8005576 <HAL_RCC_OscConfig+0x8b2>
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10c      	bne.n	800553a <HAL_RCC_OscConfig+0x876>
 8005520:	4b34      	ldr	r3, [pc, #208]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	4a33      	ldr	r2, [pc, #204]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	6213      	str	r3, [r2, #32]
 800552c:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4a30      	ldr	r2, [pc, #192]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005532:	f023 0304 	bic.w	r3, r3, #4
 8005536:	6213      	str	r3, [r2, #32]
 8005538:	e01d      	b.n	8005576 <HAL_RCC_OscConfig+0x8b2>
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b05      	cmp	r3, #5
 8005542:	d10c      	bne.n	800555e <HAL_RCC_OscConfig+0x89a>
 8005544:	4b2b      	ldr	r3, [pc, #172]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4a2a      	ldr	r2, [pc, #168]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800554a:	f043 0304 	orr.w	r3, r3, #4
 800554e:	6213      	str	r3, [r2, #32]
 8005550:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	6213      	str	r3, [r2, #32]
 800555c:	e00b      	b.n	8005576 <HAL_RCC_OscConfig+0x8b2>
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	6213      	str	r3, [r2, #32]
 800556a:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 8005570:	f023 0304 	bic.w	r3, r3, #4
 8005574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d06b      	beq.n	8005658 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005580:	f7fc fdba 	bl	80020f8 <HAL_GetTick>
 8005584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fc fdb5 	bl	80020f8 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e291      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 80055a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80055a6:	2202      	movs	r2, #2
 80055a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	fa93 f2a3 	rbit	r2, r3
 80055b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80055be:	2202      	movs	r2, #2
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	fa93 f2a3 	rbit	r2, r3
 80055cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80055d0:	601a      	str	r2, [r3, #0]
  return result;
 80055d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80055d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d8:	fab3 f383 	clz	r3, r3
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d109      	bne.n	8005600 <HAL_RCC_OscConfig+0x93c>
 80055ec:	4b01      	ldr	r3, [pc, #4]	; (80055f4 <HAL_RCC_OscConfig+0x930>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	e014      	b.n	800561c <HAL_RCC_OscConfig+0x958>
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	10908120 	.word	0x10908120
 80055fc:	40007000 	.word	0x40007000
 8005600:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005604:	2202      	movs	r2, #2
 8005606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	4bbb      	ldr	r3, [pc, #748]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005620:	2102      	movs	r1, #2
 8005622:	6011      	str	r1, [r2, #0]
 8005624:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	fa92 f1a2 	rbit	r1, r2
 800562e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005632:	6011      	str	r1, [r2, #0]
  return result;
 8005634:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	fab2 f282 	clz	r2, r2
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	f002 021f 	and.w	r2, r2, #31
 800564a:	2101      	movs	r1, #1
 800564c:	fa01 f202 	lsl.w	r2, r1, r2
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d099      	beq.n	800558a <HAL_RCC_OscConfig+0x8c6>
 8005656:	e063      	b.n	8005720 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005658:	f7fc fd4e 	bl	80020f8 <HAL_GetTick>
 800565c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	e00b      	b.n	800567a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fc fd49 	bl	80020f8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e225      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 800567a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800567e:	2202      	movs	r2, #2
 8005680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fa93 f2a3 	rbit	r2, r3
 800568c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005696:	2202      	movs	r2, #2
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	fa93 f2a3 	rbit	r2, r3
 80056a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80056a8:	601a      	str	r2, [r3, #0]
  return result;
 80056aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80056ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b0:	fab3 f383 	clz	r3, r3
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f043 0302 	orr.w	r3, r3, #2
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d102      	bne.n	80056ca <HAL_RCC_OscConfig+0xa06>
 80056c4:	4b90      	ldr	r3, [pc, #576]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	e00d      	b.n	80056e6 <HAL_RCC_OscConfig+0xa22>
 80056ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80056ce:	2202      	movs	r2, #2
 80056d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	fa93 f2a3 	rbit	r2, r3
 80056dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	4b89      	ldr	r3, [pc, #548]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80056ea:	2102      	movs	r1, #2
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	fa92 f1a2 	rbit	r1, r2
 80056f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80056fc:	6011      	str	r1, [r2, #0]
  return result;
 80056fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	fab2 f282 	clz	r2, r2
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	f002 021f 	and.w	r2, r2, #31
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f202 	lsl.w	r2, r1, r2
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1a0      	bne.n	8005662 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005720:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005724:	2b01      	cmp	r3, #1
 8005726:	d105      	bne.n	8005734 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005728:	4b77      	ldr	r3, [pc, #476]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	4a76      	ldr	r2, [pc, #472]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 800572e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005732:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005734:	1d3b      	adds	r3, r7, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 81c2 	beq.w	8005ac4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005740:	4b71      	ldr	r3, [pc, #452]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b08      	cmp	r3, #8
 800574a:	f000 819c 	beq.w	8005a86 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b02      	cmp	r3, #2
 8005756:	f040 8114 	bne.w	8005982 <HAL_RCC_OscConfig+0xcbe>
 800575a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800575e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	fa93 f2a3 	rbit	r2, r3
 800576e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005772:	601a      	str	r2, [r3, #0]
  return result;
 8005774:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005778:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577a:	fab3 f383 	clz	r3, r3
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005784:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fc fcb2 	bl	80020f8 <HAL_GetTick>
 8005794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005798:	e009      	b.n	80057ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800579a:	f7fc fcad 	bl	80020f8 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e18b      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 80057ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80057b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	fa93 f2a3 	rbit	r2, r3
 80057c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057c6:	601a      	str	r2, [r3, #0]
  return result;
 80057c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ce:	fab3 f383 	clz	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <HAL_RCC_OscConfig+0xb24>
 80057e2:	4b49      	ldr	r3, [pc, #292]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	e01b      	b.n	8005820 <HAL_RCC_OscConfig+0xb5c>
 80057e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	fa93 f2a3 	rbit	r2, r3
 80057fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	fa93 f2a3 	rbit	r2, r3
 8005816:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	4b3a      	ldr	r3, [pc, #232]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005828:	6011      	str	r1, [r2, #0]
 800582a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	fa92 f1a2 	rbit	r1, r2
 8005834:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005838:	6011      	str	r1, [r2, #0]
  return result;
 800583a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	fab2 f282 	clz	r2, r2
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	f042 0220 	orr.w	r2, r2, #32
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	f002 021f 	and.w	r2, r2, #31
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d19e      	bne.n	800579a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	430b      	orrs	r3, r1
 8005872:	4925      	ldr	r1, [pc, #148]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 8005874:	4313      	orrs	r3, r2
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800587c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005882:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	fa93 f2a3 	rbit	r2, r3
 800588c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005890:	601a      	str	r2, [r3, #0]
  return result;
 8005892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005896:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	461a      	mov	r2, r3
 80058aa:	2301      	movs	r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ae:	f7fc fc23 	bl	80020f8 <HAL_GetTick>
 80058b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b6:	e009      	b.n	80058cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b8:	f7fc fc1e 	bl	80020f8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e0fc      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 80058cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	fa93 f2a3 	rbit	r2, r3
 80058e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058e4:	601a      	str	r2, [r3, #0]
  return result;
 80058e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ec:	fab3 f383 	clz	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <HAL_RCC_OscConfig+0xc48>
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <HAL_RCC_OscConfig+0xc44>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	e01e      	b.n	8005944 <HAL_RCC_OscConfig+0xc80>
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000
 800590c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	fa93 f2a3 	rbit	r2, r3
 8005920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800592a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	fa93 f2a3 	rbit	r2, r3
 800593a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <HAL_RCC_OscConfig+0xe0c>)
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005948:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	fa92 f1a2 	rbit	r1, r2
 8005958:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800595c:	6011      	str	r1, [r2, #0]
  return result;
 800595e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f042 0220 	orr.w	r2, r2, #32
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	f002 021f 	and.w	r2, r2, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d09b      	beq.n	80058b8 <HAL_RCC_OscConfig+0xbf4>
 8005980:	e0a0      	b.n	8005ac4 <HAL_RCC_OscConfig+0xe00>
 8005982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800598a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	fa93 f2a3 	rbit	r2, r3
 8005996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800599a:	601a      	str	r2, [r3, #0]
  return result;
 800599c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	fab3 f383 	clz	r3, r3
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b8:	f7fc fb9e 	bl	80020f8 <HAL_GetTick>
 80059bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c0:	e009      	b.n	80059d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c2:	f7fc fb99 	bl	80020f8 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e077      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
 80059d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	fa93 f2a3 	rbit	r2, r3
 80059ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ee:	601a      	str	r2, [r3, #0]
  return result;
 80059f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_OscConfig+0xd4c>
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_RCC_OscConfig+0xe0c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	e01b      	b.n	8005a48 <HAL_RCC_OscConfig+0xd84>
 8005a10:	f107 0320 	add.w	r3, r7, #32
 8005a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	f107 0320 	add.w	r3, r7, #32
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	fa93 f2a3 	rbit	r2, r3
 8005a24:	f107 031c 	add.w	r3, r7, #28
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	f107 0318 	add.w	r3, r7, #24
 8005a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f107 0318 	add.w	r3, r7, #24
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	fa93 f2a3 	rbit	r2, r3
 8005a3e:	f107 0314 	add.w	r3, r7, #20
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <HAL_RCC_OscConfig+0xe0c>)
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f107 0210 	add.w	r2, r7, #16
 8005a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	f107 0210 	add.w	r2, r7, #16
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	fa92 f1a2 	rbit	r1, r2
 8005a5c:	f107 020c 	add.w	r2, r7, #12
 8005a60:	6011      	str	r1, [r2, #0]
  return result;
 8005a62:	f107 020c 	add.w	r2, r7, #12
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	fab2 f282 	clz	r2, r2
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	f042 0220 	orr.w	r2, r2, #32
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	f002 021f 	and.w	r2, r2, #31
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d19e      	bne.n	80059c2 <HAL_RCC_OscConfig+0xcfe>
 8005a84:	e01e      	b.n	8005ac4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e018      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a94:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <HAL_RCC_OscConfig+0xe0c>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d108      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005aae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000

08005ad4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b09e      	sub	sp, #120	; 0x78
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e162      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b90      	ldr	r3, [pc, #576]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b8d      	ldr	r3, [pc, #564]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 0207 	bic.w	r2, r3, #7
 8005b02:	498b      	ldr	r1, [pc, #556]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b89      	ldr	r3, [pc, #548]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e14a      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b28:	4b82      	ldr	r3, [pc, #520]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	497f      	ldr	r1, [pc, #508]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80dc 	beq.w	8005d00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d13c      	bne.n	8005bca <HAL_RCC_ClockConfig+0xf6>
 8005b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b60:	fab3 f383 	clz	r3, r3
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d102      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xa6>
 8005b74:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	e00f      	b.n	8005b9a <HAL_RCC_ClockConfig+0xc6>
 8005b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b82:	fa93 f3a3 	rbit	r3, r3
 8005b86:	667b      	str	r3, [r7, #100]	; 0x64
 8005b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b90:	fa93 f3a3 	rbit	r3, r3
 8005b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b96:	4b67      	ldr	r3, [pc, #412]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ba2:	fa92 f2a2 	rbit	r2, r2
 8005ba6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005baa:	fab2 f282 	clz	r2, r2
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	f042 0220 	orr.w	r2, r2, #32
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	f002 021f 	and.w	r2, r2, #31
 8005bba:	2101      	movs	r1, #1
 8005bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d17b      	bne.n	8005cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e0f3      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d13c      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x178>
 8005bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d102      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x128>
 8005bf6:	4b4f      	ldr	r3, [pc, #316]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	e00f      	b.n	8005c1c <HAL_RCC_ClockConfig+0x148>
 8005bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c04:	fa93 f3a3 	rbit	r3, r3
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	fa93 f3a3 	rbit	r3, r3
 8005c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c18:	4b46      	ldr	r3, [pc, #280]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c20:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c24:	fa92 f2a2 	rbit	r2, r2
 8005c28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c2c:	fab2 f282 	clz	r2, r2
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	f042 0220 	orr.w	r2, r2, #32
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	f002 021f 	and.w	r2, r2, #31
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d13a      	bne.n	8005cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0b2      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	fa93 f3a3 	rbit	r3, r3
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5a:	fab3 f383 	clz	r3, r3
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d102      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1a0>
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	e00d      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1bc>
 8005c74:	2302      	movs	r3, #2
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	fa93 f3a3 	rbit	r3, r3
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c80:	2302      	movs	r3, #2
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	fa93 f3a3 	rbit	r3, r3
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2202      	movs	r2, #2
 8005c92:	61ba      	str	r2, [r7, #24]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	fa92 f2a2 	rbit	r2, r2
 8005c9a:	617a      	str	r2, [r7, #20]
  return result;
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	fab2 f282 	clz	r2, r2
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	f042 0220 	orr.w	r2, r2, #32
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	f002 021f 	and.w	r2, r2, #31
 8005cae:	2101      	movs	r1, #1
 8005cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e079      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f023 0203 	bic.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	491a      	ldr	r1, [pc, #104]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd0:	f7fc fa12 	bl	80020f8 <HAL_GetTick>
 8005cd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd8:	f7fc fa0e 	bl	80020f8 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e061      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f003 020c 	and.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1eb      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d214      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 0207 	bic.w	r2, r3, #7
 8005d16:	4906      	ldr	r1, [pc, #24]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <HAL_RCC_ClockConfig+0x25c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e040      	b.n	8005db2 <HAL_RCC_ClockConfig+0x2de>
 8005d30:	40022000 	.word	0x40022000
 8005d34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d44:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <HAL_RCC_ClockConfig+0x2e8>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	491a      	ldr	r1, [pc, #104]	; (8005dbc <HAL_RCC_ClockConfig+0x2e8>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <HAL_RCC_ClockConfig+0x2e8>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4912      	ldr	r1, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x2e8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d76:	f000 f829 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_RCC_ClockConfig+0x2e8>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d84:	22f0      	movs	r2, #240	; 0xf0
 8005d86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	fa92 f2a2 	rbit	r2, r2
 8005d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	fab2 f282 	clz	r2, r2
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	40d3      	lsrs	r3, r2
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <HAL_RCC_ClockConfig+0x2ec>)
 8005d9c:	5cd3      	ldrb	r3, [r2, r3]
 8005d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8005da2:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <HAL_RCC_ClockConfig+0x2f0>)
 8005da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <HAL_RCC_ClockConfig+0x2f4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc f856 	bl	8001e5c <HAL_InitTick>
  
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3778      	adds	r7, #120	; 0x78
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	0800a7cc 	.word	0x0800a7cc
 8005dc4:	20000004 	.word	0x20000004
 8005dc8:	20000008 	.word	0x20000008

08005dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b08b      	sub	sp, #44	; 0x2c
 8005dd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d002      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x30>
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d003      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x36>
 8005dfa:	e03c      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dfc:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dfe:	623b      	str	r3, [r7, #32]
      break;
 8005e00:	e03c      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005e0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	fa92 f2a2 	rbit	r2, r2
 8005e14:	607a      	str	r2, [r7, #4]
  return result;
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	fab2 f282 	clz	r2, r2
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	40d3      	lsrs	r3, r2
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e22:	5cd3      	ldrb	r3, [r2, r3]
 8005e24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005e26:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	220f      	movs	r2, #15
 8005e30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	fa92 f2a2 	rbit	r2, r2
 8005e38:	60fa      	str	r2, [r7, #12]
  return result;
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	fab2 f282 	clz	r2, r2
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	40d3      	lsrs	r3, r2
 8005e44:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e46:	5cd3      	ldrb	r3, [r2, r3]
 8005e48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e54:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	e004      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	623b      	str	r3, [r7, #32]
      break;
 8005e74:	e002      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e78:	623b      	str	r3, [r7, #32]
      break;
 8005e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	372c      	adds	r7, #44	; 0x2c
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	007a1200 	.word	0x007a1200
 8005e94:	0800a7e4 	.word	0x0800a7e4
 8005e98:	0800a7f4 	.word	0x0800a7f4
 8005e9c:	003d0900 	.word	0x003d0900

08005ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea4:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000004 	.word	0x20000004

08005eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005ebe:	f7ff ffef 	bl	8005ea0 <HAL_RCC_GetHCLKFreq>
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ecc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005ed0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	fa92 f2a2 	rbit	r2, r2
 8005ed8:	603a      	str	r2, [r7, #0]
  return result;
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	fab2 f282 	clz	r2, r2
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	40d3      	lsrs	r3, r2
 8005ee4:	4a04      	ldr	r2, [pc, #16]	; (8005ef8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	0800a7dc 	.word	0x0800a7dc

08005efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005f02:	f7ff ffcd 	bl	8005ea0 <HAL_RCC_GetHCLKFreq>
 8005f06:	4601      	mov	r1, r0
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005f10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005f14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	fa92 f2a2 	rbit	r2, r2
 8005f1c:	603a      	str	r2, [r7, #0]
  return result;
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	fab2 f282 	clz	r2, r2
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	40d3      	lsrs	r3, r2
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005f2a:	5cd3      	ldrb	r3, [r2, r3]
 8005f2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	0800a7dc 	.word	0x0800a7dc

08005f40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f50:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <HAL_RCC_GetClockConfig+0x5c>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f003 0203 	and.w	r2, r3, #3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <HAL_RCC_GetClockConfig+0x5c>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <HAL_RCC_GetClockConfig+0x5c>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <HAL_RCC_GetClockConfig+0x5c>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <HAL_RCC_GetClockConfig+0x60>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0207 	and.w	r2, r3, #7
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40022000 	.word	0x40022000

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b092      	sub	sp, #72	; 0x48
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80d7 	beq.w	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc8:	4b4e      	ldr	r3, [pc, #312]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10e      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd4:	4b4b      	ldr	r3, [pc, #300]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4a4a      	ldr	r2, [pc, #296]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fde:	61d3      	str	r3, [r2, #28]
 8005fe0:	4b48      	ldr	r3, [pc, #288]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff2:	4b45      	ldr	r3, [pc, #276]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d118      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ffe:	4b42      	ldr	r3, [pc, #264]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a41      	ldr	r2, [pc, #260]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006008:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600a:	f7fc f875 	bl	80020f8 <HAL_GetTick>
 800600e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	e008      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006012:	f7fc f871 	bl	80020f8 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b64      	cmp	r3, #100	; 0x64
 800601e:	d901      	bls.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e169      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006024:	4b38      	ldr	r3, [pc, #224]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006030:	4b34      	ldr	r3, [pc, #208]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8084 	beq.w	800614a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800604c:	429a      	cmp	r2, r3
 800604e:	d07c      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800605e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	fa93 f3a3 	rbit	r3, r3
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800606a:	fab3 f383 	clz	r3, r3
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	4b26      	ldr	r3, [pc, #152]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	461a      	mov	r2, r3
 800607a:	2301      	movs	r3, #1
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	fa93 f3a3 	rbit	r3, r3
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	461a      	mov	r2, r3
 800609e:	2300      	movs	r3, #0
 80060a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060a2:	4a18      	ldr	r2, [pc, #96]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d04b      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fc f821 	bl	80020f8 <HAL_GetTick>
 80060b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b8:	e00a      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ba:	f7fc f81d 	bl	80020f8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e113      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80060d0:	2302      	movs	r3, #2
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	fa93 f3a3 	rbit	r3, r3
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
 80060dc:	2302      	movs	r3, #2
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	fa93 f3a3 	rbit	r3, r3
 80060e6:	61fb      	str	r3, [r7, #28]
  return result;
 80060e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d108      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80060fe:	4b01      	ldr	r3, [pc, #4]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	e00d      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006104:	40021000 	.word	0x40021000
 8006108:	40007000 	.word	0x40007000
 800610c:	10908100 	.word	0x10908100
 8006110:	2302      	movs	r3, #2
 8006112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	fa93 f3a3 	rbit	r3, r3
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	4b78      	ldr	r3, [pc, #480]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2202      	movs	r2, #2
 8006122:	613a      	str	r2, [r7, #16]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	fa92 f2a2 	rbit	r2, r2
 800612a:	60fa      	str	r2, [r7, #12]
  return result;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	fab2 f282 	clz	r2, r2
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	f002 021f 	and.w	r2, r2, #31
 800613e:	2101      	movs	r1, #1
 8006140:	fa01 f202 	lsl.w	r2, r1, r2
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0b7      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800614a:	4b6d      	ldr	r3, [pc, #436]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	496a      	ldr	r1, [pc, #424]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800615c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006160:	2b01      	cmp	r3, #1
 8006162:	d105      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006164:	4b66      	ldr	r3, [pc, #408]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4a65      	ldr	r2, [pc, #404]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800617c:	4b60      	ldr	r3, [pc, #384]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f023 0203 	bic.w	r2, r3, #3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	495d      	ldr	r1, [pc, #372]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800619a:	4b59      	ldr	r3, [pc, #356]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	4956      	ldr	r1, [pc, #344]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061b8:	4b51      	ldr	r3, [pc, #324]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	494e      	ldr	r1, [pc, #312]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061d6:	4b4a      	ldr	r3, [pc, #296]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f023 0210 	bic.w	r2, r3, #16
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	4947      	ldr	r1, [pc, #284]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80061f4:	4b42      	ldr	r3, [pc, #264]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	493f      	ldr	r1, [pc, #252]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006212:	4b3b      	ldr	r3, [pc, #236]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f023 0220 	bic.w	r2, r3, #32
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	4938      	ldr	r1, [pc, #224]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006230:	4b33      	ldr	r3, [pc, #204]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	4930      	ldr	r1, [pc, #192]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800624e:	4b2c      	ldr	r3, [pc, #176]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	4929      	ldr	r1, [pc, #164]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800626c:	4b24      	ldr	r3, [pc, #144]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	4921      	ldr	r1, [pc, #132]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	491a      	ldr	r1, [pc, #104]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006298:	4313      	orrs	r3, r2
 800629a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80062a8:	4b15      	ldr	r3, [pc, #84]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	4912      	ldr	r1, [pc, #72]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	490b      	ldr	r1, [pc, #44]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	4903      	ldr	r1, [pc, #12]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3748      	adds	r7, #72	; 0x48
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000

08006304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e01d      	b.n	8006352 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fb fc1a 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 fc46 	bl	8006bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <HAL_TIM_Base_Start_IT+0x50>)
 800637c:	4013      	ands	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b06      	cmp	r3, #6
 8006384:	d00b      	beq.n	800639e <HAL_TIM_Base_Start_IT+0x42>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d007      	beq.n	800639e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	00010007 	.word	0x00010007

080063b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e01d      	b.n	80063fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb fba4 	bl	8001b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f000 fbf0 	bl	8006bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2201      	movs	r2, #1
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f001 f965 	bl	80076ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <HAL_TIM_PWM_Start+0x98>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_TIM_PWM_Start+0x4a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <HAL_TIM_PWM_Start+0x9c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_TIM_PWM_Start+0x4a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1b      	ldr	r2, [pc, #108]	; (80064a8 <HAL_TIM_PWM_Start+0xa0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_TIM_PWM_Start+0x4a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1a      	ldr	r2, [pc, #104]	; (80064ac <HAL_TIM_PWM_Start+0xa4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIM_PWM_Start+0x4a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a18      	ldr	r2, [pc, #96]	; (80064b0 <HAL_TIM_PWM_Start+0xa8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d101      	bne.n	8006456 <HAL_TIM_PWM_Start+0x4e>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_TIM_PWM_Start+0x50>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800646a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <HAL_TIM_PWM_Start+0xac>)
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b06      	cmp	r3, #6
 800647c:	d00b      	beq.n	8006496 <HAL_TIM_PWM_Start+0x8e>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006484:	d007      	beq.n	8006496 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40012c00 	.word	0x40012c00
 80064a4:	40013400 	.word	0x40013400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40014400 	.word	0x40014400
 80064b0:	40014800 	.word	0x40014800
 80064b4:	00010007 	.word	0x00010007

080064b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e01d      	b.n	8006506 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f815 	bl	800650e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 fb6c 	bl	8006bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b02      	cmp	r3, #2
 8006536:	d122      	bne.n	800657e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b02      	cmp	r3, #2
 8006544:	d11b      	bne.n	800657e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f06f 0202 	mvn.w	r2, #2
 800654e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fb17 	bl	8006b98 <HAL_TIM_IC_CaptureCallback>
 800656a:	e005      	b.n	8006578 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fb09 	bl	8006b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fb1a 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b04      	cmp	r3, #4
 800658a:	d122      	bne.n	80065d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b04      	cmp	r3, #4
 8006598:	d11b      	bne.n	80065d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f06f 0204 	mvn.w	r2, #4
 80065a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 faed 	bl	8006b98 <HAL_TIM_IC_CaptureCallback>
 80065be:	e005      	b.n	80065cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fadf 	bl	8006b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 faf0 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d122      	bne.n	8006626 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d11b      	bne.n	8006626 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f06f 0208 	mvn.w	r2, #8
 80065f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fac3 	bl	8006b98 <HAL_TIM_IC_CaptureCallback>
 8006612:	e005      	b.n	8006620 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fab5 	bl	8006b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fac6 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d122      	bne.n	800667a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b10      	cmp	r3, #16
 8006640:	d11b      	bne.n	800667a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f06f 0210 	mvn.w	r2, #16
 800664a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2208      	movs	r2, #8
 8006650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa99 	bl	8006b98 <HAL_TIM_IC_CaptureCallback>
 8006666:	e005      	b.n	8006674 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa8b 	bl	8006b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa9c 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d10e      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d107      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f06f 0201 	mvn.w	r2, #1
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fa ff11 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d10e      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	d107      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f969 	bl	80079a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d10e      	bne.n	8006700 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ec:	2b80      	cmp	r3, #128	; 0x80
 80066ee:	d107      	bne.n	8006700 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 f95c 	bl	80079b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d10e      	bne.n	800672c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d107      	bne.n	800672c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa4a 	bl	8006bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b20      	cmp	r3, #32
 8006738:	d10e      	bne.n	8006758 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b20      	cmp	r3, #32
 8006746:	d107      	bne.n	8006758 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0220 	mvn.w	r2, #32
 8006750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f91c 	bl	8007990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006776:	2302      	movs	r3, #2
 8006778:	e08a      	b.n	8006890 <HAL_TIM_IC_ConfigChannel+0x130>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2202      	movs	r2, #2
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11b      	bne.n	80067c8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6819      	ldr	r1, [r3, #0]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f000 fe06 	bl	80073b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 020c 	bic.w	r2, r2, #12
 80067b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6999      	ldr	r1, [r3, #24]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	619a      	str	r2, [r3, #24]
 80067c6:	e05a      	b.n	800687e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d11c      	bne.n	8006808 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f000 fe7e 	bl	80074de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	699a      	ldr	r2, [r3, #24]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6999      	ldr	r1, [r3, #24]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	021a      	lsls	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	619a      	str	r2, [r3, #24]
 8006806:	e03a      	b.n	800687e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b08      	cmp	r3, #8
 800680c:	d11b      	bne.n	8006846 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f000 fecb 	bl	80075b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 020c 	bic.w	r2, r2, #12
 8006830:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69d9      	ldr	r1, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	61da      	str	r2, [r3, #28]
 8006844:	e01b      	b.n	800687e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6819      	ldr	r1, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f000 feeb 	bl	8007630 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006868:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e105      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x226>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b14      	cmp	r3, #20
 80068c6:	f200 80f0 	bhi.w	8006aaa <HAL_TIM_PWM_ConfigChannel+0x212>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006925 	.word	0x08006925
 80068d4:	08006aab 	.word	0x08006aab
 80068d8:	08006aab 	.word	0x08006aab
 80068dc:	08006aab 	.word	0x08006aab
 80068e0:	08006965 	.word	0x08006965
 80068e4:	08006aab 	.word	0x08006aab
 80068e8:	08006aab 	.word	0x08006aab
 80068ec:	08006aab 	.word	0x08006aab
 80068f0:	080069a7 	.word	0x080069a7
 80068f4:	08006aab 	.word	0x08006aab
 80068f8:	08006aab 	.word	0x08006aab
 80068fc:	08006aab 	.word	0x08006aab
 8006900:	080069e7 	.word	0x080069e7
 8006904:	08006aab 	.word	0x08006aab
 8006908:	08006aab 	.word	0x08006aab
 800690c:	08006aab 	.word	0x08006aab
 8006910:	08006a29 	.word	0x08006a29
 8006914:	08006aab 	.word	0x08006aab
 8006918:	08006aab 	.word	0x08006aab
 800691c:	08006aab 	.word	0x08006aab
 8006920:	08006a69 	.word	0x08006a69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f9e2 	bl	8006cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0208 	orr.w	r2, r2, #8
 800693e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0204 	bic.w	r2, r2, #4
 800694e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6999      	ldr	r1, [r3, #24]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	619a      	str	r2, [r3, #24]
      break;
 8006962:	e0a3      	b.n	8006aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fa52 	bl	8006e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800697e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6999      	ldr	r1, [r3, #24]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	021a      	lsls	r2, r3, #8
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	619a      	str	r2, [r3, #24]
      break;
 80069a4:	e082      	b.n	8006aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fabb 	bl	8006f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0208 	orr.w	r2, r2, #8
 80069c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0204 	bic.w	r2, r2, #4
 80069d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69d9      	ldr	r1, [r3, #28]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	61da      	str	r2, [r3, #28]
      break;
 80069e4:	e062      	b.n	8006aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fb23 	bl	8007038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69d9      	ldr	r1, [r3, #28]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	021a      	lsls	r2, r3, #8
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	61da      	str	r2, [r3, #28]
      break;
 8006a26:	e041      	b.n	8006aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb6c 	bl	800710c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0208 	orr.w	r2, r2, #8
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0204 	bic.w	r2, r2, #4
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a66:	e021      	b.n	8006aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fbb0 	bl	80071d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	021a      	lsls	r2, r3, #8
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006aa8:	e000      	b.n	8006aac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006aaa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop

08006ac8 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e031      	b.n	8006b7c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fbb8 	bl	80072a0 <TIM_SlaveTimer_SetConfig>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e018      	b.n	8006b7c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b58:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b68:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a3c      	ldr	r2, [pc, #240]	; (8006cd8 <TIM_Base_SetConfig+0x104>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00f      	beq.n	8006c0c <TIM_Base_SetConfig+0x38>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf2:	d00b      	beq.n	8006c0c <TIM_Base_SetConfig+0x38>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a39      	ldr	r2, [pc, #228]	; (8006cdc <TIM_Base_SetConfig+0x108>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x38>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a38      	ldr	r2, [pc, #224]	; (8006ce0 <TIM_Base_SetConfig+0x10c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x38>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a37      	ldr	r2, [pc, #220]	; (8006ce4 <TIM_Base_SetConfig+0x110>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2d      	ldr	r2, [pc, #180]	; (8006cd8 <TIM_Base_SetConfig+0x104>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01b      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d017      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <TIM_Base_SetConfig+0x108>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <TIM_Base_SetConfig+0x10c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a28      	ldr	r2, [pc, #160]	; (8006ce4 <TIM_Base_SetConfig+0x110>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <TIM_Base_SetConfig+0x114>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a26      	ldr	r2, [pc, #152]	; (8006cec <TIM_Base_SetConfig+0x118>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0x8a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a25      	ldr	r2, [pc, #148]	; (8006cf0 <TIM_Base_SetConfig+0x11c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <TIM_Base_SetConfig+0x104>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00f      	beq.n	8006cbc <TIM_Base_SetConfig+0xe8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a11      	ldr	r2, [pc, #68]	; (8006ce4 <TIM_Base_SetConfig+0x110>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_Base_SetConfig+0xe8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a10      	ldr	r2, [pc, #64]	; (8006ce8 <TIM_Base_SetConfig+0x114>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_Base_SetConfig+0xe8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a0f      	ldr	r2, [pc, #60]	; (8006cec <TIM_Base_SetConfig+0x118>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0xe8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <TIM_Base_SetConfig+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40013400 	.word	0x40013400
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	40014400 	.word	0x40014400
 8006cf0:	40014800 	.word	0x40014800

08006cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f023 0201 	bic.w	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 0302 	bic.w	r3, r3, #2
 8006d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2c      	ldr	r2, [pc, #176]	; (8006e00 <TIM_OC1_SetConfig+0x10c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00f      	beq.n	8006d74 <TIM_OC1_SetConfig+0x80>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a2b      	ldr	r2, [pc, #172]	; (8006e04 <TIM_OC1_SetConfig+0x110>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_OC1_SetConfig+0x80>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a2a      	ldr	r2, [pc, #168]	; (8006e08 <TIM_OC1_SetConfig+0x114>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_OC1_SetConfig+0x80>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a29      	ldr	r2, [pc, #164]	; (8006e0c <TIM_OC1_SetConfig+0x118>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_OC1_SetConfig+0x80>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a28      	ldr	r2, [pc, #160]	; (8006e10 <TIM_OC1_SetConfig+0x11c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10c      	bne.n	8006d8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 0308 	bic.w	r3, r3, #8
 8006d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f023 0304 	bic.w	r3, r3, #4
 8006d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <TIM_OC1_SetConfig+0x10c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_OC1_SetConfig+0xc2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1a      	ldr	r2, [pc, #104]	; (8006e04 <TIM_OC1_SetConfig+0x110>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_OC1_SetConfig+0xc2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <TIM_OC1_SetConfig+0x114>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_OC1_SetConfig+0xc2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <TIM_OC1_SetConfig+0x118>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_OC1_SetConfig+0xc2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <TIM_OC1_SetConfig+0x11c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d111      	bne.n	8006dda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40013400 	.word	0x40013400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800

08006e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f023 0210 	bic.w	r2, r3, #16
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f023 0320 	bic.w	r3, r3, #32
 8006e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a28      	ldr	r2, [pc, #160]	; (8006f14 <TIM_OC2_SetConfig+0x100>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC2_SetConfig+0x6c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a27      	ldr	r2, [pc, #156]	; (8006f18 <TIM_OC2_SetConfig+0x104>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d10d      	bne.n	8006e9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <TIM_OC2_SetConfig+0x100>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00f      	beq.n	8006ec4 <TIM_OC2_SetConfig+0xb0>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <TIM_OC2_SetConfig+0x104>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00b      	beq.n	8006ec4 <TIM_OC2_SetConfig+0xb0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a1b      	ldr	r2, [pc, #108]	; (8006f1c <TIM_OC2_SetConfig+0x108>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d007      	beq.n	8006ec4 <TIM_OC2_SetConfig+0xb0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <TIM_OC2_SetConfig+0x10c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_OC2_SetConfig+0xb0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <TIM_OC2_SetConfig+0x110>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d113      	bne.n	8006eec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ed2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800

08006f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	021b      	lsls	r3, r3, #8
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a27      	ldr	r2, [pc, #156]	; (8007024 <TIM_OC3_SetConfig+0xfc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d003      	beq.n	8006f92 <TIM_OC3_SetConfig+0x6a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a26      	ldr	r2, [pc, #152]	; (8007028 <TIM_OC3_SetConfig+0x100>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10d      	bne.n	8006fae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <TIM_OC3_SetConfig+0xfc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_OC3_SetConfig+0xae>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <TIM_OC3_SetConfig+0x100>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_OC3_SetConfig+0xae>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a1a      	ldr	r2, [pc, #104]	; (800702c <TIM_OC3_SetConfig+0x104>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_OC3_SetConfig+0xae>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a19      	ldr	r2, [pc, #100]	; (8007030 <TIM_OC3_SetConfig+0x108>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_OC3_SetConfig+0xae>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <TIM_OC3_SetConfig+0x10c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d113      	bne.n	8006ffe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	621a      	str	r2, [r3, #32]
}
 8007018:	bf00      	nop
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	031b      	lsls	r3, r3, #12
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <TIM_OC4_SetConfig+0xc0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00f      	beq.n	80070bc <TIM_OC4_SetConfig+0x84>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a17      	ldr	r2, [pc, #92]	; (80070fc <TIM_OC4_SetConfig+0xc4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00b      	beq.n	80070bc <TIM_OC4_SetConfig+0x84>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a16      	ldr	r2, [pc, #88]	; (8007100 <TIM_OC4_SetConfig+0xc8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <TIM_OC4_SetConfig+0x84>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a15      	ldr	r2, [pc, #84]	; (8007104 <TIM_OC4_SetConfig+0xcc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_OC4_SetConfig+0x84>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <TIM_OC4_SetConfig+0xd0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d109      	bne.n	80070d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	019b      	lsls	r3, r3, #6
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800

0800710c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <TIM_OC5_SetConfig+0xb4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_OC5_SetConfig+0x7a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <TIM_OC5_SetConfig+0xb8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_OC5_SetConfig+0x7a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <TIM_OC5_SetConfig+0xbc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_OC5_SetConfig+0x7a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a14      	ldr	r2, [pc, #80]	; (80071cc <TIM_OC5_SetConfig+0xc0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_OC5_SetConfig+0x7a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <TIM_OC5_SetConfig+0xc4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d109      	bne.n	800719a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	621a      	str	r2, [r3, #32]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40013400 	.word	0x40013400
 80071c8:	40014000 	.word	0x40014000
 80071cc:	40014400 	.word	0x40014400
 80071d0:	40014800 	.word	0x40014800

080071d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800721a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	051b      	lsls	r3, r3, #20
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a18      	ldr	r2, [pc, #96]	; (800728c <TIM_OC6_SetConfig+0xb8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00f      	beq.n	8007250 <TIM_OC6_SetConfig+0x7c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <TIM_OC6_SetConfig+0xbc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00b      	beq.n	8007250 <TIM_OC6_SetConfig+0x7c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a16      	ldr	r2, [pc, #88]	; (8007294 <TIM_OC6_SetConfig+0xc0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d007      	beq.n	8007250 <TIM_OC6_SetConfig+0x7c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <TIM_OC6_SetConfig+0xc4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_OC6_SetConfig+0x7c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a14      	ldr	r2, [pc, #80]	; (800729c <TIM_OC6_SetConfig+0xc8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d109      	bne.n	8007264 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007256:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	029b      	lsls	r3, r3, #10
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40012c00 	.word	0x40012c00
 8007290:	40013400 	.word	0x40013400
 8007294:	40014000 	.word	0x40014000
 8007298:	40014400 	.word	0x40014400
 800729c:	40014800 	.word	0x40014800

080072a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ca:	f023 0307 	bic.w	r3, r3, #7
 80072ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d05c      	beq.n	80073a4 <TIM_SlaveTimer_SetConfig+0x104>
 80072ea:	2b30      	cmp	r3, #48	; 0x30
 80072ec:	d806      	bhi.n	80072fc <TIM_SlaveTimer_SetConfig+0x5c>
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d058      	beq.n	80073a4 <TIM_SlaveTimer_SetConfig+0x104>
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d056      	beq.n	80073a4 <TIM_SlaveTimer_SetConfig+0x104>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d054      	beq.n	80073a4 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80072fa:	e054      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80072fc:	2b50      	cmp	r3, #80	; 0x50
 80072fe:	d03d      	beq.n	800737c <TIM_SlaveTimer_SetConfig+0xdc>
 8007300:	2b50      	cmp	r3, #80	; 0x50
 8007302:	d802      	bhi.n	800730a <TIM_SlaveTimer_SetConfig+0x6a>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d010      	beq.n	800732a <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8007308:	e04d      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800730a:	2b60      	cmp	r3, #96	; 0x60
 800730c:	d040      	beq.n	8007390 <TIM_SlaveTimer_SetConfig+0xf0>
 800730e:	2b70      	cmp	r3, #112	; 0x70
 8007310:	d000      	beq.n	8007314 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8007312:	e048      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68d9      	ldr	r1, [r3, #12]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f000 f9c1 	bl	80076aa <TIM_ETR_SetConfig>
      break;
 8007328:	e03d      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b05      	cmp	r3, #5
 8007330:	d101      	bne.n	8007336 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e038      	b.n	80073a8 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800735c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	621a      	str	r2, [r3, #32]
      break;
 800737a:	e014      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	6899      	ldr	r1, [r3, #8]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	461a      	mov	r2, r3
 800738a:	f000 f879 	bl	8007480 <TIM_TI1_ConfigInputStage>
      break;
 800738e:	e00a      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	6899      	ldr	r1, [r3, #8]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	461a      	mov	r2, r3
 800739e:	f000 f8db 	bl	8007558 <TIM_TI2_ConfigInputStage>
      break;
 80073a2:	e000      	b.n	80073a6 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 80073a4:	bf00      	nop
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	f023 0201 	bic.w	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4a24      	ldr	r2, [pc, #144]	; (800746c <TIM_TI1_SetConfig+0xbc>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <TIM_TI1_SetConfig+0x56>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e4:	d00f      	beq.n	8007406 <TIM_TI1_SetConfig+0x56>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4a21      	ldr	r2, [pc, #132]	; (8007470 <TIM_TI1_SetConfig+0xc0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00b      	beq.n	8007406 <TIM_TI1_SetConfig+0x56>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a20      	ldr	r2, [pc, #128]	; (8007474 <TIM_TI1_SetConfig+0xc4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d007      	beq.n	8007406 <TIM_TI1_SetConfig+0x56>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a1f      	ldr	r2, [pc, #124]	; (8007478 <TIM_TI1_SetConfig+0xc8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_TI1_SetConfig+0x56>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a1e      	ldr	r2, [pc, #120]	; (800747c <TIM_TI1_SetConfig+0xcc>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <TIM_TI1_SetConfig+0x5a>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <TIM_TI1_SetConfig+0x5c>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	e003      	b.n	800742a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	b2db      	uxtb	r3, r3
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f023 030a 	bic.w	r3, r3, #10
 8007444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f003 030a 	and.w	r3, r3, #10
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	621a      	str	r2, [r3, #32]
}
 800745e:	bf00      	nop
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800
 8007478:	40013400 	.word	0x40013400
 800747c:	40014000 	.word	0x40014000

08007480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 030a 	bic.w	r3, r3, #10
 80074bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f023 0210 	bic.w	r2, r3, #16
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800751c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	b29b      	uxth	r3, r3
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007530:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	621a      	str	r2, [r3, #32]
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f023 0210 	bic.w	r2, r3, #16
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	031b      	lsls	r3, r3, #12
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007594:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	621a      	str	r2, [r3, #32]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007608:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800766e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	031b      	lsls	r3, r3, #12
 8007674:	b29b      	uxth	r3, r3
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007682:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	031b      	lsls	r3, r3, #12
 8007688:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b087      	sub	sp, #28
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	021a      	lsls	r2, r3, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	609a      	str	r2, [r3, #8]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b087      	sub	sp, #28
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	2201      	movs	r2, #1
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	43db      	mvns	r3, r3
 800770c:	401a      	ands	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	fa01 f303 	lsl.w	r3, r1, r3
 8007722:	431a      	orrs	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2204      	movs	r2, #4
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f940 	bl	80079cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800775a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <HAL_TIMEx_PWMN_Start+0x5c>)
 8007764:	4013      	ands	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b06      	cmp	r3, #6
 800776c:	d00b      	beq.n	8007786 <HAL_TIMEx_PWMN_Start+0x52>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007774:	d007      	beq.n	8007786 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0201 	orr.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	00010007 	.word	0x00010007

08007794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e063      	b.n	8007874 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2b      	ldr	r2, [pc, #172]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2a      	ldr	r2, [pc, #168]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d108      	bne.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d018      	beq.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781e:	d013      	beq.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a18      	ldr	r2, [pc, #96]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00e      	beq.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a17      	ldr	r2, [pc, #92]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d009      	beq.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a12      	ldr	r2, [pc, #72]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d004      	beq.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a13      	ldr	r2, [pc, #76]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d10c      	bne.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800784e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	4313      	orrs	r3, r2
 8007858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	40012c00 	.word	0x40012c00
 8007884:	40013400 	.word	0x40013400
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40014000 	.word	0x40014000

08007894 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e065      	b.n	800797c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a16      	ldr	r2, [pc, #88]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d004      	beq.n	800793e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a14      	ldr	r2, [pc, #80]	; (800798c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d115      	bne.n	800796a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	051b      	lsls	r3, r3, #20
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40013400 	.word	0x40013400

08007990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	2204      	movs	r2, #4
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	401a      	ands	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a1a      	ldr	r2, [r3, #32]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e040      	b.n	8007aaa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d106      	bne.n	8007a3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fa f977 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2224      	movs	r2, #36	; 0x24
 8007a42:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0201 	bic.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f82d 	bl	8007ab4 <UART_SetConfig>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e022      	b.n	8007aaa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fa3b 	bl	8007ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0201 	orr.w	r2, r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fac2 	bl	800802c <UART_CheckIdleState>
 8007aa8:	4603      	mov	r3, r0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ae6:	f023 030c 	bic.w	r3, r3, #12
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	6939      	ldr	r1, [r7, #16]
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4aa9      	ldr	r2, [pc, #676]	; (8007dd8 <UART_SetConfig+0x324>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d121      	bne.n	8007b7c <UART_SetConfig+0xc8>
 8007b38:	4ba8      	ldr	r3, [pc, #672]	; (8007ddc <UART_SetConfig+0x328>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d817      	bhi.n	8007b74 <UART_SetConfig+0xc0>
 8007b44:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <UART_SetConfig+0x98>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b5d 	.word	0x08007b5d
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b6f 	.word	0x08007b6f
 8007b58:	08007b63 	.word	0x08007b63
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	77fb      	strb	r3, [r7, #31]
 8007b60:	e0b2      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007b62:	2302      	movs	r3, #2
 8007b64:	77fb      	strb	r3, [r7, #31]
 8007b66:	e0af      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e0ac      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007b6e:	2308      	movs	r3, #8
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e0a9      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007b74:	2310      	movs	r3, #16
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	bf00      	nop
 8007b7a:	e0a5      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a97      	ldr	r2, [pc, #604]	; (8007de0 <UART_SetConfig+0x32c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d123      	bne.n	8007bce <UART_SetConfig+0x11a>
 8007b86:	4b95      	ldr	r3, [pc, #596]	; (8007ddc <UART_SetConfig+0x328>)
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d012      	beq.n	8007bba <UART_SetConfig+0x106>
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b98:	d802      	bhi.n	8007ba0 <UART_SetConfig+0xec>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d007      	beq.n	8007bae <UART_SetConfig+0xfa>
 8007b9e:	e012      	b.n	8007bc6 <UART_SetConfig+0x112>
 8007ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba4:	d00c      	beq.n	8007bc0 <UART_SetConfig+0x10c>
 8007ba6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007baa:	d003      	beq.n	8007bb4 <UART_SetConfig+0x100>
 8007bac:	e00b      	b.n	8007bc6 <UART_SetConfig+0x112>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e089      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e086      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007bba:	2304      	movs	r3, #4
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e083      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e080      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007bc6:	2310      	movs	r3, #16
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	bf00      	nop
 8007bcc:	e07c      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a84      	ldr	r2, [pc, #528]	; (8007de4 <UART_SetConfig+0x330>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d123      	bne.n	8007c20 <UART_SetConfig+0x16c>
 8007bd8:	4b80      	ldr	r3, [pc, #512]	; (8007ddc <UART_SetConfig+0x328>)
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be4:	d012      	beq.n	8007c0c <UART_SetConfig+0x158>
 8007be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bea:	d802      	bhi.n	8007bf2 <UART_SetConfig+0x13e>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <UART_SetConfig+0x14c>
 8007bf0:	e012      	b.n	8007c18 <UART_SetConfig+0x164>
 8007bf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bf6:	d00c      	beq.n	8007c12 <UART_SetConfig+0x15e>
 8007bf8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007bfc:	d003      	beq.n	8007c06 <UART_SetConfig+0x152>
 8007bfe:	e00b      	b.n	8007c18 <UART_SetConfig+0x164>
 8007c00:	2300      	movs	r3, #0
 8007c02:	77fb      	strb	r3, [r7, #31]
 8007c04:	e060      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c06:	2302      	movs	r3, #2
 8007c08:	77fb      	strb	r3, [r7, #31]
 8007c0a:	e05d      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e05a      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c12:	2308      	movs	r3, #8
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e057      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	bf00      	nop
 8007c1e:	e053      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a70      	ldr	r2, [pc, #448]	; (8007de8 <UART_SetConfig+0x334>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d123      	bne.n	8007c72 <UART_SetConfig+0x1be>
 8007c2a:	4b6c      	ldr	r3, [pc, #432]	; (8007ddc <UART_SetConfig+0x328>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c36:	d012      	beq.n	8007c5e <UART_SetConfig+0x1aa>
 8007c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c3c:	d802      	bhi.n	8007c44 <UART_SetConfig+0x190>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <UART_SetConfig+0x19e>
 8007c42:	e012      	b.n	8007c6a <UART_SetConfig+0x1b6>
 8007c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c48:	d00c      	beq.n	8007c64 <UART_SetConfig+0x1b0>
 8007c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c4e:	d003      	beq.n	8007c58 <UART_SetConfig+0x1a4>
 8007c50:	e00b      	b.n	8007c6a <UART_SetConfig+0x1b6>
 8007c52:	2300      	movs	r3, #0
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e037      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e034      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c5e:	2304      	movs	r3, #4
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e031      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c64:	2308      	movs	r3, #8
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	e02e      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	77fb      	strb	r3, [r7, #31]
 8007c6e:	bf00      	nop
 8007c70:	e02a      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a5d      	ldr	r2, [pc, #372]	; (8007dec <UART_SetConfig+0x338>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d123      	bne.n	8007cc4 <UART_SetConfig+0x210>
 8007c7c:	4b57      	ldr	r3, [pc, #348]	; (8007ddc <UART_SetConfig+0x328>)
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c88:	d012      	beq.n	8007cb0 <UART_SetConfig+0x1fc>
 8007c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c8e:	d802      	bhi.n	8007c96 <UART_SetConfig+0x1e2>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d007      	beq.n	8007ca4 <UART_SetConfig+0x1f0>
 8007c94:	e012      	b.n	8007cbc <UART_SetConfig+0x208>
 8007c96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c9a:	d00c      	beq.n	8007cb6 <UART_SetConfig+0x202>
 8007c9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ca0:	d003      	beq.n	8007caa <UART_SetConfig+0x1f6>
 8007ca2:	e00b      	b.n	8007cbc <UART_SetConfig+0x208>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e00e      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007caa:	2302      	movs	r3, #2
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	e00b      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e008      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e005      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	bf00      	nop
 8007cc2:	e001      	b.n	8007cc8 <UART_SetConfig+0x214>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd0:	f040 808e 	bne.w	8007df0 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8007cd4:	7ffb      	ldrb	r3, [r7, #31]
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d85e      	bhi.n	8007d98 <UART_SetConfig+0x2e4>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <UART_SetConfig+0x22c>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d45 	.word	0x08007d45
 8007cec:	08007d99 	.word	0x08007d99
 8007cf0:	08007d61 	.word	0x08007d61
 8007cf4:	08007d99 	.word	0x08007d99
 8007cf8:	08007d99 	.word	0x08007d99
 8007cfc:	08007d99 	.word	0x08007d99
 8007d00:	08007d81 	.word	0x08007d81
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d04:	f7fe f8d8 	bl	8005eb8 <HAL_RCC_GetPCLK1Freq>
 8007d08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	005a      	lsls	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	441a      	add	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	61bb      	str	r3, [r7, #24]
        break;
 8007d22:	e03c      	b.n	8007d9e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d24:	f7fe f8ea 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8007d28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	005a      	lsls	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	441a      	add	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	61bb      	str	r3, [r7, #24]
        break;
 8007d42:	e02c      	b.n	8007d9e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	085b      	lsrs	r3, r3, #1
 8007d4a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007d4e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6852      	ldr	r2, [r2, #4]
 8007d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	61bb      	str	r3, [r7, #24]
        break;
 8007d5e:	e01e      	b.n	8007d9e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d60:	f7fe f834 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8007d64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	005a      	lsls	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	61bb      	str	r3, [r7, #24]
        break;
 8007d7e:	e00e      	b.n	8007d9e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	61bb      	str	r3, [r7, #24]
        break;
 8007d96:	e002      	b.n	8007d9e <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d916      	bls.n	8007dd2 <UART_SetConfig+0x31e>
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007daa:	d212      	bcs.n	8007dd2 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f023 030f 	bic.w	r3, r3, #15
 8007db4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	897b      	ldrh	r3, [r7, #10]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	897a      	ldrh	r2, [r7, #10]
 8007dce:	60da      	str	r2, [r3, #12]
 8007dd0:	e07e      	b.n	8007ed0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
 8007dd6:	e07b      	b.n	8007ed0 <UART_SetConfig+0x41c>
 8007dd8:	40013800 	.word	0x40013800
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	40004400 	.word	0x40004400
 8007de4:	40004800 	.word	0x40004800
 8007de8:	40004c00 	.word	0x40004c00
 8007dec:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8007df0:	7ffb      	ldrb	r3, [r7, #31]
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d85b      	bhi.n	8007eae <UART_SetConfig+0x3fa>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0x348>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e3f 	.word	0x08007e3f
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007eaf 	.word	0x08007eaf
 8007e0c:	08007e79 	.word	0x08007e79
 8007e10:	08007eaf 	.word	0x08007eaf
 8007e14:	08007eaf 	.word	0x08007eaf
 8007e18:	08007eaf 	.word	0x08007eaf
 8007e1c:	08007e97 	.word	0x08007e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e20:	f7fe f84a 	bl	8005eb8 <HAL_RCC_GetPCLK1Freq>
 8007e24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	085a      	lsrs	r2, r3, #1
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	441a      	add	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	61bb      	str	r3, [r7, #24]
        break;
 8007e3c:	e03a      	b.n	8007eb4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e3e:	f7fe f85d 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8007e42:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	085a      	lsrs	r2, r3, #1
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	441a      	add	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	61bb      	str	r3, [r7, #24]
        break;
 8007e5a:	e02b      	b.n	8007eb4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	085b      	lsrs	r3, r3, #1
 8007e62:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8007e66:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6852      	ldr	r2, [r2, #4]
 8007e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	61bb      	str	r3, [r7, #24]
        break;
 8007e76:	e01d      	b.n	8007eb4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e78:	f7fd ffa8 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8007e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	085a      	lsrs	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	441a      	add	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	61bb      	str	r3, [r7, #24]
        break;
 8007e94:	e00e      	b.n	8007eb4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	61bb      	str	r3, [r7, #24]
        break;
 8007eac:	e002      	b.n	8007eb4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
        break;
 8007eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d908      	bls.n	8007ecc <UART_SetConfig+0x418>
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec0:	d204      	bcs.n	8007ecc <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	60da      	str	r2, [r3, #12]
 8007eca:	e001      	b.n	8007ed0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop

08007ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01a      	beq.n	8007ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe6:	d10a      	bne.n	8007ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af02      	add	r7, sp, #8
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800803a:	f7fa f85d 	bl	80020f8 <HAL_GetTick>
 800803e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b08      	cmp	r3, #8
 800804c:	d10e      	bne.n	800806c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f82a 	bl	80080b6 <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e020      	b.n	80080ae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b04      	cmp	r3, #4
 8008078:	d10e      	bne.n	8008098 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800807a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f814 	bl	80080b6 <UART_WaitOnFlagUntilTimeout>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e00a      	b.n	80080ae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c6:	e05d      	b.n	8008184 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ce:	d059      	beq.n	8008184 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d0:	f7fa f812 	bl	80020f8 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d302      	bcc.n	80080e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d11b      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0201 	bic.w	r2, r2, #1
 8008104:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2220      	movs	r2, #32
 800810a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2220      	movs	r2, #32
 8008110:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e042      	b.n	80081a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d02b      	beq.n	8008184 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800813a:	d123      	bne.n	8008184 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008144:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008154:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2220      	movs	r2, #32
 800816a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e00f      	b.n	80081a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69da      	ldr	r2, [r3, #28]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4013      	ands	r3, r2
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	429a      	cmp	r2, r3
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d092      	beq.n	80080c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081ac:	b490      	push	{r4, r7}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d0:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	78db      	ldrb	r3, [r3, #3]
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d819      	bhi.n	800820e <USB_ActivateEndpoint+0x62>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <USB_ActivateEndpoint+0x34>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	08008205 	.word	0x08008205
 80081e8:	08008215 	.word	0x08008215
 80081ec:	080081fb 	.word	0x080081fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081f0:	8abb      	ldrh	r3, [r7, #20]
 80081f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081f6:	82bb      	strh	r3, [r7, #20]
      break;
 80081f8:	e00d      	b.n	8008216 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081fa:	8abb      	ldrh	r3, [r7, #20]
 80081fc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008200:	82bb      	strh	r3, [r7, #20]
      break;
 8008202:	e008      	b.n	8008216 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008204:	8abb      	ldrh	r3, [r7, #20]
 8008206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800820a:	82bb      	strh	r3, [r7, #20]
      break;
 800820c:	e003      	b.n	8008216 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
      break;
 8008212:	e000      	b.n	8008216 <USB_ActivateEndpoint+0x6a>
      break;
 8008214:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	441a      	add	r2, r3
 8008220:	8abb      	ldrh	r3, [r7, #20]
 8008222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	b29b      	uxth	r3, r3
 8008234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	b21b      	sxth	r3, r3
 8008246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	b21a      	sxth	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	b21b      	sxth	r3, r3
 8008256:	4313      	orrs	r3, r2
 8008258:	b21b      	sxth	r3, r3
 800825a:	b29c      	uxth	r4, r3
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	441a      	add	r2, r3
 8008266:	4b8c      	ldr	r3, [pc, #560]	; (8008498 <USB_ActivateEndpoint+0x2ec>)
 8008268:	4323      	orrs	r3, r4
 800826a:	b29b      	uxth	r3, r3
 800826c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	7b1b      	ldrb	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 8116 	bne.w	80084a4 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d067      	beq.n	8008350 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008280:	687c      	ldr	r4, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008288:	b29b      	uxth	r3, r3
 800828a:	441c      	add	r4, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	4423      	add	r3, r4
 8008294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008298:	461c      	mov	r4, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88db      	ldrh	r3, [r3, #6]
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29c      	uxth	r4, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d014      	beq.n	80082ea <USB_ActivateEndpoint+0x13e>
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	b29c      	uxth	r4, r3
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	4b6e      	ldr	r3, [pc, #440]	; (800849c <USB_ActivateEndpoint+0x2f0>)
 80082e4:	4323      	orrs	r3, r4
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	78db      	ldrb	r3, [r3, #3]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d018      	beq.n	8008324 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008308:	b29c      	uxth	r4, r3
 800830a:	f084 0320 	eor.w	r3, r4, #32
 800830e:	b29c      	uxth	r4, r3
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	4b5f      	ldr	r3, [pc, #380]	; (8008498 <USB_ActivateEndpoint+0x2ec>)
 800831c:	4323      	orrs	r3, r4
 800831e:	b29b      	uxth	r3, r3
 8008320:	8013      	strh	r3, [r2, #0]
 8008322:	e22f      	b.n	8008784 <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800833a:	b29c      	uxth	r4, r3
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	441a      	add	r2, r3
 8008346:	4b54      	ldr	r3, [pc, #336]	; (8008498 <USB_ActivateEndpoint+0x2ec>)
 8008348:	4323      	orrs	r3, r4
 800834a:	b29b      	uxth	r3, r3
 800834c:	8013      	strh	r3, [r2, #0]
 800834e:	e219      	b.n	8008784 <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008350:	687c      	ldr	r4, [r7, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008358:	b29b      	uxth	r3, r3
 800835a:	441c      	add	r4, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	4423      	add	r3, r4
 8008364:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008368:	461c      	mov	r4, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	88db      	ldrh	r3, [r3, #6]
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	b29b      	uxth	r3, r3
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	b29b      	uxth	r3, r3
 8008376:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008378:	687c      	ldr	r4, [r7, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008380:	b29b      	uxth	r3, r3
 8008382:	441c      	add	r4, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	4423      	add	r3, r4
 800838c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d110      	bne.n	80083bc <USB_ActivateEndpoint+0x210>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e02f      	b.n	800841c <USB_ActivateEndpoint+0x270>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b3e      	cmp	r3, #62	; 0x3e
 80083c2:	d813      	bhi.n	80083ec <USB_ActivateEndpoint+0x240>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	613b      	str	r3, [r7, #16]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <USB_ActivateEndpoint+0x232>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	613b      	str	r3, [r7, #16]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e017      	b.n	800841c <USB_ActivateEndpoint+0x270>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <USB_ActivateEndpoint+0x25a>
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3b01      	subs	r3, #1
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	b29b      	uxth	r3, r3
 800840a:	029b      	lsls	r3, r3, #10
 800840c:	b29b      	uxth	r3, r3
 800840e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29c      	uxth	r4, r3
 800842a:	4623      	mov	r3, r4
 800842c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d014      	beq.n	800845e <USB_ActivateEndpoint+0x2b2>
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	b29c      	uxth	r4, r3
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <USB_ActivateEndpoint+0x2f4>)
 8008458:	4323      	orrs	r3, r4
 800845a:	b29b      	uxth	r3, r3
 800845c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008474:	b29c      	uxth	r4, r3
 8008476:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800847a:	b29c      	uxth	r4, r3
 800847c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008480:	b29c      	uxth	r4, r3
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	441a      	add	r2, r3
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <USB_ActivateEndpoint+0x2ec>)
 800848e:	4323      	orrs	r3, r4
 8008490:	b29b      	uxth	r3, r3
 8008492:	8013      	strh	r3, [r2, #0]
 8008494:	e176      	b.n	8008784 <USB_ActivateEndpoint+0x5d8>
 8008496:	bf00      	nop
 8008498:	ffff8080 	.word	0xffff8080
 800849c:	ffff80c0 	.word	0xffff80c0
 80084a0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	b29c      	uxth	r4, r3
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	441a      	add	r2, r3
 80084c6:	4b96      	ldr	r3, [pc, #600]	; (8008720 <USB_ActivateEndpoint+0x574>)
 80084c8:	4323      	orrs	r3, r4
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80084ce:	687c      	ldr	r4, [r7, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	441c      	add	r4, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	4423      	add	r3, r4
 80084e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e6:	461c      	mov	r4, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	891b      	ldrh	r3, [r3, #8]
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8023      	strh	r3, [r4, #0]
 80084f6:	687c      	ldr	r4, [r7, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fe:	b29b      	uxth	r3, r3
 8008500:	441c      	add	r4, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	4423      	add	r3, r4
 800850a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800850e:	461c      	mov	r4, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	895b      	ldrh	r3, [r3, #10]
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	b29b      	uxth	r3, r3
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	b29b      	uxth	r3, r3
 800851c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 8088 	bne.w	8008638 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29c      	uxth	r4, r3
 8008536:	4623      	mov	r3, r4
 8008538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d014      	beq.n	800856a <USB_ActivateEndpoint+0x3be>
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	b29c      	uxth	r4, r3
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	4b70      	ldr	r3, [pc, #448]	; (8008724 <USB_ActivateEndpoint+0x578>)
 8008564:	4323      	orrs	r3, r4
 8008566:	b29b      	uxth	r3, r3
 8008568:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29c      	uxth	r4, r3
 8008578:	4623      	mov	r3, r4
 800857a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d014      	beq.n	80085ac <USB_ActivateEndpoint+0x400>
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	b29b      	uxth	r3, r3
 8008590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008598:	b29c      	uxth	r4, r3
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	441a      	add	r2, r3
 80085a4:	4b60      	ldr	r3, [pc, #384]	; (8008728 <USB_ActivateEndpoint+0x57c>)
 80085a6:	4323      	orrs	r3, r4
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c2:	b29c      	uxth	r4, r3
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	441a      	add	r2, r3
 80085ce:	4b56      	ldr	r3, [pc, #344]	; (8008728 <USB_ActivateEndpoint+0x57c>)
 80085d0:	4323      	orrs	r3, r4
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ec:	b29c      	uxth	r4, r3
 80085ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80085f2:	b29c      	uxth	r4, r3
 80085f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80085f8:	b29c      	uxth	r4, r3
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	441a      	add	r2, r3
 8008604:	4b49      	ldr	r3, [pc, #292]	; (800872c <USB_ActivateEndpoint+0x580>)
 8008606:	4323      	orrs	r3, r4
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b29b      	uxth	r3, r3
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008622:	b29c      	uxth	r4, r3
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	441a      	add	r2, r3
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <USB_ActivateEndpoint+0x580>)
 8008630:	4323      	orrs	r3, r4
 8008632:	b29b      	uxth	r3, r3
 8008634:	8013      	strh	r3, [r2, #0]
 8008636:	e0a5      	b.n	8008784 <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29c      	uxth	r4, r3
 8008646:	4623      	mov	r3, r4
 8008648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d014      	beq.n	800867a <USB_ActivateEndpoint+0x4ce>
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008666:	b29c      	uxth	r4, r3
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	441a      	add	r2, r3
 8008672:	4b2c      	ldr	r3, [pc, #176]	; (8008724 <USB_ActivateEndpoint+0x578>)
 8008674:	4323      	orrs	r3, r4
 8008676:	b29b      	uxth	r3, r3
 8008678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29c      	uxth	r4, r3
 8008688:	4623      	mov	r3, r4
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d014      	beq.n	80086bc <USB_ActivateEndpoint+0x510>
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a8:	b29c      	uxth	r4, r3
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	441a      	add	r2, r3
 80086b4:	4b1c      	ldr	r3, [pc, #112]	; (8008728 <USB_ActivateEndpoint+0x57c>)
 80086b6:	4323      	orrs	r3, r4
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d2:	b29c      	uxth	r4, r3
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	441a      	add	r2, r3
 80086de:	4b11      	ldr	r3, [pc, #68]	; (8008724 <USB_ActivateEndpoint+0x578>)
 80086e0:	4323      	orrs	r3, r4
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	78db      	ldrb	r3, [r3, #3]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d020      	beq.n	8008730 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008704:	b29c      	uxth	r4, r3
 8008706:	f084 0320 	eor.w	r3, r4, #32
 800870a:	b29c      	uxth	r4, r3
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <USB_ActivateEndpoint+0x580>)
 8008718:	4323      	orrs	r3, r4
 800871a:	b29b      	uxth	r3, r3
 800871c:	8013      	strh	r3, [r2, #0]
 800871e:	e01c      	b.n	800875a <USB_ActivateEndpoint+0x5ae>
 8008720:	ffff8180 	.word	0xffff8180
 8008724:	ffffc080 	.word	0xffffc080
 8008728:	ffff80c0 	.word	0xffff80c0
 800872c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	b29c      	uxth	r4, r3
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	441a      	add	r2, r3
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <USB_ActivateEndpoint+0x5e4>)
 8008754:	4323      	orrs	r3, r4
 8008756:	b29b      	uxth	r3, r3
 8008758:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800876c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008770:	b29c      	uxth	r4, r3
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	441a      	add	r2, r3
 800877c:	4b04      	ldr	r3, [pc, #16]	; (8008790 <USB_ActivateEndpoint+0x5e4>)
 800877e:	4323      	orrs	r3, r4
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bc90      	pop	{r4, r7}
 800878e:	4770      	bx	lr
 8008790:	ffff8080 	.word	0xffff8080

08008794 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b095      	sub	sp, #84	; 0x54
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	f040 816d 	bne.w	8008a82 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d909      	bls.n	80087c8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c0:	1ad2      	subs	r2, r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	619a      	str	r2, [r3, #24]
 80087c6:	e005      	b.n	80087d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2200      	movs	r2, #0
 80087d2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	7b1b      	ldrb	r3, [r3, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11a      	bne.n	8008812 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6959      	ldr	r1, [r3, #20]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	88da      	ldrh	r2, [r3, #6]
 80087e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fbab 	bl	8008f44 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087ee:	687c      	ldr	r4, [r7, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	441c      	add	r4, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4423      	add	r3, r4
 8008802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880a:	b29a      	uxth	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e11b      	b.n	8008a4a <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d06a      	beq.n	80088fe <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008828:	687c      	ldr	r4, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d14c      	bne.n	80088cc <USB_EPStartXfer+0x138>
 8008832:	687c      	ldr	r4, [r7, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800883a:	b29b      	uxth	r3, r3
 800883c:	441c      	add	r4, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	4423      	add	r3, r4
 8008846:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884e:	2b00      	cmp	r3, #0
 8008850:	d110      	bne.n	8008874 <USB_EPStartXfer+0xe0>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800885a:	b29a      	uxth	r2, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886c:	b29a      	uxth	r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	801a      	strh	r2, [r3, #0]
 8008872:	e03f      	b.n	80088f4 <USB_EPStartXfer+0x160>
 8008874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008876:	2b3e      	cmp	r3, #62	; 0x3e
 8008878:	d811      	bhi.n	800889e <USB_EPStartXfer+0x10a>
 800887a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887c:	085b      	lsrs	r3, r3, #1
 800887e:	647b      	str	r3, [r7, #68]	; 0x44
 8008880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <USB_EPStartXfer+0xfc>
 800888a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888c:	3301      	adds	r3, #1
 800888e:	647b      	str	r3, [r7, #68]	; 0x44
 8008890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008892:	b29b      	uxth	r3, r3
 8008894:	029b      	lsls	r3, r3, #10
 8008896:	b29a      	uxth	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e02a      	b.n	80088f4 <USB_EPStartXfer+0x160>
 800889e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	647b      	str	r3, [r7, #68]	; 0x44
 80088a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <USB_EPStartXfer+0x120>
 80088ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b0:	3b01      	subs	r3, #1
 80088b2:	647b      	str	r3, [r7, #68]	; 0x44
 80088b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	029b      	lsls	r3, r3, #10
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	801a      	strh	r2, [r3, #0]
 80088ca:	e013      	b.n	80088f4 <USB_EPStartXfer+0x160>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d10f      	bne.n	80088f4 <USB_EPStartXfer+0x160>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088da:	b29b      	uxth	r3, r3
 80088dc:	441c      	add	r4, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	4423      	add	r3, r4
 80088e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	895b      	ldrh	r3, [r3, #10]
 80088f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80088fc:	e069      	b.n	80089d2 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d14c      	bne.n	80089a0 <USB_EPStartXfer+0x20c>
 8008906:	687c      	ldr	r4, [r7, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890e:	b29b      	uxth	r3, r3
 8008910:	441c      	add	r4, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	4423      	add	r3, r4
 800891a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008922:	2b00      	cmp	r3, #0
 8008924:	d110      	bne.n	8008948 <USB_EPStartXfer+0x1b4>
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800892e:	b29a      	uxth	r2, r3
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008940:	b29a      	uxth	r2, r3
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e040      	b.n	80089ca <USB_EPStartXfer+0x236>
 8008948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800894a:	2b3e      	cmp	r3, #62	; 0x3e
 800894c:	d811      	bhi.n	8008972 <USB_EPStartXfer+0x1de>
 800894e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	643b      	str	r3, [r7, #64]	; 0x40
 8008954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <USB_EPStartXfer+0x1d0>
 800895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008960:	3301      	adds	r3, #1
 8008962:	643b      	str	r3, [r7, #64]	; 0x40
 8008964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008966:	b29b      	uxth	r3, r3
 8008968:	029b      	lsls	r3, r3, #10
 800896a:	b29a      	uxth	r2, r3
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	801a      	strh	r2, [r3, #0]
 8008970:	e02b      	b.n	80089ca <USB_EPStartXfer+0x236>
 8008972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008974:	095b      	lsrs	r3, r3, #5
 8008976:	643b      	str	r3, [r7, #64]	; 0x40
 8008978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <USB_EPStartXfer+0x1f4>
 8008982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008984:	3b01      	subs	r3, #1
 8008986:	643b      	str	r3, [r7, #64]	; 0x40
 8008988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898a:	b29b      	uxth	r3, r3
 800898c:	029b      	lsls	r3, r3, #10
 800898e:	b29b      	uxth	r3, r3
 8008990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008998:	b29a      	uxth	r2, r3
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	e014      	b.n	80089ca <USB_EPStartXfer+0x236>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d110      	bne.n	80089ca <USB_EPStartXfer+0x236>
 80089a8:	687c      	ldr	r4, [r7, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	441c      	add	r4, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	4423      	add	r3, r4
 80089bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	891b      	ldrh	r3, [r3, #8]
 80089ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6959      	ldr	r1, [r3, #20]
 80089d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fab0 	bl	8008f44 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d115      	bne.n	8008a18 <USB_EPStartXfer+0x284>
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	b29c      	uxth	r4, r3
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	441a      	add	r2, r3
 8008a0e:	4b96      	ldr	r3, [pc, #600]	; (8008c68 <USB_EPStartXfer+0x4d4>)
 8008a10:	4323      	orrs	r3, r4
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	8013      	strh	r3, [r2, #0]
 8008a16:	e018      	b.n	8008a4a <USB_EPStartXfer+0x2b6>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d114      	bne.n	8008a4a <USB_EPStartXfer+0x2b6>
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	b29c      	uxth	r4, r3
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	441a      	add	r2, r3
 8008a42:	4b8a      	ldr	r3, [pc, #552]	; (8008c6c <USB_EPStartXfer+0x4d8>)
 8008a44:	4323      	orrs	r3, r4
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a60:	b29c      	uxth	r4, r3
 8008a62:	f084 0310 	eor.w	r3, r4, #16
 8008a66:	b29c      	uxth	r4, r3
 8008a68:	f084 0320 	eor.w	r3, r4, #32
 8008a6c:	b29c      	uxth	r4, r3
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	4b7d      	ldr	r3, [pc, #500]	; (8008c70 <USB_EPStartXfer+0x4dc>)
 8008a7a:	4323      	orrs	r3, r4
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]
 8008a80:	e153      	b.n	8008d2a <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d909      	bls.n	8008aa2 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	699a      	ldr	r2, [r3, #24]
 8008a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9a:	1ad2      	subs	r2, r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	619a      	str	r2, [r3, #24]
 8008aa0:	e005      	b.n	8008aae <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	7b1b      	ldrb	r3, [r3, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d14c      	bne.n	8008b50 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ab6:	687c      	ldr	r4, [r7, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	441c      	add	r4, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	4423      	add	r3, r4
 8008aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ace:	623b      	str	r3, [r7, #32]
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d110      	bne.n	8008af8 <USB_EPStartXfer+0x364>
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	801a      	strh	r2, [r3, #0]
 8008af6:	e0fd      	b.n	8008cf4 <USB_EPStartXfer+0x560>
 8008af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afa:	2b3e      	cmp	r3, #62	; 0x3e
 8008afc:	d811      	bhi.n	8008b22 <USB_EPStartXfer+0x38e>
 8008afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <USB_EPStartXfer+0x380>
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	3301      	adds	r3, #1
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	029b      	lsls	r3, r3, #10
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	801a      	strh	r2, [r3, #0]
 8008b20:	e0e8      	b.n	8008cf4 <USB_EPStartXfer+0x560>
 8008b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <USB_EPStartXfer+0x3a4>
 8008b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b34:	3b01      	subs	r3, #1
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	029b      	lsls	r3, r3, #10
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	801a      	strh	r2, [r3, #0]
 8008b4e:	e0d1      	b.n	8008cf4 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d14c      	bne.n	8008bf2 <USB_EPStartXfer+0x45e>
 8008b58:	687c      	ldr	r4, [r7, #4]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	441c      	add	r4, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	011b      	lsls	r3, r3, #4
 8008b6a:	4423      	add	r3, r4
 8008b6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d110      	bne.n	8008b9a <USB_EPStartXfer+0x406>
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	801a      	strh	r2, [r3, #0]
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	e040      	b.n	8008c1c <USB_EPStartXfer+0x488>
 8008b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8008b9e:	d811      	bhi.n	8008bc4 <USB_EPStartXfer+0x430>
 8008ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba2:	085b      	lsrs	r3, r3, #1
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <USB_EPStartXfer+0x422>
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	029b      	lsls	r3, r3, #10
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e02b      	b.n	8008c1c <USB_EPStartXfer+0x488>
 8008bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bcc:	f003 031f 	and.w	r3, r3, #31
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <USB_EPStartXfer+0x446>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	029b      	lsls	r3, r3, #10
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	801a      	strh	r2, [r3, #0]
 8008bf0:	e014      	b.n	8008c1c <USB_EPStartXfer+0x488>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d110      	bne.n	8008c1c <USB_EPStartXfer+0x488>
 8008bfa:	687c      	ldr	r4, [r7, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	441c      	add	r4, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	4423      	add	r3, r4
 8008c0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c12:	633b      	str	r3, [r7, #48]	; 0x30
 8008c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	687c      	ldr	r4, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d152      	bne.n	8008ccc <USB_EPStartXfer+0x538>
 8008c26:	687c      	ldr	r4, [r7, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	441c      	add	r4, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	4423      	add	r3, r4
 8008c3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d116      	bne.n	8008c74 <USB_EPStartXfer+0x4e0>
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	801a      	strh	r2, [r3, #0]
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e045      	b.n	8008cf4 <USB_EPStartXfer+0x560>
 8008c68:	ffff80c0 	.word	0xffff80c0
 8008c6c:	ffffc080 	.word	0xffffc080
 8008c70:	ffff8080 	.word	0xffff8080
 8008c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c76:	2b3e      	cmp	r3, #62	; 0x3e
 8008c78:	d811      	bhi.n	8008c9e <USB_EPStartXfer+0x50a>
 8008c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <USB_EPStartXfer+0x4fc>
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	029b      	lsls	r3, r3, #10
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e02a      	b.n	8008cf4 <USB_EPStartXfer+0x560>
 8008c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca6:	f003 031f 	and.w	r3, r3, #31
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d102      	bne.n	8008cb4 <USB_EPStartXfer+0x520>
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	029b      	lsls	r3, r3, #10
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	801a      	strh	r2, [r3, #0]
 8008cca:	e013      	b.n	8008cf4 <USB_EPStartXfer+0x560>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d10f      	bne.n	8008cf4 <USB_EPStartXfer+0x560>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	441c      	add	r4, r3
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	4423      	add	r3, r4
 8008ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	b29c      	uxth	r4, r3
 8008d0c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008d10:	b29c      	uxth	r4, r3
 8008d12:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008d16:	b29c      	uxth	r4, r3
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <USB_EPStartXfer+0x5a0>)
 8008d24:	4323      	orrs	r3, r4
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3754      	adds	r7, #84	; 0x54
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}
 8008d34:	ffff8080 	.word	0xffff8080

08008d38 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d38:	b490      	push	{r4, r7}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d018      	beq.n	8008d7c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d60:	b29c      	uxth	r4, r3
 8008d62:	f084 0310 	eor.w	r3, r4, #16
 8008d66:	b29c      	uxth	r4, r3
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	441a      	add	r2, r3
 8008d72:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <USB_EPSetStall+0x80>)
 8008d74:	4323      	orrs	r3, r4
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]
 8008d7a:	e017      	b.n	8008dac <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d92:	b29c      	uxth	r4, r3
 8008d94:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008d98:	b29c      	uxth	r4, r3
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <USB_EPSetStall+0x80>)
 8008da6:	4323      	orrs	r3, r4
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc90      	pop	{r4, r7}
 8008db6:	4770      	bx	lr
 8008db8:	ffff8080 	.word	0xffff8080

08008dbc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dbc:	b490      	push	{r4, r7}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	7b1b      	ldrb	r3, [r3, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d17d      	bne.n	8008eca <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d03d      	beq.n	8008e52 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	b29c      	uxth	r4, r3
 8008de4:	4623      	mov	r3, r4
 8008de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d014      	beq.n	8008e18 <USB_EPClearStall+0x5c>
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	b29c      	uxth	r4, r3
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	4b31      	ldr	r3, [pc, #196]	; (8008ed8 <USB_EPClearStall+0x11c>)
 8008e12:	4323      	orrs	r3, r4
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	78db      	ldrb	r3, [r3, #3]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d054      	beq.n	8008eca <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e36:	b29c      	uxth	r4, r3
 8008e38:	f084 0320 	eor.w	r3, r4, #32
 8008e3c:	b29c      	uxth	r4, r3
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	441a      	add	r2, r3
 8008e48:	4b24      	ldr	r3, [pc, #144]	; (8008edc <USB_EPClearStall+0x120>)
 8008e4a:	4323      	orrs	r3, r4
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	8013      	strh	r3, [r2, #0]
 8008e50:	e03b      	b.n	8008eca <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29c      	uxth	r4, r3
 8008e60:	4623      	mov	r3, r4
 8008e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d014      	beq.n	8008e94 <USB_EPClearStall+0xd8>
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e80:	b29c      	uxth	r4, r3
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	441a      	add	r2, r3
 8008e8c:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <USB_EPClearStall+0x124>)
 8008e8e:	4323      	orrs	r3, r4
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eaa:	b29c      	uxth	r4, r3
 8008eac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008eb0:	b29c      	uxth	r4, r3
 8008eb2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008eb6:	b29c      	uxth	r4, r3
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	441a      	add	r2, r3
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <USB_EPClearStall+0x120>)
 8008ec4:	4323      	orrs	r3, r4
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc90      	pop	{r4, r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	ffff80c0 	.word	0xffff80c0
 8008edc:	ffff8080 	.word	0xffff8080
 8008ee0:	ffffc080 	.word	0xffffc080

08008ee4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2280      	movs	r2, #128	; 0x80
 8008efa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b08d      	sub	sp, #52	; 0x34
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	461a      	mov	r2, r3
 8008f52:	460b      	mov	r3, r1
 8008f54:	80fb      	strh	r3, [r7, #6]
 8008f56:	4613      	mov	r3, r2
 8008f58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f5a:	88bb      	ldrh	r3, [r7, #4]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f6a:	88fb      	ldrh	r3, [r7, #6]
 8008f6c:	005a      	lsls	r2, r3, #1
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f76:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f7c:	e01e      	b.n	8008fbc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	3301      	adds	r3, #1
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	021b      	lsls	r3, r3, #8
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	461a      	mov	r2, r3
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	3302      	adds	r3, #2
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1dd      	bne.n	8008f7e <USB_WritePMA+0x3a>
  }
}
 8008fc2:	bf00      	nop
 8008fc4:	3734      	adds	r7, #52	; 0x34
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b08b      	sub	sp, #44	; 0x2c
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	461a      	mov	r2, r3
 8008fdc:	460b      	mov	r3, r1
 8008fde:	80fb      	strh	r3, [r7, #6]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fe4:	88bb      	ldrh	r3, [r7, #4]
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ff4:	88fb      	ldrh	r3, [r7, #6]
 8008ff6:	005a      	lsls	r2, r3, #1
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009000:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	627b      	str	r3, [r7, #36]	; 0x24
 8009006:	e01b      	b.n	8009040 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	b29b      	uxth	r3, r3
 800900e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	3302      	adds	r3, #2
 8009014:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	3301      	adds	r3, #1
 8009022:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b2da      	uxtb	r2, r3
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	3301      	adds	r3, #1
 8009032:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	3302      	adds	r3, #2
 8009038:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	3b01      	subs	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e0      	bne.n	8009008 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009046:	88bb      	ldrh	r3, [r7, #4]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	701a      	strb	r2, [r3, #0]
  }
}
 8009062:	bf00      	nop
 8009064:	372c      	adds	r7, #44	; 0x2c
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009090:	2302      	movs	r3, #2
 8009092:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	4611      	mov	r1, r2
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	4798      	blx	r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b082      	sub	sp, #8
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	4611      	mov	r1, r2
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3

  return USBD_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fece 	bl	8009e9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800911c:	f003 031f 	and.w	r3, r3, #31
 8009120:	2b01      	cmp	r3, #1
 8009122:	d00c      	beq.n	800913e <USBD_LL_SetupStage+0x56>
 8009124:	2b01      	cmp	r3, #1
 8009126:	d302      	bcc.n	800912e <USBD_LL_SetupStage+0x46>
 8009128:	2b02      	cmp	r3, #2
 800912a:	d010      	beq.n	800914e <USBD_LL_SetupStage+0x66>
 800912c:	e017      	b.n	800915e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f9ce 	bl	80094d8 <USBD_StdDevReq>
      break;
 800913c:	e01a      	b.n	8009174 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa30 	bl	80095ac <USBD_StdItfReq>
      break;
 800914c:	e012      	b.n	8009174 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fa6e 	bl	8009638 <USBD_StdEPReq>
      break;
 800915c:	e00a      	b.n	8009174 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009164:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f9ff 	bl	800a570 <USBD_LL_StallEP>
      break;
 8009172:	bf00      	nop
  }

  return USBD_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	460b      	mov	r3, r1
 8009188:	607a      	str	r2, [r7, #4]
 800918a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d14b      	bne.n	800922a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009198:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d134      	bne.n	800920e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d919      	bls.n	80091e4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	1ad2      	subs	r2, r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d203      	bcs.n	80091d2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	e002      	b.n	80091d8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 fed9 	bl	8009f94 <USBD_CtlContinueRx>
 80091e2:	e038      	b.n	8009256 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d105      	bne.n	8009206 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 fed6 	bl	8009fb8 <USBD_CtlSendStatus>
 800920c:	e023      	b.n	8009256 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009214:	2b05      	cmp	r3, #5
 8009216:	d11e      	bne.n	8009256 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f001 f9a4 	bl	800a570 <USBD_LL_StallEP>
 8009228:	e015      	b.n	8009256 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00d      	beq.n	8009252 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800923c:	2b03      	cmp	r3, #3
 800923e:	d108      	bne.n	8009252 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	7afa      	ldrb	r2, [r7, #11]
 800924a:	4611      	mov	r1, r2
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	4798      	blx	r3
 8009250:	e001      	b.n	8009256 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009252:	2302      	movs	r3, #2
 8009254:	e000      	b.n	8009258 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	460b      	mov	r3, r1
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d17f      	bne.n	8009374 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3314      	adds	r3, #20
 8009278:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009280:	2b02      	cmp	r3, #2
 8009282:	d15c      	bne.n	800933e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	429a      	cmp	r2, r3
 800928e:	d915      	bls.n	80092bc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	1ad2      	subs	r2, r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fe61 	bl	8009f70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092ae:	2300      	movs	r3, #0
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f001 fa01 	bl	800a6bc <USBD_LL_PrepareReceive>
 80092ba:	e04e      	b.n	800935a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	6912      	ldr	r2, [r2, #16]
 80092c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c8:	fb02 f201 	mul.w	r2, r2, r1
 80092cc:	1a9b      	subs	r3, r3, r2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d11c      	bne.n	800930c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092da:	429a      	cmp	r2, r3
 80092dc:	d316      	bcc.n	800930c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d20f      	bcs.n	800930c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 fe3d 	bl	8009f70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092fe:	2300      	movs	r3, #0
 8009300:	2200      	movs	r2, #0
 8009302:	2100      	movs	r1, #0
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f001 f9d9 	bl	800a6bc <USBD_LL_PrepareReceive>
 800930a:	e026      	b.n	800935a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00a      	beq.n	800932e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800931e:	2b03      	cmp	r3, #3
 8009320:	d105      	bne.n	800932e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800932e:	2180      	movs	r1, #128	; 0x80
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f001 f91d 	bl	800a570 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fe51 	bl	8009fde <USBD_CtlReceiveStatus>
 800933c:	e00d      	b.n	800935a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009344:	2b04      	cmp	r3, #4
 8009346:	d004      	beq.n	8009352 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009352:	2180      	movs	r1, #128	; 0x80
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f001 f90b 	bl	800a570 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009360:	2b01      	cmp	r3, #1
 8009362:	d11d      	bne.n	80093a0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff fe82 	bl	800906e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009372:	e015      	b.n	80093a0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00d      	beq.n	800939c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009386:	2b03      	cmp	r3, #3
 8009388:	d108      	bne.n	800939c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	7afa      	ldrb	r2, [r7, #11]
 8009394:	4611      	mov	r1, r2
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	4798      	blx	r3
 800939a:	e001      	b.n	80093a0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800939c:	2302      	movs	r3, #2
 800939e:	e000      	b.n	80093a2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093b2:	2340      	movs	r3, #64	; 0x40
 80093b4:	2200      	movs	r2, #0
 80093b6:	2100      	movs	r1, #0
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f8b3 	bl	800a524 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2240      	movs	r2, #64	; 0x40
 80093ca:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	2200      	movs	r2, #0
 80093d2:	2180      	movs	r1, #128	; 0x80
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 f8a5 	bl	800a524 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2240      	movs	r2, #64	; 0x40
 80093e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d009      	beq.n	8009422 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6852      	ldr	r2, [r2, #4]
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	4611      	mov	r1, r2
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4798      	blx	r3
  }

  return USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2204      	movs	r2, #4
 8009464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	2b04      	cmp	r3, #4
 8009486:	d105      	bne.n	8009494 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d10b      	bne.n	80094cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094ee:	2b20      	cmp	r3, #32
 80094f0:	d004      	beq.n	80094fc <USBD_StdDevReq+0x24>
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d002      	beq.n	80094fc <USBD_StdDevReq+0x24>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d008      	beq.n	800950c <USBD_StdDevReq+0x34>
 80094fa:	e04c      	b.n	8009596 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	4798      	blx	r3
      break;
 800950a:	e049      	b.n	80095a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	2b09      	cmp	r3, #9
 8009512:	d83a      	bhi.n	800958a <USBD_StdDevReq+0xb2>
 8009514:	a201      	add	r2, pc, #4	; (adr r2, 800951c <USBD_StdDevReq+0x44>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	0800956d 	.word	0x0800956d
 8009520:	08009581 	.word	0x08009581
 8009524:	0800958b 	.word	0x0800958b
 8009528:	08009577 	.word	0x08009577
 800952c:	0800958b 	.word	0x0800958b
 8009530:	0800954f 	.word	0x0800954f
 8009534:	08009545 	.word	0x08009545
 8009538:	0800958b 	.word	0x0800958b
 800953c:	08009563 	.word	0x08009563
 8009540:	08009559 	.word	0x08009559
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f9d4 	bl	80098f4 <USBD_GetDescriptor>
          break;
 800954c:	e022      	b.n	8009594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fb37 	bl	8009bc4 <USBD_SetAddress>
          break;
 8009556:	e01d      	b.n	8009594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fb74 	bl	8009c48 <USBD_SetConfig>
          break;
 8009560:	e018      	b.n	8009594 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fbfd 	bl	8009d64 <USBD_GetConfig>
          break;
 800956a:	e013      	b.n	8009594 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fc2c 	bl	8009dcc <USBD_GetStatus>
          break;
 8009574:	e00e      	b.n	8009594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fc5a 	bl	8009e32 <USBD_SetFeature>
          break;
 800957e:	e009      	b.n	8009594 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fc69 	bl	8009e5a <USBD_ClrFeature>
          break;
 8009588:	e004      	b.n	8009594 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fcc2 	bl	8009f16 <USBD_CtlError>
          break;
 8009592:	bf00      	nop
      }
      break;
 8009594:	e004      	b.n	80095a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fcbc 	bl	8009f16 <USBD_CtlError>
      break;
 800959e:	bf00      	nop
  }

  return ret;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop

080095ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d003      	beq.n	80095ce <USBD_StdItfReq+0x22>
 80095c6:	2b40      	cmp	r3, #64	; 0x40
 80095c8:	d001      	beq.n	80095ce <USBD_StdItfReq+0x22>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d12a      	bne.n	8009624 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d4:	3b01      	subs	r3, #1
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d81d      	bhi.n	8009616 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d813      	bhi.n	800960c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	88db      	ldrh	r3, [r3, #6]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d110      	bne.n	8009620 <USBD_StdItfReq+0x74>
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10d      	bne.n	8009620 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fcd7 	bl	8009fb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800960a:	e009      	b.n	8009620 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fc81 	bl	8009f16 <USBD_CtlError>
          break;
 8009614:	e004      	b.n	8009620 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fc7c 	bl	8009f16 <USBD_CtlError>
          break;
 800961e:	e000      	b.n	8009622 <USBD_StdItfReq+0x76>
          break;
 8009620:	bf00      	nop
      }
      break;
 8009622:	e004      	b.n	800962e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fc75 	bl	8009f16 <USBD_CtlError>
      break;
 800962c:	bf00      	nop
  }

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	889b      	ldrh	r3, [r3, #4]
 800964a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009654:	2b20      	cmp	r3, #32
 8009656:	d004      	beq.n	8009662 <USBD_StdEPReq+0x2a>
 8009658:	2b40      	cmp	r3, #64	; 0x40
 800965a:	d002      	beq.n	8009662 <USBD_StdEPReq+0x2a>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d008      	beq.n	8009672 <USBD_StdEPReq+0x3a>
 8009660:	e13d      	b.n	80098de <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
      break;
 8009670:	e13a      	b.n	80098e8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800967a:	2b20      	cmp	r3, #32
 800967c:	d10a      	bne.n	8009694 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	4798      	blx	r3
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	e12a      	b.n	80098ea <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d03e      	beq.n	800971a <USBD_StdEPReq+0xe2>
 800969c:	2b03      	cmp	r3, #3
 800969e:	d002      	beq.n	80096a6 <USBD_StdEPReq+0x6e>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d070      	beq.n	8009786 <USBD_StdEPReq+0x14e>
 80096a4:	e115      	b.n	80098d2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d002      	beq.n	80096b6 <USBD_StdEPReq+0x7e>
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d015      	beq.n	80096e0 <USBD_StdEPReq+0xa8>
 80096b4:	e02b      	b.n	800970e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <USBD_StdEPReq+0x9e>
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b80      	cmp	r3, #128	; 0x80
 80096c0:	d009      	beq.n	80096d6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 ff52 	bl	800a570 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096cc:	2180      	movs	r1, #128	; 0x80
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 ff4e 	bl	800a570 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096d4:	e020      	b.n	8009718 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fc1c 	bl	8009f16 <USBD_CtlError>
              break;
 80096de:	e01b      	b.n	8009718 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	885b      	ldrh	r3, [r3, #2]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10e      	bne.n	8009706 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00b      	beq.n	8009706 <USBD_StdEPReq+0xce>
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b80      	cmp	r3, #128	; 0x80
 80096f2:	d008      	beq.n	8009706 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	88db      	ldrh	r3, [r3, #6]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 ff35 	bl	800a570 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fc56 	bl	8009fb8 <USBD_CtlSendStatus>

              break;
 800970c:	e004      	b.n	8009718 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fc00 	bl	8009f16 <USBD_CtlError>
              break;
 8009716:	bf00      	nop
          }
          break;
 8009718:	e0e0      	b.n	80098dc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	2b02      	cmp	r3, #2
 8009722:	d002      	beq.n	800972a <USBD_StdEPReq+0xf2>
 8009724:	2b03      	cmp	r3, #3
 8009726:	d015      	beq.n	8009754 <USBD_StdEPReq+0x11c>
 8009728:	e026      	b.n	8009778 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00c      	beq.n	800974a <USBD_StdEPReq+0x112>
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b80      	cmp	r3, #128	; 0x80
 8009734:	d009      	beq.n	800974a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 ff18 	bl	800a570 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009740:	2180      	movs	r1, #128	; 0x80
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 ff14 	bl	800a570 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009748:	e01c      	b.n	8009784 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fbe2 	bl	8009f16 <USBD_CtlError>
              break;
 8009752:	e017      	b.n	8009784 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	885b      	ldrh	r3, [r3, #2]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d112      	bne.n	8009782 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 ff1f 	bl	800a5ae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fc21 	bl	8009fb8 <USBD_CtlSendStatus>
              }
              break;
 8009776:	e004      	b.n	8009782 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fbcb 	bl	8009f16 <USBD_CtlError>
              break;
 8009780:	e000      	b.n	8009784 <USBD_StdEPReq+0x14c>
              break;
 8009782:	bf00      	nop
          }
          break;
 8009784:	e0aa      	b.n	80098dc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	2b02      	cmp	r3, #2
 800978e:	d002      	beq.n	8009796 <USBD_StdEPReq+0x15e>
 8009790:	2b03      	cmp	r3, #3
 8009792:	d032      	beq.n	80097fa <USBD_StdEPReq+0x1c2>
 8009794:	e097      	b.n	80098c6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <USBD_StdEPReq+0x174>
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2b80      	cmp	r3, #128	; 0x80
 80097a0:	d004      	beq.n	80097ac <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fbb6 	bl	8009f16 <USBD_CtlError>
                break;
 80097aa:	e091      	b.n	80098d0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da0b      	bge.n	80097cc <USBD_StdEPReq+0x194>
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	3310      	adds	r3, #16
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	e00b      	b.n	80097e4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	4413      	add	r3, r2
 80097e2:	3304      	adds	r3, #4
 80097e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2202      	movs	r2, #2
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fba0 	bl	8009f38 <USBD_CtlSendData>
              break;
 80097f8:	e06a      	b.n	80098d0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da11      	bge.n	8009826 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	f003 020f 	and.w	r2, r3, #15
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	440b      	add	r3, r1
 8009814:	3318      	adds	r3, #24
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d117      	bne.n	800984c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fb79 	bl	8009f16 <USBD_CtlError>
                  break;
 8009824:	e054      	b.n	80098d0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	f003 020f 	and.w	r2, r3, #15
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fb66 	bl	8009f16 <USBD_CtlError>
                  break;
 800984a:	e041      	b.n	80098d0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800984c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009850:	2b00      	cmp	r3, #0
 8009852:	da0b      	bge.n	800986c <USBD_StdEPReq+0x234>
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	3310      	adds	r3, #16
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	4413      	add	r3, r2
 8009868:	3304      	adds	r3, #4
 800986a:	e00b      	b.n	8009884 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009872:	4613      	mov	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	4413      	add	r3, r2
 8009882:	3304      	adds	r3, #4
 8009884:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <USBD_StdEPReq+0x25a>
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b80      	cmp	r3, #128	; 0x80
 8009890:	d103      	bne.n	800989a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e00e      	b.n	80098b8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fea4 	bl	800a5ec <USBD_LL_IsStallEP>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2201      	movs	r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	e002      	b.n	80098b8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2202      	movs	r2, #2
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fb3a 	bl	8009f38 <USBD_CtlSendData>
              break;
 80098c4:	e004      	b.n	80098d0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fb24 	bl	8009f16 <USBD_CtlError>
              break;
 80098ce:	bf00      	nop
          }
          break;
 80098d0:	e004      	b.n	80098dc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fb1e 	bl	8009f16 <USBD_CtlError>
          break;
 80098da:	bf00      	nop
      }
      break;
 80098dc:	e004      	b.n	80098e8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fb18 	bl	8009f16 <USBD_CtlError>
      break;
 80098e6:	bf00      	nop
  }

  return ret;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	885b      	ldrh	r3, [r3, #2]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b29b      	uxth	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	2b06      	cmp	r3, #6
 8009916:	f200 8128 	bhi.w	8009b6a <USBD_GetDescriptor+0x276>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <USBD_GetDescriptor+0x2c>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	0800993d 	.word	0x0800993d
 8009924:	08009955 	.word	0x08009955
 8009928:	08009995 	.word	0x08009995
 800992c:	08009b6b 	.word	0x08009b6b
 8009930:	08009b6b 	.word	0x08009b6b
 8009934:	08009b0b 	.word	0x08009b0b
 8009938:	08009b37 	.word	0x08009b37
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
      break;
 8009952:	e112      	b.n	8009b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7c1b      	ldrb	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10d      	bne.n	8009978 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	f107 0208 	add.w	r2, r7, #8
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	2202      	movs	r2, #2
 8009974:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009976:	e100      	b.n	8009b7a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	f107 0208 	add.w	r2, r7, #8
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
 8009988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3301      	adds	r3, #1
 800998e:	2202      	movs	r2, #2
 8009990:	701a      	strb	r2, [r3, #0]
      break;
 8009992:	e0f2      	b.n	8009b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	885b      	ldrh	r3, [r3, #2]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b05      	cmp	r3, #5
 800999c:	f200 80ac 	bhi.w	8009af8 <USBD_GetDescriptor+0x204>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <USBD_GetDescriptor+0xb4>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099f5 	.word	0x080099f5
 80099b0:	08009a29 	.word	0x08009a29
 80099b4:	08009a5d 	.word	0x08009a5d
 80099b8:	08009a91 	.word	0x08009a91
 80099bc:	08009ac5 	.word	0x08009ac5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	7c12      	ldrb	r2, [r2, #16]
 80099d8:	f107 0108 	add.w	r1, r7, #8
 80099dc:	4610      	mov	r0, r2
 80099de:	4798      	blx	r3
 80099e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099e2:	e091      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa95 	bl	8009f16 <USBD_CtlError>
            err++;
 80099ec:	7afb      	ldrb	r3, [r7, #11]
 80099ee:	3301      	adds	r3, #1
 80099f0:	72fb      	strb	r3, [r7, #11]
          break;
 80099f2:	e089      	b.n	8009b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	7c12      	ldrb	r2, [r2, #16]
 8009a0c:	f107 0108 	add.w	r1, r7, #8
 8009a10:	4610      	mov	r0, r2
 8009a12:	4798      	blx	r3
 8009a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a16:	e077      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa7b 	bl	8009f16 <USBD_CtlError>
            err++;
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	3301      	adds	r3, #1
 8009a24:	72fb      	strb	r3, [r7, #11]
          break;
 8009a26:	e06f      	b.n	8009b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	7c12      	ldrb	r2, [r2, #16]
 8009a40:	f107 0108 	add.w	r1, r7, #8
 8009a44:	4610      	mov	r0, r2
 8009a46:	4798      	blx	r3
 8009a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a4a:	e05d      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa61 	bl	8009f16 <USBD_CtlError>
            err++;
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	3301      	adds	r3, #1
 8009a58:	72fb      	strb	r3, [r7, #11]
          break;
 8009a5a:	e055      	b.n	8009b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	7c12      	ldrb	r2, [r2, #16]
 8009a74:	f107 0108 	add.w	r1, r7, #8
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7e:	e043      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa47 	bl	8009f16 <USBD_CtlError>
            err++;
 8009a88:	7afb      	ldrb	r3, [r7, #11]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8e:	e03b      	b.n	8009b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00b      	beq.n	8009ab4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	7c12      	ldrb	r2, [r2, #16]
 8009aa8:	f107 0108 	add.w	r1, r7, #8
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
 8009ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ab2:	e029      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa2d 	bl	8009f16 <USBD_CtlError>
            err++;
 8009abc:	7afb      	ldrb	r3, [r7, #11]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ac2:	e021      	b.n	8009b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00b      	beq.n	8009ae8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	7c12      	ldrb	r2, [r2, #16]
 8009adc:	f107 0108 	add.w	r1, r7, #8
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
 8009ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ae6:	e00f      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa13 	bl	8009f16 <USBD_CtlError>
            err++;
 8009af0:	7afb      	ldrb	r3, [r7, #11]
 8009af2:	3301      	adds	r3, #1
 8009af4:	72fb      	strb	r3, [r7, #11]
          break;
 8009af6:	e007      	b.n	8009b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa0b 	bl	8009f16 <USBD_CtlError>
          err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b06:	e038      	b.n	8009b7a <USBD_GetDescriptor+0x286>
 8009b08:	e037      	b.n	8009b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	7c1b      	ldrb	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d109      	bne.n	8009b26 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1a:	f107 0208 	add.w	r2, r7, #8
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4798      	blx	r3
 8009b22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b24:	e029      	b.n	8009b7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9f4 	bl	8009f16 <USBD_CtlError>
        err++;
 8009b2e:	7afb      	ldrb	r3, [r7, #11]
 8009b30:	3301      	adds	r3, #1
 8009b32:	72fb      	strb	r3, [r7, #11]
      break;
 8009b34:	e021      	b.n	8009b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7c1b      	ldrb	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10d      	bne.n	8009b5a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	f107 0208 	add.w	r2, r7, #8
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4798      	blx	r3
 8009b4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	2207      	movs	r2, #7
 8009b56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b58:	e00f      	b.n	8009b7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9da 	bl	8009f16 <USBD_CtlError>
        err++;
 8009b62:	7afb      	ldrb	r3, [r7, #11]
 8009b64:	3301      	adds	r3, #1
 8009b66:	72fb      	strb	r3, [r7, #11]
      break;
 8009b68:	e007      	b.n	8009b7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9d2 	bl	8009f16 <USBD_CtlError>
      err++;
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	3301      	adds	r3, #1
 8009b76:	72fb      	strb	r3, [r7, #11]
      break;
 8009b78:	bf00      	nop
  }

  if (err != 0U)
 8009b7a:	7afb      	ldrb	r3, [r7, #11]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d11c      	bne.n	8009bba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b80:	893b      	ldrh	r3, [r7, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d011      	beq.n	8009baa <USBD_GetDescriptor+0x2b6>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	88db      	ldrh	r3, [r3, #6]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00d      	beq.n	8009baa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	88da      	ldrh	r2, [r3, #6]
 8009b92:	893b      	ldrh	r3, [r7, #8]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	bf28      	it	cs
 8009b98:	4613      	movcs	r3, r2
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b9e:	893b      	ldrh	r3, [r7, #8]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	68f9      	ldr	r1, [r7, #12]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f9c7 	bl	8009f38 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa00 	bl	8009fb8 <USBD_CtlSendStatus>
 8009bb8:	e000      	b.n	8009bbc <USBD_GetDescriptor+0x2c8>
    return;
 8009bba:	bf00      	nop
    }
  }
}
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop

08009bc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	889b      	ldrh	r3, [r3, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d130      	bne.n	8009c38 <USBD_SetAddress+0x74>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	88db      	ldrh	r3, [r3, #6]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d12c      	bne.n	8009c38 <USBD_SetAddress+0x74>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	885b      	ldrh	r3, [r3, #2]
 8009be2:	2b7f      	cmp	r3, #127	; 0x7f
 8009be4:	d828      	bhi.n	8009c38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d104      	bne.n	8009c06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f989 	bl	8009f16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c04:	e01c      	b.n	8009c40 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	7bfa      	ldrb	r2, [r7, #15]
 8009c0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fd10 	bl	800a638 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9cd 	bl	8009fb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2c:	e008      	b.n	8009c40 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c36:	e003      	b.n	8009c40 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f96b 	bl	8009f16 <USBD_CtlError>
  }
}
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	885b      	ldrh	r3, [r3, #2]
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b41      	ldr	r3, [pc, #260]	; (8009d60 <USBD_SetConfig+0x118>)
 8009c5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c5c:	4b40      	ldr	r3, [pc, #256]	; (8009d60 <USBD_SetConfig+0x118>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d904      	bls.n	8009c6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f955 	bl	8009f16 <USBD_CtlError>
 8009c6c:	e075      	b.n	8009d5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d002      	beq.n	8009c7e <USBD_SetConfig+0x36>
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d023      	beq.n	8009cc4 <USBD_SetConfig+0x7c>
 8009c7c:	e062      	b.n	8009d44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009c7e:	4b38      	ldr	r3, [pc, #224]	; (8009d60 <USBD_SetConfig+0x118>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d01a      	beq.n	8009cbc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009c86:	4b36      	ldr	r3, [pc, #216]	; (8009d60 <USBD_SetConfig+0x118>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2203      	movs	r2, #3
 8009c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c98:	4b31      	ldr	r3, [pc, #196]	; (8009d60 <USBD_SetConfig+0x118>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff f9f0 	bl	8009084 <USBD_SetClassConfig>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d104      	bne.n	8009cb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f932 	bl	8009f16 <USBD_CtlError>
            return;
 8009cb2:	e052      	b.n	8009d5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f97f 	bl	8009fb8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cba:	e04e      	b.n	8009d5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f97b 	bl	8009fb8 <USBD_CtlSendStatus>
        break;
 8009cc2:	e04a      	b.n	8009d5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009cc4:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <USBD_SetConfig+0x118>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d112      	bne.n	8009cf2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009cd4:	4b22      	ldr	r3, [pc, #136]	; (8009d60 <USBD_SetConfig+0x118>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009cde:	4b20      	ldr	r3, [pc, #128]	; (8009d60 <USBD_SetConfig+0x118>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff f9ec 	bl	80090c2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f964 	bl	8009fb8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cf0:	e033      	b.n	8009d5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009cf2:	4b1b      	ldr	r3, [pc, #108]	; (8009d60 <USBD_SetConfig+0x118>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d01d      	beq.n	8009d3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff f9da 	bl	80090c2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d0e:	4b14      	ldr	r3, [pc, #80]	; (8009d60 <USBD_SetConfig+0x118>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d18:	4b11      	ldr	r3, [pc, #68]	; (8009d60 <USBD_SetConfig+0x118>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff f9b0 	bl	8009084 <USBD_SetClassConfig>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d104      	bne.n	8009d34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f8f2 	bl	8009f16 <USBD_CtlError>
            return;
 8009d32:	e012      	b.n	8009d5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f93f 	bl	8009fb8 <USBD_CtlSendStatus>
        break;
 8009d3a:	e00e      	b.n	8009d5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f93b 	bl	8009fb8 <USBD_CtlSendStatus>
        break;
 8009d42:	e00a      	b.n	8009d5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f8e5 	bl	8009f16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d4c:	4b04      	ldr	r3, [pc, #16]	; (8009d60 <USBD_SetConfig+0x118>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff f9b5 	bl	80090c2 <USBD_ClrClassConfig>
        break;
 8009d58:	bf00      	nop
    }
  }
}
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000030 	.word	0x20000030

08009d64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d004      	beq.n	8009d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f8cc 	bl	8009f16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d7e:	e021      	b.n	8009dc4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	db17      	blt.n	8009dba <USBD_GetConfig+0x56>
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	dd02      	ble.n	8009d94 <USBD_GetConfig+0x30>
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d00b      	beq.n	8009daa <USBD_GetConfig+0x46>
 8009d92:	e012      	b.n	8009dba <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	2201      	movs	r2, #1
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8c8 	bl	8009f38 <USBD_CtlSendData>
        break;
 8009da8:	e00c      	b.n	8009dc4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3304      	adds	r3, #4
 8009dae:	2201      	movs	r2, #1
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f8c0 	bl	8009f38 <USBD_CtlSendData>
        break;
 8009db8:	e004      	b.n	8009dc4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f8aa 	bl	8009f16 <USBD_CtlError>
        break;
 8009dc2:	bf00      	nop
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d81e      	bhi.n	8009e20 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	88db      	ldrh	r3, [r3, #6]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d004      	beq.n	8009df4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f892 	bl	8009f16 <USBD_CtlError>
        break;
 8009df2:	e01a      	b.n	8009e2a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f043 0202 	orr.w	r2, r3, #2
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	330c      	adds	r3, #12
 8009e14:	2202      	movs	r2, #2
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f88d 	bl	8009f38 <USBD_CtlSendData>
      break;
 8009e1e:	e004      	b.n	8009e2a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f877 	bl	8009f16 <USBD_CtlError>
      break;
 8009e28:	bf00      	nop
  }
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	885b      	ldrh	r3, [r3, #2]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d106      	bne.n	8009e52 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8b3 	bl	8009fb8 <USBD_CtlSendStatus>
  }
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d80b      	bhi.n	8009e88 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	885b      	ldrh	r3, [r3, #2]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d10c      	bne.n	8009e92 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f899 	bl	8009fb8 <USBD_CtlSendStatus>
      }
      break;
 8009e86:	e004      	b.n	8009e92 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f843 	bl	8009f16 <USBD_CtlError>
      break;
 8009e90:	e000      	b.n	8009e94 <USBD_ClrFeature+0x3a>
      break;
 8009e92:	bf00      	nop
  }
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781a      	ldrb	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785a      	ldrb	r2, [r3, #1]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	3302      	adds	r3, #2
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	3303      	adds	r3, #3
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4413      	add	r3, r2
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	3305      	adds	r3, #5
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	021b      	lsls	r3, r3, #8
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	3306      	adds	r3, #6
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	3307      	adds	r3, #7
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	80da      	strh	r2, [r3, #6]

}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fb24 	bl	800a570 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fb20 	bl	800a570 <USBD_LL_StallEP>
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2202      	movs	r2, #2
 8009f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f4e:	88fa      	ldrh	r2, [r7, #6]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f5a:	88fb      	ldrh	r3, [r7, #6]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	2100      	movs	r1, #0
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 fb88 	bl	800a676 <USBD_LL_Transmit>

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	2100      	movs	r1, #0
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 fb76 	bl	800a676 <USBD_LL_Transmit>

  return USBD_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fb87 	bl	800a6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2100      	movs	r1, #0
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fb51 	bl	800a676 <USBD_LL_Transmit>

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2205      	movs	r2, #5
 8009fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fb61 	bl	800a6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	601a      	str	r2, [r3, #0]
}
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6892      	ldr	r2, [r2, #8]
 800a062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6852      	ldr	r2, [r2, #4]
 800a06c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d103      	bne.n	800a080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1e5a      	subs	r2, r3, #1
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0aa:	4b51      	ldr	r3, [pc, #324]	; (800a1f0 <xTaskIncrementTick+0x150>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f040 808d 	bne.w	800a1ce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0b4:	4b4f      	ldr	r3, [pc, #316]	; (800a1f4 <xTaskIncrementTick+0x154>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0bc:	4a4d      	ldr	r2, [pc, #308]	; (800a1f4 <xTaskIncrementTick+0x154>)
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d11f      	bne.n	800a108 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0c8:	4b4b      	ldr	r3, [pc, #300]	; (800a1f8 <xTaskIncrementTick+0x158>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	e7fe      	b.n	800a0e4 <xTaskIncrementTick+0x44>
 800a0e6:	4b44      	ldr	r3, [pc, #272]	; (800a1f8 <xTaskIncrementTick+0x158>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	4b43      	ldr	r3, [pc, #268]	; (800a1fc <xTaskIncrementTick+0x15c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a41      	ldr	r2, [pc, #260]	; (800a1f8 <xTaskIncrementTick+0x158>)
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	4a41      	ldr	r2, [pc, #260]	; (800a1fc <xTaskIncrementTick+0x15c>)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	4b41      	ldr	r3, [pc, #260]	; (800a200 <xTaskIncrementTick+0x160>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3301      	adds	r3, #1
 800a100:	4a3f      	ldr	r2, [pc, #252]	; (800a200 <xTaskIncrementTick+0x160>)
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	f000 f8e6 	bl	800a2d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a108:	4b3e      	ldr	r3, [pc, #248]	; (800a204 <xTaskIncrementTick+0x164>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d34e      	bcc.n	800a1b0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a112:	4b39      	ldr	r3, [pc, #228]	; (800a1f8 <xTaskIncrementTick+0x158>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <xTaskIncrementTick+0x80>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e000      	b.n	800a122 <xTaskIncrementTick+0x82>
 800a120:	2300      	movs	r3, #0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a126:	4b37      	ldr	r3, [pc, #220]	; (800a204 <xTaskIncrementTick+0x164>)
 800a128:	f04f 32ff 	mov.w	r2, #4294967295
 800a12c:	601a      	str	r2, [r3, #0]
					break;
 800a12e:	e03f      	b.n	800a1b0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a130:	4b31      	ldr	r3, [pc, #196]	; (800a1f8 <xTaskIncrementTick+0x158>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d203      	bcs.n	800a150 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a148:	4a2e      	ldr	r2, [pc, #184]	; (800a204 <xTaskIncrementTick+0x164>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6013      	str	r3, [r2, #0]
						break;
 800a14e:	e02f      	b.n	800a1b0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	3304      	adds	r3, #4
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff ff79 	bl	800a04c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	3318      	adds	r3, #24
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff ff70 	bl	800a04c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4b25      	ldr	r3, [pc, #148]	; (800a208 <xTaskIncrementTick+0x168>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d903      	bls.n	800a180 <xTaskIncrementTick+0xe0>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a22      	ldr	r2, [pc, #136]	; (800a208 <xTaskIncrementTick+0x168>)
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4a1f      	ldr	r2, [pc, #124]	; (800a20c <xTaskIncrementTick+0x16c>)
 800a18e:	441a      	add	r2, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	3304      	adds	r3, #4
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f7ff ff34 	bl	800a004 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a0:	4b1b      	ldr	r3, [pc, #108]	; (800a210 <xTaskIncrementTick+0x170>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d3b3      	bcc.n	800a112 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ae:	e7b0      	b.n	800a112 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1b0:	4b17      	ldr	r3, [pc, #92]	; (800a210 <xTaskIncrementTick+0x170>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b6:	4915      	ldr	r1, [pc, #84]	; (800a20c <xTaskIncrementTick+0x16c>)
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d907      	bls.n	800a1d8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e004      	b.n	800a1d8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a1ce:	4b11      	ldr	r3, [pc, #68]	; (800a214 <xTaskIncrementTick+0x174>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a0f      	ldr	r2, [pc, #60]	; (800a214 <xTaskIncrementTick+0x174>)
 800a1d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <xTaskIncrementTick+0x178>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a1e4:	697b      	ldr	r3, [r7, #20]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	200004b8 	.word	0x200004b8
 800a1f4:	200004a0 	.word	0x200004a0
 800a1f8:	20000498 	.word	0x20000498
 800a1fc:	2000049c 	.word	0x2000049c
 800a200:	200004b0 	.word	0x200004b0
 800a204:	200004b4 	.word	0x200004b4
 800a208:	200004a4 	.word	0x200004a4
 800a20c:	20000038 	.word	0x20000038
 800a210:	20000034 	.word	0x20000034
 800a214:	200004a8 	.word	0x200004a8
 800a218:	200004ac 	.word	0x200004ac

0800a21c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a222:	4b27      	ldr	r3, [pc, #156]	; (800a2c0 <vTaskSwitchContext+0xa4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a22a:	4b26      	ldr	r3, [pc, #152]	; (800a2c4 <vTaskSwitchContext+0xa8>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a230:	e040      	b.n	800a2b4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a232:	4b24      	ldr	r3, [pc, #144]	; (800a2c4 <vTaskSwitchContext+0xa8>)
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a238:	4b23      	ldr	r3, [pc, #140]	; (800a2c8 <vTaskSwitchContext+0xac>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	e00f      	b.n	800a260 <vTaskSwitchContext+0x44>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <vTaskSwitchContext+0x3e>
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	607b      	str	r3, [r7, #4]
 800a258:	e7fe      	b.n	800a258 <vTaskSwitchContext+0x3c>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	491a      	ldr	r1, [pc, #104]	; (800a2cc <vTaskSwitchContext+0xb0>)
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d0e5      	beq.n	800a240 <vTaskSwitchContext+0x24>
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4a13      	ldr	r2, [pc, #76]	; (800a2cc <vTaskSwitchContext+0xb0>)
 800a280:	4413      	add	r3, r2
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	605a      	str	r2, [r3, #4]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	3308      	adds	r3, #8
 800a296:	429a      	cmp	r2, r3
 800a298:	d104      	bne.n	800a2a4 <vTaskSwitchContext+0x88>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	605a      	str	r2, [r3, #4]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <vTaskSwitchContext+0xb4>)
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	4a06      	ldr	r2, [pc, #24]	; (800a2c8 <vTaskSwitchContext+0xac>)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6013      	str	r3, [r2, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	200004b8 	.word	0x200004b8
 800a2c4:	200004ac 	.word	0x200004ac
 800a2c8:	200004a4 	.word	0x200004a4
 800a2cc:	20000038 	.word	0x20000038
 800a2d0:	20000034 	.word	0x20000034

0800a2d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <prvResetNextTaskUnblockTime+0x44>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <prvResetNextTaskUnblockTime+0x14>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e000      	b.n	800a2ea <prvResetNextTaskUnblockTime+0x16>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <prvResetNextTaskUnblockTime+0x48>)
 800a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2f6:	e008      	b.n	800a30a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <prvResetNextTaskUnblockTime+0x44>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4a05      	ldr	r2, [pc, #20]	; (800a31c <prvResetNextTaskUnblockTime+0x48>)
 800a308:	6013      	str	r3, [r2, #0]
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20000498 	.word	0x20000498
 800a31c:	200004b4 	.word	0x200004b4

0800a320 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a320:	4b07      	ldr	r3, [pc, #28]	; (800a340 <pxCurrentTCBConst2>)
 800a322:	6819      	ldr	r1, [r3, #0]
 800a324:	6808      	ldr	r0, [r1, #0]
 800a326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32a:	f380 8809 	msr	PSP, r0
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f04f 0000 	mov.w	r0, #0
 800a336:	f380 8811 	msr	BASEPRI, r0
 800a33a:	4770      	bx	lr
 800a33c:	f3af 8000 	nop.w

0800a340 <pxCurrentTCBConst2>:
 800a340:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
	...

0800a350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a350:	f3ef 8009 	mrs	r0, PSP
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <pxCurrentTCBConst>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f01e 0f10 	tst.w	lr, #16
 800a360:	bf08      	it	eq
 800a362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a374:	f380 8811 	msr	BASEPRI, r0
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f7ff ff4c 	bl	800a21c <vTaskSwitchContext>
 800a384:	f04f 0000 	mov.w	r0, #0
 800a388:	f380 8811 	msr	BASEPRI, r0
 800a38c:	bc09      	pop	{r0, r3}
 800a38e:	6819      	ldr	r1, [r3, #0]
 800a390:	6808      	ldr	r0, [r1, #0]
 800a392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a396:	f01e 0f10 	tst.w	lr, #16
 800a39a:	bf08      	it	eq
 800a39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3a0:	f380 8809 	msr	PSP, r0
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	f3af 8000 	nop.w

0800a3b0 <pxCurrentTCBConst>:
 800a3b0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3d0:	f7ff fe66 	bl	800a0a0 <xTaskIncrementTick>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3da:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <SysTick_Handler+0x3c>)
 800a3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f7fe fe6a 	bl	80090e8 <USBD_LL_SetupStage>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	015b      	lsls	r3, r3, #5
 800a434:	4413      	add	r3, r2
 800a436:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	4619      	mov	r1, r3
 800a440:	f7fe fe9d 	bl	800917e <USBD_LL_DataOutStage>
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	015b      	lsls	r3, r3, #5
 800a464:	4413      	add	r3, r2
 800a466:	333c      	adds	r3, #60	; 0x3c
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	78fb      	ldrb	r3, [r7, #3]
 800a46c:	4619      	mov	r1, r3
 800a46e:	f7fe fef7 	bl	8009260 <USBD_LL_DataInStage>
}
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff f80a 	bl	80094a2 <USBD_LL_SOF>
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d001      	beq.n	800a4ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4aa:	f7f7 f81f 	bl	80014ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a4b4:	7bfa      	ldrb	r2, [r7, #15]
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe ffb7 	bl	800942c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe ff70 	bl	80093aa <USBD_LL_Reset>
}
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe ffb2 	bl	800944c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d005      	beq.n	800a4fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <HAL_PCD_SuspendCallback+0x30>)
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	4a03      	ldr	r2, [pc, #12]	; (800a504 <HAL_PCD_SuspendCallback+0x30>)
 800a4f6:	f043 0306 	orr.w	r3, r3, #6
 800a4fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	e000ed00 	.word	0xe000ed00

0800a508 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe ffad 	bl	8009476 <USBD_LL_Resume>
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	4608      	mov	r0, r1
 800a52e:	4611      	mov	r1, r2
 800a530:	461a      	mov	r2, r3
 800a532:	4603      	mov	r3, r0
 800a534:	70fb      	strb	r3, [r7, #3]
 800a536:	460b      	mov	r3, r1
 800a538:	70bb      	strb	r3, [r7, #2]
 800a53a:	4613      	mov	r3, r2
 800a53c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a54c:	78bb      	ldrb	r3, [r7, #2]
 800a54e:	883a      	ldrh	r2, [r7, #0]
 800a550:	78f9      	ldrb	r1, [r7, #3]
 800a552:	f7f9 ff9d 	bl	8004490 <HAL_PCD_EP_Open>
 800a556:	4603      	mov	r3, r0
 800a558:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 f8d1 	bl	800a704 <USBD_Get_USB_Status>
 800a562:	4603      	mov	r3, r0
 800a564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a566:	7bbb      	ldrb	r3, [r7, #14]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a58a:	78fa      	ldrb	r2, [r7, #3]
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fa f851 	bl	8004636 <HAL_PCD_EP_SetStall>
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f8b2 	bl	800a704 <USBD_Get_USB_Status>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5c8:	78fa      	ldrb	r2, [r7, #3]
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fa f88c 	bl	80046ea <HAL_PCD_EP_ClrStall>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 f893 	bl	800a704 <USBD_Get_USB_Status>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a604:	2b00      	cmp	r3, #0
 800a606:	da08      	bge.n	800a61a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	015b      	lsls	r3, r3, #5
 800a612:	4413      	add	r3, r2
 800a614:	332a      	adds	r3, #42	; 0x2a
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	e008      	b.n	800a62c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	015b      	lsls	r3, r3, #5
 800a624:	4413      	add	r3, r2
 800a626:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a62a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	460b      	mov	r3, r1
 800a642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f7f9 fef5 	bl	8004446 <HAL_PCD_SetAddress>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f84e 	bl	800a704 <USBD_Get_USB_Status>
 800a668:	4603      	mov	r3, r0
 800a66a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b086      	sub	sp, #24
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	461a      	mov	r2, r3
 800a682:	460b      	mov	r3, r1
 800a684:	72fb      	strb	r3, [r7, #11]
 800a686:	4613      	mov	r3, r2
 800a688:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a698:	893b      	ldrh	r3, [r7, #8]
 800a69a:	7af9      	ldrb	r1, [r7, #11]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	f7f9 ff91 	bl	80045c4 <HAL_PCD_EP_Transmit>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f82b 	bl	800a704 <USBD_Get_USB_Status>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	72fb      	strb	r3, [r7, #11]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6de:	893b      	ldrh	r3, [r7, #8]
 800a6e0:	7af9      	ldrb	r1, [r7, #11]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	f7f9 ff34 	bl	8004550 <HAL_PCD_EP_Receive>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f808 	bl	800a704 <USBD_Get_USB_Status>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d817      	bhi.n	800a748 <USBD_Get_USB_Status+0x44>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <USBD_Get_USB_Status+0x1c>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a731 	.word	0x0800a731
 800a724:	0800a737 	.word	0x0800a737
 800a728:	0800a73d 	.word	0x0800a73d
 800a72c:	0800a743 	.word	0x0800a743
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
    break;
 800a734:	e00b      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a736:	2302      	movs	r3, #2
 800a738:	73fb      	strb	r3, [r7, #15]
    break;
 800a73a:	e008      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a73c:	2301      	movs	r3, #1
 800a73e:	73fb      	strb	r3, [r7, #15]
    break;
 800a740:	e005      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a742:	2302      	movs	r3, #2
 800a744:	73fb      	strb	r3, [r7, #15]
    break;
 800a746:	e002      	b.n	800a74e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a748:	2302      	movs	r3, #2
 800a74a:	73fb      	strb	r3, [r7, #15]
    break;
 800a74c:	bf00      	nop
  }
  return usb_status;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <__libc_init_array>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	4e0d      	ldr	r6, [pc, #52]	; (800a794 <__libc_init_array+0x38>)
 800a760:	4c0d      	ldr	r4, [pc, #52]	; (800a798 <__libc_init_array+0x3c>)
 800a762:	1ba4      	subs	r4, r4, r6
 800a764:	10a4      	asrs	r4, r4, #2
 800a766:	2500      	movs	r5, #0
 800a768:	42a5      	cmp	r5, r4
 800a76a:	d109      	bne.n	800a780 <__libc_init_array+0x24>
 800a76c:	4e0b      	ldr	r6, [pc, #44]	; (800a79c <__libc_init_array+0x40>)
 800a76e:	4c0c      	ldr	r4, [pc, #48]	; (800a7a0 <__libc_init_array+0x44>)
 800a770:	f000 f820 	bl	800a7b4 <_init>
 800a774:	1ba4      	subs	r4, r4, r6
 800a776:	10a4      	asrs	r4, r4, #2
 800a778:	2500      	movs	r5, #0
 800a77a:	42a5      	cmp	r5, r4
 800a77c:	d105      	bne.n	800a78a <__libc_init_array+0x2e>
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a784:	4798      	blx	r3
 800a786:	3501      	adds	r5, #1
 800a788:	e7ee      	b.n	800a768 <__libc_init_array+0xc>
 800a78a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a78e:	4798      	blx	r3
 800a790:	3501      	adds	r5, #1
 800a792:	e7f2      	b.n	800a77a <__libc_init_array+0x1e>
 800a794:	0800a804 	.word	0x0800a804
 800a798:	0800a804 	.word	0x0800a804
 800a79c:	0800a804 	.word	0x0800a804
 800a7a0:	0800a808 	.word	0x0800a808

0800a7a4 <memset>:
 800a7a4:	4402      	add	r2, r0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d100      	bne.n	800a7ae <memset+0xa>
 800a7ac:	4770      	bx	lr
 800a7ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b2:	e7f9      	b.n	800a7a8 <memset+0x4>

0800a7b4 <_init>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	bf00      	nop
 800a7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ba:	bc08      	pop	{r3}
 800a7bc:	469e      	mov	lr, r3
 800a7be:	4770      	bx	lr

0800a7c0 <_fini>:
 800a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c2:	bf00      	nop
 800a7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c6:	bc08      	pop	{r3}
 800a7c8:	469e      	mov	lr, r3
 800a7ca:	4770      	bx	lr
